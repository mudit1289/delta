{
  "benchmarkSpecs" : {
    "benchmarkId" : "20231130-153631-tpcds-1gb-iceberg",
    "benchmarkPath" : "gs://fksdp-mhora-zrwe-0f09-discoverycontentimpression/benchmarking/iceberg-benchmarking",
    "format" : "ICEBERG",
    "iterations" : "3",
    "scaleInGB" : "1"
  },
  "extraMetrics" : { },
  "queryResults" : [ {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 1,
    "name" : "q1"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(cd_gender#212, cd_marital_status#213, cd_education_status#214, cd_purchase_estimate#215, cd_credit_rating#216, cd_dep_count#217, cd_dep_employed_count#218, cd_dep_college_count#219, 200), ENSURE_REQUIREMENTS, [id=#592]\n+- *(14) HashAggregate(keys=[cd_gender#212, cd_marital_status#213, cd_education_status#214, cd_purchase_estimate#215, cd_credit_rating#216, cd_dep_count#217, cd_dep_employed_count#218, cd_dep_college_count#219], functions=[partial_count(1)], output=[cd_gender#212, cd_marital_status#213, cd_education_status#214, cd_purchase_estimate#215, cd_credit_rating#216, cd_dep_count#217, cd_dep_employed_count#218, cd_dep_college_count#219, count#412L])\n   +- *(14) Project [cd_gender#212, cd_marital_status#213, cd_education_status#214, cd_purchase_estimate#215, cd_credit_rating#216, cd_dep_count#217, cd_dep_employed_count#218, cd_dep_college_count#219]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#182], [cd_demo_sk#211], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#182]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#184], [ca_address_sk#198], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#182, c_current_addr_sk#184]\n         :     :  +- *(14) Filter (exists#409 OR exists#410)\n         :     :     +- SortMergeJoin [c_customer_sk#180], [cs_ship_customer_sk#340], ExistenceJoin(exists#410)\n         :     :        :- SortMergeJoin [c_customer_sk#180], [ws_bill_customer_sk#275], ExistenceJoin(exists#409)\n         :     :        :  :- SortMergeJoin [c_customer_sk#180], [ss_customer_sk#223], LeftSemi\n         :     :        :  :  :- *(2) Sort [c_customer_sk#180 ASC NULLS FIRST], false, 0\n         :     :        :  :  :  +- Exchange hashpartitioning(c_customer_sk#180, 200), ENSURE_REQUIREMENTS, [id=#462]\n         :     :        :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#184) AND isnotnull(c_current_cdemo_sk#182))\n         :     :        :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#180, c_current_cdemo_sk#182, c_current_addr_sk#184], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#180, c_customer_id#181, c_current_cdemo_sk#182, c_current_hdemo_sk#183, c_current_..., Partition Cols: []]\n         :     :        :  :  +- *(5) Sort [ss_customer_sk#223 ASC NULLS FIRST], false, 0\n         :     :        :  :     +- Exchange hashpartitioning(ss_customer_sk#223, 200), ENSURE_REQUIREMENTS, [id=#477]\n         :     :        :  :        +- *(4) Project [ss_customer_sk#223]\n         :     :        :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#220], [d_date_sk#243], Inner, BuildRight, false\n         :     :        :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#220)\n         :     :        :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#220, ss_customer_sk#223], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#220, ss_sold_time_sk#221, ss_item_sk#222, ss_customer_sk#223, ss_cdemo_sk#224, s..., Partition Cols: []]\n         :     :        :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#472]\n         :     :        :  :                 +- *(3) Project [d_date_sk#243]\n         :     :        :  :                    +- *(3) Filter (((((isnotnull(d_year#249) AND isnotnull(d_moy#251)) AND (d_year#249 = 1999)) AND (d_moy#251 >= 2)) AND (d_moy#251 <= 5)) AND isnotnull(d_date_sk#243))\n         :     :        :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#243, d_moy#251, d_year#249], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#243, d_date_id#244, d_date#245, d_month_seq#246, d_week_seq#247, d_quarter_seq#248, d_..., Partition Cols: []]\n         :     :        :  +- *(8) Sort [ws_bill_customer_sk#275 ASC NULLS FIRST], false, 0\n         :     :        :     +- Exchange hashpartitioning(ws_bill_customer_sk#275, 200), ENSURE_REQUIREMENTS, [id=#560]\n         :     :        :        +- *(7) Project [ws_bill_customer_sk#275]\n         :     :        :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#271], [d_date_sk#305], Inner, BuildRight, false\n         :     :        :              :- *(7) Filter isnotnull(ws_sold_date_sk#271)\n         :     :        :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#271, ws_bill_customer_sk#275], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#271, ws_sold_time_sk#272, ws_ship_date_sk#273, ws_item_sk#274, ws_bill_customer_..., Partition Cols: []]\n         :     :        :              +- ReusedExchange [d_date_sk#305], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#472]\n         :     :        +- *(11) Sort [cs_ship_customer_sk#340 ASC NULLS FIRST], false, 0\n         :     :           +- Exchange hashpartitioning(cs_ship_customer_sk#340, 200), ENSURE_REQUIREMENTS, [id=#578]\n         :     :              +- *(10) Project [cs_ship_customer_sk#340]\n         :     :                 +- *(10) BroadcastHashJoin [cs_sold_date_sk#333], [d_date_sk#367], Inner, BuildRight, false\n         :     :                    :- *(10) Filter isnotnull(cs_sold_date_sk#333)\n         :     :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#333, cs_ship_customer_sk#340], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#333, cs_sold_time_sk#334, cs_ship_date_sk#335, cs_bill_customer_sk#336, cs_bill_..., Partition Cols: []]\n         :     :                    +- ReusedExchange [d_date_sk#367], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#472]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#521]\n         :        +- *(12) Project [ca_address_sk#198]\n         :           +- *(12) Filter (ca_county#205 IN (Grady County,Marion County,Decatur County,Lyman County,Beaver County) AND isnotnull(ca_address_sk#198))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#198, ca_county#205], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#198, ca_address_id#199, ca_street_number#200, ca_street_name#201, ca_street_type#2..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#528]\n            +- *(13) Filter isnotnull(cd_demo_sk#211)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#211, cd_gender#212, cd_marital_status#213, cd_education_status#214, cd_purchase_estimate#215, cd_credit_rating#216, cd_dep_count#217, cd_dep_employed_count#218, cd_dep_college_count#219], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#211, cd_gender#212, cd_marital_status#213, cd_education_status#214, cd_purchase_estim..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q10"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#428, 200), ENSURE_REQUIREMENTS, [id=#885]\n+- *(4) Filter (isnotnull(year_total#436) AND (year_total#436 > 0.00))\n   +- *(4) HashAggregate(keys=[c_customer_id#449, c_first_name#456, c_last_name#457, c_preferred_cust_flag#458, c_birth_country#462, c_login#463, c_email_address#464, d_year#495], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#483 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#480 as decimal(8,2)))), DecimalType(8,2), true)))], output=[customer_id#428, year_total#436])\n      +- Exchange hashpartitioning(c_customer_id#449, c_first_name#456, c_last_name#457, c_preferred_cust_flag#458, c_birth_country#462, c_login#463, c_email_address#464, d_year#495, 200), ENSURE_REQUIREMENTS, [id=#880]\n         +- *(3) HashAggregate(keys=[c_customer_id#449, c_first_name#456, c_last_name#457, c_preferred_cust_flag#458, c_birth_country#462, c_login#463, c_email_address#464, d_year#495], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#483 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#480 as decimal(8,2)))), DecimalType(8,2), true)))], output=[c_customer_id#449, c_first_name#456, c_last_name#457, c_preferred_cust_flag#458, c_birth_country#462, c_login#463, c_email_address#464, d_year#495, sum#1087L])\n            +- *(3) Project [c_customer_id#449, c_first_name#456, c_last_name#457, c_preferred_cust_flag#458, c_birth_country#462, c_login#463, c_email_address#464, ss_ext_discount_amt#480, ss_ext_list_price#483, d_year#495]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#466], [d_date_sk#489], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#449, c_first_name#456, c_last_name#457, c_preferred_cust_flag#458, c_birth_country#462, c_login#463, c_email_address#464, ss_sold_date_sk#466, ss_ext_discount_amt#480, ss_ext_list_price#483]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#448], [ss_customer_sk#469], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#865]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#448) AND isnotnull(c_customer_id#449))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#448, c_customer_id#449, c_first_name#456, c_last_name#457, c_preferred_cust_flag#458, c_birth_country#462, c_login#463, c_email_address#464], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#448, c_customer_id#449, c_current_cdemo_sk#450, c_current_hdemo_sk#451, c_current_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#469) AND isnotnull(ss_sold_date_sk#466))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#466, ss_customer_sk#469, ss_ext_discount_amt#480, ss_ext_list_price#483], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#466, ss_sold_time_sk#467, ss_item_sk#468, ss_customer_sk#469, ss_cdemo_sk#470, s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#874]\n                     +- *(2) Filter ((isnotnull(d_year#495) AND (d_year#495 = 2001)) AND isnotnull(d_date_sk#489))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#489, d_year#495], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#489, d_date_id#490, d_date#491, d_month_seq#492, d_week_seq#493, d_quarter_seq#494, d_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q11"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_class#1153, 200), ENSURE_REQUIREMENTS, [id=#1285]\n+- *(4) HashAggregate(keys=[i_item_id#1144, i_item_desc#1147, i_category#1155, i_class#1153, i_current_price#1148], functions=[sum(UnscaledValue(ws_ext_sales_price#1132))], output=[i_item_id#1144, i_item_desc#1147, i_category#1155, i_class#1153, i_current_price#1148, itemrevenue#1107, _w0#1197, _w1#1198])\n   +- Exchange hashpartitioning(i_item_id#1144, i_item_desc#1147, i_category#1155, i_class#1153, i_current_price#1148, 200), ENSURE_REQUIREMENTS, [id=#1281]\n      +- *(3) HashAggregate(keys=[i_item_id#1144, i_item_desc#1147, i_category#1155, i_class#1153, i_current_price#1148], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#1132))], output=[i_item_id#1144, i_item_desc#1147, i_category#1155, i_class#1153, i_current_price#1148, sum#1208L])\n         +- *(3) Project [ws_ext_sales_price#1132, i_item_id#1144, i_item_desc#1147, i_current_price#1148, i_class#1153, i_category#1155]\n            +- *(3) BroadcastHashJoin [ws_sold_date_sk#1109], [d_date_sk#1165], Inner, BuildRight, false\n               :- *(3) Project [ws_sold_date_sk#1109, ws_ext_sales_price#1132, i_item_id#1144, i_item_desc#1147, i_current_price#1148, i_class#1153, i_category#1155]\n               :  +- *(3) BroadcastHashJoin [ws_item_sk#1112], [i_item_sk#1143], Inner, BuildRight, false\n               :     :- *(3) Filter (isnotnull(ws_item_sk#1112) AND isnotnull(ws_sold_date_sk#1109))\n               :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#1109, ws_item_sk#1112, ws_ext_sales_price#1132], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#1109, ws_sold_time_sk#1110, ws_ship_date_sk#1111, ws_item_sk#1112, ws_bill_custo..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#1267]\n               :        +- *(1) Filter (i_category#1155 IN (Children,Jewelry,Music) AND isnotnull(i_item_sk#1143))\n               :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#1143, i_item_id#1144, i_item_desc#1147, i_current_price#1148, i_class#1153, i_category#1155], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#1143, i_item_id#1144, i_rec_start_date#1145, i_rec_end_date#1146, i_item_desc#1147, i_..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#1275]\n                  +- *(2) Project [d_date_sk#1165]\n                     +- *(2) Filter (((isnotnull(d_date#1167) AND (d_date#1167 >= 11453)) AND (d_date#1167 <= 11483)) AND isnotnull(d_date_sk#1165))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#1167, d_date_sk#1165], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#1165, d_date_id#1166, d_date#1167, d_month_seq#1168, d_week_seq#1169, d_quarter_seq#11..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q12"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#1444]\n+- *(6) HashAggregate(keys=[], functions=[partial_avg(cast(ss_quantity#1227 as bigint)), partial_avg(UnscaledValue(ss_ext_sales_price#1232)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#1233)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#1233))], output=[sum#1343, count#1344L, sum#1345, count#1346L, sum#1347, count#1348L, sum#1349L])\n   +- *(6) Project [ss_quantity#1227, ss_ext_sales_price#1232, ss_ext_wholesale_cost#1233]\n      +- *(6) BroadcastHashJoin [ss_hdemo_sk#1222], [hd_demo_sk#1278], Inner, BuildRight, (((((((cd_marital_status#1271 = M) AND (cd_education_status#1272 = Primary)) AND (ss_sales_price#1230 >= 100.00)) AND (ss_sales_price#1230 <= 150.00)) AND (hd_dep_count#1281 = 3)) OR (((((cd_marital_status#1271 = S) AND (cd_education_status#1272 = 4 yr Degree)) AND (ss_sales_price#1230 >= 50.00)) AND (ss_sales_price#1230 <= 100.00)) AND (hd_dep_count#1281 = 1))) OR (((((cd_marital_status#1271 = W) AND (cd_education_status#1272 = 2 yr Degree)) AND (ss_sales_price#1230 >= 150.00)) AND (ss_sales_price#1230 <= 200.00)) AND (hd_dep_count#1281 = 1))), false\n         :- *(6) Project [ss_hdemo_sk#1222, ss_quantity#1227, ss_sales_price#1230, ss_ext_sales_price#1232, ss_ext_wholesale_cost#1233, cd_marital_status#1271, cd_education_status#1272]\n         :  +- *(6) BroadcastHashJoin [ss_cdemo_sk#1221], [cd_demo_sk#1269], Inner, BuildRight, ((((((cd_marital_status#1271 = M) AND (cd_education_status#1272 = Primary)) AND (ss_sales_price#1230 >= 100.00)) AND (ss_sales_price#1230 <= 150.00)) OR ((((cd_marital_status#1271 = S) AND (cd_education_status#1272 = 4 yr Degree)) AND (ss_sales_price#1230 >= 50.00)) AND (ss_sales_price#1230 <= 100.00))) OR ((((cd_marital_status#1271 = W) AND (cd_education_status#1272 = 2 yr Degree)) AND (ss_sales_price#1230 >= 150.00)) AND (ss_sales_price#1230 <= 200.00))), false\n         :     :- *(6) Project [ss_cdemo_sk#1221, ss_hdemo_sk#1222, ss_quantity#1227, ss_sales_price#1230, ss_ext_sales_price#1232, ss_ext_wholesale_cost#1233]\n         :     :  +- *(6) BroadcastHashJoin [ss_sold_date_sk#1217], [d_date_sk#1296], Inner, BuildRight, false\n         :     :     :- *(6) Project [ss_sold_date_sk#1217, ss_cdemo_sk#1221, ss_hdemo_sk#1222, ss_quantity#1227, ss_sales_price#1230, ss_ext_sales_price#1232, ss_ext_wholesale_cost#1233]\n         :     :     :  +- *(6) BroadcastHashJoin [ss_addr_sk#1223], [ca_address_sk#1283], Inner, BuildRight, ((((ca_state#1291 IN (SC,WY,TX) AND (ss_net_profit#1239 >= 100.00)) AND (ss_net_profit#1239 <= 200.00)) OR ((ca_state#1291 IN (NY,NE,GA) AND (ss_net_profit#1239 >= 150.00)) AND (ss_net_profit#1239 <= 300.00))) OR ((ca_state#1291 IN (AL,AR,MI) AND (ss_net_profit#1239 >= 50.00)) AND (ss_net_profit#1239 <= 250.00))), false\n         :     :     :     :- *(6) Project [ss_sold_date_sk#1217, ss_cdemo_sk#1221, ss_hdemo_sk#1222, ss_addr_sk#1223, ss_quantity#1227, ss_sales_price#1230, ss_ext_sales_price#1232, ss_ext_wholesale_cost#1233, ss_net_profit#1239]\n         :     :     :     :  +- *(6) BroadcastHashJoin [ss_store_sk#1224], [s_store_sk#1240], Inner, BuildRight, false\n         :     :     :     :     :- *(6) Filter ((((((isnotnull(ss_store_sk#1224) AND isnotnull(ss_addr_sk#1223)) AND isnotnull(ss_sold_date_sk#1217)) AND isnotnull(ss_cdemo_sk#1221)) AND isnotnull(ss_hdemo_sk#1222)) AND ((((ss_net_profit#1239 >= 100.00) AND (ss_net_profit#1239 <= 200.00)) OR ((ss_net_profit#1239 >= 150.00) AND (ss_net_profit#1239 <= 300.00))) OR ((ss_net_profit#1239 >= 50.00) AND (ss_net_profit#1239 <= 250.00)))) AND ((((ss_sales_price#1230 >= 100.00) AND (ss_sales_price#1230 <= 150.00)) OR ((ss_sales_price#1230 >= 50.00) AND (ss_sales_price#1230 <= 100.00))) OR ((ss_sales_price#1230 >= 150.00) AND (ss_sales_price#1230 <= 200.00))))\n         :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#1217, ss_cdemo_sk#1221, ss_hdemo_sk#1222, ss_addr_sk#1223, ss_store_sk#1224, ss_quantity#1227, ss_sales_price#1230, ss_ext_sales_price#1232, ss_ext_wholesale_cost#1233, ss_net_profit#1239], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#1217, ss_sold_time_sk#1218, ss_item_sk#1219, ss_customer_sk#1220, ss_cdemo_sk#12..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#1408]\n         :     :     :     :        +- *(1) Filter isnotnull(s_store_sk#1240)\n         :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#1240], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#1240, s_store_id#1241, s_rec_start_date#1242, s_rec_end_date#1243, s_closed_date_sk#1..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#1416]\n         :     :     :        +- *(2) Project [ca_address_sk#1283, ca_state#1291]\n         :     :     :           +- *(2) Filter (((isnotnull(ca_country#1293) AND (ca_country#1293 = United States)) AND isnotnull(ca_address_sk#1283)) AND ((ca_state#1291 IN (SC,WY,TX) OR ca_state#1291 IN (NY,NE,GA)) OR ca_state#1291 IN (AL,AR,MI)))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#1283, ca_country#1293, ca_state#1291], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#1283, ca_address_id#1284, ca_street_number#1285, ca_street_name#1286, ca_street_ty..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#1424]\n         :     :        +- *(3) Project [d_date_sk#1296]\n         :     :           +- *(3) Filter ((isnotnull(d_year#1302) AND (d_year#1302 = 2001)) AND isnotnull(d_date_sk#1296))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#1296, d_year#1302], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#1296, d_date_id#1297, d_date#1298, d_month_seq#1299, d_week_seq#1300, d_quarter_seq#13..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#1431]\n         :        +- *(4) Filter (isnotnull(cd_demo_sk#1269) AND ((((cd_marital_status#1271 = M) AND (cd_education_status#1272 = Primary)) OR ((cd_marital_status#1271 = S) AND (cd_education_status#1272 = 4 yr Degree))) OR ((cd_marital_status#1271 = W) AND (cd_education_status#1272 = 2 yr Degree))))\n         :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#1269, cd_marital_status#1271, cd_education_status#1272], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#1269, cd_gender#1270, cd_marital_status#1271, cd_education_status#1272, cd_purchase_e..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#1438]\n            +- *(5) Filter (isnotnull(hd_demo_sk#1278) AND (((hd_dep_count#1281 = 3) OR (hd_dep_count#1281 = 1)) OR (hd_dep_count#1281 = 1)))\n               +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#1278, hd_dep_count#1281], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#1278, hd_income_band_sk#1279, hd_buy_potential#1280, hd_dep_count#1281, hd_vehicle_co..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q13"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 1,
    "name" : "q14a"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 1,
    "name" : "q14b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_zip#4321, 200), ENSURE_REQUIREMENTS, [id=#8338]\n+- *(4) HashAggregate(keys=[ca_zip#4321], functions=[partial_sum(UnscaledValue(cs_sales_price#4281))], output=[ca_zip#4321, sum#4359L])\n   +- *(4) Project [cs_sales_price#4281, ca_zip#4321]\n      +- *(4) BroadcastHashJoin [cs_sold_date_sk#4260], [d_date_sk#4325], Inner, BuildRight, false\n         :- *(4) Project [cs_sold_date_sk#4260, cs_sales_price#4281, ca_zip#4321]\n         :  +- *(4) BroadcastHashJoin [c_current_addr_sk#4298], [ca_address_sk#4312], Inner, BuildRight, ((substr(ca_zip#4321, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#4320 IN (CA,WA,GA)) OR (cs_sales_price#4281 > 500.00)), false\n         :     :- *(4) Project [cs_sold_date_sk#4260, cs_sales_price#4281, c_current_addr_sk#4298]\n         :     :  +- *(4) BroadcastHashJoin [cs_bill_customer_sk#4263], [c_customer_sk#4294], Inner, BuildRight, false\n         :     :     :- *(4) Filter (isnotnull(cs_bill_customer_sk#4263) AND isnotnull(cs_sold_date_sk#4260))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#4260, cs_bill_customer_sk#4263, cs_sales_price#4281], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#4260, cs_sold_time_sk#4261, cs_ship_date_sk#4262, cs_bill_customer_sk#4263, cs_b..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8317]\n         :     :        +- *(1) Filter (isnotnull(c_customer_sk#4294) AND isnotnull(c_current_addr_sk#4298))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#4294, c_current_addr_sk#4298], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#4294, c_customer_id#4295, c_current_cdemo_sk#4296, c_current_hdemo_sk#4297, c_curr..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8324]\n         :        +- *(2) Filter isnotnull(ca_address_sk#4312)\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#4312, ca_state#4320, ca_zip#4321], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#4312, ca_address_id#4313, ca_street_number#4314, ca_street_name#4315, ca_street_ty..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8332]\n            +- *(3) Project [d_date_sk#4325]\n               +- *(3) Filter ((((isnotnull(d_qoy#4335) AND isnotnull(d_year#4331)) AND (d_qoy#4335 = 1)) AND (d_year#4331 = 1998)) AND isnotnull(d_date_sk#4325))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#4325, d_qoy#4335, d_year#4331], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#4325, d_date_id#4326, d_date#4327, d_month_seq#4328, d_week_seq#4329, d_quarter_seq#43..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q15"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#8498]\n+- *(5) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#4396)), merge_sum(UnscaledValue(cs_net_profit#4401)), partial_count(distinct cs_order_number#4385L)], output=[sum#4544L, sum#4546L, count#4549L])\n   +- *(5) HashAggregate(keys=[cs_order_number#4385L], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#4396)), merge_sum(UnscaledValue(cs_net_profit#4401))], output=[cs_order_number#4385L, sum#4544L, sum#4546L])\n      +- Exchange hashpartitioning(cs_order_number#4385L, 200), ENSURE_REQUIREMENTS, [id=#8493]\n         +- *(4) HashAggregate(keys=[cs_order_number#4385L], functions=[partial_sum(UnscaledValue(cs_ext_ship_cost#4396)), partial_sum(UnscaledValue(cs_net_profit#4401))], output=[cs_order_number#4385L, sum#4544L, sum#4546L])\n            +- *(4) Project [cs_order_number#4385L, cs_ext_ship_cost#4396, cs_net_profit#4401]\n               +- *(4) BroadcastHashJoin [cs_call_center_sk#4379], [cc_call_center_sk#4443], Inner, BuildRight, false\n                  :- *(4) Project [cs_call_center_sk#4379, cs_order_number#4385L, cs_ext_ship_cost#4396, cs_net_profit#4401]\n                  :  +- *(4) BroadcastHashJoin [cs_ship_addr_sk#4378], [ca_address_sk#4430], Inner, BuildRight, false\n                  :     :- *(4) Project [cs_ship_addr_sk#4378, cs_call_center_sk#4379, cs_order_number#4385L, cs_ext_ship_cost#4396, cs_net_profit#4401]\n                  :     :  +- *(4) BroadcastHashJoin [cs_ship_date_sk#4370], [d_date_sk#4402], Inner, BuildRight, false\n                  :     :     :- *(4) BroadcastHashJoin [cs_order_number#4385L], [cr_order_number#4524L], LeftAnti, BuildRight, false\n                  :     :     :  :- *(4) Project [cs_ship_date_sk#4370, cs_ship_addr_sk#4378, cs_call_center_sk#4379, cs_order_number#4385L, cs_ext_ship_cost#4396, cs_net_profit#4401]\n                  :     :     :  :  +- *(4) BroadcastHashJoin [cs_order_number#4385L], [cs_order_number#4491L], LeftSemi, BuildRight, NOT (cs_warehouse_sk#4382 = cs_warehouse_sk#4488), false\n                  :     :     :  :     :- *(4) Filter ((isnotnull(cs_ship_date_sk#4370) AND isnotnull(cs_ship_addr_sk#4378)) AND isnotnull(cs_call_center_sk#4379))\n                  :     :     :  :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ship_date_sk#4370, cs_ship_addr_sk#4378, cs_call_center_sk#4379, cs_warehouse_sk#4382, cs_order_number#4385L, cs_ext_ship_cost#4396, cs_net_profit#4401], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#4368, cs_sold_time_sk#4369, cs_ship_date_sk#4370, cs_bill_customer_sk#4371, cs_b..., Partition Cols: []]\n                  :     :     :  :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#8433]\n                  :     :     :  :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_warehouse_sk#4488, cs_order_number#4491L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#4474, cs_sold_time_sk#4475, cs_ship_date_sk#4476, cs_bill_customer_sk#4477, cs_b..., Partition Cols: []]\n                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#8437]\n                  :     :     :     +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_order_number#4524L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#4508, cr_returned_time_sk#4509, cr_item_sk#4510, cr_refunded_customer_sk#451..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8471]\n                  :     :        +- *(1) Project [d_date_sk#4402]\n                  :     :           +- *(1) Filter (((isnotnull(d_date#4404) AND (d_date#4404 >= 11017)) AND (d_date#4404 <= 11077)) AND isnotnull(d_date_sk#4402))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#4404, d_date_sk#4402], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#4402, d_date_id#4403, d_date#4404, d_month_seq#4405, d_week_seq#4406, d_quarter_seq#44..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8479]\n                  :        +- *(2) Project [ca_address_sk#4430]\n                  :           +- *(2) Filter ((isnotnull(ca_state#4438) AND (ca_state#4438 = IA)) AND isnotnull(ca_address_sk#4430))\n                  :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#4430, ca_state#4438], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#4430, ca_address_id#4431, ca_street_number#4432, ca_street_name#4433, ca_street_ty..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8487]\n                     +- *(3) Project [cc_call_center_sk#4443]\n                        +- *(3) Filter (cc_county#4468 IN (Luce County,Wadena County,Jefferson Davis Parish,Daviess County,Williamson County) AND isnotnull(cc_call_center_sk#4443))\n                           +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#4443, cc_county#4468], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#4443, cc_call_center_id#4444, cc_rec_start_date#4445, cc_rec_end_date#4446, cc..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q16"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#4758, i_item_desc#4761, s_state#4752, 200), ENSURE_REQUIREMENTS, [id=#8762]\n+- *(11) HashAggregate(keys=[i_item_id#4758, i_item_desc#4761, s_state#4752], functions=[partial_count(ss_quantity#4577), partial_avg(cast(ss_quantity#4577 as bigint)), partial_stddev_samp(cast(ss_quantity#4577 as double)), partial_count(sr_return_quantity#4600), partial_avg(cast(sr_return_quantity#4600 as bigint)), partial_stddev_samp(cast(sr_return_quantity#4600 as double)), partial_count(cs_quantity#4628), partial_avg(cast(cs_quantity#4628 as bigint)), partial_stddev_samp(cast(cs_quantity#4628 as double))], output=[i_item_id#4758, i_item_desc#4761, s_state#4752, count#5058L, sum#5059, count#5060L, n#4943, avg#4944, m2#4945, count#5061L, sum#5062, count#5063L, n#4959, avg#4960, m2#4961, count#5064L, sum#5065, count#5066L, n#4975, avg#4976, m2#4977])\n   +- *(11) Project [ss_quantity#4577, sr_return_quantity#4600, cs_quantity#4628, s_state#4752, i_item_id#4758, i_item_desc#4761]\n      +- *(11) BroadcastHashJoin [ss_item_sk#4569], [i_item_sk#4757], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#4569, ss_quantity#4577, sr_return_quantity#4600, cs_quantity#4628, s_state#4752]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#4574], [s_store_sk#4728], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#4569, ss_store_sk#4574, ss_quantity#4577, sr_return_quantity#4600, cs_quantity#4628]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#4610], [d_date_sk#4700], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#4569, ss_store_sk#4574, ss_quantity#4577, sr_return_quantity#4600, cs_sold_date_sk#4610, cs_quantity#4628]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#4590], [d_date_sk#4672], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#4569, ss_store_sk#4574, ss_quantity#4577, sr_returned_date_sk#4590, sr_return_quantity#4600, cs_sold_date_sk#4610, cs_quantity#4628]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#4567], [d_date_sk#4644], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#4567, ss_item_sk#4569, ss_store_sk#4574, ss_quantity#4577, sr_returned_date_sk#4590, sr_return_quantity#4600, cs_sold_date_sk#4610, cs_quantity#4628]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#4593, sr_item_sk#4592], [cs_bill_customer_sk#4613, cs_item_sk#4625], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#4593 ASC NULLS FIRST, sr_item_sk#4592 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#4593, sr_item_sk#4592, 200), ENSURE_REQUIREMENTS, [id=#8668]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#4567, ss_item_sk#4569, ss_store_sk#4574, ss_quantity#4577, sr_returned_date_sk#4590, sr_item_sk#4592, sr_customer_sk#4593, sr_return_quantity#4600]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#4570, ss_item_sk#4569, ss_ticket_number#4576L], [sr_customer_sk#4593, sr_item_sk#4592, sr_ticket_number#4599L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#4570) AND isnotnull(ss_item_sk#4569)) AND isnotnull(ss_ticket_number#4576L)) AND isnotnull(ss_sold_date_sk#4567)) AND isnotnull(ss_store_sk#4574))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#4567, ss_item_sk#4569, ss_customer_sk#4570, ss_store_sk#4574, ss_ticket_number#4576L, ss_quantity#4577], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#4567, ss_sold_time_sk#4568, ss_item_sk#4569, ss_customer_sk#4570, ss_cdemo_sk#45..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#8663]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#4593) AND isnotnull(sr_item_sk#4592)) AND isnotnull(sr_ticket_number#4599L)) AND isnotnull(sr_returned_date_sk#4590))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#4590, sr_item_sk#4592, sr_customer_sk#4593, sr_ticket_number#4599L, sr_return_quantity#4600], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#4590, sr_return_time_sk#4591, sr_item_sk#4592, sr_customer_sk#4593, sr_cdemo..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#4613 ASC NULLS FIRST, cs_item_sk#4625 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#4613, cs_item_sk#4625, 200), ENSURE_REQUIREMENTS, [id=#8676]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#4613) AND isnotnull(cs_item_sk#4625)) AND isnotnull(cs_sold_date_sk#4610))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#4610, cs_bill_customer_sk#4613, cs_item_sk#4625, cs_quantity#4628], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#4610, cs_sold_time_sk#4611, cs_ship_date_sk#4612, cs_bill_customer_sk#4613, cs_b..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8687]\n         :     :     :     :        +- *(6) Project [d_date_sk#4644]\n         :     :     :     :           +- *(6) Filter ((isnotnull(d_quarter_name#4659) AND (d_quarter_name#4659 = 1999Q1)) AND isnotnull(d_date_sk#4644))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#4644, d_quarter_name#4659], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#4644, d_date_id#4645, d_date#4646, d_month_seq#4647, d_week_seq#4648, d_quarter_seq#46..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8695]\n         :     :     :        +- *(7) Project [d_date_sk#4672]\n         :     :     :           +- *(7) Filter (d_quarter_name#4687 IN (1999Q1,1999Q2,1999Q3) AND isnotnull(d_date_sk#4672))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#4672, d_quarter_name#4687], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#4672, d_date_id#4673, d_date#4674, d_month_seq#4675, d_week_seq#4676, d_quarter_seq#46..., Partition Cols: []]\n         :     :     +- ReusedExchange [d_date_sk#4700], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8695]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8710]\n         :        +- *(9) Filter isnotnull(s_store_sk#4728)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#4728, s_state#4752], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#4728, s_store_id#4729, s_rec_start_date#4730, s_rec_end_date#4731, s_closed_date_sk#4..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8717]\n            +- *(10) Filter isnotnull(i_item_sk#4757)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#4757, i_item_id#4758, i_item_desc#4761], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#4757, i_item_id#4758, i_rec_start_date#4759, i_rec_end_date#4760, i_item_desc#4761, i_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q17"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#5235, ca_country#5236, ca_state#5237, ca_county#5238, spark_grouping_id#5234L, 200), ENSURE_REQUIREMENTS, [id=#8955]\n+- *(7) HashAggregate(keys=[i_item_id#5235, ca_country#5236, ca_state#5237, ca_county#5238, spark_grouping_id#5234L], functions=[partial_avg(cast(cs_quantity#5108 as decimal(12,2))), partial_avg(cast(cs_list_price#5110 as decimal(12,2))), partial_avg(cast(cs_coupon_amt#5117 as decimal(12,2))), partial_avg(cast(cs_sales_price#5111 as decimal(12,2))), partial_avg(cast(cs_net_profit#5123 as decimal(12,2))), partial_avg(cast(c_birth_year#5155 as decimal(12,2))), partial_avg(cast(cd_dep_count#5130 as decimal(12,2)))], output=[i_item_id#5235, ca_country#5236, ca_state#5237, ca_county#5238, spark_grouping_id#5234L, sum#5268, count#5269L, sum#5270, count#5271L, sum#5272, count#5273L, sum#5274, count#5275L, sum#5276, count#5277L, sum#5278, count#5279L, sum#5280, count#5281L])\n   +- *(7) Expand [List(cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, i_item_id#5202, ca_country#5170, ca_state#5168, ca_county#5167, 0), List(cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, i_item_id#5202, ca_country#5170, ca_state#5168, null, 1), List(cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, i_item_id#5202, ca_country#5170, null, null, 3), List(cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, i_item_id#5202, null, null, null, 7), List(cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, null, null, null, null, 15)], [cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, i_item_id#5235, ca_country#5236, ca_state#5237, ca_county#5238, spark_grouping_id#5234L]\n      +- *(7) Project [cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, i_item_id#5202, ca_country#5170, ca_state#5168, ca_county#5167]\n         +- *(7) BroadcastHashJoin [cs_item_sk#5105], [i_item_sk#5201], Inner, BuildRight, false\n            :- *(7) Project [cs_item_sk#5105, cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, ca_county#5167, ca_state#5168, ca_country#5170]\n            :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#5090], [d_date_sk#5173], Inner, BuildRight, false\n            :     :- *(7) Project [cs_sold_date_sk#5090, cs_item_sk#5105, cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_birth_year#5155, ca_county#5167, ca_state#5168, ca_country#5170]\n            :     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#5146], [ca_address_sk#5160], Inner, BuildRight, false\n            :     :     :- *(7) Project [cs_sold_date_sk#5090, cs_item_sk#5105, cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_current_addr_sk#5146, c_birth_year#5155]\n            :     :     :  +- *(7) BroadcastHashJoin [c_current_cdemo_sk#5144], [cd_demo_sk#5133], Inner, BuildRight, false\n            :     :     :     :- *(7) Project [cs_sold_date_sk#5090, cs_item_sk#5105, cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130, c_current_cdemo_sk#5144, c_current_addr_sk#5146, c_birth_year#5155]\n            :     :     :     :  +- *(7) BroadcastHashJoin [cs_bill_customer_sk#5093], [c_customer_sk#5142], Inner, BuildRight, false\n            :     :     :     :     :- *(7) Project [cs_sold_date_sk#5090, cs_bill_customer_sk#5093, cs_item_sk#5105, cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123, cd_dep_count#5130]\n            :     :     :     :     :  +- *(7) BroadcastHashJoin [cs_bill_cdemo_sk#5094], [cd_demo_sk#5124], Inner, BuildRight, false\n            :     :     :     :     :     :- *(7) Filter (((isnotnull(cs_bill_cdemo_sk#5094) AND isnotnull(cs_bill_customer_sk#5093)) AND isnotnull(cs_sold_date_sk#5090)) AND isnotnull(cs_item_sk#5105))\n            :     :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#5090, cs_bill_customer_sk#5093, cs_bill_cdemo_sk#5094, cs_item_sk#5105, cs_quantity#5108, cs_list_price#5110, cs_sales_price#5111, cs_coupon_amt#5117, cs_net_profit#5123], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#5090, cs_sold_time_sk#5091, cs_ship_date_sk#5092, cs_bill_customer_sk#5093, cs_b..., Partition Cols: []]\n            :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8911]\n            :     :     :     :     :        +- *(1) Project [cd_demo_sk#5124, cd_dep_count#5130]\n            :     :     :     :     :           +- *(1) Filter ((((isnotnull(cd_gender#5125) AND isnotnull(cd_education_status#5127)) AND (cd_gender#5125 = F)) AND (cd_education_status#5127 = Unknown)) AND isnotnull(cd_demo_sk#5124))\n            :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#5124, cd_dep_count#5130, cd_education_status#5127, cd_gender#5125], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#5124, cd_gender#5125, cd_marital_status#5126, cd_education_status#5127, cd_purchase_e..., Partition Cols: []]\n            :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8919]\n            :     :     :     :        +- *(2) Project [c_customer_sk#5142, c_current_cdemo_sk#5144, c_current_addr_sk#5146, c_birth_year#5155]\n            :     :     :     :           +- *(2) Filter (((c_birth_month#5154 IN (4,8,12,10,11,9) AND isnotnull(c_customer_sk#5142)) AND isnotnull(c_current_cdemo_sk#5144)) AND isnotnull(c_current_addr_sk#5146))\n            :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer [c_birth_month#5154, c_birth_year#5155, c_current_addr_sk#5146, c_current_cdemo_sk#5144, c_customer_sk#5142], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#5142, c_customer_id#5143, c_current_cdemo_sk#5144, c_current_hdemo_sk#5145, c_curr..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8926]\n            :     :     :        +- *(3) Filter isnotnull(cd_demo_sk#5133)\n            :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#5133], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#5133, cd_gender#5134, cd_marital_status#5135, cd_education_status#5136, cd_purchase_e..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8933]\n            :     :        +- *(4) Filter (ca_state#5168 IN (AR,IA,TX,KS,LA,NC,SD) AND isnotnull(ca_address_sk#5160))\n            :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#5160, ca_county#5167, ca_state#5168, ca_country#5170], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#5160, ca_address_id#5161, ca_street_number#5162, ca_street_name#5163, ca_street_ty..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#8941]\n            :        +- *(5) Project [d_date_sk#5173]\n            :           +- *(5) Filter ((isnotnull(d_year#5179) AND (d_year#5179 = 2001)) AND isnotnull(d_date_sk#5173))\n            :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#5173, d_year#5179], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#5173, d_date_id#5174, d_date#5175, d_month_seq#5176, d_week_seq#5177, d_quarter_seq#51..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#8948]\n               +- *(6) Filter isnotnull(i_item_sk#5201)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#5201, i_item_id#5202], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#5201, i_item_id#5202, i_rec_start_date#5203, i_rec_end_date#5204, i_item_desc#5205, i_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q18"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand#5356, i_brand_id#5355, i_manufact_id#5361, i_manufact#5362, 200), ENSURE_REQUIREMENTS, [id=#9114]\n+- *(6) HashAggregate(keys=[i_brand#5356, i_brand_id#5355, i_manufact_id#5361, i_manufact#5362], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#5340))], output=[i_brand#5356, i_brand_id#5355, i_manufact_id#5361, i_manufact#5362, sum#5444L])\n   +- *(6) Project [ss_ext_sales_price#5340, i_brand_id#5355, i_brand#5356, i_manufact_id#5361, i_manufact#5362]\n      +- *(6) BroadcastHashJoin [ss_store_sk#5332], [s_store_sk#5401], Inner, BuildRight, NOT (substr(ca_zip#5397, 1, 5) = substr(s_zip#5426, 1, 5)), false\n         :- *(6) Project [ss_store_sk#5332, ss_ext_sales_price#5340, i_brand_id#5355, i_brand#5356, i_manufact_id#5361, i_manufact#5362, ca_zip#5397]\n         :  +- *(6) BroadcastHashJoin [c_current_addr_sk#5374], [ca_address_sk#5388], Inner, BuildRight, false\n         :     :- *(6) Project [ss_store_sk#5332, ss_ext_sales_price#5340, i_brand_id#5355, i_brand#5356, i_manufact_id#5361, i_manufact#5362, c_current_addr_sk#5374]\n         :     :  +- *(6) BroadcastHashJoin [ss_customer_sk#5328], [c_customer_sk#5370], Inner, BuildRight, false\n         :     :     :- *(6) Project [ss_customer_sk#5328, ss_store_sk#5332, ss_ext_sales_price#5340, i_brand_id#5355, i_brand#5356, i_manufact_id#5361, i_manufact#5362]\n         :     :     :  +- *(6) BroadcastHashJoin [ss_item_sk#5327], [i_item_sk#5348], Inner, BuildRight, false\n         :     :     :     :- *(6) Project [ss_item_sk#5327, ss_customer_sk#5328, ss_store_sk#5332, ss_ext_sales_price#5340]\n         :     :     :     :  +- *(6) BroadcastHashJoin [d_date_sk#5297], [ss_sold_date_sk#5325], Inner, BuildLeft, false\n         :     :     :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9077]\n         :     :     :     :     :  +- *(1) Project [d_date_sk#5297]\n         :     :     :     :     :     +- *(1) Filter ((((isnotnull(d_moy#5305) AND isnotnull(d_year#5303)) AND (d_moy#5305 = 11)) AND (d_year#5303 = 2002)) AND isnotnull(d_date_sk#5297))\n         :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#5297, d_moy#5305, d_year#5303], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#5297, d_date_id#5298, d_date#5299, d_month_seq#5300, d_week_seq#5301, d_quarter_seq#53..., Partition Cols: []]\n         :     :     :     :     +- *(6) Filter (((isnotnull(ss_sold_date_sk#5325) AND isnotnull(ss_item_sk#5327)) AND isnotnull(ss_customer_sk#5328)) AND isnotnull(ss_store_sk#5332))\n         :     :     :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#5325, ss_item_sk#5327, ss_customer_sk#5328, ss_store_sk#5332, ss_ext_sales_price#5340], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#5325, ss_sold_time_sk#5326, ss_item_sk#5327, ss_customer_sk#5328, ss_cdemo_sk#53..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9087]\n         :     :     :        +- *(2) Project [i_item_sk#5348, i_brand_id#5355, i_brand#5356, i_manufact_id#5361, i_manufact#5362]\n         :     :     :           +- *(2) Filter ((isnotnull(i_manager_id#5368) AND (i_manager_id#5368 = 63)) AND isnotnull(i_item_sk#5348))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.item [i_brand#5356, i_brand_id#5355, i_item_sk#5348, i_manager_id#5368, i_manufact#5362, i_manufact_id#5361], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#5348, i_item_id#5349, i_rec_start_date#5350, i_rec_end_date#5351, i_item_desc#5352, i_..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9094]\n         :     :        +- *(3) Filter (isnotnull(c_customer_sk#5370) AND isnotnull(c_current_addr_sk#5374))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#5370, c_current_addr_sk#5374], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#5370, c_customer_id#5371, c_current_cdemo_sk#5372, c_current_hdemo_sk#5373, c_curr..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9101]\n         :        +- *(4) Filter (isnotnull(ca_address_sk#5388) AND isnotnull(ca_zip#5397))\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#5388, ca_zip#5397], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#5388, ca_address_id#5389, ca_street_number#5390, ca_street_name#5391, ca_street_ty..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9108]\n            +- *(5) Filter (isnotnull(s_zip#5426) AND isnotnull(s_store_sk#5401))\n               +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#5401, s_zip#5426], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#5401, s_store_id#5402, s_rec_start_date#5403, s_rec_end_date#5404, s_closed_date_sk#5..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q19"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(d_week_seq1#5451 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#9453]\n+- *(14) Project [d_week_seq1#5451, round(CheckOverflow((promote_precision(sun_sales1#5452) / promote_precision(sun_sales2#5460)), DecimalType(37,20), true), 2) AS round((sun_sales1 / sun_sales2), 2)#5740, round(CheckOverflow((promote_precision(mon_sales1#5453) / promote_precision(mon_sales2#5461)), DecimalType(37,20), true), 2) AS round((mon_sales1 / mon_sales2), 2)#5741, round(CheckOverflow((promote_precision(tue_sales1#5454) / promote_precision(tue_sales2#5462)), DecimalType(37,20), true), 2) AS round((tue_sales1 / tue_sales2), 2)#5742, round(CheckOverflow((promote_precision(wed_sales1#5455) / promote_precision(wed_sales2#5463)), DecimalType(37,20), true), 2) AS round((wed_sales1 / wed_sales2), 2)#5743, round(CheckOverflow((promote_precision(thu_sales1#5456) / promote_precision(thu_sales2#5464)), DecimalType(37,20), true), 2) AS round((thu_sales1 / thu_sales2), 2)#5744, round(CheckOverflow((promote_precision(fri_sales1#5457) / promote_precision(fri_sales2#5465)), DecimalType(37,20), true), 2) AS round((fri_sales1 / fri_sales2), 2)#5745, round(CheckOverflow((promote_precision(sat_sales1#5458) / promote_precision(sat_sales2#5466)), DecimalType(37,20), true), 2) AS round((sat_sales1 / sat_sales2), 2)#5746]\n   +- *(14) SortMergeJoin [d_week_seq1#5451], [(d_week_seq2#5459 - 53)], Inner\n      :- *(6) Sort [d_week_seq1#5451 ASC NULLS FIRST], false, 0\n      :  +- *(6) Project [d_week_seq#5550 AS d_week_seq1#5451, sun_sales#5471 AS sun_sales1#5452, mon_sales#5472 AS mon_sales1#5453, tue_sales#5473 AS tue_sales1#5454, wed_sales#5474 AS wed_sales1#5455, thu_sales#5475 AS thu_sales1#5456, fri_sales#5476 AS fri_sales1#5457, sat_sales#5477 AS sat_sales1#5458]\n      :     +- *(6) BroadcastHashJoin [d_week_seq#5550], [d_week_seq#5578], Inner, BuildRight, false\n      :        :- *(6) HashAggregate(keys=[d_week_seq#5550], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Sunday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Monday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Tuesday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Wednesday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Thursday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Friday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Saturday) THEN sales_price#5468 ELSE null END))], output=[d_week_seq#5550, sun_sales#5471, mon_sales#5472, tue_sales#5473, wed_sales#5474, thu_sales#5475, fri_sales#5476, sat_sales#5477])\n      :        :  +- Exchange hashpartitioning(d_week_seq#5550, 200), ENSURE_REQUIREMENTS, [id=#9295]\n      :        :     +- *(4) HashAggregate(keys=[d_week_seq#5550], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Sunday) THEN sales_price#5468 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Monday) THEN sales_price#5468 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Tuesday) THEN sales_price#5468 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Wednesday) THEN sales_price#5468 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Thursday) THEN sales_price#5468 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Friday) THEN sales_price#5468 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#5560 = Saturday) THEN sales_price#5468 ELSE null END))], output=[d_week_seq#5550, sum#5762L, sum#5763L, sum#5764L, sum#5765L, sum#5766L, sum#5767L, sum#5768L])\n      :        :        +- *(4) Project [sales_price#5468, d_week_seq#5550, d_day_name#5560]\n      :        :           +- *(4) BroadcastHashJoin [sold_date_sk#5467], [d_date_sk#5546], Inner, BuildRight, false\n      :        :              :- Union\n      :        :              :  :- *(1) Project [ws_sold_date_sk#5478 AS sold_date_sk#5467, ws_ext_sales_price#5501 AS sales_price#5468]\n      :        :              :  :  +- *(1) Filter isnotnull(ws_sold_date_sk#5478)\n      :        :              :  :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#5501, ws_sold_date_sk#5478], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#5478, ws_sold_time_sk#5479, ws_ship_date_sk#5480, ws_item_sk#5481, ws_bill_custo..., Partition Cols: []]\n      :        :              :  +- *(2) Project [cs_sold_date_sk#5512 AS sold_date_sk#5469, cs_ext_sales_price#5535 AS sales_price#5470]\n      :        :              :     +- *(2) Filter isnotnull(cs_sold_date_sk#5512)\n      :        :              :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ext_sales_price#5535, cs_sold_date_sk#5512], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#5512, cs_sold_time_sk#5513, cs_ship_date_sk#5514, cs_bill_customer_sk#5515, cs_b..., Partition Cols: []]\n      :        :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9289]\n      :        :                 +- *(3) Filter (isnotnull(d_date_sk#5546) AND isnotnull(d_week_seq#5550))\n      :        :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#5546, d_week_seq#5550, d_day_name#5560], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#5546, d_date_id#5547, d_date#5548, d_month_seq#5549, d_week_seq#5550, d_quarter_seq#55..., Partition Cols: []]\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9302]\n      :           +- *(5) Project [d_week_seq#5578]\n      :              +- *(5) Filter ((isnotnull(d_year#5580) AND (d_year#5580 = 1998)) AND isnotnull(d_week_seq#5578))\n      :                 +- Scan hive tpcds_sf1_iceberg.date_dim [d_week_seq#5578, d_year#5580], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#5574, d_date_id#5575, d_date#5576, d_month_seq#5577, d_week_seq#5578, d_quarter_seq#55..., Partition Cols: []]\n      +- *(13) Sort [(d_week_seq2#5459 - 53) ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning((d_week_seq2#5459 - 53), 200), ENSURE_REQUIREMENTS, [id=#9445]\n            +- *(12) Project [d_week_seq#5674 AS d_week_seq2#5459, sun_sales#5471 AS sun_sales2#5460, mon_sales#5472 AS mon_sales2#5461, tue_sales#5473 AS tue_sales2#5462, wed_sales#5474 AS wed_sales2#5463, thu_sales#5475 AS thu_sales2#5464, fri_sales#5476 AS fri_sales2#5465, sat_sales#5477 AS sat_sales2#5466]\n               +- *(12) BroadcastHashJoin [d_week_seq#5674], [d_week_seq#5702], Inner, BuildRight, false\n                  :- *(12) HashAggregate(keys=[d_week_seq#5674], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#5684 = Sunday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5684 = Monday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5684 = Tuesday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5684 = Wednesday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5684 = Thursday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5684 = Friday) THEN sales_price#5468 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#5684 = Saturday) THEN sales_price#5468 ELSE null END))], output=[d_week_seq#5674, sun_sales#5471, mon_sales#5472, tue_sales#5473, wed_sales#5474, thu_sales#5475, fri_sales#5476, sat_sales#5477])\n                  :  +- ReusedExchange [d_week_seq#5674, sum#5776L, sum#5777L, sum#5778L, sum#5779L, sum#5780L, sum#5781L, sum#5782L], Exchange hashpartitioning(d_week_seq#5550, 200), ENSURE_REQUIREMENTS, [id=#9295]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9335]\n                     +- *(11) Project [d_week_seq#5702]\n                        +- *(11) Filter ((isnotnull(d_year#5704) AND (d_year#5704 = 1999)) AND isnotnull(d_week_seq#5702))\n                           +- Scan hive tpcds_sf1_iceberg.date_dim [d_week_seq#5702, d_year#5704], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#5698, d_date_id#5699, d_date#5700, d_month_seq#5701, d_week_seq#5702, d_quarter_seq#57..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q2"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_class#5852, 200), ENSURE_REQUIREMENTS, [id=#9550]\n+- *(4) HashAggregate(keys=[i_item_id#5843, i_item_desc#5846, i_category#5854, i_class#5852, i_current_price#5847], functions=[sum(UnscaledValue(cs_ext_sales_price#5831))], output=[i_item_id#5843, i_item_desc#5846, i_category#5854, i_class#5852, i_current_price#5847, itemrevenue#5806, _w0#5896, _w1#5897])\n   +- Exchange hashpartitioning(i_item_id#5843, i_item_desc#5846, i_category#5854, i_class#5852, i_current_price#5847, 200), ENSURE_REQUIREMENTS, [id=#9546]\n      +- *(3) HashAggregate(keys=[i_item_id#5843, i_item_desc#5846, i_category#5854, i_class#5852, i_current_price#5847], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#5831))], output=[i_item_id#5843, i_item_desc#5846, i_category#5854, i_class#5852, i_current_price#5847, sum#5907L])\n         +- *(3) Project [cs_ext_sales_price#5831, i_item_id#5843, i_item_desc#5846, i_current_price#5847, i_class#5852, i_category#5854]\n            +- *(3) BroadcastHashJoin [cs_sold_date_sk#5808], [d_date_sk#5864], Inner, BuildRight, false\n               :- *(3) Project [cs_sold_date_sk#5808, cs_ext_sales_price#5831, i_item_id#5843, i_item_desc#5846, i_current_price#5847, i_class#5852, i_category#5854]\n               :  +- *(3) BroadcastHashJoin [cs_item_sk#5823], [i_item_sk#5842], Inner, BuildRight, false\n               :     :- *(3) Filter (isnotnull(cs_item_sk#5823) AND isnotnull(cs_sold_date_sk#5808))\n               :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#5808, cs_item_sk#5823, cs_ext_sales_price#5831], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#5808, cs_sold_time_sk#5809, cs_ship_date_sk#5810, cs_bill_customer_sk#5811, cs_b..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9532]\n               :        +- *(1) Filter (i_category#5854 IN (Electronics,Children,Home) AND isnotnull(i_item_sk#5842))\n               :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#5842, i_item_id#5843, i_item_desc#5846, i_current_price#5847, i_class#5852, i_category#5854], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#5842, i_item_id#5843, i_rec_start_date#5844, i_rec_end_date#5845, i_item_desc#5846, i_..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9540]\n                  +- *(2) Project [d_date_sk#5864]\n                     +- *(2) Filter (((isnotnull(d_date#5866) AND (d_date#5866 >= 11765)) AND (d_date#5866 <= 11795)) AND isnotnull(d_date_sk#5864))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#5866, d_date_sk#5864], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#5864, d_date_id#5865, d_date#5866, d_month_seq#5867, d_week_seq#5868, d_quarter_seq#58..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q20"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_warehouse_name#5924, i_item_id#5937, 200), ENSURE_REQUIREMENTS, [id=#9665]\n+- *(4) HashAggregate(keys=[w_warehouse_name#5924, i_item_id#5937], functions=[partial_sum(cast(CASE WHEN (d_date#5960 < 10693) THEN inv_quantity_on_hand#5921 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (d_date#5960 >= 10693) THEN inv_quantity_on_hand#5921 ELSE 0 END as bigint))], output=[w_warehouse_name#5924, i_item_id#5937, sum#5994L, sum#5995L])\n   +- *(4) Project [inv_quantity_on_hand#5921, w_warehouse_name#5924, i_item_id#5937, d_date#5960]\n      +- *(4) BroadcastHashJoin [inv_date_sk#5918], [d_date_sk#5958], Inner, BuildRight, false\n         :- *(4) Project [inv_date_sk#5918, inv_quantity_on_hand#5921, w_warehouse_name#5924, i_item_id#5937]\n         :  +- *(4) BroadcastHashJoin [inv_item_sk#5919], [i_item_sk#5936], Inner, BuildRight, false\n         :     :- *(4) Project [inv_date_sk#5918, inv_item_sk#5919, inv_quantity_on_hand#5921, w_warehouse_name#5924]\n         :     :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#5920], [w_warehouse_sk#5922], Inner, BuildRight, false\n         :     :     :- *(4) Filter ((isnotnull(inv_warehouse_sk#5920) AND isnotnull(inv_item_sk#5919)) AND isnotnull(inv_date_sk#5918))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#5918, inv_item_sk#5919, inv_warehouse_sk#5920, inv_quantity_on_hand#5921], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#5918, inv_item_sk#5919, inv_warehouse_sk#5920, inv_quantity_on_hand#5921], Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9644]\n         :     :        +- *(1) Filter isnotnull(w_warehouse_sk#5922)\n         :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#5922, w_warehouse_name#5924], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#5922, w_warehouse_id#5923, w_warehouse_name#5924, w_warehouse_sq_ft#5925, w_stree..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9652]\n         :        +- *(2) Project [i_item_sk#5936, i_item_id#5937]\n         :           +- *(2) Filter (((isnotnull(i_current_price#5941) AND (i_current_price#5941 >= 0.99)) AND (i_current_price#5941 <= 1.49)) AND isnotnull(i_item_sk#5936))\n         :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#5941, i_item_id#5937, i_item_sk#5936], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#5936, i_item_id#5937, i_rec_start_date#5938, i_rec_end_date#5939, i_item_desc#5940, i_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9659]\n            +- *(3) Filter (((isnotnull(d_date#5960) AND (d_date#5960 >= 10663)) AND (d_date#5960 <= 10723)) AND isnotnull(d_date_sk#5958))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#5958, d_date#5960], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#5958, d_date_id#5959, d_date#5960, d_month_seq#5961, d_week_seq#5962, d_quarter_seq#59..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q21"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_product_name#6062, i_brand#6063, i_class#6064, i_category#6065, spark_grouping_id#6061L, 200), ENSURE_REQUIREMENTS, [id=#9753]\n+- *(3) HashAggregate(keys=[i_product_name#6062, i_brand#6063, i_class#6064, i_category#6065, spark_grouping_id#6061L], functions=[partial_avg(cast(inv_quantity_on_hand#6005 as bigint))], output=[i_product_name#6062, i_brand#6063, i_class#6064, i_category#6065, spark_grouping_id#6061L, sum#6078, count#6079L])\n   +- *(3) Expand [List(inv_quantity_on_hand#6005, i_product_name#6055, i_brand#6042, i_class#6044, i_category#6046, 0), List(inv_quantity_on_hand#6005, i_product_name#6055, i_brand#6042, i_class#6044, null, 1), List(inv_quantity_on_hand#6005, i_product_name#6055, i_brand#6042, null, null, 3), List(inv_quantity_on_hand#6005, i_product_name#6055, null, null, null, 7), List(inv_quantity_on_hand#6005, null, null, null, null, 15)], [inv_quantity_on_hand#6005, i_product_name#6062, i_brand#6063, i_class#6064, i_category#6065, spark_grouping_id#6061L]\n      +- *(3) Project [inv_quantity_on_hand#6005, i_product_name#6055, i_brand#6042, i_class#6044, i_category#6046]\n         +- *(3) BroadcastHashJoin [inv_item_sk#6003], [i_item_sk#6034], Inner, BuildRight, false\n            :- *(3) Project [inv_item_sk#6003, inv_quantity_on_hand#6005]\n            :  +- *(3) BroadcastHashJoin [inv_date_sk#6002], [d_date_sk#6006], Inner, BuildRight, false\n            :     :- *(3) Filter (isnotnull(inv_date_sk#6002) AND isnotnull(inv_item_sk#6003))\n            :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#6002, inv_item_sk#6003, inv_quantity_on_hand#6005], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#6002, inv_item_sk#6003, inv_warehouse_sk#6004, inv_quantity_on_hand#6005], Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#9739]\n            :        +- *(1) Project [d_date_sk#6006]\n            :           +- *(1) Filter (((isnotnull(d_month_seq#6009) AND (d_month_seq#6009 >= 1188)) AND (d_month_seq#6009 <= 1199)) AND isnotnull(d_date_sk#6006))\n            :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#6006, d_month_seq#6009], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#6006, d_date_id#6007, d_date#6008, d_month_seq#6009, d_week_seq#6010, d_quarter_seq#60..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#9746]\n               +- *(2) Filter isnotnull(i_item_sk#6034)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#6034, i_brand#6042, i_class#6044, i_category#6046, i_product_name#6055], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#6034, i_item_id#6035, i_rec_start_date#6036, i_rec_end_date#6037, i_item_desc#6038, i_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q22"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#10736]\n+- *(29) HashAggregate(keys=[], functions=[partial_sum(sales#6088)], output=[sum#6623, isEmpty#6624])\n   +- Union\n      :- *(14) Project [CheckOverflow((promote_precision(cast(cast(cs_quantity#6118 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#6120 as decimal(12,2)))), DecimalType(18,2), true) AS sales#6088]\n      :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#6100], [d_date_sk#6134], Inner, BuildRight, false\n      :     :- *(14) Project [cs_sold_date_sk#6100, cs_quantity#6118, cs_list_price#6120]\n      :     :  +- SortMergeJoin [cs_bill_customer_sk#6103], [c_customer_sk#6326], LeftSemi\n      :     :     :- *(9) Sort [cs_bill_customer_sk#6103 ASC NULLS FIRST], false, 0\n      :     :     :  +- Exchange hashpartitioning(cs_bill_customer_sk#6103, 200), ENSURE_REQUIREMENTS, [id=#10314]\n      :     :     :     +- *(8) Project [cs_sold_date_sk#6100, cs_bill_customer_sk#6103, cs_quantity#6118, cs_list_price#6120]\n      :     :     :        +- SortMergeJoin [cs_item_sk#6115], [item_sk#6093], LeftSemi\n      :     :     :           :- *(2) Sort [cs_item_sk#6115 ASC NULLS FIRST], false, 0\n      :     :     :           :  +- Exchange hashpartitioning(cs_item_sk#6115, 200), ENSURE_REQUIREMENTS, [id=#10277]\n      :     :     :           :     +- *(1) Filter isnotnull(cs_sold_date_sk#6100)\n      :     :     :           :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#6100, cs_bill_customer_sk#6103, cs_item_sk#6115, cs_quantity#6118, cs_list_price#6120], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#6100, cs_sold_time_sk#6101, cs_ship_date_sk#6102, cs_bill_customer_sk#6103, cs_b..., Partition Cols: []]\n      :     :     :           +- *(7) Sort [item_sk#6093 ASC NULLS FIRST], false, 0\n      :     :     :              +- Exchange hashpartitioning(item_sk#6093, 200), ENSURE_REQUIREMENTS, [id=#10306]\n      :     :     :                 +- *(6) Project [item_sk#6093]\n      :     :     :                    +- *(6) Filter (count(1)#6300L > 4)\n      :     :     :                       +- *(6) HashAggregate(keys=[substr(i_item_desc#6281, 1, 30)#6625, i_item_sk#6277, d_date#6251], functions=[count(1)], output=[item_sk#6093, count(1)#6300L])\n      :     :     :                          +- Exchange hashpartitioning(substr(i_item_desc#6281, 1, 30)#6625, i_item_sk#6277, d_date#6251, 200), ENSURE_REQUIREMENTS, [id=#10300]\n      :     :     :                             +- *(5) HashAggregate(keys=[substr(i_item_desc#6281, 1, 30) AS substr(i_item_desc#6281, 1, 30)#6625, i_item_sk#6277, d_date#6251], functions=[partial_count(1)], output=[substr(i_item_desc#6281, 1, 30)#6625, i_item_sk#6277, d_date#6251, count#6627L])\n      :     :     :                                +- *(5) Project [d_date#6251, i_item_sk#6277, i_item_desc#6281]\n      :     :     :                                   +- *(5) BroadcastHashJoin [ss_item_sk#6228], [i_item_sk#6277], Inner, BuildRight, false\n      :     :     :                                      :- *(5) Project [ss_item_sk#6228, d_date#6251]\n      :     :     :                                      :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#6226], [d_date_sk#6249], Inner, BuildRight, false\n      :     :     :                                      :     :- *(5) Filter (isnotnull(ss_sold_date_sk#6226) AND isnotnull(ss_item_sk#6228))\n      :     :     :                                      :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#6226, ss_item_sk#6228], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#6226, ss_sold_time_sk#6227, ss_item_sk#6228, ss_customer_sk#6229, ss_cdemo_sk#62..., Partition Cols: []]\n      :     :     :                                      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10287]\n      :     :     :                                      :        +- *(3) Project [d_date_sk#6249, d_date#6251]\n      :     :     :                                      :           +- *(3) Filter (d_year#6255 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#6249))\n      :     :     :                                      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#6251, d_date_sk#6249, d_year#6255], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#6249, d_date_id#6250, d_date#6251, d_month_seq#6252, d_week_seq#6253, d_quarter_seq#62..., Partition Cols: []]\n      :     :     :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10294]\n      :     :     :                                         +- *(4) Filter isnotnull(i_item_sk#6277)\n      :     :     :                                            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#6277, i_item_desc#6281], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#6277, i_item_id#6278, i_rec_start_date#6279, i_rec_end_date#6280, i_item_desc#6281, i_..., Partition Cols: []]\n      :     :     +- *(12) Sort [c_customer_sk#6326 ASC NULLS FIRST], false, 0\n      :     :        +- *(12) Project [c_customer_sk#6326]\n      :     :           +- *(12) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6313 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6316 as decimal(12,2)))), DecimalType(18,2), true))#6418) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6313 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6316 as decimal(12,2)))), DecimalType(18,2), true))#6418 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery scalar-subquery#6099, [id=#10093] as decimal(32,6)))), DecimalType(38,8), true)))\n      :     :              :  +- Subquery scalar-subquery#6099, [id=#10093]\n      :     :              :     +- *(5) HashAggregate(keys=[], functions=[max(csales#6096)], output=[tpcds_cmax#6097])\n      :     :              :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#10089]\n      :     :              :           +- *(4) HashAggregate(keys=[], functions=[partial_max(csales#6096)], output=[max#6640])\n      :     :              :              +- *(4) HashAggregate(keys=[c_customer_sk#6368], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6355 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6358 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6096])\n      :     :              :                 +- Exchange hashpartitioning(c_customer_sk#6368, 200), ENSURE_REQUIREMENTS, [id=#10084]\n      :     :              :                    +- *(3) HashAggregate(keys=[c_customer_sk#6368], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6355 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6358 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6368, sum#6643, isEmpty#6644])\n      :     :              :                       +- *(3) Project [ss_quantity#6355, ss_sales_price#6358, c_customer_sk#6368]\n      :     :              :                          +- *(3) BroadcastHashJoin [ss_sold_date_sk#6345], [d_date_sk#6386], Inner, BuildRight, false\n      :     :              :                             :- *(3) Project [ss_sold_date_sk#6345, ss_quantity#6355, ss_sales_price#6358, c_customer_sk#6368]\n      :     :              :                             :  +- *(3) BroadcastHashJoin [ss_customer_sk#6348], [c_customer_sk#6368], Inner, BuildRight, false\n      :     :              :                             :     :- *(3) Filter (isnotnull(ss_customer_sk#6348) AND isnotnull(ss_sold_date_sk#6345))\n      :     :              :                             :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#6345, ss_customer_sk#6348, ss_quantity#6355, ss_sales_price#6358], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#6345, ss_sold_time_sk#6346, ss_item_sk#6347, ss_customer_sk#6348, ss_cdemo_sk#63..., Partition Cols: []]\n      :     :              :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10070]\n      :     :              :                             :        +- *(1) Filter isnotnull(c_customer_sk#6368)\n      :     :              :                             :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#6368], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#6368, c_customer_id#6369, c_current_cdemo_sk#6370, c_current_hdemo_sk#6371, c_curr..., Partition Cols: []]\n      :     :              :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10078]\n      :     :              :                                +- *(2) Project [d_date_sk#6386]\n      :     :              :                                   +- *(2) Filter (d_year#6392 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#6386))\n      :     :              :                                      +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#6386, d_year#6392], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#6386, d_date_id#6387, d_date#6388, d_month_seq#6389, d_week_seq#6390, d_quarter_seq#63..., Partition Cols: []]\n      :     :              +- *(12) HashAggregate(keys=[c_customer_sk#6326], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6313 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6316 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6326, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6313 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6316 as decimal(12,2)))), DecimalType(18,2), true))#6418])\n      :     :                 +- Exchange hashpartitioning(c_customer_sk#6326, 200), ENSURE_REQUIREMENTS, [id=#10329]\n      :     :                    +- *(11) HashAggregate(keys=[c_customer_sk#6326], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6313 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6316 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6326, sum#6630, isEmpty#6631])\n      :     :                       +- *(11) Project [ss_quantity#6313, ss_sales_price#6316, c_customer_sk#6326]\n      :     :                          +- *(11) BroadcastHashJoin [ss_customer_sk#6306], [c_customer_sk#6326], Inner, BuildRight, false\n      :     :                             :- *(11) Filter isnotnull(ss_customer_sk#6306)\n      :     :                             :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_customer_sk#6306, ss_quantity#6313, ss_sales_price#6316], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#6303, ss_sold_time_sk#6304, ss_item_sk#6305, ss_customer_sk#6306, ss_cdemo_sk#63..., Partition Cols: []]\n      :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#10323]\n      :     :                                +- *(10) Filter isnotnull(c_customer_sk#6326)\n      :     :                                   +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#6326], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#6326, c_customer_id#6327, c_current_cdemo_sk#6328, c_current_hdemo_sk#6329, c_curr..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10343]\n      :        +- *(13) Project [d_date_sk#6134]\n      :           +- *(13) Filter ((((isnotnull(d_year#6140) AND isnotnull(d_moy#6142)) AND (d_year#6140 = 1998)) AND (d_moy#6142 = 7)) AND isnotnull(d_date_sk#6134))\n      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#6134, d_moy#6142, d_year#6140], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#6134, d_date_id#6135, d_date#6136, d_month_seq#6137, d_week_seq#6138, d_quarter_seq#61..., Partition Cols: []]\n      +- *(28) Project [CheckOverflow((promote_precision(cast(cast(ws_quantity#6180 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#6182 as decimal(12,2)))), DecimalType(18,2), true) AS sales#6091]\n         +- *(28) BroadcastHashJoin [ws_sold_date_sk#6162], [d_date_sk#6196], Inner, BuildRight, false\n            :- *(28) Project [ws_sold_date_sk#6162, ws_quantity#6180, ws_list_price#6182]\n            :  +- SortMergeJoin [ws_bill_customer_sk#6166], [c_customer_sk#6523], LeftSemi\n            :     :- *(23) Sort [ws_bill_customer_sk#6166 ASC NULLS FIRST], false, 0\n            :     :  +- Exchange hashpartitioning(ws_bill_customer_sk#6166, 200), ENSURE_REQUIREMENTS, [id=#10541]\n            :     :     +- *(22) Project [ws_sold_date_sk#6162, ws_bill_customer_sk#6166, ws_quantity#6180, ws_list_price#6182]\n            :     :        +- SortMergeJoin [ws_item_sk#6165], [item_sk#6093], LeftSemi\n            :     :           :- *(16) Sort [ws_item_sk#6165 ASC NULLS FIRST], false, 0\n            :     :           :  +- Exchange hashpartitioning(ws_item_sk#6165, 200), ENSURE_REQUIREMENTS, [id=#10351]\n            :     :           :     +- *(15) Filter isnotnull(ws_sold_date_sk#6162)\n            :     :           :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#6162, ws_item_sk#6165, ws_bill_customer_sk#6166, ws_quantity#6180, ws_list_price#6182], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#6162, ws_sold_time_sk#6163, ws_ship_date_sk#6164, ws_item_sk#6165, ws_bill_custo..., Partition Cols: []]\n            :     :           +- *(21) Sort [item_sk#6093 ASC NULLS FIRST], false, 0\n            :     :              +- ReusedExchange [item_sk#6093], Exchange hashpartitioning(item_sk#6093, 200), ENSURE_REQUIREMENTS, [id=#10306]\n            :     +- *(26) Sort [c_customer_sk#6523 ASC NULLS FIRST], false, 0\n            :        +- *(26) Project [c_customer_sk#6523]\n            :           +- *(26) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6510 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6513 as decimal(12,2)))), DecimalType(18,2), true))#6615) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6510 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6513 as decimal(12,2)))), DecimalType(18,2), true))#6615 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#6099, [id=#10093] as decimal(32,6)))), DecimalType(38,8), true)))\n            :              :  +- ReusedSubquery Subquery scalar-subquery#6099, [id=#10093]\n            :              +- *(26) HashAggregate(keys=[c_customer_sk#6523], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6510 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6513 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6523, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6510 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6513 as decimal(12,2)))), DecimalType(18,2), true))#6615])\n            :                 +- ReusedExchange [c_customer_sk#6523, sum#6637, isEmpty#6638], Exchange hashpartitioning(c_customer_sk#6326, 200), ENSURE_REQUIREMENTS, [id=#10329]\n            +- ReusedExchange [d_date_sk#6196], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#10343]\n",
    "iteration" : 1,
    "name" : "q23a"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(c_last_name#6732, c_first_name#6731, 200), ENSURE_REQUIREMENTS, [id=#12341]\n+- *(19) HashAggregate(keys=[c_last_name#6732, c_first_name#6731], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#6707 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#6709 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#6732, c_first_name#6731, sum#7250, isEmpty#7251])\n   +- *(19) Project [cs_quantity#6707, cs_list_price#6709, c_first_name#6731, c_last_name#6732]\n      +- *(19) BroadcastHashJoin [cs_sold_date_sk#6689], [d_date_sk#6741], Inner, BuildRight, false\n         :- *(19) Project [cs_sold_date_sk#6689, cs_quantity#6707, cs_list_price#6709, c_first_name#6731, c_last_name#6732]\n         :  +- *(19) BroadcastHashJoin [cs_bill_customer_sk#6692], [c_customer_sk#6723], Inner, BuildRight, false\n         :     :- SortMergeJoin [cs_bill_customer_sk#6692], [c_customer_sk#6951], LeftSemi\n         :     :  :- *(9) Sort [cs_bill_customer_sk#6692 ASC NULLS FIRST], false, 0\n         :     :  :  +- Exchange hashpartitioning(cs_bill_customer_sk#6692, 200), ENSURE_REQUIREMENTS, [id=#11612]\n         :     :  :     +- *(8) Project [cs_sold_date_sk#6689, cs_bill_customer_sk#6692, cs_quantity#6707, cs_list_price#6709]\n         :     :  :        +- SortMergeJoin [cs_item_sk#6704], [item_sk#6682], LeftSemi\n         :     :  :           :- *(2) Sort [cs_item_sk#6704 ASC NULLS FIRST], false, 0\n         :     :  :           :  +- Exchange hashpartitioning(cs_item_sk#6704, 200), ENSURE_REQUIREMENTS, [id=#11575]\n         :     :  :           :     +- *(1) Filter (isnotnull(cs_bill_customer_sk#6692) AND isnotnull(cs_sold_date_sk#6689))\n         :     :  :           :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#6689, cs_bill_customer_sk#6692, cs_item_sk#6704, cs_quantity#6707, cs_list_price#6709], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#6689, cs_sold_time_sk#6690, cs_ship_date_sk#6691, cs_bill_customer_sk#6692, cs_b..., Partition Cols: []]\n         :     :  :           +- *(7) Sort [item_sk#6682 ASC NULLS FIRST], false, 0\n         :     :  :              +- Exchange hashpartitioning(item_sk#6682, 200), ENSURE_REQUIREMENTS, [id=#11604]\n         :     :  :                 +- *(6) Project [item_sk#6682]\n         :     :  :                    +- *(6) Filter (count(1)#6925L > 4)\n         :     :  :                       +- *(6) HashAggregate(keys=[substr(i_item_desc#6906, 1, 30)#7252, i_item_sk#6902, d_date#6876], functions=[count(1)], output=[item_sk#6682, count(1)#6925L])\n         :     :  :                          +- Exchange hashpartitioning(substr(i_item_desc#6906, 1, 30)#7252, i_item_sk#6902, d_date#6876, 200), ENSURE_REQUIREMENTS, [id=#11598]\n         :     :  :                             +- *(5) HashAggregate(keys=[substr(i_item_desc#6906, 1, 30) AS substr(i_item_desc#6906, 1, 30)#7252, i_item_sk#6902, d_date#6876], functions=[partial_count(1)], output=[substr(i_item_desc#6906, 1, 30)#7252, i_item_sk#6902, d_date#6876, count#7254L])\n         :     :  :                                +- *(5) Project [d_date#6876, i_item_sk#6902, i_item_desc#6906]\n         :     :  :                                   +- *(5) BroadcastHashJoin [ss_item_sk#6853], [i_item_sk#6902], Inner, BuildRight, false\n         :     :  :                                      :- *(5) Project [ss_item_sk#6853, d_date#6876]\n         :     :  :                                      :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#6851], [d_date_sk#6874], Inner, BuildRight, false\n         :     :  :                                      :     :- *(5) Filter (isnotnull(ss_sold_date_sk#6851) AND isnotnull(ss_item_sk#6853))\n         :     :  :                                      :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#6851, ss_item_sk#6853], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#6851, ss_sold_time_sk#6852, ss_item_sk#6853, ss_customer_sk#6854, ss_cdemo_sk#68..., Partition Cols: []]\n         :     :  :                                      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11585]\n         :     :  :                                      :        +- *(3) Project [d_date_sk#6874, d_date#6876]\n         :     :  :                                      :           +- *(3) Filter (d_year#6880 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#6874))\n         :     :  :                                      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#6876, d_date_sk#6874, d_year#6880], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#6874, d_date_id#6875, d_date#6876, d_month_seq#6877, d_week_seq#6878, d_quarter_seq#68..., Partition Cols: []]\n         :     :  :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11592]\n         :     :  :                                         +- *(4) Filter isnotnull(i_item_sk#6902)\n         :     :  :                                            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#6902, i_item_desc#6906], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#6902, i_item_id#6903, i_rec_start_date#6904, i_rec_end_date#6905, i_item_desc#6906, i_..., Partition Cols: []]\n         :     :  +- *(12) Sort [c_customer_sk#6951 ASC NULLS FIRST], false, 0\n         :     :     +- *(12) Project [c_customer_sk#6951]\n         :     :        +- *(12) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))#7043) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))#7043 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery scalar-subquery#6688, [id=#11183] as decimal(32,6)))), DecimalType(38,8), true)))\n         :     :           :  +- Subquery scalar-subquery#6688, [id=#11183]\n         :     :           :     +- *(5) HashAggregate(keys=[], functions=[max(csales#6685)], output=[tpcds_cmax#6686])\n         :     :           :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#11179]\n         :     :           :           +- *(4) HashAggregate(keys=[], functions=[partial_max(csales#6685)], output=[max#7271])\n         :     :           :              +- *(4) HashAggregate(keys=[c_customer_sk#6993], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6980 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6983 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#6685])\n         :     :           :                 +- Exchange hashpartitioning(c_customer_sk#6993, 200), ENSURE_REQUIREMENTS, [id=#11174]\n         :     :           :                    +- *(3) HashAggregate(keys=[c_customer_sk#6993], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6980 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6983 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6993, sum#7274, isEmpty#7275])\n         :     :           :                       +- *(3) Project [ss_quantity#6980, ss_sales_price#6983, c_customer_sk#6993]\n         :     :           :                          +- *(3) BroadcastHashJoin [ss_sold_date_sk#6970], [d_date_sk#7011], Inner, BuildRight, false\n         :     :           :                             :- *(3) Project [ss_sold_date_sk#6970, ss_quantity#6980, ss_sales_price#6983, c_customer_sk#6993]\n         :     :           :                             :  +- *(3) BroadcastHashJoin [ss_customer_sk#6973], [c_customer_sk#6993], Inner, BuildRight, false\n         :     :           :                             :     :- *(3) Filter (isnotnull(ss_customer_sk#6973) AND isnotnull(ss_sold_date_sk#6970))\n         :     :           :                             :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#6970, ss_customer_sk#6973, ss_quantity#6980, ss_sales_price#6983], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#6970, ss_sold_time_sk#6971, ss_item_sk#6972, ss_customer_sk#6973, ss_cdemo_sk#69..., Partition Cols: []]\n         :     :           :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11160]\n         :     :           :                             :        +- *(1) Filter isnotnull(c_customer_sk#6993)\n         :     :           :                             :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#6993], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#6993, c_customer_id#6994, c_current_cdemo_sk#6995, c_current_hdemo_sk#6996, c_curr..., Partition Cols: []]\n         :     :           :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11168]\n         :     :           :                                +- *(2) Project [d_date_sk#7011]\n         :     :           :                                   +- *(2) Filter (d_year#7017 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#7011))\n         :     :           :                                      +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#7011, d_year#7017], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#7011, d_date_id#7012, d_date#7013, d_month_seq#7014, d_week_seq#7015, d_quarter_seq#70..., Partition Cols: []]\n         :     :           +- *(12) HashAggregate(keys=[c_customer_sk#6951], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6951, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))#7043])\n         :     :              +- Exchange hashpartitioning(c_customer_sk#6951, 200), ENSURE_REQUIREMENTS, [id=#11627]\n         :     :                 +- *(11) HashAggregate(keys=[c_customer_sk#6951], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6951, sum#7257, isEmpty#7258])\n         :     :                    +- *(11) Project [ss_quantity#6938, ss_sales_price#6941, c_customer_sk#6951]\n         :     :                       +- *(11) BroadcastHashJoin [ss_customer_sk#6931], [c_customer_sk#6951], Inner, BuildRight, false\n         :     :                          :- *(11) Filter isnotnull(ss_customer_sk#6931)\n         :     :                          :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_customer_sk#6931, ss_quantity#6938, ss_sales_price#6941], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#6928, ss_sold_time_sk#6929, ss_item_sk#6930, ss_customer_sk#6931, ss_cdemo_sk#69..., Partition Cols: []]\n         :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#11621]\n         :     :                             +- *(10) Filter isnotnull(c_customer_sk#6951)\n         :     :                                +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#6951], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#6951, c_customer_id#6952, c_current_cdemo_sk#6953, c_current_hdemo_sk#6954, c_curr..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#12333]\n         :        +- SortMergeJoin [c_customer_sk#6723], [c_customer_sk#6951], LeftSemi\n         :           :- *(14) Sort [c_customer_sk#6723 ASC NULLS FIRST], false, 0\n         :           :  +- Exchange hashpartitioning(c_customer_sk#6723, 200), ENSURE_REQUIREMENTS, [id=#11639]\n         :           :     +- *(13) Filter isnotnull(c_customer_sk#6723)\n         :           :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#6723, c_first_name#6731, c_last_name#6732], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#6723, c_customer_id#6724, c_current_cdemo_sk#6725, c_current_hdemo_sk#6726, c_curr..., Partition Cols: []]\n         :           +- *(17) Sort [c_customer_sk#6951 ASC NULLS FIRST], false, 0\n         :              +- *(17) Project [c_customer_sk#6951]\n         :                 +- *(17) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))#7043) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))#7043 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#6688, [id=#11183] as decimal(32,6)))), DecimalType(38,8), true)))\n         :                    :  +- ReusedSubquery Subquery scalar-subquery#6688, [id=#11183]\n         :                    +- *(17) HashAggregate(keys=[c_customer_sk#6951], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#6951, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#6938 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#6941 as decimal(12,2)))), DecimalType(18,2), true))#7043])\n         :                       +- ReusedExchange [c_customer_sk#6951, sum#7257, isEmpty#7258], Exchange hashpartitioning(c_customer_sk#6951, 200), ENSURE_REQUIREMENTS, [id=#11627]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#11670]\n            +- *(18) Project [d_date_sk#6741]\n               +- *(18) Filter ((((isnotnull(d_year#6747) AND isnotnull(d_moy#6749)) AND (d_year#6747 = 1998)) AND (d_moy#6749 = 7)) AND isnotnull(d_date_sk#6741))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#6741, d_moy#6749, d_year#6747], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#6741, d_date_id#6742, d_date#6743, d_month_seq#6744, d_week_seq#6745, d_quarter_seq#67..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q23b"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 1,
    "name" : "q24a"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 1,
    "name" : "q24b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#8112, i_item_desc#8115, s_store_id#8083, s_store_name#8087, 200), ENSURE_REQUIREMENTS, [id=#13389]\n+- *(11) HashAggregate(keys=[i_item_id#8112, i_item_desc#8115, s_store_id#8083, s_store_name#8087], functions=[partial_min(ss_net_profit#7943), partial_min(sr_net_loss#7963), partial_min(cs_net_profit#7997)], output=[i_item_id#8112, i_item_desc#8115, s_store_id#8083, s_store_name#8087, min#8150, min#8151, min#8152])\n   +- *(11) Project [ss_net_profit#7943, sr_net_loss#7963, cs_net_profit#7997, s_store_id#8083, s_store_name#8087, i_item_id#8112, i_item_desc#8115]\n      +- *(11) BroadcastHashJoin [ss_item_sk#7923], [i_item_sk#8111], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#7923, ss_net_profit#7943, sr_net_loss#7963, cs_net_profit#7997, s_store_id#8083, s_store_name#8087]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#7928], [s_store_sk#8082], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#7923, ss_store_sk#7928, ss_net_profit#7943, sr_net_loss#7963, cs_net_profit#7997]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#7964], [d_date_sk#8054], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#7923, ss_store_sk#7928, ss_net_profit#7943, sr_net_loss#7963, cs_sold_date_sk#7964, cs_net_profit#7997]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#7944], [d_date_sk#8026], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#7923, ss_store_sk#7928, ss_net_profit#7943, sr_returned_date_sk#7944, sr_net_loss#7963, cs_sold_date_sk#7964, cs_net_profit#7997]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#7921], [d_date_sk#7998], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#7921, ss_item_sk#7923, ss_store_sk#7928, ss_net_profit#7943, sr_returned_date_sk#7944, sr_net_loss#7963, cs_sold_date_sk#7964, cs_net_profit#7997]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#7947, sr_item_sk#7946], [cs_bill_customer_sk#7967, cs_item_sk#7979], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#7947 ASC NULLS FIRST, sr_item_sk#7946 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#7947, sr_item_sk#7946, 200), ENSURE_REQUIREMENTS, [id=#13295]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#7921, ss_item_sk#7923, ss_store_sk#7928, ss_net_profit#7943, sr_returned_date_sk#7944, sr_item_sk#7946, sr_customer_sk#7947, sr_net_loss#7963]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#7924, ss_item_sk#7923, ss_ticket_number#7930L], [sr_customer_sk#7947, sr_item_sk#7946, sr_ticket_number#7953L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#7924) AND isnotnull(ss_item_sk#7923)) AND isnotnull(ss_ticket_number#7930L)) AND isnotnull(ss_sold_date_sk#7921)) AND isnotnull(ss_store_sk#7928))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#7921, ss_item_sk#7923, ss_customer_sk#7924, ss_store_sk#7928, ss_ticket_number#7930L, ss_net_profit#7943], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#7921, ss_sold_time_sk#7922, ss_item_sk#7923, ss_customer_sk#7924, ss_cdemo_sk#79..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#13290]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#7947) AND isnotnull(sr_item_sk#7946)) AND isnotnull(sr_ticket_number#7953L)) AND isnotnull(sr_returned_date_sk#7944))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#7944, sr_item_sk#7946, sr_customer_sk#7947, sr_ticket_number#7953L, sr_net_loss#7963], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#7944, sr_return_time_sk#7945, sr_item_sk#7946, sr_customer_sk#7947, sr_cdemo..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#7967 ASC NULLS FIRST, cs_item_sk#7979 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#7967, cs_item_sk#7979, 200), ENSURE_REQUIREMENTS, [id=#13303]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#7967) AND isnotnull(cs_item_sk#7979)) AND isnotnull(cs_sold_date_sk#7964))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#7964, cs_bill_customer_sk#7967, cs_item_sk#7979, cs_net_profit#7997], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#7964, cs_sold_time_sk#7965, cs_ship_date_sk#7966, cs_bill_customer_sk#7967, cs_b..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13314]\n         :     :     :     :        +- *(6) Project [d_date_sk#7998]\n         :     :     :     :           +- *(6) Filter ((((isnotnull(d_moy#8006) AND isnotnull(d_year#8004)) AND (d_moy#8006 = 4)) AND (d_year#8004 = 2002)) AND isnotnull(d_date_sk#7998))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#7998, d_moy#8006, d_year#8004], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#7998, d_date_id#7999, d_date#8000, d_month_seq#8001, d_week_seq#8002, d_quarter_seq#80..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13322]\n         :     :     :        +- *(7) Project [d_date_sk#8026]\n         :     :     :           +- *(7) Filter (((((isnotnull(d_moy#8034) AND isnotnull(d_year#8032)) AND (d_moy#8034 >= 4)) AND (d_moy#8034 <= 10)) AND (d_year#8032 = 2002)) AND isnotnull(d_date_sk#8026))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#8026, d_moy#8034, d_year#8032], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#8026, d_date_id#8027, d_date#8028, d_month_seq#8029, d_week_seq#8030, d_quarter_seq#80..., Partition Cols: []]\n         :     :     +- ReusedExchange [d_date_sk#8054], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13322]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13337]\n         :        +- *(9) Filter isnotnull(s_store_sk#8082)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#8082, s_store_id#8083, s_store_name#8087], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#8082, s_store_id#8083, s_rec_start_date#8084, s_rec_end_date#8085, s_closed_date_sk#8..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13344]\n            +- *(10) Filter isnotnull(i_item_sk#8111)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#8111, i_item_id#8112, i_item_desc#8115], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#8111, i_item_id#8112, i_rec_start_date#8113, i_rec_end_date#8114, i_item_desc#8115, i_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q25"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#8237, 200), ENSURE_REQUIREMENTS, [id=#13526]\n+- *(5) HashAggregate(keys=[i_item_id#8237], functions=[partial_avg(cast(cs_quantity#8183 as bigint)), partial_avg(UnscaledValue(cs_list_price#8185)), partial_avg(UnscaledValue(cs_coupon_amt#8192)), partial_avg(UnscaledValue(cs_sales_price#8186))], output=[i_item_id#8237, sum#8295, count#8296L, sum#8297, count#8298L, sum#8299, count#8300L, sum#8301, count#8302L])\n   +- *(5) Project [cs_quantity#8183, cs_list_price#8185, cs_sales_price#8186, cs_coupon_amt#8192, i_item_id#8237]\n      +- *(5) BroadcastHashJoin [cs_promo_sk#8181], [p_promo_sk#8258], Inner, BuildRight, false\n         :- *(5) Project [cs_promo_sk#8181, cs_quantity#8183, cs_list_price#8185, cs_sales_price#8186, cs_coupon_amt#8192, i_item_id#8237]\n         :  +- *(5) BroadcastHashJoin [cs_item_sk#8180], [i_item_sk#8236], Inner, BuildRight, false\n         :     :- *(5) Project [cs_item_sk#8180, cs_promo_sk#8181, cs_quantity#8183, cs_list_price#8185, cs_sales_price#8186, cs_coupon_amt#8192]\n         :     :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#8165], [d_date_sk#8208], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#8165, cs_item_sk#8180, cs_promo_sk#8181, cs_quantity#8183, cs_list_price#8185, cs_sales_price#8186, cs_coupon_amt#8192]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_bill_cdemo_sk#8169], [cd_demo_sk#8199], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(cs_bill_cdemo_sk#8169) AND isnotnull(cs_sold_date_sk#8165)) AND isnotnull(cs_item_sk#8180)) AND isnotnull(cs_promo_sk#8181))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#8165, cs_bill_cdemo_sk#8169, cs_item_sk#8180, cs_promo_sk#8181, cs_quantity#8183, cs_list_price#8185, cs_sales_price#8186, cs_coupon_amt#8192], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#8165, cs_sold_time_sk#8166, cs_ship_date_sk#8167, cs_bill_customer_sk#8168, cs_b..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13497]\n         :     :     :        +- *(1) Project [cd_demo_sk#8199]\n         :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#8200) AND isnotnull(cd_marital_status#8201)) AND isnotnull(cd_education_status#8202)) AND (cd_gender#8200 = F)) AND (cd_marital_status#8201 = M)) AND (cd_education_status#8202 = 4 yr Degree)) AND isnotnull(cd_demo_sk#8199))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#8199, cd_education_status#8202, cd_gender#8200, cd_marital_status#8201], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#8199, cd_gender#8200, cd_marital_status#8201, cd_education_status#8202, cd_purchase_e..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13505]\n         :     :        +- *(2) Project [d_date_sk#8208]\n         :     :           +- *(2) Filter ((isnotnull(d_year#8214) AND (d_year#8214 = 1998)) AND isnotnull(d_date_sk#8208))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#8208, d_year#8214], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#8208, d_date_id#8209, d_date#8210, d_month_seq#8211, d_week_seq#8212, d_quarter_seq#82..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13512]\n         :        +- *(3) Filter isnotnull(i_item_sk#8236)\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#8236, i_item_id#8237], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#8236, i_item_id#8237, i_rec_start_date#8238, i_rec_end_date#8239, i_item_desc#8240, i_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13520]\n            +- *(4) Project [p_promo_sk#8258]\n               +- *(4) Filter (((p_channel_email#8267 = N) OR (p_channel_event#8272 = N)) AND isnotnull(p_promo_sk#8258))\n                  +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_email#8267, p_channel_event#8272, p_promo_sk#8258], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#8258, p_promo_id#8259, p_start_date_sk#8260, p_end_date_sk#8261, p_item_sk#8262, p_co..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q26"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#8432, s_state#8433, spark_grouping_id#8431L, 200), ENSURE_REQUIREMENTS, [id=#13666]\n+- *(5) HashAggregate(keys=[i_item_id#8432, s_state#8433, spark_grouping_id#8431L], functions=[partial_avg(cast(ss_quantity#8324 as bigint)), partial_avg(UnscaledValue(ss_list_price#8326)), partial_avg(UnscaledValue(ss_coupon_amt#8333)), partial_avg(UnscaledValue(ss_sales_price#8327))], output=[i_item_id#8432, s_state#8433, spark_grouping_id#8431L, sum#8452, count#8453L, sum#8454, count#8455L, sum#8456, count#8457L, sum#8458, count#8459L])\n   +- *(5) Expand [List(ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333, i_item_id#8404, s_state#8398, 0), List(ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333, i_item_id#8404, null, 1), List(ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333, null, null, 3)], [ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333, i_item_id#8432, s_state#8433, spark_grouping_id#8431L]\n      +- *(5) Project [ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333, i_item_id#8404, s_state#8398]\n         +- *(5) BroadcastHashJoin [ss_item_sk#8316], [i_item_sk#8403], Inner, BuildRight, false\n            :- *(5) Project [ss_item_sk#8316, ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333, s_state#8398]\n            :  +- *(5) BroadcastHashJoin [ss_store_sk#8321], [s_store_sk#8374], Inner, BuildRight, false\n            :     :- *(5) Project [ss_item_sk#8316, ss_store_sk#8321, ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333]\n            :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#8314], [d_date_sk#8346], Inner, BuildRight, false\n            :     :     :- *(5) Project [ss_sold_date_sk#8314, ss_item_sk#8316, ss_store_sk#8321, ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333]\n            :     :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#8318], [cd_demo_sk#8337], Inner, BuildRight, false\n            :     :     :     :- *(5) Filter (((isnotnull(ss_cdemo_sk#8318) AND isnotnull(ss_sold_date_sk#8314)) AND isnotnull(ss_store_sk#8321)) AND isnotnull(ss_item_sk#8316))\n            :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#8314, ss_item_sk#8316, ss_cdemo_sk#8318, ss_store_sk#8321, ss_quantity#8324, ss_list_price#8326, ss_sales_price#8327, ss_coupon_amt#8333], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#8314, ss_sold_time_sk#8315, ss_item_sk#8316, ss_customer_sk#8317, ss_cdemo_sk#83..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13637]\n            :     :     :        +- *(1) Project [cd_demo_sk#8337]\n            :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#8338) AND isnotnull(cd_marital_status#8339)) AND isnotnull(cd_education_status#8340)) AND (cd_gender#8338 = M)) AND (cd_marital_status#8339 = M)) AND (cd_education_status#8340 = Secondary)) AND isnotnull(cd_demo_sk#8337))\n            :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#8337, cd_education_status#8340, cd_gender#8338, cd_marital_status#8339], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#8337, cd_gender#8338, cd_marital_status#8339, cd_education_status#8340, cd_purchase_e..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#13645]\n            :     :        +- *(2) Project [d_date_sk#8346]\n            :     :           +- *(2) Filter ((isnotnull(d_year#8352) AND (d_year#8352 = 1999)) AND isnotnull(d_date_sk#8346))\n            :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#8346, d_year#8352], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#8346, d_date_id#8347, d_date#8348, d_month_seq#8349, d_week_seq#8350, d_quarter_seq#83..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13652]\n            :        +- *(3) Filter (s_state#8398 IN (AL,FL,TX,NM,MI,GA) AND isnotnull(s_store_sk#8374))\n            :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#8374, s_state#8398], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#8374, s_store_id#8375, s_rec_start_date#8376, s_rec_end_date#8377, s_closed_date_sk#8..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#13659]\n               +- *(4) Filter isnotnull(i_item_sk#8403)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#8403, i_item_id#8404], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#8403, i_item_id#8404, i_rec_start_date#8405, i_rec_end_date#8406, i_item_desc#8407, i_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q27"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 1,
    "name" : "q28"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#9029, i_item_desc#9032, s_store_id#9000, s_store_name#9004, 200), ENSURE_REQUIREMENTS, [id=#14294]\n+- *(11) HashAggregate(keys=[i_item_id#9029, i_item_desc#9032, s_store_id#9000, s_store_name#9004], functions=[partial_stddev_samp(cast(ss_quantity#8848 as double)), partial_stddev_samp(cast(sr_return_quantity#8871 as double)), partial_stddev_samp(cast(cs_quantity#8899 as double))], output=[i_item_id#9029, i_item_desc#9032, s_store_id#9000, s_store_name#9004, n#9130, avg#9131, m2#9132, n#9138, avg#9139, m2#9140, n#9146, avg#9147, m2#9148])\n   +- *(11) Project [ss_quantity#8848, sr_return_quantity#8871, cs_quantity#8899, s_store_id#9000, s_store_name#9004, i_item_id#9029, i_item_desc#9032]\n      +- *(11) BroadcastHashJoin [ss_item_sk#8840], [i_item_sk#9028], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#8840, ss_quantity#8848, sr_return_quantity#8871, cs_quantity#8899, s_store_id#9000, s_store_name#9004]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#8845], [s_store_sk#8999], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#8840, ss_store_sk#8845, ss_quantity#8848, sr_return_quantity#8871, cs_quantity#8899]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#8881], [d_date_sk#8971], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#8840, ss_store_sk#8845, ss_quantity#8848, sr_return_quantity#8871, cs_sold_date_sk#8881, cs_quantity#8899]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#8861], [d_date_sk#8943], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#8840, ss_store_sk#8845, ss_quantity#8848, sr_returned_date_sk#8861, sr_return_quantity#8871, cs_sold_date_sk#8881, cs_quantity#8899]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#8838], [d_date_sk#8915], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#8838, ss_item_sk#8840, ss_store_sk#8845, ss_quantity#8848, sr_returned_date_sk#8861, sr_return_quantity#8871, cs_sold_date_sk#8881, cs_quantity#8899]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#8864, sr_item_sk#8863], [cs_bill_customer_sk#8884, cs_item_sk#8896], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#8864 ASC NULLS FIRST, sr_item_sk#8863 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#8864, sr_item_sk#8863, 200), ENSURE_REQUIREMENTS, [id=#14239]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#8838, ss_item_sk#8840, ss_store_sk#8845, ss_quantity#8848, sr_returned_date_sk#8861, sr_item_sk#8863, sr_customer_sk#8864, sr_return_quantity#8871]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#8841, ss_item_sk#8840, ss_ticket_number#8847L], [sr_customer_sk#8864, sr_item_sk#8863, sr_ticket_number#8870L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#8841) AND isnotnull(ss_item_sk#8840)) AND isnotnull(ss_ticket_number#8847L)) AND isnotnull(ss_sold_date_sk#8838)) AND isnotnull(ss_store_sk#8845))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#8838, ss_item_sk#8840, ss_customer_sk#8841, ss_store_sk#8845, ss_ticket_number#8847L, ss_quantity#8848], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#8838, ss_sold_time_sk#8839, ss_item_sk#8840, ss_customer_sk#8841, ss_cdemo_sk#88..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#14234]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#8864) AND isnotnull(sr_item_sk#8863)) AND isnotnull(sr_ticket_number#8870L)) AND isnotnull(sr_returned_date_sk#8861))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#8861, sr_item_sk#8863, sr_customer_sk#8864, sr_ticket_number#8870L, sr_return_quantity#8871], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#8861, sr_return_time_sk#8862, sr_item_sk#8863, sr_customer_sk#8864, sr_cdemo..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#8884 ASC NULLS FIRST, cs_item_sk#8896 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#8884, cs_item_sk#8896, 200), ENSURE_REQUIREMENTS, [id=#14247]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#8884) AND isnotnull(cs_item_sk#8896)) AND isnotnull(cs_sold_date_sk#8881))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#8881, cs_bill_customer_sk#8884, cs_item_sk#8896, cs_quantity#8899], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#8881, cs_sold_time_sk#8882, cs_ship_date_sk#8883, cs_bill_customer_sk#8884, cs_b..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14258]\n         :     :     :     :        +- *(6) Project [d_date_sk#8915]\n         :     :     :     :           +- *(6) Filter ((((isnotnull(d_moy#8923) AND isnotnull(d_year#8921)) AND (d_moy#8923 = 4)) AND (d_year#8921 = 2000)) AND isnotnull(d_date_sk#8915))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#8915, d_moy#8923, d_year#8921], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#8915, d_date_id#8916, d_date#8917, d_month_seq#8918, d_week_seq#8919, d_quarter_seq#89..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14266]\n         :     :     :        +- *(7) Project [d_date_sk#8943]\n         :     :     :           +- *(7) Filter (((((isnotnull(d_moy#8951) AND isnotnull(d_year#8949)) AND (d_moy#8951 >= 4)) AND (d_moy#8951 <= 7)) AND (d_year#8949 = 2000)) AND isnotnull(d_date_sk#8943))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#8943, d_moy#8951, d_year#8949], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#8943, d_date_id#8944, d_date#8945, d_month_seq#8946, d_week_seq#8947, d_quarter_seq#89..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14274]\n         :     :        +- *(8) Project [d_date_sk#8971]\n         :     :           +- *(8) Filter (d_year#8977 IN (2000,2001,2002) AND isnotnull(d_date_sk#8971))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#8971, d_year#8977], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#8971, d_date_id#8972, d_date#8973, d_month_seq#8974, d_week_seq#8975, d_quarter_seq#89..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14281]\n         :        +- *(9) Filter isnotnull(s_store_sk#8999)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#8999, s_store_id#9000, s_store_name#9004], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#8999, s_store_id#9000, s_rec_start_date#9001, s_rec_end_date#9002, s_closed_date_sk#9..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14288]\n            +- *(10) Filter isnotnull(i_item_sk#9028)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#9028, i_item_id#9029, i_item_desc#9032], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#9028, i_item_id#9029, i_rec_start_date#9030, i_rec_end_date#9031, i_item_desc#9032, i_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q29"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#9197, i_brand#9250, i_brand_id#9249, 200), ENSURE_REQUIREMENTS, [id=#14402]\n+- *(3) HashAggregate(keys=[d_year#9197, i_brand#9250, i_brand_id#9249], functions=[partial_sum(UnscaledValue(ss_sales_price#9232))], output=[d_year#9197, i_brand#9250, i_brand_id#9249, sum#9273L])\n   +- *(3) Project [d_year#9197, ss_sales_price#9232, i_brand_id#9249, i_brand#9250]\n      +- *(3) BroadcastHashJoin [ss_item_sk#9221], [i_item_sk#9242], Inner, BuildRight, false\n         :- *(3) Project [d_year#9197, ss_item_sk#9221, ss_sales_price#9232]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#9191], [ss_sold_date_sk#9219], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14386]\n         :     :  +- *(1) Project [d_date_sk#9191, d_year#9197]\n         :     :     +- *(1) Filter ((isnotnull(d_moy#9199) AND (d_moy#9199 = 11)) AND isnotnull(d_date_sk#9191))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#9191, d_moy#9199, d_year#9197], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#9191, d_date_id#9192, d_date#9193, d_month_seq#9194, d_week_seq#9195, d_quarter_seq#91..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#9219) AND isnotnull(ss_item_sk#9221))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#9219, ss_item_sk#9221, ss_sales_price#9232], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#9219, ss_sold_time_sk#9220, ss_item_sk#9221, ss_customer_sk#9222, ss_cdemo_sk#92..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#14396]\n            +- *(2) Project [i_item_sk#9242, i_brand_id#9249, i_brand#9250]\n               +- *(2) Filter ((isnotnull(i_manufact_id#9255) AND (i_manufact_id#9255 = 816)) AND isnotnull(i_item_sk#9242))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#9250, i_brand_id#9249, i_item_sk#9242, i_manufact_id#9255], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#9242, i_item_id#9243, i_rec_start_date#9244, i_rec_end_date#9245, i_item_desc#9246, i_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q3"
  }, {
    "errorMsg" : "cannot resolve '`c_last_review_date`' given input columns: [spark_catalog.tpcds_sf1_iceberg.customer.c_birth_country, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_day, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_month, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_year, spark_catalog.tpcds_sf1_iceberg.customer.c_current_addr_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_current_cdemo_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_current_hdemo_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_customer_id, spark_catalog.tpcds_sf1_iceberg.customer.c_customer_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_email_address, spark_catalog.tpcds_sf1_iceberg.customer.c_first_name, spark_catalog.tpcds_sf1_iceberg.customer.c_first_sales_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_first_shipto_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_last_name, spark_catalog.tpcds_sf1_iceberg.customer.c_last_review_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_login, spark_catalog.tpcds_sf1_iceberg.customer.c_preferred_cust_flag, spark_catalog.tpcds_sf1_iceberg.customer.c_salutation, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_address_id, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_address_sk, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_city, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_country, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_county, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_gmt_offset, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_location_type, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_state, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_name, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_number, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_type, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_suite_number, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_zip, ctr1.ctr_customer_sk, ctr1.ctr_state, ctr1.ctr_total_return]; line 16 pos 8;\n'GlobalLimit 100\n+- 'LocalLimit 100\n   +- 'Sort ['c_customer_id ASC NULLS FIRST, 'c_salutation ASC NULLS FIRST, 'c_first_name ASC NULLS FIRST, 'c_last_name ASC NULLS FIRST, 'c_preferred_cust_flag ASC NULLS FIRST, 'c_birth_day ASC NULLS FIRST, 'c_birth_month ASC NULLS FIRST, 'c_birth_year ASC NULLS FIRST, 'c_birth_country ASC NULLS FIRST, 'c_login ASC NULLS FIRST, 'c_email_address ASC NULLS FIRST, 'c_last_review_date ASC NULLS FIRST, 'ctr_total_return ASC NULLS FIRST], true\n      +- 'Project [c_customer_id#9362, c_salutation#9368, c_first_name#9369, c_last_name#9370, c_preferred_cust_flag#9371, c_birth_day#9372, c_birth_month#9373, c_birth_year#9374, c_birth_country#9375, c_login#9376, c_email_address#9377, 'c_last_review_date, ctr_total_return#9282]\n         +- Filter (((cast(ctr_total_return#9282 as decimal(24,7)) > cast(scalar-subquery#9279 [ctr_state#9281] as decimal(24,7))) AND (ca_address_sk#9348 = c_current_addr_sk#9365)) AND ((ca_state#9356 = MI) AND (ctr_customer_sk#9280 = c_customer_sk#9361)))\n            :  +- Aggregate [CheckOverflow((promote_precision(cast(avg(ctr_total_return#9282) as decimal(21,6))) * promote_precision(cast(1.2 as decimal(21,6)))), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#9447]\n            :     +- Filter (outer(ctr_state#9281) = ctr_state#9281)\n            :        +- SubqueryAlias ctr2\n            :           +- SubqueryAlias customer_total_return\n            :              +- Aggregate [wr_returning_customer_sk#9387, ca_state#9440], [wr_returning_customer_sk#9387 AS ctr_customer_sk#9280, ca_state#9440 AS ctr_state#9281, sum(wr_return_amt#9395) AS ctr_total_return#9282]\n            :                 +- Filter (((wr_returned_date_sk#9380 = d_date_sk#9404) AND (d_year#9410 = 2001)) AND (wr_returning_addr_sk#9390 = ca_address_sk#9432))\n            :                    +- Join Inner\n            :                       :- Join Inner\n            :                       :  :- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.web_returns\n            :                       :  :  +- HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#9380, wr_returned_time_sk#9381, wr_item_sk#9382, wr_refunded_customer_sk#938..., Partition Cols: []]\n            :                       :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.date_dim\n            :                       :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#9404, d_date_id#9405, d_date#9406, d_month_seq#9407, d_week_seq#9408, d_quarter_seq#94..., Partition Cols: []]\n            :                       +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n            :                          +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#9432, ca_address_id#9433, ca_street_number#9434, ca_street_name#9435, ca_street_ty..., Partition Cols: []]\n            +- Join Inner\n               :- Join Inner\n               :  :- SubqueryAlias ctr1\n               :  :  +- SubqueryAlias customer_total_return\n               :  :     +- Aggregate [wr_returning_customer_sk#9290, ca_state#9343], [wr_returning_customer_sk#9290 AS ctr_customer_sk#9280, ca_state#9343 AS ctr_state#9281, sum(wr_return_amt#9298) AS ctr_total_return#9282]\n               :  :        +- Filter (((wr_returned_date_sk#9283 = d_date_sk#9307) AND (d_year#9313 = 2001)) AND (wr_returning_addr_sk#9293 = ca_address_sk#9335))\n               :  :           +- Join Inner\n               :  :              :- Join Inner\n               :  :              :  :- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.web_returns\n               :  :              :  :  +- HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#9283, wr_returned_time_sk#9284, wr_item_sk#9285, wr_refunded_customer_sk#928..., Partition Cols: []]\n               :  :              :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.date_dim\n               :  :              :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#9307, d_date_id#9308, d_date#9309, d_month_seq#9310, d_week_seq#9311, d_quarter_seq#93..., Partition Cols: []]\n               :  :              +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n               :  :                 +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#9335, ca_address_id#9336, ca_street_number#9337, ca_street_name#9338, ca_street_ty..., Partition Cols: []]\n               :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n               :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#9348, ca_address_id#9349, ca_street_number#9350, ca_street_name#9351, ca_street_ty..., Partition Cols: []]\n               +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer\n                  +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#9361, c_customer_id#9362, c_current_cdemo_sk#9363, c_current_hdemo_sk#9364, c_curr..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q30"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(store_q1_q2_increase#9449 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#15290]\n+- *(35) Project [ca_county#9512, d_year#9483, CheckOverflow((promote_precision(web_sales#9879) / promote_precision(web_sales#9453)), DecimalType(37,20), true) AS web_q1_q2_increase#9448, CheckOverflow((promote_precision(store_sales#9877) / promote_precision(store_sales#9452)), DecimalType(37,20), true) AS store_q1_q2_increase#9449, CheckOverflow((promote_precision(web_sales#9880) / promote_precision(web_sales#9879)), DecimalType(37,20), true) AS web_q2_q3_increase#9450, CheckOverflow((promote_precision(store_sales#9878) / promote_precision(store_sales#9877)), DecimalType(37,20), true) AS store_q2_q3_increase#9451]\n   +- *(35) SortMergeJoin [ca_county#9715], [ca_county#9865], Inner, (CASE WHEN (web_sales#9879 > 0.00) THEN CheckOverflow((promote_precision(web_sales#9880) / promote_precision(web_sales#9879)), DecimalType(37,20), true) ELSE null END > CASE WHEN (store_sales#9877 > 0.00) THEN CheckOverflow((promote_precision(store_sales#9878) / promote_precision(store_sales#9877)), DecimalType(37,20), true) ELSE null END)\n      :- *(29) Project [ca_county#9512, d_year#9483, store_sales#9452, store_sales#9877, store_sales#9878, ca_county#9715, web_sales#9453, web_sales#9879]\n      :  +- *(29) SortMergeJoin [ca_county#9715], [ca_county#9790], Inner, (CASE WHEN (web_sales#9453 > 0.00) THEN CheckOverflow((promote_precision(web_sales#9879) / promote_precision(web_sales#9453)), DecimalType(37,20), true) ELSE null END > CASE WHEN (store_sales#9452 > 0.00) THEN CheckOverflow((promote_precision(store_sales#9877) / promote_precision(store_sales#9452)), DecimalType(37,20), true) ELSE null END)\n      :     :- *(23) SortMergeJoin [ca_county#9512], [ca_county#9715], Inner\n      :     :  :- *(17) Project [ca_county#9512, d_year#9483, store_sales#9452, store_sales#9877, store_sales#9878]\n      :     :  :  +- *(17) SortMergeJoin [ca_county#9576], [ca_county#9640], Inner\n      :     :  :     :- *(11) SortMergeJoin [ca_county#9512], [ca_county#9576], Inner\n      :     :  :     :  :- *(5) Sort [ca_county#9512 ASC NULLS FIRST], false, 0\n      :     :  :     :  :  +- Exchange hashpartitioning(ca_county#9512, 200), ENSURE_REQUIREMENTS, [id=#14809]\n      :     :  :     :  :     +- *(4) HashAggregate(keys=[ca_county#9512, d_qoy#9487, d_year#9483], functions=[sum(UnscaledValue(ss_ext_sales_price#9469))], output=[ca_county#9512, d_year#9483, store_sales#9452])\n      :     :  :     :  :        +- Exchange hashpartitioning(ca_county#9512, d_qoy#9487, d_year#9483, 200), ENSURE_REQUIREMENTS, [id=#14805]\n      :     :  :     :  :           +- *(3) HashAggregate(keys=[ca_county#9512, d_qoy#9487, d_year#9483], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#9469))], output=[ca_county#9512, d_qoy#9487, d_year#9483, sum#9888L])\n      :     :  :     :  :              +- *(3) Project [ss_ext_sales_price#9469, d_year#9483, d_qoy#9487, ca_county#9512]\n      :     :  :     :  :                 +- *(3) BroadcastHashJoin [ss_addr_sk#9460], [ca_address_sk#9505], Inner, BuildRight, false\n      :     :  :     :  :                    :- *(3) Project [ss_addr_sk#9460, ss_ext_sales_price#9469, d_year#9483, d_qoy#9487]\n      :     :  :     :  :                    :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#9454], [d_date_sk#9477], Inner, BuildRight, false\n      :     :  :     :  :                    :     :- *(3) Filter (isnotnull(ss_sold_date_sk#9454) AND isnotnull(ss_addr_sk#9460))\n      :     :  :     :  :                    :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#9454, ss_addr_sk#9460, ss_ext_sales_price#9469], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#9454, ss_sold_time_sk#9455, ss_item_sk#9456, ss_customer_sk#9457, ss_cdemo_sk#94..., Partition Cols: []]\n      :     :  :     :  :                    :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14792]\n      :     :  :     :  :                    :        +- *(1) Filter ((((isnotnull(d_qoy#9487) AND isnotnull(d_year#9483)) AND (d_qoy#9487 = 1)) AND (d_year#9483 = 2000)) AND isnotnull(d_date_sk#9477))\n      :     :  :     :  :                    :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#9477, d_year#9483, d_qoy#9487], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#9477, d_date_id#9478, d_date#9479, d_month_seq#9480, d_week_seq#9481, d_quarter_seq#94..., Partition Cols: []]\n      :     :  :     :  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14799]\n      :     :  :     :  :                       +- *(2) Filter (isnotnull(ca_address_sk#9505) AND isnotnull(ca_county#9512))\n      :     :  :     :  :                          +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#9505, ca_county#9512], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#9505, ca_address_id#9506, ca_street_number#9507, ca_street_name#9508, ca_street_ty..., Partition Cols: []]\n      :     :  :     :  +- *(10) Sort [ca_county#9576 ASC NULLS FIRST], false, 0\n      :     :  :     :     +- Exchange hashpartitioning(ca_county#9576, 200), ENSURE_REQUIREMENTS, [id=#15042]\n      :     :  :     :        +- *(9) HashAggregate(keys=[ca_county#9576, d_qoy#9551, d_year#9547], functions=[sum(UnscaledValue(ss_ext_sales_price#9533))], output=[ca_county#9576, store_sales#9877])\n      :     :  :     :           +- Exchange hashpartitioning(ca_county#9576, d_qoy#9551, d_year#9547, 200), ENSURE_REQUIREMENTS, [id=#15000]\n      :     :  :     :              +- *(8) HashAggregate(keys=[ca_county#9576, d_qoy#9551, d_year#9547], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#9533))], output=[ca_county#9576, d_qoy#9551, d_year#9547, sum#9890L])\n      :     :  :     :                 +- *(8) Project [ss_ext_sales_price#9533, d_year#9547, d_qoy#9551, ca_county#9576]\n      :     :  :     :                    +- *(8) BroadcastHashJoin [ss_addr_sk#9524], [ca_address_sk#9569], Inner, BuildRight, false\n      :     :  :     :                       :- *(8) Project [ss_addr_sk#9524, ss_ext_sales_price#9533, d_year#9547, d_qoy#9551]\n      :     :  :     :                       :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#9518], [d_date_sk#9541], Inner, BuildRight, false\n      :     :  :     :                       :     :- *(8) Filter (isnotnull(ss_sold_date_sk#9518) AND isnotnull(ss_addr_sk#9524))\n      :     :  :     :                       :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#9518, ss_addr_sk#9524, ss_ext_sales_price#9533], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#9518, ss_sold_time_sk#9519, ss_item_sk#9520, ss_customer_sk#9521, ss_cdemo_sk#95..., Partition Cols: []]\n      :     :  :     :                       :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14819]\n      :     :  :     :                       :        +- *(6) Filter ((((isnotnull(d_qoy#9551) AND isnotnull(d_year#9547)) AND (d_qoy#9551 = 2)) AND (d_year#9547 = 2000)) AND isnotnull(d_date_sk#9541))\n      :     :  :     :                       :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#9541, d_year#9547, d_qoy#9551], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#9541, d_date_id#9542, d_date#9543, d_month_seq#9544, d_week_seq#9545, d_quarter_seq#95..., Partition Cols: []]\n      :     :  :     :                       +- ReusedExchange [ca_address_sk#9569, ca_county#9576], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14799]\n      :     :  :     +- *(16) Sort [ca_county#9640 ASC NULLS FIRST], false, 0\n      :     :  :        +- Exchange hashpartitioning(ca_county#9640, 200), ENSURE_REQUIREMENTS, [id=#15091]\n      :     :  :           +- *(15) HashAggregate(keys=[ca_county#9640, d_qoy#9615, d_year#9611], functions=[sum(UnscaledValue(ss_ext_sales_price#9597))], output=[ca_county#9640, store_sales#9878])\n      :     :  :              +- Exchange hashpartitioning(ca_county#9640, d_qoy#9615, d_year#9611, 200), ENSURE_REQUIREMENTS, [id=#15068]\n      :     :  :                 +- *(14) HashAggregate(keys=[ca_county#9640, d_qoy#9615, d_year#9611], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#9597))], output=[ca_county#9640, d_qoy#9615, d_year#9611, sum#9892L])\n      :     :  :                    +- *(14) Project [ss_ext_sales_price#9597, d_year#9611, d_qoy#9615, ca_county#9640]\n      :     :  :                       +- *(14) BroadcastHashJoin [ss_addr_sk#9588], [ca_address_sk#9633], Inner, BuildRight, false\n      :     :  :                          :- *(14) Project [ss_addr_sk#9588, ss_ext_sales_price#9597, d_year#9611, d_qoy#9615]\n      :     :  :                          :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#9582], [d_date_sk#9605], Inner, BuildRight, false\n      :     :  :                          :     :- *(14) Filter (isnotnull(ss_sold_date_sk#9582) AND isnotnull(ss_addr_sk#9588))\n      :     :  :                          :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#9582, ss_addr_sk#9588, ss_ext_sales_price#9597], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#9582, ss_sold_time_sk#9583, ss_item_sk#9584, ss_customer_sk#9585, ss_cdemo_sk#95..., Partition Cols: []]\n      :     :  :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14849]\n      :     :  :                          :        +- *(12) Filter ((((isnotnull(d_qoy#9615) AND isnotnull(d_year#9611)) AND (d_qoy#9615 = 3)) AND (d_year#9611 = 2000)) AND isnotnull(d_date_sk#9605))\n      :     :  :                          :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#9605, d_year#9611, d_qoy#9615], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#9605, d_date_id#9606, d_date#9607, d_month_seq#9608, d_week_seq#9609, d_quarter_seq#96..., Partition Cols: []]\n      :     :  :                          +- ReusedExchange [ca_address_sk#9633, ca_county#9640], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14799]\n      :     :  +- *(22) Sort [ca_county#9715 ASC NULLS FIRST], false, 0\n      :     :     +- Exchange hashpartitioning(ca_county#9715, 200), ENSURE_REQUIREMENTS, [id=#15157]\n      :     :        +- *(21) HashAggregate(keys=[ca_county#9715, d_qoy#9690, d_year#9686], functions=[sum(UnscaledValue(ws_ext_sales_price#9669))], output=[ca_county#9715, web_sales#9453])\n      :     :           +- Exchange hashpartitioning(ca_county#9715, d_qoy#9690, d_year#9686, 200), ENSURE_REQUIREMENTS, [id=#15134]\n      :     :              +- *(20) HashAggregate(keys=[ca_county#9715, d_qoy#9690, d_year#9686], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#9669))], output=[ca_county#9715, d_qoy#9690, d_year#9686, sum#9894L])\n      :     :                 +- *(20) Project [ws_ext_sales_price#9669, d_year#9686, d_qoy#9690, ca_county#9715]\n      :     :                    +- *(20) BroadcastHashJoin [ws_bill_addr_sk#9653], [ca_address_sk#9708], Inner, BuildRight, false\n      :     :                       :- *(20) Project [ws_bill_addr_sk#9653, ws_ext_sales_price#9669, d_year#9686, d_qoy#9690]\n      :     :                       :  +- *(20) BroadcastHashJoin [ws_sold_date_sk#9646], [d_date_sk#9680], Inner, BuildRight, false\n      :     :                       :     :- *(20) Filter (isnotnull(ws_sold_date_sk#9646) AND isnotnull(ws_bill_addr_sk#9653))\n      :     :                       :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#9646, ws_bill_addr_sk#9653, ws_ext_sales_price#9669], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#9646, ws_sold_time_sk#9647, ws_ship_date_sk#9648, ws_item_sk#9649, ws_bill_custo..., Partition Cols: []]\n      :     :                       :     +- ReusedExchange [d_date_sk#9680, d_year#9686, d_qoy#9690], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14792]\n      :     :                       +- ReusedExchange [ca_address_sk#9708, ca_county#9715], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14799]\n      :     +- *(28) Sort [ca_county#9790 ASC NULLS FIRST], false, 0\n      :        +- Exchange hashpartitioning(ca_county#9790, 200), ENSURE_REQUIREMENTS, [id=#15210]\n      :           +- *(27) HashAggregate(keys=[ca_county#9790, d_qoy#9765, d_year#9761], functions=[sum(UnscaledValue(ws_ext_sales_price#9744))], output=[ca_county#9790, web_sales#9879])\n      :              +- Exchange hashpartitioning(ca_county#9790, d_qoy#9765, d_year#9761, 200), ENSURE_REQUIREMENTS, [id=#15187]\n      :                 +- *(26) HashAggregate(keys=[ca_county#9790, d_qoy#9765, d_year#9761], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#9744))], output=[ca_county#9790, d_qoy#9765, d_year#9761, sum#9896L])\n      :                    +- *(26) Project [ws_ext_sales_price#9744, d_year#9761, d_qoy#9765, ca_county#9790]\n      :                       +- *(26) BroadcastHashJoin [ws_bill_addr_sk#9728], [ca_address_sk#9783], Inner, BuildRight, false\n      :                          :- *(26) Project [ws_bill_addr_sk#9728, ws_ext_sales_price#9744, d_year#9761, d_qoy#9765]\n      :                          :  +- *(26) BroadcastHashJoin [ws_sold_date_sk#9721], [d_date_sk#9755], Inner, BuildRight, false\n      :                          :     :- *(26) Filter (isnotnull(ws_sold_date_sk#9721) AND isnotnull(ws_bill_addr_sk#9728))\n      :                          :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#9721, ws_bill_addr_sk#9728, ws_ext_sales_price#9744], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#9721, ws_sold_time_sk#9722, ws_ship_date_sk#9723, ws_item_sk#9724, ws_bill_custo..., Partition Cols: []]\n      :                          :     +- ReusedExchange [d_date_sk#9755, d_year#9761, d_qoy#9765], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14819]\n      :                          +- ReusedExchange [ca_address_sk#9783, ca_county#9790], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14799]\n      +- *(34) Sort [ca_county#9865 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(ca_county#9865, 200), ENSURE_REQUIREMENTS, [id=#15276]\n            +- *(33) HashAggregate(keys=[ca_county#9865, d_qoy#9840, d_year#9836], functions=[sum(UnscaledValue(ws_ext_sales_price#9819))], output=[ca_county#9865, web_sales#9880])\n               +- Exchange hashpartitioning(ca_county#9865, d_qoy#9840, d_year#9836, 200), ENSURE_REQUIREMENTS, [id=#15253]\n                  +- *(32) HashAggregate(keys=[ca_county#9865, d_qoy#9840, d_year#9836], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#9819))], output=[ca_county#9865, d_qoy#9840, d_year#9836, sum#9898L])\n                     +- *(32) Project [ws_ext_sales_price#9819, d_year#9836, d_qoy#9840, ca_county#9865]\n                        +- *(32) BroadcastHashJoin [ws_bill_addr_sk#9803], [ca_address_sk#9858], Inner, BuildRight, false\n                           :- *(32) Project [ws_bill_addr_sk#9803, ws_ext_sales_price#9819, d_year#9836, d_qoy#9840]\n                           :  +- *(32) BroadcastHashJoin [ws_sold_date_sk#9796], [d_date_sk#9830], Inner, BuildRight, false\n                           :     :- *(32) Filter (isnotnull(ws_sold_date_sk#9796) AND isnotnull(ws_bill_addr_sk#9803))\n                           :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#9796, ws_bill_addr_sk#9803, ws_ext_sales_price#9819], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#9796, ws_sold_time_sk#9797, ws_ship_date_sk#9798, ws_item_sk#9799, ws_bill_custo..., Partition Cols: []]\n                           :     +- ReusedExchange [d_date_sk#9830, d_year#9836, d_qoy#9840], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14849]\n                           +- ReusedExchange [ca_address_sk#9858, ca_county#9865], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#14799]\n",
    "iteration" : 1,
    "name" : "q31"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#15478]\n+- *(8) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(cs_ext_discount_amt#9946))], output=[sum#10075L])\n   +- *(8) Project [cs_ext_discount_amt#9946]\n      +- *(8) BroadcastHashJoin [cs_sold_date_sk#9924], [d_date_sk#9980], Inner, BuildRight, false\n         :- *(8) Project [cs_sold_date_sk#9924, cs_ext_discount_amt#9946]\n         :  +- *(8) SortMergeJoin [i_item_sk#9958], [cs_item_sk#10023], Inner, (cast(cs_ext_discount_amt#9946 as decimal(14,7)) > (CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#10071)\n         :     :- *(3) Sort [i_item_sk#9958 ASC NULLS FIRST], false, 0\n         :     :  +- Exchange hashpartitioning(i_item_sk#9958, 200), ENSURE_REQUIREMENTS, [id=#15416]\n         :     :     +- *(2) Project [cs_sold_date_sk#9924, cs_ext_discount_amt#9946, i_item_sk#9958]\n         :     :        +- *(2) BroadcastHashJoin [cs_item_sk#9939], [i_item_sk#9958], Inner, BuildRight, false\n         :     :           :- *(2) Filter ((isnotnull(cs_item_sk#9939) AND isnotnull(cs_ext_discount_amt#9946)) AND isnotnull(cs_sold_date_sk#9924))\n         :     :           :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#9924, cs_item_sk#9939, cs_ext_discount_amt#9946], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#9924, cs_sold_time_sk#9925, cs_ship_date_sk#9926, cs_bill_customer_sk#9927, cs_b..., Partition Cols: []]\n         :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15411]\n         :     :              +- *(1) Project [i_item_sk#9958]\n         :     :                 +- *(1) Filter ((isnotnull(i_manufact_id#9971) AND (i_manufact_id#9971 = 490)) AND isnotnull(i_item_sk#9958))\n         :     :                    +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#9958, i_manufact_id#9971], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#9958, i_item_id#9959, i_rec_start_date#9960, i_rec_end_date#9961, i_item_desc#9962, i_..., Partition Cols: []]\n         :     +- *(6) Sort [cs_item_sk#10023 ASC NULLS FIRST], false, 0\n         :        +- *(6) Filter isnotnull((CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#10071)\n         :           +- *(6) HashAggregate(keys=[cs_item_sk#10023], functions=[avg(UnscaledValue(cs_ext_discount_amt#10030))], output=[(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#10071, cs_item_sk#10023])\n         :              +- Exchange hashpartitioning(cs_item_sk#10023, 200), ENSURE_REQUIREMENTS, [id=#15433]\n         :                 +- *(5) HashAggregate(keys=[cs_item_sk#10023], functions=[partial_avg(UnscaledValue(cs_ext_discount_amt#10030))], output=[cs_item_sk#10023, sum#10078, count#10079L])\n         :                    +- *(5) Project [cs_item_sk#10023, cs_ext_discount_amt#10030]\n         :                       +- *(5) BroadcastHashJoin [cs_sold_date_sk#10008], [d_date_sk#10042], Inner, BuildRight, false\n         :                          :- *(5) Filter (isnotnull(cs_sold_date_sk#10008) AND isnotnull(cs_item_sk#10023))\n         :                          :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#10008, cs_item_sk#10023, cs_ext_discount_amt#10030], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#10008, cs_sold_time_sk#10009, cs_ship_date_sk#10010, cs_bill_customer_sk#10011, ..., Partition Cols: []]\n         :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15427]\n         :                             +- *(4) Project [d_date_sk#10042]\n         :                                +- *(4) Filter (((isnotnull(d_date#10044) AND (d_date#10044 >= 10618)) AND (d_date#10044 <= 10708)) AND isnotnull(d_date_sk#10042))\n         :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#10044, d_date_sk#10042], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#10042, d_date_id#10043, d_date#10044, d_month_seq#10045, d_week_seq#10046, d_quarter_s..., Partition Cols: []]\n         +- ReusedExchange [d_date_sk#9980], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15427]\n",
    "iteration" : 1,
    "name" : "q32"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manufact_id#10166, 200), ENSURE_REQUIREMENTS, [id=#16109]\n+- *(19) HashAggregate(keys=[i_manufact_id#10166], functions=[partial_sum(total_sales#10084)], output=[i_manufact_id#10166, sum#10444, isEmpty#10445])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_manufact_id#10166], functions=[sum(UnscaledValue(ss_ext_sales_price#10104))], output=[i_manufact_id#10166, total_sales#10084])\n      :  +- Exchange hashpartitioning(i_manufact_id#10166, 200), ENSURE_REQUIREMENTS, [id=#15799]\n      :     +- *(5) HashAggregate(keys=[i_manufact_id#10166], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#10104))], output=[i_manufact_id#10166, sum#10447L])\n      :        +- *(5) Project [ss_ext_sales_price#10104, i_manufact_id#10166]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#10091], [i_item_sk#10153], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#10091, ss_ext_sales_price#10104]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#10095], [ca_address_sk#10140], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#10091, ss_addr_sk#10095, ss_ext_sales_price#10104]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#10089], [d_date_sk#10112], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#10089) AND isnotnull(ss_addr_sk#10095)) AND isnotnull(ss_item_sk#10091))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#10089, ss_item_sk#10091, ss_addr_sk#10095, ss_ext_sales_price#10104], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#10089, ss_sold_time_sk#10090, ss_item_sk#10091, ss_customer_sk#10092, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15771]\n      :              :     :        +- *(1) Project [d_date_sk#10112]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#10118) AND isnotnull(d_moy#10120)) AND (d_year#10118 = 2001)) AND (d_moy#10120 = 1)) AND isnotnull(d_date_sk#10112))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#10112, d_moy#10120, d_year#10118], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#10112, d_date_id#10113, d_date#10114, d_month_seq#10115, d_week_seq#10116, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15779]\n      :              :        +- *(2) Project [ca_address_sk#10140]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#10151) AND (ca_gmt_offset#10151 = -6.00)) AND isnotnull(ca_address_sk#10140))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#10140, ca_gmt_offset#10151], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#10140, ca_address_id#10141, ca_street_number#10142, ca_street_name#10143, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15793]\n      :                 +- *(4) BroadcastHashJoin [i_manufact_id#10166], [i_manufact_id#10382], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#10153)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#10153, i_manufact_id#10166], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#10153, i_item_id#10154, i_rec_start_date#10155, i_rec_end_date#10156, i_item_desc#1015..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15789]\n      :                       +- *(3) Project [i_manufact_id#10382]\n      :                          +- *(3) Filter (isnotnull(i_category#10381) AND (i_category#10381 = Electronics))\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_category#10381, i_manufact_id#10382], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#10369, i_item_id#10370, i_rec_start_date#10371, i_rec_end_date#10372, i_item_desc#1037..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_manufact_id#10263], functions=[sum(UnscaledValue(cs_ext_sales_price#10198))], output=[i_manufact_id#10263, total_sales#10086])\n      :  +- Exchange hashpartitioning(i_manufact_id#10263, 200), ENSURE_REQUIREMENTS, [id=#15973]\n      :     +- *(11) HashAggregate(keys=[i_manufact_id#10263], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#10198))], output=[i_manufact_id#10263, sum#10449L])\n      :        +- *(11) Project [cs_ext_sales_price#10198, i_manufact_id#10263]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#10190], [i_item_sk#10250], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#10190, cs_ext_sales_price#10198]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#10181], [ca_address_sk#10237], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#10181, cs_item_sk#10190, cs_ext_sales_price#10198]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#10175], [d_date_sk#10209], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#10175) AND isnotnull(cs_bill_addr_sk#10181)) AND isnotnull(cs_item_sk#10190))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#10175, cs_bill_addr_sk#10181, cs_item_sk#10190, cs_ext_sales_price#10198], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#10175, cs_sold_time_sk#10176, cs_ship_date_sk#10177, cs_bill_customer_sk#10178, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#10209], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15771]\n      :              :     +- ReusedExchange [ca_address_sk#10237], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15779]\n      :              +- ReusedExchange [i_item_sk#10250, i_manufact_id#10263], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15793]\n      +- *(18) HashAggregate(keys=[i_manufact_id#10360], functions=[sum(UnscaledValue(ws_ext_sales_price#10295))], output=[i_manufact_id#10360, total_sales#10088])\n         +- Exchange hashpartitioning(i_manufact_id#10360, 200), ENSURE_REQUIREMENTS, [id=#16077]\n            +- *(17) HashAggregate(keys=[i_manufact_id#10360], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#10295))], output=[i_manufact_id#10360, sum#10451L])\n               +- *(17) Project [ws_ext_sales_price#10295, i_manufact_id#10360]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#10275], [i_item_sk#10347], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#10275, ws_ext_sales_price#10295]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#10279], [ca_address_sk#10334], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#10275, ws_bill_addr_sk#10279, ws_ext_sales_price#10295]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#10272], [d_date_sk#10306], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#10272) AND isnotnull(ws_bill_addr_sk#10279)) AND isnotnull(ws_item_sk#10275))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#10272, ws_item_sk#10275, ws_bill_addr_sk#10279, ws_ext_sales_price#10295], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#10272, ws_sold_time_sk#10273, ws_ship_date_sk#10274, ws_item_sk#10275, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#10306], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15771]\n                     :     +- ReusedExchange [ca_address_sk#10334], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#15779]\n                     +- ReusedExchange [i_item_sk#10347, i_manufact_id#10360], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#15793]\n",
    "iteration" : 1,
    "name" : "q33"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(c_last_name#10554 ASC NULLS FIRST, c_first_name#10553 ASC NULLS FIRST, c_salutation#10552 ASC NULLS FIRST, c_preferred_cust_flag#10555 DESC NULLS LAST, ss_ticket_number#10469L ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#16259]\n+- *(6) Project [c_last_name#10554, c_first_name#10553, c_salutation#10552, c_preferred_cust_flag#10555, ss_ticket_number#10469L, cnt#10458L]\n   +- *(6) BroadcastHashJoin [ss_customer_sk#10463], [c_customer_sk#10545], Inner, BuildRight, false\n      :- *(6) Filter ((cnt#10458L >= 15) AND (cnt#10458L <= 20))\n      :  +- *(6) HashAggregate(keys=[ss_ticket_number#10469L, ss_customer_sk#10463], functions=[count(1)], output=[ss_ticket_number#10469L, ss_customer_sk#10463, cnt#10458L])\n      :     +- Exchange hashpartitioning(ss_ticket_number#10469L, ss_customer_sk#10463, 200), ENSURE_REQUIREMENTS, [id=#16247]\n      :        +- *(4) HashAggregate(keys=[ss_ticket_number#10469L, ss_customer_sk#10463], functions=[partial_count(1)], output=[ss_ticket_number#10469L, ss_customer_sk#10463, count#10570L])\n      :           +- *(4) Project [ss_customer_sk#10463, ss_ticket_number#10469L]\n      :              +- *(4) BroadcastHashJoin [ss_hdemo_sk#10465], [hd_demo_sk#10540], Inner, BuildRight, false\n      :                 :- *(4) Project [ss_customer_sk#10463, ss_hdemo_sk#10465, ss_ticket_number#10469L]\n      :                 :  +- *(4) BroadcastHashJoin [ss_store_sk#10467], [s_store_sk#10511], Inner, BuildRight, false\n      :                 :     :- *(4) Project [ss_customer_sk#10463, ss_hdemo_sk#10465, ss_store_sk#10467, ss_ticket_number#10469L]\n      :                 :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#10460], [d_date_sk#10483], Inner, BuildRight, false\n      :                 :     :     :- *(4) Filter (((isnotnull(ss_sold_date_sk#10460) AND isnotnull(ss_store_sk#10467)) AND isnotnull(ss_hdemo_sk#10465)) AND isnotnull(ss_customer_sk#10463))\n      :                 :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#10460, ss_customer_sk#10463, ss_hdemo_sk#10465, ss_store_sk#10467, ss_ticket_number#10469L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#10460, ss_sold_time_sk#10461, ss_item_sk#10462, ss_customer_sk#10463, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16225]\n      :                 :     :        +- *(1) Project [d_date_sk#10483]\n      :                 :     :           +- *(1) Filter (((((d_dom#10492 >= 1) AND (d_dom#10492 <= 3)) OR ((d_dom#10492 >= 25) AND (d_dom#10492 <= 28))) AND d_year#10489 IN (1999,2000,2001)) AND isnotnull(d_date_sk#10483))\n      :                 :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#10483, d_dom#10492, d_year#10489], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#10483, d_date_id#10484, d_date#10485, d_month_seq#10486, d_week_seq#10487, d_quarter_s..., Partition Cols: []]\n      :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16233]\n      :                 :        +- *(2) Project [s_store_sk#10511]\n      :                 :           +- *(2) Filter (s_county#10534 IN (Nez Perce County,Murray County,Surry County,Calhoun County,Wilkinson County,Brown County,Wallace County,Carter County) AND isnotnull(s_store_sk#10511))\n      :                 :              +- Scan hive tpcds_sf1_iceberg.store [s_county#10534, s_store_sk#10511], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#10511, s_store_id#10512, s_rec_start_date#10513, s_rec_end_date#10514, s_closed_date_..., Partition Cols: []]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16241]\n      :                    +- *(3) Project [hd_demo_sk#10540]\n      :                       +- *(3) Filter ((((isnotnull(hd_vehicle_count#10544) AND ((hd_buy_potential#10542 = 1001-5000) OR (hd_buy_potential#10542 = Unknown))) AND (hd_vehicle_count#10544 > 0)) AND (CASE WHEN (hd_vehicle_count#10544 > 0) THEN (cast(hd_dep_count#10543 as double) / cast(hd_vehicle_count#10544 as double)) ELSE null END > 1.2)) AND isnotnull(hd_demo_sk#10540))\n      :                          +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#10542, hd_demo_sk#10540, hd_dep_count#10543, hd_vehicle_count#10544], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#10540, hd_income_band_sk#10541, hd_buy_potential#10542, hd_dep_count#10543, hd_vehicl..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16254]\n         +- *(5) Filter isnotnull(c_customer_sk#10545)\n            +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#10545, c_salutation#10552, c_first_name#10553, c_last_name#10554, c_preferred_cust_flag#10555], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#10545, c_customer_id#10546, c_current_cdemo_sk#10547, c_current_hdemo_sk#10548, c_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q34"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_state#10613, cd_gender#10619, cd_marital_status#10620, cd_dep_count#10624, cd_dep_employed_count#10625, cd_dep_college_count#10626, 200), ENSURE_REQUIREMENTS, [id=#16565]\n+- *(14) HashAggregate(keys=[ca_state#10613, cd_gender#10619, cd_marital_status#10620, cd_dep_count#10624, cd_dep_employed_count#10625, cd_dep_college_count#10626], functions=[partial_count(1), partial_stddev_samp(cast(cd_dep_count#10624 as double)), partial_sum(cast(cd_dep_count#10624 as bigint)), partial_min(cd_dep_count#10624), partial_stddev_samp(cast(cd_dep_employed_count#10625 as double)), partial_sum(cast(cd_dep_employed_count#10625 as bigint)), partial_min(cd_dep_employed_count#10625), partial_stddev_samp(cast(cd_dep_college_count#10626 as double)), partial_sum(cast(cd_dep_college_count#10626 as bigint)), partial_min(cd_dep_college_count#10626)], output=[ca_state#10613, cd_gender#10619, cd_marital_status#10620, cd_dep_count#10624, cd_dep_employed_count#10625, cd_dep_college_count#10626, count#11013L, n#10943, avg#10944, m2#10945, sum#11014L, min#11015, n#10951, avg#10952, m2#10953, sum#11016L, min#11017, n#10959, avg#10960, m2#10961, sum#11018L, min#11019])\n   +- *(14) Project [ca_state#10613, cd_gender#10619, cd_marital_status#10620, cd_dep_count#10624, cd_dep_employed_count#10625, cd_dep_college_count#10626]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#10589], [cd_demo_sk#10618], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#10589, ca_state#10613]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#10591], [ca_address_sk#10605], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#10589, c_current_addr_sk#10591]\n         :     :  +- *(14) Filter (exists#10980 OR exists#10981)\n         :     :     +- SortMergeJoin [c_customer_sk#10587], [cs_ship_customer_sk#10747], ExistenceJoin(exists#10981)\n         :     :        :- SortMergeJoin [c_customer_sk#10587], [ws_bill_customer_sk#10682], ExistenceJoin(exists#10980)\n         :     :        :  :- SortMergeJoin [c_customer_sk#10587], [ss_customer_sk#10630], LeftSemi\n         :     :        :  :  :- *(2) Sort [c_customer_sk#10587 ASC NULLS FIRST], false, 0\n         :     :        :  :  :  +- Exchange hashpartitioning(c_customer_sk#10587, 200), ENSURE_REQUIREMENTS, [id=#16436]\n         :     :        :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#10591) AND isnotnull(c_current_cdemo_sk#10589))\n         :     :        :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#10587, c_current_cdemo_sk#10589, c_current_addr_sk#10591], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#10587, c_customer_id#10588, c_current_cdemo_sk#10589, c_current_hdemo_sk#10590, c_..., Partition Cols: []]\n         :     :        :  :  +- *(5) Sort [ss_customer_sk#10630 ASC NULLS FIRST], false, 0\n         :     :        :  :     +- Exchange hashpartitioning(ss_customer_sk#10630, 200), ENSURE_REQUIREMENTS, [id=#16451]\n         :     :        :  :        +- *(4) Project [ss_customer_sk#10630]\n         :     :        :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#10627], [d_date_sk#10650], Inner, BuildRight, false\n         :     :        :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#10627)\n         :     :        :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#10627, ss_customer_sk#10630], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#10627, ss_sold_time_sk#10628, ss_item_sk#10629, ss_customer_sk#10630, ss_cdemo_s..., Partition Cols: []]\n         :     :        :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16446]\n         :     :        :  :                 +- *(3) Project [d_date_sk#10650]\n         :     :        :  :                    +- *(3) Filter ((((isnotnull(d_year#10656) AND isnotnull(d_qoy#10660)) AND (d_year#10656 = 2002)) AND (d_qoy#10660 < 4)) AND isnotnull(d_date_sk#10650))\n         :     :        :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#10650, d_qoy#10660, d_year#10656], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#10650, d_date_id#10651, d_date#10652, d_month_seq#10653, d_week_seq#10654, d_quarter_s..., Partition Cols: []]\n         :     :        :  +- *(8) Sort [ws_bill_customer_sk#10682 ASC NULLS FIRST], false, 0\n         :     :        :     +- Exchange hashpartitioning(ws_bill_customer_sk#10682, 200), ENSURE_REQUIREMENTS, [id=#16533]\n         :     :        :        +- *(7) Project [ws_bill_customer_sk#10682]\n         :     :        :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#10678], [d_date_sk#10712], Inner, BuildRight, false\n         :     :        :              :- *(7) Filter isnotnull(ws_sold_date_sk#10678)\n         :     :        :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#10678, ws_bill_customer_sk#10682], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#10678, ws_sold_time_sk#10679, ws_ship_date_sk#10680, ws_item_sk#10681, ws_bill_c..., Partition Cols: []]\n         :     :        :              +- ReusedExchange [d_date_sk#10712], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16446]\n         :     :        +- *(11) Sort [cs_ship_customer_sk#10747 ASC NULLS FIRST], false, 0\n         :     :           +- Exchange hashpartitioning(cs_ship_customer_sk#10747, 200), ENSURE_REQUIREMENTS, [id=#16551]\n         :     :              +- *(10) Project [cs_ship_customer_sk#10747]\n         :     :                 +- *(10) BroadcastHashJoin [cs_sold_date_sk#10740], [d_date_sk#10774], Inner, BuildRight, false\n         :     :                    :- *(10) Filter isnotnull(cs_sold_date_sk#10740)\n         :     :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#10740, cs_ship_customer_sk#10747], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#10740, cs_sold_time_sk#10741, cs_ship_date_sk#10742, cs_bill_customer_sk#10743, ..., Partition Cols: []]\n         :     :                    +- ReusedExchange [d_date_sk#10774], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16446]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16494]\n         :        +- *(12) Filter isnotnull(ca_address_sk#10605)\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#10605, ca_state#10613], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#10605, ca_address_id#10606, ca_street_number#10607, ca_street_name#10608, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16501]\n            +- *(13) Filter isnotnull(cd_demo_sk#10618)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#10618, cd_gender#10619, cd_marital_status#10620, cd_dep_count#10624, cd_dep_employed_count#10625, cd_dep_college_count#10626], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#10618, cd_gender#10619, cd_marital_status#10620, cd_education_status#10621, cd_purcha..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q35"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#11167, _w2#11168, 200), ENSURE_REQUIREMENTS, [id=#16697]\n+- *(5) HashAggregate(keys=[i_category#11153, i_class#11154, spark_grouping_id#11152L], functions=[sum(UnscaledValue(ss_net_profit#11066)), sum(UnscaledValue(ss_ext_sales_price#11059))], output=[gross_margin#11039, i_category#11153, i_class#11154, lochierarchy#11040, _w1#11167, _w2#11168, _w3#11169])\n   +- Exchange hashpartitioning(i_category#11153, i_class#11154, spark_grouping_id#11152L, 200), ENSURE_REQUIREMENTS, [id=#16693]\n      +- *(4) HashAggregate(keys=[i_category#11153, i_class#11154, spark_grouping_id#11152L], functions=[partial_sum(UnscaledValue(ss_net_profit#11066)), partial_sum(UnscaledValue(ss_ext_sales_price#11059))], output=[i_category#11153, i_class#11154, spark_grouping_id#11152L, sum#11186L, sum#11187L])\n         +- *(4) Expand [List(ss_ext_sales_price#11059, ss_net_profit#11066, i_category#11107, i_class#11105, 0), List(ss_ext_sales_price#11059, ss_net_profit#11066, i_category#11107, null, 1), List(ss_ext_sales_price#11059, ss_net_profit#11066, null, null, 3)], [ss_ext_sales_price#11059, ss_net_profit#11066, i_category#11153, i_class#11154, spark_grouping_id#11152L]\n            +- *(4) Project [ss_ext_sales_price#11059, ss_net_profit#11066, i_category#11107, i_class#11105]\n               +- *(4) BroadcastHashJoin [ss_store_sk#11051], [s_store_sk#11117], Inner, BuildRight, false\n                  :- *(4) Project [ss_store_sk#11051, ss_ext_sales_price#11059, ss_net_profit#11066, i_class#11105, i_category#11107]\n                  :  +- *(4) BroadcastHashJoin [ss_item_sk#11046], [i_item_sk#11095], Inner, BuildRight, false\n                  :     :- *(4) Project [ss_item_sk#11046, ss_store_sk#11051, ss_ext_sales_price#11059, ss_net_profit#11066]\n                  :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#11044], [d_date_sk#11067], Inner, BuildRight, false\n                  :     :     :- *(4) Filter ((isnotnull(ss_sold_date_sk#11044) AND isnotnull(ss_item_sk#11046)) AND isnotnull(ss_store_sk#11051))\n                  :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#11044, ss_item_sk#11046, ss_store_sk#11051, ss_ext_sales_price#11059, ss_net_profit#11066], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#11044, ss_sold_time_sk#11045, ss_item_sk#11046, ss_customer_sk#11047, ss_cdemo_s..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16671]\n                  :     :        +- *(1) Project [d_date_sk#11067]\n                  :     :           +- *(1) Filter ((isnotnull(d_year#11073) AND (d_year#11073 = 2000)) AND isnotnull(d_date_sk#11067))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#11067, d_year#11073], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#11067, d_date_id#11068, d_date#11069, d_month_seq#11070, d_week_seq#11071, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16678]\n                  :        +- *(2) Filter isnotnull(i_item_sk#11095)\n                  :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#11095, i_class#11105, i_category#11107], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#11095, i_item_id#11096, i_rec_start_date#11097, i_rec_end_date#11098, i_item_desc#1109..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16686]\n                     +- *(3) Project [s_store_sk#11117]\n                        +- *(3) Filter (s_state#11141 IN (MN,TX,IN,CA,LA,NM) AND isnotnull(s_store_sk#11117))\n                           +- Scan hive tpcds_sf1_iceberg.store [s_state#11141, s_store_sk#11117], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#11117, s_store_id#11118, s_rec_start_date#11119, s_rec_end_date#11120, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q36"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#11195, i_item_desc#11198, i_current_price#11199, 200), ENSURE_REQUIREMENTS, [id=#16813]\n+- *(4) HashAggregate(keys=[i_item_id#11195, i_item_desc#11198, i_current_price#11199], functions=[], output=[i_item_id#11195, i_item_desc#11198, i_current_price#11199])\n   +- *(4) Project [i_item_id#11195, i_item_desc#11198, i_current_price#11199]\n      +- *(4) BroadcastHashJoin [i_item_sk#11194], [cs_item_sk#11263], Inner, BuildRight, false\n         :- *(4) Project [i_item_sk#11194, i_item_id#11195, i_item_desc#11198, i_current_price#11199]\n         :  +- *(4) BroadcastHashJoin [inv_date_sk#11216], [d_date_sk#11220], Inner, BuildRight, false\n         :     :- *(4) Project [i_item_sk#11194, i_item_id#11195, i_item_desc#11198, i_current_price#11199, inv_date_sk#11216]\n         :     :  +- *(4) BroadcastHashJoin [i_item_sk#11194], [inv_item_sk#11217], Inner, BuildLeft, false\n         :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16789]\n         :     :     :  +- *(1) Project [i_item_sk#11194, i_item_id#11195, i_item_desc#11198, i_current_price#11199]\n         :     :     :     +- *(1) Filter ((((isnotnull(i_current_price#11199) AND (i_current_price#11199 >= 16.00)) AND (i_current_price#11199 <= 46.00)) AND i_manufact_id#11207 IN (841,790,796,739)) AND isnotnull(i_item_sk#11194))\n         :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_current_price#11199, i_item_desc#11198, i_item_id#11195, i_item_sk#11194, i_manufact_id#11207], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#11194, i_item_id#11195, i_rec_start_date#11196, i_rec_end_date#11197, i_item_desc#1119..., Partition Cols: []]\n         :     :     +- *(4) Project [inv_date_sk#11216, inv_item_sk#11217]\n         :     :        +- *(4) Filter ((((isnotnull(inv_quantity_on_hand#11219) AND (inv_quantity_on_hand#11219 >= 100)) AND (inv_quantity_on_hand#11219 <= 500)) AND isnotnull(inv_item_sk#11217)) AND isnotnull(inv_date_sk#11216))\n         :     :           +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#11216, inv_item_sk#11217, inv_quantity_on_hand#11219], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#11216, inv_item_sk#11217, inv_warehouse_sk#11218, inv_quantity_on_hand#11219], Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#16800]\n         :        +- *(2) Project [d_date_sk#11220]\n         :           +- *(2) Filter (((isnotnull(d_date#11222) AND (d_date#11222 >= 11843)) AND (d_date#11222 <= 11903)) AND isnotnull(d_date_sk#11220))\n         :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#11222, d_date_sk#11220], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#11220, d_date_id#11221, d_date#11222, d_month_seq#11223, d_week_seq#11224, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#16807]\n            +- *(3) Filter isnotnull(cs_item_sk#11263)\n               +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#11263], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#11248, cs_sold_time_sk#11249, cs_ship_date_sk#11250, cs_bill_customer_sk#11251, ..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q37"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#17315]\n+- *(16) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#11522L])\n   +- *(16) HashAggregate(keys=[c_last_name#11350, c_first_name#11349, d_date#11315], functions=[], output=[])\n      +- *(16) HashAggregate(keys=[c_last_name#11350, c_first_name#11349, d_date#11315], functions=[], output=[c_last_name#11350, c_first_name#11349, d_date#11315])\n         +- *(16) HashAggregate(keys=[c_last_name#11350, c_first_name#11349, d_date#11315], functions=[], output=[c_last_name#11350, c_first_name#11349, d_date#11315])\n            +- *(16) HashAggregate(keys=[c_last_name#11350, c_first_name#11349, d_date#11315], functions=[], output=[c_last_name#11350, c_first_name#11349, d_date#11315])\n               +- *(16) HashAggregate(keys=[c_last_name#11350, c_first_name#11349, d_date#11315], functions=[], output=[c_last_name#11350, c_first_name#11349, d_date#11315])\n                  +- Exchange hashpartitioning(c_last_name#11350, c_first_name#11349, d_date#11315, 200), ENSURE_REQUIREMENTS, [id=#17267]\n                     +- *(15) HashAggregate(keys=[c_last_name#11350, c_first_name#11349, d_date#11315], functions=[], output=[c_last_name#11350, c_first_name#11349, d_date#11315])\n                        +- SortMergeJoin [coalesce(c_last_name#11350, ), isnull(c_last_name#11350), coalesce(c_first_name#11349, ), isnull(c_first_name#11349), coalesce(d_date#11315, 0), isnull(d_date#11315)], [coalesce(c_last_name#11510, ), isnull(c_last_name#11510), coalesce(c_first_name#11509, ), isnull(c_first_name#11509), coalesce(d_date#11475, 0), isnull(d_date#11475)], LeftSemi\n                           :- SortMergeJoin [coalesce(c_last_name#11350, ), isnull(c_last_name#11350), coalesce(c_first_name#11349, ), isnull(c_first_name#11349), coalesce(d_date#11315, 0), isnull(d_date#11315)], [coalesce(c_last_name#11430, ), isnull(c_last_name#11430), coalesce(c_first_name#11429, ), isnull(c_first_name#11429), coalesce(d_date#11395, 0), isnull(d_date#11395)], LeftSemi\n                           :  :- *(4) Sort [coalesce(c_last_name#11350, ) ASC NULLS FIRST, isnull(c_last_name#11350) ASC NULLS FIRST, coalesce(c_first_name#11349, ) ASC NULLS FIRST, isnull(c_first_name#11349) ASC NULLS FIRST, coalesce(d_date#11315, 0) ASC NULLS FIRST, isnull(d_date#11315) ASC NULLS FIRST], false, 0\n                           :  :  +- Exchange hashpartitioning(coalesce(c_last_name#11350, ), isnull(c_last_name#11350), coalesce(c_first_name#11349, ), isnull(c_first_name#11349), coalesce(d_date#11315, 0), isnull(d_date#11315), 200), ENSURE_REQUIREMENTS, [id=#17058]\n                           :  :     +- *(3) Project [d_date#11315, c_first_name#11349, c_last_name#11350]\n                           :  :        +- *(3) BroadcastHashJoin [ss_customer_sk#11293], [c_customer_sk#11341], Inner, BuildRight, false\n                           :  :           :- *(3) Project [ss_customer_sk#11293, d_date#11315]\n                           :  :           :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#11290], [d_date_sk#11313], Inner, BuildRight, false\n                           :  :           :     :- *(3) Filter (isnotnull(ss_sold_date_sk#11290) AND isnotnull(ss_customer_sk#11293))\n                           :  :           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#11290, ss_customer_sk#11293], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#11290, ss_sold_time_sk#11291, ss_item_sk#11292, ss_customer_sk#11293, ss_cdemo_s..., Partition Cols: []]\n                           :  :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17046]\n                           :  :           :        +- *(1) Project [d_date_sk#11313, d_date#11315]\n                           :  :           :           +- *(1) Filter (((isnotnull(d_month_seq#11316) AND (d_month_seq#11316 >= 1203)) AND (d_month_seq#11316 <= 1214)) AND isnotnull(d_date_sk#11313))\n                           :  :           :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#11315, d_date_sk#11313, d_month_seq#11316], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#11313, d_date_id#11314, d_date#11315, d_month_seq#11316, d_week_seq#11317, d_quarter_s..., Partition Cols: []]\n                           :  :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17053]\n                           :  :              +- *(2) Filter isnotnull(c_customer_sk#11341)\n                           :  :                 +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#11341, c_first_name#11349, c_last_name#11350], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#11341, c_customer_id#11342, c_current_cdemo_sk#11343, c_current_hdemo_sk#11344, c_..., Partition Cols: []]\n                           :  +- *(9) Sort [coalesce(c_last_name#11430, ) ASC NULLS FIRST, isnull(c_last_name#11430) ASC NULLS FIRST, coalesce(c_first_name#11429, ) ASC NULLS FIRST, isnull(c_first_name#11429) ASC NULLS FIRST, coalesce(d_date#11395, 0) ASC NULLS FIRST, isnull(d_date#11395) ASC NULLS FIRST], false, 0\n                           :     +- Exchange hashpartitioning(coalesce(c_last_name#11430, ), isnull(c_last_name#11430), coalesce(c_first_name#11429, ), isnull(c_first_name#11429), coalesce(d_date#11395, 0), isnull(d_date#11395), 200), ENSURE_REQUIREMENTS, [id=#17176]\n                           :        +- *(8) HashAggregate(keys=[c_last_name#11430, c_first_name#11429, d_date#11395], functions=[], output=[c_last_name#11430, c_first_name#11429, d_date#11395])\n                           :           +- Exchange hashpartitioning(c_last_name#11430, c_first_name#11429, d_date#11395, 200), ENSURE_REQUIREMENTS, [id=#17172]\n                           :              +- *(7) HashAggregate(keys=[c_last_name#11430, c_first_name#11429, d_date#11395], functions=[], output=[c_last_name#11430, c_first_name#11429, d_date#11395])\n                           :                 +- *(7) Project [c_last_name#11430, c_first_name#11429, d_date#11395]\n                           :                    +- *(7) BroadcastHashJoin [cs_bill_customer_sk#11362], [c_customer_sk#11421], Inner, BuildRight, false\n                           :                       :- *(7) Project [cs_bill_customer_sk#11362, d_date#11395]\n                           :                       :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#11359], [d_date_sk#11393], Inner, BuildRight, false\n                           :                       :     :- *(7) Filter (isnotnull(cs_sold_date_sk#11359) AND isnotnull(cs_bill_customer_sk#11362))\n                           :                       :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#11359, cs_bill_customer_sk#11362], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#11359, cs_sold_time_sk#11360, cs_ship_date_sk#11361, cs_bill_customer_sk#11362, ..., Partition Cols: []]\n                           :                       :     +- ReusedExchange [d_date_sk#11393, d_date#11395], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17046]\n                           :                       +- ReusedExchange [c_customer_sk#11421, c_first_name#11429, c_last_name#11430], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17053]\n                           +- *(14) Sort [coalesce(c_last_name#11510, ) ASC NULLS FIRST, isnull(c_last_name#11510) ASC NULLS FIRST, coalesce(c_first_name#11509, ) ASC NULLS FIRST, isnull(c_first_name#11509) ASC NULLS FIRST, coalesce(d_date#11475, 0) ASC NULLS FIRST, isnull(d_date#11475) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(c_last_name#11510, ), isnull(c_last_name#11510), coalesce(c_first_name#11509, ), isnull(c_first_name#11509), coalesce(d_date#11475, 0), isnull(d_date#11475), 200), ENSURE_REQUIREMENTS, [id=#17253]\n                                 +- *(13) HashAggregate(keys=[c_last_name#11510, c_first_name#11509, d_date#11475], functions=[], output=[c_last_name#11510, c_first_name#11509, d_date#11475])\n                                    +- Exchange hashpartitioning(c_last_name#11510, c_first_name#11509, d_date#11475, 200), ENSURE_REQUIREMENTS, [id=#17230]\n                                       +- *(12) HashAggregate(keys=[c_last_name#11510, c_first_name#11509, d_date#11475], functions=[], output=[c_last_name#11510, c_first_name#11509, d_date#11475])\n                                          +- *(12) Project [c_last_name#11510, c_first_name#11509, d_date#11475]\n                                             +- *(12) BroadcastHashJoin [ws_bill_customer_sk#11443], [c_customer_sk#11501], Inner, BuildRight, false\n                                                :- *(12) Project [ws_bill_customer_sk#11443, d_date#11475]\n                                                :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#11439], [d_date_sk#11473], Inner, BuildRight, false\n                                                :     :- *(12) Filter (isnotnull(ws_sold_date_sk#11439) AND isnotnull(ws_bill_customer_sk#11443))\n                                                :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#11439, ws_bill_customer_sk#11443], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#11439, ws_sold_time_sk#11440, ws_ship_date_sk#11441, ws_item_sk#11442, ws_bill_c..., Partition Cols: []]\n                                                :     +- ReusedExchange [d_date_sk#11473, d_date#11475], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17046]\n                                                +- ReusedExchange [c_customer_sk#11501, c_first_name#11509, c_last_name#11510], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17053]\n",
    "iteration" : 1,
    "name" : "q38"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(w_warehouse_sk#11554 ASC NULLS FIRST, i_item_sk#11532 ASC NULLS FIRST, d_moy#11576 ASC NULLS FIRST, mean#11526 ASC NULLS FIRST, cov#11527 ASC NULLS FIRST, d_moy#11644 ASC NULLS FIRST, mean#11718 ASC NULLS FIRST, cov#11716 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#17713]\n+- *(13) SortMergeJoin [i_item_sk#11532, w_warehouse_sk#11554], [i_item_sk#11600, w_warehouse_sk#11622], Inner\n   :- *(6) Sort [i_item_sk#11532 ASC NULLS FIRST, w_warehouse_sk#11554 ASC NULLS FIRST], false, 0\n   :  +- Exchange hashpartitioning(i_item_sk#11532, w_warehouse_sk#11554, 200), ENSURE_REQUIREMENTS, [id=#17532]\n   :     +- *(5) Project [w_warehouse_sk#11554, i_item_sk#11532, d_moy#11576, mean#11526, CASE WHEN (mean#11526 = 0.0) THEN null ELSE (stdev#11525 / mean#11526) END AS cov#11527]\n   :        +- *(5) Filter (CASE WHEN (mean#11526 = 0.0) THEN 0.0 ELSE (stdev#11525 / mean#11526) END > 1.0)\n   :           +- *(5) HashAggregate(keys=[w_warehouse_name#11556, w_warehouse_sk#11554, i_item_sk#11532, d_moy#11576], functions=[stddev_samp(cast(inv_quantity_on_hand#11531 as double)), avg(cast(inv_quantity_on_hand#11531 as bigint))], output=[w_warehouse_sk#11554, i_item_sk#11532, d_moy#11576, stdev#11525, mean#11526])\n   :              +- Exchange hashpartitioning(w_warehouse_name#11556, w_warehouse_sk#11554, i_item_sk#11532, d_moy#11576, 200), ENSURE_REQUIREMENTS, [id=#17526]\n   :                 +- *(4) HashAggregate(keys=[w_warehouse_name#11556, w_warehouse_sk#11554, i_item_sk#11532, d_moy#11576], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#11531 as double)), partial_avg(cast(inv_quantity_on_hand#11531 as bigint))], output=[w_warehouse_name#11556, w_warehouse_sk#11554, i_item_sk#11532, d_moy#11576, n#11705, avg#11706, m2#11707, sum#11739, count#11740L])\n   :                    +- *(4) Project [inv_quantity_on_hand#11531, i_item_sk#11532, w_warehouse_sk#11554, w_warehouse_name#11556, d_moy#11576]\n   :                       +- *(4) BroadcastHashJoin [inv_date_sk#11528], [d_date_sk#11568], Inner, BuildRight, false\n   :                          :- *(4) Project [inv_date_sk#11528, inv_quantity_on_hand#11531, i_item_sk#11532, w_warehouse_sk#11554, w_warehouse_name#11556]\n   :                          :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#11530], [w_warehouse_sk#11554], Inner, BuildRight, false\n   :                          :     :- *(4) Project [inv_date_sk#11528, inv_warehouse_sk#11530, inv_quantity_on_hand#11531, i_item_sk#11532]\n   :                          :     :  +- *(4) BroadcastHashJoin [inv_item_sk#11529], [i_item_sk#11532], Inner, BuildRight, false\n   :                          :     :     :- *(4) Filter ((isnotnull(inv_item_sk#11529) AND isnotnull(inv_warehouse_sk#11530)) AND isnotnull(inv_date_sk#11528))\n   :                          :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#11528, inv_item_sk#11529, inv_warehouse_sk#11530, inv_quantity_on_hand#11531], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#11528, inv_item_sk#11529, inv_warehouse_sk#11530, inv_quantity_on_hand#11531], Partition Cols: []]\n   :                          :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17505]\n   :                          :     :        +- *(1) Filter isnotnull(i_item_sk#11532)\n   :                          :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#11532], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#11532, i_item_id#11533, i_rec_start_date#11534, i_rec_end_date#11535, i_item_desc#1153..., Partition Cols: []]\n   :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17512]\n   :                          :        +- *(2) Filter isnotnull(w_warehouse_sk#11554)\n   :                          :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#11554, w_warehouse_name#11556], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#11554, w_warehouse_id#11555, w_warehouse_name#11556, w_warehouse_sq_ft#11557, w_s..., Partition Cols: []]\n   :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17520]\n   :                             +- *(3) Project [d_date_sk#11568, d_moy#11576]\n   :                                +- *(3) Filter ((((isnotnull(d_year#11574) AND isnotnull(d_moy#11576)) AND (d_year#11574 = 1999)) AND (d_moy#11576 = 3)) AND isnotnull(d_date_sk#11568))\n   :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#11568, d_moy#11576, d_year#11574], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#11568, d_date_id#11569, d_date#11570, d_month_seq#11571, d_week_seq#11572, d_quarter_s..., Partition Cols: []]\n   +- *(12) Sort [i_item_sk#11600 ASC NULLS FIRST, w_warehouse_sk#11622 ASC NULLS FIRST], false, 0\n      +- Exchange hashpartitioning(i_item_sk#11600, w_warehouse_sk#11622, 200), ENSURE_REQUIREMENTS, [id=#17686]\n         +- *(11) Project [w_warehouse_sk#11622, i_item_sk#11600, d_moy#11644, mean#11718, CASE WHEN (mean#11718 = 0.0) THEN null ELSE (stdev#11717 / mean#11718) END AS cov#11716]\n            +- *(11) Filter (CASE WHEN (mean#11718 = 0.0) THEN 0.0 ELSE (stdev#11717 / mean#11718) END > 1.0)\n               +- *(11) HashAggregate(keys=[w_warehouse_name#11624, w_warehouse_sk#11622, i_item_sk#11600, d_moy#11644], functions=[stddev_samp(cast(inv_quantity_on_hand#11599 as double)), avg(cast(inv_quantity_on_hand#11599 as bigint))], output=[w_warehouse_sk#11622, i_item_sk#11600, d_moy#11644, stdev#11717, mean#11718])\n                  +- Exchange hashpartitioning(w_warehouse_name#11624, w_warehouse_sk#11622, i_item_sk#11600, d_moy#11644, 200), ENSURE_REQUIREMENTS, [id=#17632]\n                     +- *(10) HashAggregate(keys=[w_warehouse_name#11624, w_warehouse_sk#11622, i_item_sk#11600, d_moy#11644], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#11599 as double)), partial_avg(cast(inv_quantity_on_hand#11599 as bigint))], output=[w_warehouse_name#11624, w_warehouse_sk#11622, i_item_sk#11600, d_moy#11644, n#11713, avg#11714, m2#11715, sum#11751, count#11752L])\n                        +- *(10) Project [inv_quantity_on_hand#11599, i_item_sk#11600, w_warehouse_sk#11622, w_warehouse_name#11624, d_moy#11644]\n                           +- *(10) BroadcastHashJoin [inv_date_sk#11596], [d_date_sk#11636], Inner, BuildRight, false\n                              :- *(10) Project [inv_date_sk#11596, inv_quantity_on_hand#11599, i_item_sk#11600, w_warehouse_sk#11622, w_warehouse_name#11624]\n                              :  +- *(10) BroadcastHashJoin [inv_warehouse_sk#11598], [w_warehouse_sk#11622], Inner, BuildRight, false\n                              :     :- *(10) Project [inv_date_sk#11596, inv_warehouse_sk#11598, inv_quantity_on_hand#11599, i_item_sk#11600]\n                              :     :  +- *(10) BroadcastHashJoin [inv_item_sk#11597], [i_item_sk#11600], Inner, BuildRight, false\n                              :     :     :- *(10) Filter ((isnotnull(inv_item_sk#11597) AND isnotnull(inv_warehouse_sk#11598)) AND isnotnull(inv_date_sk#11596))\n                              :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#11596, inv_item_sk#11597, inv_warehouse_sk#11598, inv_quantity_on_hand#11599], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#11596, inv_item_sk#11597, inv_warehouse_sk#11598, inv_quantity_on_hand#11599], Partition Cols: []]\n                              :     :     +- ReusedExchange [i_item_sk#11600], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17505]\n                              :     +- ReusedExchange [w_warehouse_sk#11622, w_warehouse_name#11624], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17512]\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17557]\n                                 +- *(9) Project [d_date_sk#11636, d_moy#11644]\n                                    +- *(9) Filter ((((isnotnull(d_year#11642) AND isnotnull(d_moy#11644)) AND (d_year#11642 = 1999)) AND (d_moy#11644 = 4)) AND isnotnull(d_date_sk#11636))\n                                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#11636, d_moy#11644, d_year#11642], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#11636, d_date_id#11637, d_date#11638, d_month_seq#11639, d_week_seq#11640, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q39a"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(w_warehouse_sk#11869 ASC NULLS FIRST, i_item_sk#11847 ASC NULLS FIRST, d_moy#11891 ASC NULLS FIRST, mean#11841 ASC NULLS FIRST, cov#11842 ASC NULLS FIRST, d_moy#11959 ASC NULLS FIRST, mean#12033 ASC NULLS FIRST, cov#12031 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#18111]\n+- *(13) SortMergeJoin [i_item_sk#11847, w_warehouse_sk#11869], [i_item_sk#11915, w_warehouse_sk#11937], Inner\n   :- *(6) Sort [i_item_sk#11847 ASC NULLS FIRST, w_warehouse_sk#11869 ASC NULLS FIRST], false, 0\n   :  +- Exchange hashpartitioning(i_item_sk#11847, w_warehouse_sk#11869, 200), ENSURE_REQUIREMENTS, [id=#17930]\n   :     +- *(5) Project [w_warehouse_sk#11869, i_item_sk#11847, d_moy#11891, mean#11841, CASE WHEN (mean#11841 = 0.0) THEN null ELSE (stdev#11840 / mean#11841) END AS cov#11842]\n   :        +- *(5) Filter ((CASE WHEN (mean#11841 = 0.0) THEN 0.0 ELSE (stdev#11840 / mean#11841) END > 1.0) AND (CASE WHEN (mean#11841 = 0.0) THEN null ELSE (stdev#11840 / mean#11841) END > 1.5))\n   :           +- *(5) HashAggregate(keys=[w_warehouse_name#11871, w_warehouse_sk#11869, i_item_sk#11847, d_moy#11891], functions=[stddev_samp(cast(inv_quantity_on_hand#11846 as double)), avg(cast(inv_quantity_on_hand#11846 as bigint))], output=[w_warehouse_sk#11869, i_item_sk#11847, d_moy#11891, stdev#11840, mean#11841])\n   :              +- Exchange hashpartitioning(w_warehouse_name#11871, w_warehouse_sk#11869, i_item_sk#11847, d_moy#11891, 200), ENSURE_REQUIREMENTS, [id=#17924]\n   :                 +- *(4) HashAggregate(keys=[w_warehouse_name#11871, w_warehouse_sk#11869, i_item_sk#11847, d_moy#11891], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#11846 as double)), partial_avg(cast(inv_quantity_on_hand#11846 as bigint))], output=[w_warehouse_name#11871, w_warehouse_sk#11869, i_item_sk#11847, d_moy#11891, n#12020, avg#12021, m2#12022, sum#12054, count#12055L])\n   :                    +- *(4) Project [inv_quantity_on_hand#11846, i_item_sk#11847, w_warehouse_sk#11869, w_warehouse_name#11871, d_moy#11891]\n   :                       +- *(4) BroadcastHashJoin [inv_date_sk#11843], [d_date_sk#11883], Inner, BuildRight, false\n   :                          :- *(4) Project [inv_date_sk#11843, inv_quantity_on_hand#11846, i_item_sk#11847, w_warehouse_sk#11869, w_warehouse_name#11871]\n   :                          :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#11845], [w_warehouse_sk#11869], Inner, BuildRight, false\n   :                          :     :- *(4) Project [inv_date_sk#11843, inv_warehouse_sk#11845, inv_quantity_on_hand#11846, i_item_sk#11847]\n   :                          :     :  +- *(4) BroadcastHashJoin [inv_item_sk#11844], [i_item_sk#11847], Inner, BuildRight, false\n   :                          :     :     :- *(4) Filter ((isnotnull(inv_item_sk#11844) AND isnotnull(inv_warehouse_sk#11845)) AND isnotnull(inv_date_sk#11843))\n   :                          :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#11843, inv_item_sk#11844, inv_warehouse_sk#11845, inv_quantity_on_hand#11846], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#11843, inv_item_sk#11844, inv_warehouse_sk#11845, inv_quantity_on_hand#11846], Partition Cols: []]\n   :                          :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17903]\n   :                          :     :        +- *(1) Filter isnotnull(i_item_sk#11847)\n   :                          :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#11847], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#11847, i_item_id#11848, i_rec_start_date#11849, i_rec_end_date#11850, i_item_desc#1185..., Partition Cols: []]\n   :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17910]\n   :                          :        +- *(2) Filter isnotnull(w_warehouse_sk#11869)\n   :                          :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#11869, w_warehouse_name#11871], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#11869, w_warehouse_id#11870, w_warehouse_name#11871, w_warehouse_sq_ft#11872, w_s..., Partition Cols: []]\n   :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17918]\n   :                             +- *(3) Project [d_date_sk#11883, d_moy#11891]\n   :                                +- *(3) Filter ((((isnotnull(d_year#11889) AND isnotnull(d_moy#11891)) AND (d_year#11889 = 1999)) AND (d_moy#11891 = 3)) AND isnotnull(d_date_sk#11883))\n   :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#11883, d_moy#11891, d_year#11889], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#11883, d_date_id#11884, d_date#11885, d_month_seq#11886, d_week_seq#11887, d_quarter_s..., Partition Cols: []]\n   +- *(12) Sort [i_item_sk#11915 ASC NULLS FIRST, w_warehouse_sk#11937 ASC NULLS FIRST], false, 0\n      +- Exchange hashpartitioning(i_item_sk#11915, w_warehouse_sk#11937, 200), ENSURE_REQUIREMENTS, [id=#18084]\n         +- *(11) Project [w_warehouse_sk#11937, i_item_sk#11915, d_moy#11959, mean#12033, CASE WHEN (mean#12033 = 0.0) THEN null ELSE (stdev#12032 / mean#12033) END AS cov#12031]\n            +- *(11) Filter (CASE WHEN (mean#12033 = 0.0) THEN 0.0 ELSE (stdev#12032 / mean#12033) END > 1.0)\n               +- *(11) HashAggregate(keys=[w_warehouse_name#11939, w_warehouse_sk#11937, i_item_sk#11915, d_moy#11959], functions=[stddev_samp(cast(inv_quantity_on_hand#11914 as double)), avg(cast(inv_quantity_on_hand#11914 as bigint))], output=[w_warehouse_sk#11937, i_item_sk#11915, d_moy#11959, stdev#12032, mean#12033])\n                  +- Exchange hashpartitioning(w_warehouse_name#11939, w_warehouse_sk#11937, i_item_sk#11915, d_moy#11959, 200), ENSURE_REQUIREMENTS, [id=#18030]\n                     +- *(10) HashAggregate(keys=[w_warehouse_name#11939, w_warehouse_sk#11937, i_item_sk#11915, d_moy#11959], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#11914 as double)), partial_avg(cast(inv_quantity_on_hand#11914 as bigint))], output=[w_warehouse_name#11939, w_warehouse_sk#11937, i_item_sk#11915, d_moy#11959, n#12028, avg#12029, m2#12030, sum#12066, count#12067L])\n                        +- *(10) Project [inv_quantity_on_hand#11914, i_item_sk#11915, w_warehouse_sk#11937, w_warehouse_name#11939, d_moy#11959]\n                           +- *(10) BroadcastHashJoin [inv_date_sk#11911], [d_date_sk#11951], Inner, BuildRight, false\n                              :- *(10) Project [inv_date_sk#11911, inv_quantity_on_hand#11914, i_item_sk#11915, w_warehouse_sk#11937, w_warehouse_name#11939]\n                              :  +- *(10) BroadcastHashJoin [inv_warehouse_sk#11913], [w_warehouse_sk#11937], Inner, BuildRight, false\n                              :     :- *(10) Project [inv_date_sk#11911, inv_warehouse_sk#11913, inv_quantity_on_hand#11914, i_item_sk#11915]\n                              :     :  +- *(10) BroadcastHashJoin [inv_item_sk#11912], [i_item_sk#11915], Inner, BuildRight, false\n                              :     :     :- *(10) Filter ((isnotnull(inv_item_sk#11912) AND isnotnull(inv_warehouse_sk#11913)) AND isnotnull(inv_date_sk#11911))\n                              :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#11911, inv_item_sk#11912, inv_warehouse_sk#11913, inv_quantity_on_hand#11914], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#11911, inv_item_sk#11912, inv_warehouse_sk#11913, inv_quantity_on_hand#11914], Partition Cols: []]\n                              :     :     +- ReusedExchange [i_item_sk#11915], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17903]\n                              :     +- ReusedExchange [w_warehouse_sk#11937, w_warehouse_name#11939], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#17910]\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#17955]\n                                 +- *(9) Project [d_date_sk#11951, d_moy#11959]\n                                    +- *(9) Filter ((((isnotnull(d_year#11957) AND isnotnull(d_moy#11959)) AND (d_year#11957 = 1999)) AND (d_moy#11959 = 4)) AND isnotnull(d_date_sk#11951))\n                                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#11951, d_moy#11959, d_year#11957], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#11951, d_date_id#11952, d_date#11953, d_month_seq#11954, d_week_seq#11955, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q39b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#12155, 200), ENSURE_REQUIREMENTS, [id=#18545]\n+- *(4) Filter (isnotnull(year_total#12163) AND (year_total#12163 > 0.000000))\n   +- *(4) HashAggregate(keys=[c_customer_id#12186, c_first_name#12193, c_last_name#12194, c_preferred_cust_flag#12195, c_birth_country#12199, c_login#12200, c_email_address#12201, d_year#12232], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#12220 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#12219 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12217 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12218 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#12155, year_total#12163])\n      +- Exchange hashpartitioning(c_customer_id#12186, c_first_name#12193, c_last_name#12194, c_preferred_cust_flag#12195, c_birth_country#12199, c_login#12200, c_email_address#12201, d_year#12232, 200), ENSURE_REQUIREMENTS, [id=#18540]\n         +- *(3) HashAggregate(keys=[c_customer_id#12186, c_first_name#12193, c_last_name#12194, c_preferred_cust_flag#12195, c_birth_country#12199, c_login#12200, c_email_address#12201, d_year#12232], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#12220 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#12219 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#12217 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#12218 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#12186, c_first_name#12193, c_last_name#12194, c_preferred_cust_flag#12195, c_birth_country#12199, c_login#12200, c_email_address#12201, d_year#12232, sum#13633, isEmpty#13634])\n            +- *(3) Project [c_customer_id#12186, c_first_name#12193, c_last_name#12194, c_preferred_cust_flag#12195, c_birth_country#12199, c_login#12200, c_email_address#12201, ss_ext_discount_amt#12217, ss_ext_sales_price#12218, ss_ext_wholesale_cost#12219, ss_ext_list_price#12220, d_year#12232]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#12203], [d_date_sk#12226], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#12186, c_first_name#12193, c_last_name#12194, c_preferred_cust_flag#12195, c_birth_country#12199, c_login#12200, c_email_address#12201, ss_sold_date_sk#12203, ss_ext_discount_amt#12217, ss_ext_sales_price#12218, ss_ext_wholesale_cost#12219, ss_ext_list_price#12220]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#12185], [ss_customer_sk#12206], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18525]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#12185) AND isnotnull(c_customer_id#12186))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#12185, c_customer_id#12186, c_first_name#12193, c_last_name#12194, c_preferred_cust_flag#12195, c_birth_country#12199, c_login#12200, c_email_address#12201], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#12185, c_customer_id#12186, c_current_cdemo_sk#12187, c_current_hdemo_sk#12188, c_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#12206) AND isnotnull(ss_sold_date_sk#12203))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#12203, ss_customer_sk#12206, ss_ext_discount_amt#12217, ss_ext_sales_price#12218, ss_ext_wholesale_cost#12219, ss_ext_list_price#12220], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#12203, ss_sold_time_sk#12204, ss_item_sk#12205, ss_customer_sk#12206, ss_cdemo_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#18534]\n                     +- *(2) Filter ((isnotnull(d_year#12232) AND (d_year#12232 = 1999)) AND isnotnull(d_date_sk#12226))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#12226, d_year#12232], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#12226, d_date_id#12227, d_date#12228, d_month_seq#12229, d_week_seq#12230, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q4"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_state#13761, i_item_id#13766, 200), ENSURE_REQUIREMENTS, [id=#19168]\n+- *(5) HashAggregate(keys=[w_state#13761, i_item_id#13766], functions=[partial_sum(CASE WHEN (d_date#13789 < 10708) THEN CheckOverflow((promote_precision(cast(cs_sales_price#13711 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#13747 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#13789 >= 10708) THEN CheckOverflow((promote_precision(cast(cs_sales_price#13711 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#13747 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)], output=[w_state#13761, i_item_id#13766, sum#13827, isEmpty#13828, sum#13829, isEmpty#13830])\n   +- *(5) Project [cs_sales_price#13711, cr_refunded_cash#13747, w_state#13761, i_item_id#13766, d_date#13789]\n      +- *(5) BroadcastHashJoin [cs_sold_date_sk#13690], [d_date_sk#13787], Inner, BuildRight, false\n         :- *(5) Project [cs_sold_date_sk#13690, cs_sales_price#13711, cr_refunded_cash#13747, w_state#13761, i_item_id#13766]\n         :  +- *(5) BroadcastHashJoin [cs_item_sk#13705], [i_item_sk#13765], Inner, BuildRight, false\n         :     :- *(5) Project [cs_sold_date_sk#13690, cs_item_sk#13705, cs_sales_price#13711, cr_refunded_cash#13747, w_state#13761]\n         :     :  +- *(5) BroadcastHashJoin [cs_warehouse_sk#13704], [w_warehouse_sk#13751], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#13690, cs_warehouse_sk#13704, cs_item_sk#13705, cs_sales_price#13711, cr_refunded_cash#13747]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_order_number#13707L, cs_item_sk#13705], [cr_order_number#13740L, cr_item_sk#13726], LeftOuter, BuildRight, false\n         :     :     :     :- *(5) Filter ((isnotnull(cs_warehouse_sk#13704) AND isnotnull(cs_item_sk#13705)) AND isnotnull(cs_sold_date_sk#13690))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#13690, cs_warehouse_sk#13704, cs_item_sk#13705, cs_order_number#13707L, cs_sales_price#13711], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#13690, cs_sold_time_sk#13691, cs_ship_date_sk#13692, cs_bill_customer_sk#13693, ..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#19140]\n         :     :     :        +- *(1) Filter (isnotnull(cr_order_number#13740L) AND isnotnull(cr_item_sk#13726))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#13726, cr_order_number#13740L, cr_refunded_cash#13747], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#13724, cr_returned_time_sk#13725, cr_item_sk#13726, cr_refunded_customer_sk#..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19147]\n         :     :        +- *(2) Filter isnotnull(w_warehouse_sk#13751)\n         :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#13751, w_state#13761], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#13751, w_warehouse_id#13752, w_warehouse_name#13753, w_warehouse_sq_ft#13754, w_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19155]\n         :        +- *(3) Project [i_item_sk#13765, i_item_id#13766]\n         :           +- *(3) Filter (((isnotnull(i_current_price#13770) AND (i_current_price#13770 >= 0.99)) AND (i_current_price#13770 <= 1.49)) AND isnotnull(i_item_sk#13765))\n         :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#13770, i_item_id#13766, i_item_sk#13765], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#13765, i_item_id#13766, i_rec_start_date#13767, i_rec_end_date#13768, i_item_desc#1376..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19162]\n            +- *(4) Filter (((isnotnull(d_date#13789) AND (d_date#13789 >= 10678)) AND (d_date#13789 <= 10738)) AND isnotnull(d_date_sk#13787))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#13787, d_date#13789], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#13787, d_date_id#13788, d_date#13789, d_month_seq#13790, d_week_seq#13791, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q40"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_product_name#13859, 200), ENSURE_REQUIREMENTS, [id=#19254]\n+- *(3) HashAggregate(keys=[i_product_name#13859], functions=[], output=[i_product_name#13859])\n   +- *(3) Project [i_product_name#13859]\n      +- *(3) BroadcastHashJoin [i_manufact#13852], [i_manufact#13875], Inner, BuildRight, false\n         :- *(3) Project [i_manufact#13852, i_product_name#13859]\n         :  +- *(3) Filter (((isnotnull(i_manufact_id#13851) AND (i_manufact_id#13851 >= 841)) AND (i_manufact_id#13851 <= 881)) AND isnotnull(i_manufact#13852))\n         :     +- Scan hive tpcds_sf1_iceberg.item [i_manufact#13852, i_manufact_id#13851, i_product_name#13859], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#13838, i_item_id#13839, i_rec_start_date#13840, i_rec_end_date#13841, i_item_desc#1384..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#19248]\n            +- *(2) Project [i_manufact#13875]\n               +- *(2) Filter (item_cnt#13836L > 0)\n                  +- *(2) HashAggregate(keys=[i_manufact#13875], functions=[count(1)], output=[item_cnt#13836L, i_manufact#13875])\n                     +- Exchange hashpartitioning(i_manufact#13875, 200), ENSURE_REQUIREMENTS, [id=#19242]\n                        +- *(1) HashAggregate(keys=[i_manufact#13875], functions=[partial_count(1)], output=[i_manufact#13875, count#13887L])\n                           +- *(1) Project [i_manufact#13875]\n                              +- *(1) Filter (((((i_category#13873 = Women) AND (((((i_color#13878 = bisque) OR (i_color#13878 = khaki)) AND ((i_units#13879 = Carton) OR (i_units#13879 = Box))) AND ((i_size#13876 = large) OR (i_size#13876 = extra large))) OR ((((i_color#13878 = antique) OR (i_color#13878 = sandy)) AND ((i_units#13879 = Pallet) OR (i_units#13879 = Cup))) AND ((i_size#13876 = petite) OR (i_size#13876 = small))))) OR ((i_category#13873 = Men) AND (((((i_color#13878 = forest) OR (i_color#13878 = brown)) AND ((i_units#13879 = Dram) OR (i_units#13879 = Ton))) AND ((i_size#13876 = economy) OR (i_size#13876 = medium))) OR ((((i_color#13878 = chartreuse) OR (i_color#13878 = light)) AND ((i_units#13879 = Pound) OR (i_units#13879 = Dozen))) AND ((i_size#13876 = large) OR (i_size#13876 = extra large)))))) OR (((i_category#13873 = Women) AND (((((i_color#13878 = turquoise) OR (i_color#13878 = chocolate)) AND ((i_units#13879 = Bundle) OR (i_units#13879 = Unknown))) AND ((i_size#13876 = large) OR (i_size#13876 = extra large))) OR ((((i_color#13878 = maroon) OR (i_color#13878 = pale)) AND ((i_units#13879 = Each) OR (i_units#13879 = Tbl))) AND ((i_size#13876 = petite) OR (i_size#13876 = small))))) OR ((i_category#13873 = Men) AND (((((i_color#13878 = almond) OR (i_color#13878 = floral)) AND ((i_units#13879 = Gross) OR (i_units#13879 = N/A))) AND ((i_size#13876 = economy) OR (i_size#13876 = medium))) OR ((((i_color#13878 = drab) OR (i_color#13878 = plum)) AND ((i_units#13879 = Bunch) OR (i_units#13879 = Case))) AND ((i_size#13876 = large) OR (i_size#13876 = extra large))))))) AND isnotnull(i_manufact#13875))\n                                 +- Scan hive tpcds_sf1_iceberg.item [i_category#13873, i_color#13878, i_manufact#13875, i_size#13876, i_units#13879], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#13861, i_item_id#13862, i_rec_start_date#13863, i_rec_end_date#13864, i_item_desc#1386..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q41"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#13896, i_category_id#13952, i_category#13953, 200), ENSURE_REQUIREMENTS, [id=#19338]\n+- *(3) HashAggregate(keys=[d_year#13896, i_category_id#13952, i_category#13953], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#13933))], output=[d_year#13896, i_category_id#13952, i_category#13953, sum#13975L])\n   +- *(3) Project [d_year#13896, ss_ext_sales_price#13933, i_category_id#13952, i_category#13953]\n      +- *(3) BroadcastHashJoin [ss_item_sk#13920], [i_item_sk#13941], Inner, BuildRight, false\n         :- *(3) Project [d_year#13896, ss_item_sk#13920, ss_ext_sales_price#13933]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#13890], [ss_sold_date_sk#13918], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19322]\n         :     :  +- *(1) Project [d_date_sk#13890, d_year#13896]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#13898) AND isnotnull(d_year#13896)) AND (d_moy#13898 = 11)) AND (d_year#13896 = 2002)) AND isnotnull(d_date_sk#13890))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#13890, d_moy#13898, d_year#13896], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#13890, d_date_id#13891, d_date#13892, d_month_seq#13893, d_week_seq#13894, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#13918) AND isnotnull(ss_item_sk#13920))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#13918, ss_item_sk#13920, ss_ext_sales_price#13933], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#13918, ss_sold_time_sk#13919, ss_item_sk#13920, ss_customer_sk#13921, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19332]\n            +- *(2) Project [i_item_sk#13941, i_category_id#13952, i_category#13953]\n               +- *(2) Filter ((isnotnull(i_manager_id#13961) AND (i_manager_id#13961 = 1)) AND isnotnull(i_item_sk#13941))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_category#13953, i_category_id#13952, i_item_sk#13941, i_manager_id#13961], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#13941, i_item_id#13942, i_rec_start_date#13943, i_rec_end_date#13944, i_item_desc#1394..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q42"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#14044, s_store_id#14040, 200), ENSURE_REQUIREMENTS, [id=#19422]\n+- *(3) HashAggregate(keys=[s_store_name#14044, s_store_id#14040], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#14002 = Sunday) THEN ss_sales_price#14029 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#14002 = Monday) THEN ss_sales_price#14029 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#14002 = Tuesday) THEN ss_sales_price#14029 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#14002 = Wednesday) THEN ss_sales_price#14029 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#14002 = Thursday) THEN ss_sales_price#14029 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#14002 = Friday) THEN ss_sales_price#14029 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#14002 = Saturday) THEN ss_sales_price#14029 ELSE null END))], output=[s_store_name#14044, s_store_id#14040, sum#14100L, sum#14101L, sum#14102L, sum#14103L, sum#14104L, sum#14105L, sum#14106L])\n   +- *(3) Project [d_day_name#14002, ss_sales_price#14029, s_store_id#14040, s_store_name#14044]\n      +- *(3) BroadcastHashJoin [ss_store_sk#14023], [s_store_sk#14039], Inner, BuildRight, false\n         :- *(3) Project [d_day_name#14002, ss_store_sk#14023, ss_sales_price#14029]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#13988], [ss_sold_date_sk#14016], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19406]\n         :     :  +- *(1) Project [d_date_sk#13988, d_day_name#14002]\n         :     :     +- *(1) Filter ((isnotnull(d_year#13994) AND (d_year#13994 = 2002)) AND isnotnull(d_date_sk#13988))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#13988, d_day_name#14002, d_year#13994], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#13988, d_date_id#13989, d_date#13990, d_month_seq#13991, d_week_seq#13992, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#14016) AND isnotnull(ss_store_sk#14023))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#14016, ss_store_sk#14023, ss_sales_price#14029], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#14016, ss_sold_time_sk#14017, ss_item_sk#14018, ss_customer_sk#14019, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19416]\n            +- *(2) Project [s_store_sk#14039, s_store_id#14040, s_store_name#14044]\n               +- *(2) Filter ((isnotnull(s_gmt_offset#14066) AND (s_gmt_offset#14066 = -5.00)) AND isnotnull(s_store_sk#14039))\n                  +- Scan hive tpcds_sf1_iceberg.store [s_gmt_offset#14066, s_store_id#14040, s_store_name#14044, s_store_sk#14039], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#14039, s_store_id#14040, s_rec_start_date#14041, s_rec_end_date#14042, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q43"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 1,
    "name" : "q44"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_zip#14412, ca_state#14411, 200), ENSURE_REQUIREMENTS, [id=#19985]\n+- *(6) HashAggregate(keys=[ca_zip#14412, ca_state#14411], functions=[partial_sum(UnscaledValue(ws_sales_price#14372))], output=[ca_zip#14412, ca_state#14411, sum#14497L])\n   +- *(6) Project [ws_sales_price#14372, ca_state#14411, ca_zip#14412]\n      +- *(6) Filter (substr(ca_zip#14412, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#14495)\n         +- *(6) BroadcastHashJoin [i_item_id#14445], [i_item_id#14467], ExistenceJoin(exists#14495), BuildRight, false\n            :- *(6) Project [ws_sales_price#14372, ca_state#14411, ca_zip#14412, i_item_id#14445]\n            :  +- *(6) BroadcastHashJoin [ws_item_sk#14354], [i_item_sk#14444], Inner, BuildRight, false\n            :     :- *(6) Project [ws_item_sk#14354, ws_sales_price#14372, ca_state#14411, ca_zip#14412]\n            :     :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#14351], [d_date_sk#14416], Inner, BuildRight, false\n            :     :     :- *(6) Project [ws_sold_date_sk#14351, ws_item_sk#14354, ws_sales_price#14372, ca_state#14411, ca_zip#14412]\n            :     :     :  +- *(6) BroadcastHashJoin [c_current_addr_sk#14389], [ca_address_sk#14403], Inner, BuildRight, false\n            :     :     :     :- *(6) Project [ws_sold_date_sk#14351, ws_item_sk#14354, ws_sales_price#14372, c_current_addr_sk#14389]\n            :     :     :     :  +- *(6) BroadcastHashJoin [ws_bill_customer_sk#14355], [c_customer_sk#14385], Inner, BuildRight, false\n            :     :     :     :     :- *(6) Filter ((isnotnull(ws_bill_customer_sk#14355) AND isnotnull(ws_sold_date_sk#14351)) AND isnotnull(ws_item_sk#14354))\n            :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#14351, ws_item_sk#14354, ws_bill_customer_sk#14355, ws_sales_price#14372], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#14351, ws_sold_time_sk#14352, ws_ship_date_sk#14353, ws_item_sk#14354, ws_bill_c..., Partition Cols: []]\n            :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19948]\n            :     :     :     :        +- *(1) Filter (isnotnull(c_customer_sk#14385) AND isnotnull(c_current_addr_sk#14389))\n            :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#14385, c_current_addr_sk#14389], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#14385, c_customer_id#14386, c_current_cdemo_sk#14387, c_current_hdemo_sk#14388, c_..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19955]\n            :     :     :        +- *(2) Filter isnotnull(ca_address_sk#14403)\n            :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#14403, ca_state#14411, ca_zip#14412], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#14403, ca_address_id#14404, ca_street_number#14405, ca_street_name#14406, ca_stree..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#19963]\n            :     :        +- *(3) Project [d_date_sk#14416]\n            :     :           +- *(3) Filter ((((isnotnull(d_qoy#14426) AND isnotnull(d_year#14422)) AND (d_qoy#14426 = 2)) AND (d_year#14422 = 2002)) AND isnotnull(d_date_sk#14416))\n            :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#14416, d_qoy#14426, d_year#14422], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#14416, d_date_id#14417, d_date#14418, d_month_seq#14419, d_week_seq#14420, d_quarter_s..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#19970]\n            :        +- *(4) Filter isnotnull(i_item_sk#14444)\n            :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#14444, i_item_id#14445], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#14444, i_item_id#14445, i_rec_start_date#14446, i_rec_end_date#14447, i_item_desc#1444..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#19978]\n               +- *(5) Project [i_item_id#14467]\n                  +- *(5) Filter i_item_sk#14466 IN (2,3,5,7,11,13,17,19,23,29)\n                     +- Scan hive tpcds_sf1_iceberg.item [i_item_id#14467, i_item_sk#14466], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#14466, i_item_id#14467, i_rec_start_date#14468, i_rec_end_date#14469, i_item_desc#1447..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q45"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 1,
    "name" : "q46"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, rn#14657, 200), ENSURE_REQUIREMENTS, [id=#20545]\n+- *(9) Filter (((((isnotnull(d_year#14717) AND isnotnull(avg_monthly_sales#14656)) AND (d_year#14717 = 2001)) AND (avg_monthly_sales#14656 > 0.000000)) AND (CASE WHEN (avg_monthly_sales#14656 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#14655 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#14656 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#14656 as decimal(22,6)))), DecimalType(38,16), true) ELSE null END > 0.1000000000000000)) AND isnotnull(rn#14657))\n   +- Window [rank(d_year#14717, d_moy#14719) windowspecdefinition(i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717 ASC NULLS FIRST, d_moy#14719 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#14657], [i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756], [d_year#14717 ASC NULLS FIRST, d_moy#14719 ASC NULLS FIRST]\n      +- *(8) Sort [i_category#14678 ASC NULLS FIRST, i_brand#14674 ASC NULLS FIRST, s_store_name#14744 ASC NULLS FIRST, s_company_name#14756 ASC NULLS FIRST, d_year#14717 ASC NULLS FIRST, d_moy#14719 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, 200), ENSURE_REQUIREMENTS, [id=#20537]\n            +- *(7) Project [i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717, d_moy#14719, sum_sales#14655, avg_monthly_sales#14656]\n               +- Window [avg(_w0#15005) windowspecdefinition(i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#14656], [i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717]\n                  +- *(6) Sort [i_category#14678 ASC NULLS FIRST, i_brand#14674 ASC NULLS FIRST, s_store_name#14744 ASC NULLS FIRST, s_company_name#14756 ASC NULLS FIRST, d_year#14717 ASC NULLS FIRST], false, 0\n                     +- Exchange hashpartitioning(i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717, 200), ENSURE_REQUIREMENTS, [id=#20529]\n                        +- *(5) HashAggregate(keys=[i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717, d_moy#14719], functions=[sum(UnscaledValue(ss_sales_price#14701))], output=[i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717, d_moy#14719, sum_sales#14655, _w0#15005])\n                           +- Exchange hashpartitioning(i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717, d_moy#14719, 200), ENSURE_REQUIREMENTS, [id=#20525]\n                              +- *(4) HashAggregate(keys=[i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717, d_moy#14719], functions=[partial_sum(UnscaledValue(ss_sales_price#14701))], output=[i_category#14678, i_brand#14674, s_store_name#14744, s_company_name#14756, d_year#14717, d_moy#14719, sum#15147L])\n                                 +- *(4) Project [i_brand#14674, i_category#14678, ss_sales_price#14701, d_year#14717, d_moy#14719, s_store_name#14744, s_company_name#14756]\n                                    +- *(4) BroadcastHashJoin [ss_store_sk#14695], [s_store_sk#14739], Inner, BuildRight, false\n                                       :- *(4) Project [i_brand#14674, i_category#14678, ss_store_sk#14695, ss_sales_price#14701, d_year#14717, d_moy#14719]\n                                       :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#14688], [d_date_sk#14711], Inner, BuildRight, false\n                                       :     :- *(4) Project [i_brand#14674, i_category#14678, ss_sold_date_sk#14688, ss_store_sk#14695, ss_sales_price#14701]\n                                       :     :  +- *(4) BroadcastHashJoin [i_item_sk#14666], [ss_item_sk#14690], Inner, BuildLeft, false\n                                       :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20503]\n                                       :     :     :  +- *(1) Filter ((isnotnull(i_item_sk#14666) AND isnotnull(i_category#14678)) AND isnotnull(i_brand#14674))\n                                       :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#14666, i_brand#14674, i_category#14678], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#14666, i_item_id#14667, i_rec_start_date#14668, i_rec_end_date#14669, i_item_desc#1467..., Partition Cols: []]\n                                       :     :     +- *(4) Filter ((isnotnull(ss_item_sk#14690) AND isnotnull(ss_sold_date_sk#14688)) AND isnotnull(ss_store_sk#14695))\n                                       :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#14688, ss_item_sk#14690, ss_store_sk#14695, ss_sales_price#14701], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#14688, ss_sold_time_sk#14689, ss_item_sk#14690, ss_customer_sk#14691, ss_cdemo_s..., Partition Cols: []]\n                                       :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20512]\n                                       :        +- *(2) Filter ((((d_year#14717 = 2001) OR ((d_year#14717 = 2000) AND (d_moy#14719 = 12))) OR ((d_year#14717 = 2002) AND (d_moy#14719 = 1))) AND isnotnull(d_date_sk#14711))\n                                       :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#14711, d_year#14717, d_moy#14719], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#14711, d_date_id#14712, d_date#14713, d_month_seq#14714, d_week_seq#14715, d_quarter_s..., Partition Cols: []]\n                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20519]\n                                          +- *(3) Filter ((isnotnull(s_store_sk#14739) AND isnotnull(s_store_name#14744)) AND isnotnull(s_company_name#14756))\n                                             +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#14739, s_store_name#14744, s_company_name#14756], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#14739, s_store_id#14740, s_rec_start_date#14741, s_rec_end_date#14742, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q47"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#21010]\n+- *(5) HashAggregate(keys=[], functions=[partial_sum(cast(ss_quantity#15196 as bigint))], output=[sum#15292L])\n   +- *(5) Project [ss_quantity#15196]\n      +- *(5) BroadcastHashJoin [ss_sold_date_sk#15186], [d_date_sk#15260], Inner, BuildRight, false\n         :- *(5) Project [ss_sold_date_sk#15186, ss_quantity#15196]\n         :  +- *(5) BroadcastHashJoin [ss_addr_sk#15192], [ca_address_sk#15247], Inner, BuildRight, ((((ca_state#15255 IN (MT,OH,GA) AND (ss_net_profit#15208 >= 0.00)) AND (ss_net_profit#15208 <= 2000.00)) OR ((ca_state#15255 IN (WV,AZ,NM) AND (ss_net_profit#15208 >= 150.00)) AND (ss_net_profit#15208 <= 3000.00))) OR ((ca_state#15255 IN (NY,PA,KY) AND (ss_net_profit#15208 >= 50.00)) AND (ss_net_profit#15208 <= 25000.00))), false\n         :     :- *(5) Project [ss_sold_date_sk#15186, ss_addr_sk#15192, ss_quantity#15196, ss_net_profit#15208]\n         :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#15190], [cd_demo_sk#15238], Inner, BuildRight, ((((((cd_marital_status#15240 = U) AND (cd_education_status#15241 = 2 yr Degree)) AND (ss_sales_price#15199 >= 100.00)) AND (ss_sales_price#15199 <= 150.00)) OR ((((cd_marital_status#15240 = S) AND (cd_education_status#15241 = Primary)) AND (ss_sales_price#15199 >= 50.00)) AND (ss_sales_price#15199 <= 100.00))) OR ((((cd_marital_status#15240 = W) AND (cd_education_status#15241 = 4 yr Degree)) AND (ss_sales_price#15199 >= 150.00)) AND (ss_sales_price#15199 <= 200.00))), false\n         :     :     :- *(5) Project [ss_sold_date_sk#15186, ss_cdemo_sk#15190, ss_addr_sk#15192, ss_quantity#15196, ss_sales_price#15199, ss_net_profit#15208]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_store_sk#15193], [s_store_sk#15209], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((((isnotnull(ss_store_sk#15193) AND isnotnull(ss_cdemo_sk#15190)) AND isnotnull(ss_addr_sk#15192)) AND isnotnull(ss_sold_date_sk#15186)) AND ((((ss_sales_price#15199 >= 100.00) AND (ss_sales_price#15199 <= 150.00)) OR ((ss_sales_price#15199 >= 50.00) AND (ss_sales_price#15199 <= 100.00))) OR ((ss_sales_price#15199 >= 150.00) AND (ss_sales_price#15199 <= 200.00)))) AND ((((ss_net_profit#15208 >= 0.00) AND (ss_net_profit#15208 <= 2000.00)) OR ((ss_net_profit#15208 >= 150.00) AND (ss_net_profit#15208 <= 3000.00))) OR ((ss_net_profit#15208 >= 50.00) AND (ss_net_profit#15208 <= 25000.00))))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#15186, ss_cdemo_sk#15190, ss_addr_sk#15192, ss_store_sk#15193, ss_quantity#15196, ss_sales_price#15199, ss_net_profit#15208], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#15186, ss_sold_time_sk#15187, ss_item_sk#15188, ss_customer_sk#15189, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20981]\n         :     :     :        +- *(1) Filter isnotnull(s_store_sk#15209)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#15209], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#15209, s_store_id#15210, s_rec_start_date#15211, s_rec_end_date#15212, s_closed_date_..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#20988]\n         :     :        +- *(2) Filter (isnotnull(cd_demo_sk#15238) AND ((((cd_marital_status#15240 = U) AND (cd_education_status#15241 = 2 yr Degree)) OR ((cd_marital_status#15240 = S) AND (cd_education_status#15241 = Primary))) OR ((cd_marital_status#15240 = W) AND (cd_education_status#15241 = 4 yr Degree))))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#15238, cd_marital_status#15240, cd_education_status#15241], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#15238, cd_gender#15239, cd_marital_status#15240, cd_education_status#15241, cd_purcha..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#20996]\n         :        +- *(3) Project [ca_address_sk#15247, ca_state#15255]\n         :           +- *(3) Filter (((isnotnull(ca_country#15257) AND (ca_country#15257 = United States)) AND isnotnull(ca_address_sk#15247)) AND ((ca_state#15255 IN (MT,OH,GA) OR ca_state#15255 IN (WV,AZ,NM)) OR ca_state#15255 IN (NY,PA,KY)))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#15247, ca_country#15257, ca_state#15255], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#15247, ca_address_id#15248, ca_street_number#15249, ca_street_name#15250, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21004]\n            +- *(4) Project [d_date_sk#15260]\n               +- *(4) Filter ((isnotnull(d_year#15266) AND (d_year#15266 = 2000)) AND isnotnull(d_date_sk#15260))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#15260, d_year#15266], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#15260, d_date_id#15261, d_date#15262, d_month_seq#15263, d_week_seq#15264, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q48"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#15300, item#15295, return_ratio#15296, return_rank#15298, currency_rank#15299, 200), ENSURE_REQUIREMENTS, [id=#21566]\n+- *(22) HashAggregate(keys=[channel#15300, item#15295, return_ratio#15296, return_rank#15298, currency_rank#15299], functions=[], output=[channel#15300, item#15295, return_ratio#15296, return_rank#15298, currency_rank#15299])\n   +- Union\n      :- *(7) Project [web AS channel#15300, item#15295, return_ratio#15296, return_rank#15298, currency_rank#15299]\n      :  +- *(7) Filter ((return_rank#15298 <= 10) OR (currency_rank#15299 <= 10))\n      :     +- Window [rank(currency_ratio#15297) windowspecdefinition(currency_ratio#15297 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#15299], [currency_ratio#15297 ASC NULLS FIRST]\n      :        +- *(6) Sort [currency_ratio#15297 ASC NULLS FIRST], false, 0\n      :           +- Window [rank(return_ratio#15296) windowspecdefinition(return_ratio#15296 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#15298], [return_ratio#15296 ASC NULLS FIRST]\n      :              +- *(5) Sort [return_ratio#15296 ASC NULLS FIRST], false, 0\n      :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#21300]\n      :                    +- *(4) HashAggregate(keys=[ws_item_sk#15328], functions=[sum(cast(coalesce(wr_return_quantity#15373, 0) as bigint)), sum(cast(coalesce(ws_quantity#15343, 0) as bigint)), sum(coalesce(cast(wr_return_amt#15374 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#15354 as decimal(12,2)), 0.00))], output=[item#15295, return_ratio#15296, currency_ratio#15297])\n      :                       +- Exchange hashpartitioning(ws_item_sk#15328, 200), ENSURE_REQUIREMENTS, [id=#21296]\n      :                          +- *(3) HashAggregate(keys=[ws_item_sk#15328], functions=[partial_sum(cast(coalesce(wr_return_quantity#15373, 0) as bigint)), partial_sum(cast(coalesce(ws_quantity#15343, 0) as bigint)), partial_sum(coalesce(cast(wr_return_amt#15374 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#15354 as decimal(12,2)), 0.00))], output=[ws_item_sk#15328, sum#15648L, sum#15649L, sum#15650, isEmpty#15651, sum#15652, isEmpty#15653])\n      :                             +- *(3) Project [ws_item_sk#15328, ws_quantity#15343, ws_net_paid#15354, wr_return_quantity#15373, wr_return_amt#15374]\n      :                                +- *(3) BroadcastHashJoin [ws_sold_date_sk#15325], [d_date_sk#15383], Inner, BuildRight, false\n      :                                   :- *(3) Project [ws_sold_date_sk#15325, ws_item_sk#15328, ws_quantity#15343, ws_net_paid#15354, wr_return_quantity#15373, wr_return_amt#15374]\n      :                                   :  +- *(3) BroadcastHashJoin [ws_order_number#15342L, ws_item_sk#15328], [wr_order_number#15372L, wr_item_sk#15361], Inner, BuildRight, false\n      :                                   :     :- *(3) Project [ws_sold_date_sk#15325, ws_item_sk#15328, ws_order_number#15342L, ws_quantity#15343, ws_net_paid#15354]\n      :                                   :     :  +- *(3) Filter ((((((((isnotnull(ws_net_profit#15358) AND isnotnull(ws_net_paid#15354)) AND isnotnull(ws_quantity#15343)) AND (ws_net_profit#15358 > 1.00)) AND (ws_net_paid#15354 > 0.00)) AND (ws_quantity#15343 > 0)) AND isnotnull(ws_order_number#15342L)) AND isnotnull(ws_item_sk#15328)) AND isnotnull(ws_sold_date_sk#15325))\n      :                                   :     :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_item_sk#15328, ws_net_paid#15354, ws_net_profit#15358, ws_order_number#15342L, ws_quantity#15343, ws_sold_date_sk#15325], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#15325, ws_sold_time_sk#15326, ws_ship_date_sk#15327, ws_item_sk#15328, ws_bill_c..., Partition Cols: []]\n      :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#21282]\n      :                                   :        +- *(1) Filter (((isnotnull(wr_return_amt#15374) AND (wr_return_amt#15374 > 10000.00)) AND isnotnull(wr_order_number#15372L)) AND isnotnull(wr_item_sk#15361))\n      :                                   :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#15361, wr_order_number#15372L, wr_return_quantity#15373, wr_return_amt#15374], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#15359, wr_returned_time_sk#15360, wr_item_sk#15361, wr_refunded_customer_sk#..., Partition Cols: []]\n      :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21290]\n      :                                      +- *(2) Project [d_date_sk#15383]\n      :                                         +- *(2) Filter ((((isnotnull(d_year#15389) AND isnotnull(d_moy#15391)) AND (d_year#15389 = 1999)) AND (d_moy#15391 = 11)) AND isnotnull(d_date_sk#15383))\n      :                                            +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#15383, d_moy#15391, d_year#15389], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#15383, d_date_id#15384, d_date#15385, d_month_seq#15386, d_week_seq#15387, d_quarter_s..., Partition Cols: []]\n      :- *(14) Project [catalog AS channel#15306, item#15301, return_ratio#15302, return_rank#15304, currency_rank#15305]\n      :  +- *(14) Filter ((return_rank#15304 <= 10) OR (currency_rank#15305 <= 10))\n      :     +- Window [rank(currency_ratio#15303) windowspecdefinition(currency_ratio#15303 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#15305], [currency_ratio#15303 ASC NULLS FIRST]\n      :        +- *(13) Sort [currency_ratio#15303 ASC NULLS FIRST], false, 0\n      :           +- Window [rank(return_ratio#15302) windowspecdefinition(return_ratio#15302 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#15304], [return_ratio#15302 ASC NULLS FIRST]\n      :              +- *(12) Sort [return_ratio#15302 ASC NULLS FIRST], false, 0\n      :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#21422]\n      :                    +- *(11) HashAggregate(keys=[cs_item_sk#15426], functions=[sum(cast(coalesce(cr_return_quantity#15462, 0) as bigint)), sum(cast(coalesce(cs_quantity#15429, 0) as bigint)), sum(coalesce(cast(cr_return_amount#15463 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#15440 as decimal(12,2)), 0.00))], output=[item#15301, return_ratio#15302, currency_ratio#15303])\n      :                       +- Exchange hashpartitioning(cs_item_sk#15426, 200), ENSURE_REQUIREMENTS, [id=#21418]\n      :                          +- *(10) HashAggregate(keys=[cs_item_sk#15426], functions=[partial_sum(cast(coalesce(cr_return_quantity#15462, 0) as bigint)), partial_sum(cast(coalesce(cs_quantity#15429, 0) as bigint)), partial_sum(coalesce(cast(cr_return_amount#15463 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#15440 as decimal(12,2)), 0.00))], output=[cs_item_sk#15426, sum#15660L, sum#15661L, sum#15662, isEmpty#15663, sum#15664, isEmpty#15665])\n      :                             +- *(10) Project [cs_item_sk#15426, cs_quantity#15429, cs_net_paid#15440, cr_return_quantity#15462, cr_return_amount#15463]\n      :                                +- *(10) BroadcastHashJoin [cs_sold_date_sk#15411], [d_date_sk#15472], Inner, BuildRight, false\n      :                                   :- *(10) Project [cs_sold_date_sk#15411, cs_item_sk#15426, cs_quantity#15429, cs_net_paid#15440, cr_return_quantity#15462, cr_return_amount#15463]\n      :                                   :  +- *(10) BroadcastHashJoin [cs_order_number#15428L, cs_item_sk#15426], [cr_order_number#15461L, cr_item_sk#15447], Inner, BuildRight, false\n      :                                   :     :- *(10) Project [cs_sold_date_sk#15411, cs_item_sk#15426, cs_order_number#15428L, cs_quantity#15429, cs_net_paid#15440]\n      :                                   :     :  +- *(10) Filter ((((((((isnotnull(cs_net_profit#15444) AND isnotnull(cs_net_paid#15440)) AND isnotnull(cs_quantity#15429)) AND (cs_net_profit#15444 > 1.00)) AND (cs_net_paid#15440 > 0.00)) AND (cs_quantity#15429 > 0)) AND isnotnull(cs_order_number#15428L)) AND isnotnull(cs_item_sk#15426)) AND isnotnull(cs_sold_date_sk#15411))\n      :                                   :     :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#15426, cs_net_paid#15440, cs_net_profit#15444, cs_order_number#15428L, cs_quantity#15429, cs_sold_date_sk#15411], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#15411, cs_sold_time_sk#15412, cs_ship_date_sk#15413, cs_bill_customer_sk#15414, ..., Partition Cols: []]\n      :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#21319]\n      :                                   :        +- *(8) Filter (((isnotnull(cr_return_amount#15463) AND (cr_return_amount#15463 > 10000.00)) AND isnotnull(cr_order_number#15461L)) AND isnotnull(cr_item_sk#15447))\n      :                                   :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#15447, cr_order_number#15461L, cr_return_quantity#15462, cr_return_amount#15463], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#15445, cr_returned_time_sk#15446, cr_item_sk#15447, cr_refunded_customer_sk#..., Partition Cols: []]\n      :                                   +- ReusedExchange [d_date_sk#15472], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21290]\n      +- *(21) Project [store AS channel#15312, item#15307, return_ratio#15308, return_rank#15310, currency_rank#15311]\n         +- *(21) Filter ((return_rank#15310 <= 10) OR (currency_rank#15311 <= 10))\n            +- Window [rank(currency_ratio#15309) windowspecdefinition(currency_ratio#15309 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#15311], [currency_ratio#15309 ASC NULLS FIRST]\n               +- *(20) Sort [currency_ratio#15309 ASC NULLS FIRST], false, 0\n                  +- Window [rank(return_ratio#15308) windowspecdefinition(return_ratio#15308 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#15310], [return_ratio#15308 ASC NULLS FIRST]\n                     +- *(19) Sort [return_ratio#15308 ASC NULLS FIRST], false, 0\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#21517]\n                           +- *(18) HashAggregate(keys=[ss_item_sk#15502], functions=[sum(cast(coalesce(sr_return_quantity#15533, 0) as bigint)), sum(cast(coalesce(ss_quantity#15510, 0) as bigint)), sum(coalesce(cast(sr_return_amt#15534 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#15520 as decimal(12,2)), 0.00))], output=[item#15307, return_ratio#15308, currency_ratio#15309])\n                              +- Exchange hashpartitioning(ss_item_sk#15502, 200), ENSURE_REQUIREMENTS, [id=#21513]\n                                 +- *(17) HashAggregate(keys=[ss_item_sk#15502], functions=[partial_sum(cast(coalesce(sr_return_quantity#15533, 0) as bigint)), partial_sum(cast(coalesce(ss_quantity#15510, 0) as bigint)), partial_sum(coalesce(cast(sr_return_amt#15534 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#15520 as decimal(12,2)), 0.00))], output=[ss_item_sk#15502, sum#15672L, sum#15673L, sum#15674, isEmpty#15675, sum#15676, isEmpty#15677])\n                                    +- *(17) Project [ss_item_sk#15502, ss_quantity#15510, ss_net_paid#15520, sr_return_quantity#15533, sr_return_amt#15534]\n                                       +- *(17) BroadcastHashJoin [ss_sold_date_sk#15500], [d_date_sk#15543], Inner, BuildRight, false\n                                          :- *(17) Project [ss_sold_date_sk#15500, ss_item_sk#15502, ss_quantity#15510, ss_net_paid#15520, sr_return_quantity#15533, sr_return_amt#15534]\n                                          :  +- *(17) BroadcastHashJoin [ss_ticket_number#15509L, ss_item_sk#15502], [sr_ticket_number#15532L, sr_item_sk#15525], Inner, BuildRight, false\n                                          :     :- *(17) Project [ss_sold_date_sk#15500, ss_item_sk#15502, ss_ticket_number#15509L, ss_quantity#15510, ss_net_paid#15520]\n                                          :     :  +- *(17) Filter ((((((((isnotnull(ss_net_profit#15522) AND isnotnull(ss_net_paid#15520)) AND isnotnull(ss_quantity#15510)) AND (ss_net_profit#15522 > 1.00)) AND (ss_net_paid#15520 > 0.00)) AND (ss_quantity#15510 > 0)) AND isnotnull(ss_ticket_number#15509L)) AND isnotnull(ss_item_sk#15502)) AND isnotnull(ss_sold_date_sk#15500))\n                                          :     :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#15502, ss_net_paid#15520, ss_net_profit#15522, ss_quantity#15510, ss_sold_date_sk#15500, ss_ticket_number#15509L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#15500, ss_sold_time_sk#15501, ss_item_sk#15502, ss_customer_sk#15503, ss_cdemo_s..., Partition Cols: []]\n                                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#21356]\n                                          :        +- *(15) Filter (((isnotnull(sr_return_amt#15534) AND (sr_return_amt#15534 > 10000.00)) AND isnotnull(sr_ticket_number#15532L)) AND isnotnull(sr_item_sk#15525))\n                                          :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#15525, sr_ticket_number#15532L, sr_return_quantity#15533, sr_return_amt#15534], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#15523, sr_return_time_sk#15524, sr_item_sk#15525, sr_customer_sk#15526, sr_c..., Partition Cols: []]\n                                          +- ReusedExchange [d_date_sk#15543], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21290]\n",
    "iteration" : 1,
    "name" : "q49"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#16160, id#16161, spark_grouping_id#16159L, 200), ENSURE_REQUIREMENTS, [id=#21978]\n+- *(20) HashAggregate(keys=[channel#16160, id#16161, spark_grouping_id#16159L], functions=[partial_sum(sales#15762), partial_sum(returns#15764), partial_sum(profit#15740)], output=[channel#16160, id#16161, spark_grouping_id#16159L, sum#16179, isEmpty#16180, sum#16181, isEmpty#16182, sum#16183, isEmpty#16184])\n   +- *(20) Expand [List(sales#15762, returns#15764, profit#15740, channel#16157, id#16158, 0), List(sales#15762, returns#15764, profit#15740, channel#16157, null, 1), List(sales#15762, returns#15764, profit#15740, null, null, 3)], [sales#15762, returns#15764, profit#15740, channel#16160, id#16161, spark_grouping_id#16159L]\n      +- Union\n         :- *(6) HashAggregate(keys=[s_store_id#15870], functions=[sum(UnscaledValue(sales_price#15752)), sum(UnscaledValue(return_amt#15754)), sum(UnscaledValue(profit#15753)), sum(UnscaledValue(net_loss#15755))], output=[sales#15762, returns#15764, profit#15740, channel#16157, id#16158])\n         :  +- Exchange hashpartitioning(s_store_id#15870, 200), ENSURE_REQUIREMENTS, [id=#21843]\n         :     +- *(5) HashAggregate(keys=[s_store_id#15870], functions=[partial_sum(UnscaledValue(sales_price#15752)), partial_sum(UnscaledValue(return_amt#15754)), partial_sum(UnscaledValue(profit#15753)), partial_sum(UnscaledValue(net_loss#15755))], output=[s_store_id#15870, sum#16189L, sum#16190L, sum#16191L, sum#16192L])\n         :        +- *(5) Project [sales_price#15752, profit#15753, return_amt#15754, net_loss#15755, s_store_id#15870]\n         :           +- *(5) BroadcastHashJoin [store_sk#15750], [s_store_sk#15869], Inner, BuildRight, false\n         :              :- *(5) Project [store_sk#15750, sales_price#15752, profit#15753, return_amt#15754, net_loss#15755]\n         :              :  +- *(5) BroadcastHashJoin [date_sk#15751], [d_date_sk#15841], Inner, BuildRight, false\n         :              :     :- Union\n         :              :     :  :- *(1) Project [ss_store_sk#15805 AS store_sk#15750, ss_sold_date_sk#15798 AS date_sk#15751, ss_ext_sales_price#15813 AS sales_price#15752, ss_net_profit#15820 AS profit#15753, 0.00 AS return_amt#15754, 0.00 AS net_loss#15755]\n         :              :     :  :  +- *(1) Filter (isnotnull(ss_sold_date_sk#15798) AND isnotnull(ss_store_sk#15805))\n         :              :     :  :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_ext_sales_price#15813, ss_net_profit#15820, ss_sold_date_sk#15798, ss_store_sk#15805], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#15798, ss_sold_time_sk#15799, ss_item_sk#15800, ss_customer_sk#15801, ss_cdemo_s..., Partition Cols: []]\n         :              :     :  +- *(2) Project [sr_store_sk#15828 AS store_sk#15756, sr_returned_date_sk#15821 AS date_sk#15757, 0.00 AS sales_price#15758, 0.00 AS profit#15759, sr_return_amt#15832 AS return_amt#15760, sr_net_loss#15840 AS net_loss#15761]\n         :              :     :     +- *(2) Filter (isnotnull(sr_returned_date_sk#15821) AND isnotnull(sr_store_sk#15828))\n         :              :     :        +- Scan hive tpcds_sf1_iceberg.store_returns [sr_net_loss#15840, sr_return_amt#15832, sr_returned_date_sk#15821, sr_store_sk#15828], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#15821, sr_return_time_sk#15822, sr_item_sk#15823, sr_customer_sk#15824, sr_c..., Partition Cols: []]\n         :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21830]\n         :              :        +- *(3) Project [d_date_sk#15841]\n         :              :           +- *(3) Filter (((isnotnull(d_date#15843) AND (d_date#15843 >= 11188)) AND (d_date#15843 <= 11202)) AND isnotnull(d_date_sk#15841))\n         :              :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#15843, d_date_sk#15841], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#15841, d_date_id#15842, d_date#15843, d_month_seq#15844, d_week_seq#15845, d_quarter_s..., Partition Cols: []]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21837]\n         :                 +- *(4) Filter isnotnull(s_store_sk#15869)\n         :                    +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#15869, s_store_id#15870], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#15869, s_store_id#15870, s_rec_start_date#15871, s_rec_end_date#15872, s_closed_date_..., Partition Cols: []]\n         :- *(12) HashAggregate(keys=[cp_catalog_page_id#15988], functions=[sum(UnscaledValue(sales_price#15768)), sum(UnscaledValue(return_amt#15770)), sum(UnscaledValue(profit#15769)), sum(UnscaledValue(net_loss#15771))], output=[sales#15778, returns#15780, profit#15743, channel#16169, id#16170])\n         :  +- Exchange hashpartitioning(cp_catalog_page_id#15988, 200), ENSURE_REQUIREMENTS, [id=#21949]\n         :     +- *(11) HashAggregate(keys=[cp_catalog_page_id#15988], functions=[partial_sum(UnscaledValue(sales_price#15768)), partial_sum(UnscaledValue(return_amt#15770)), partial_sum(UnscaledValue(profit#15769)), partial_sum(UnscaledValue(net_loss#15771))], output=[cp_catalog_page_id#15988, sum#16197L, sum#16198L, sum#16199L, sum#16200L])\n         :        +- *(11) Project [sales_price#15768, profit#15769, return_amt#15770, net_loss#15771, cp_catalog_page_id#15988]\n         :           +- *(11) BroadcastHashJoin [page_sk#15766], [cp_catalog_page_sk#15987], Inner, BuildRight, false\n         :              :- *(11) Project [page_sk#15766, sales_price#15768, profit#15769, return_amt#15770, net_loss#15771]\n         :              :  +- *(11) BroadcastHashJoin [date_sk#15767], [d_date_sk#15959], Inner, BuildRight, false\n         :              :     :- Union\n         :              :     :  :- *(7) Project [cs_catalog_page_sk#15910 AS page_sk#15766, cs_sold_date_sk#15898 AS date_sk#15767, cs_ext_sales_price#15921 AS sales_price#15768, cs_net_profit#15931 AS profit#15769, 0.00 AS return_amt#15770, 0.00 AS net_loss#15771]\n         :              :     :  :  +- *(7) Filter (isnotnull(cs_sold_date_sk#15898) AND isnotnull(cs_catalog_page_sk#15910))\n         :              :     :  :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_catalog_page_sk#15910, cs_ext_sales_price#15921, cs_net_profit#15931, cs_sold_date_sk#15898], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#15898, cs_sold_time_sk#15899, cs_ship_date_sk#15900, cs_bill_customer_sk#15901, ..., Partition Cols: []]\n         :              :     :  +- *(8) Project [cr_catalog_page_sk#15944 AS page_sk#15772, cr_returned_date_sk#15932 AS date_sk#15773, 0.00 AS sales_price#15774, 0.00 AS profit#15775, cr_return_amount#15950 AS return_amt#15776, cr_net_loss#15958 AS net_loss#15777]\n         :              :     :     +- *(8) Filter (isnotnull(cr_returned_date_sk#15932) AND isnotnull(cr_catalog_page_sk#15944))\n         :              :     :        +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_catalog_page_sk#15944, cr_net_loss#15958, cr_return_amount#15950, cr_returned_date_sk#15932], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#15932, cr_returned_time_sk#15933, cr_item_sk#15934, cr_refunded_customer_sk#..., Partition Cols: []]\n         :              :     +- ReusedExchange [d_date_sk#15959], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21830]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21868]\n         :                 +- *(10) Filter isnotnull(cp_catalog_page_sk#15987)\n         :                    +- Scan hive tpcds_sf1_iceberg.catalog_page [cp_catalog_page_sk#15987, cp_catalog_page_id#15988], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cp_catalog_page_sk#15987, cp_catalog_page_id#15988, cp_start_date_sk#15989, cp_end_date_sk#15990..., Partition Cols: []]\n         +- *(19) HashAggregate(keys=[web_site_id#16117], functions=[sum(UnscaledValue(sales_price#15784)), sum(UnscaledValue(return_amt#15786)), sum(UnscaledValue(profit#15785)), sum(UnscaledValue(net_loss#15787))], output=[sales#15794, returns#15796, profit#15746, channel#16171, id#16172])\n            +- Exchange hashpartitioning(web_site_id#16117, 200), ENSURE_REQUIREMENTS, [id=#21969]\n               +- *(18) HashAggregate(keys=[web_site_id#16117], functions=[partial_sum(UnscaledValue(sales_price#15784)), partial_sum(UnscaledValue(return_amt#15786)), partial_sum(UnscaledValue(profit#15785)), partial_sum(UnscaledValue(net_loss#15787))], output=[web_site_id#16117, sum#16205L, sum#16206L, sum#16207L, sum#16208L])\n                  +- *(18) Project [sales_price#15784, profit#15785, return_amt#15786, net_loss#15787, web_site_id#16117]\n                     +- *(18) BroadcastHashJoin [wsr_web_site_sk#15782], [web_site_sk#16116], Inner, BuildRight, false\n                        :- *(18) Project [wsr_web_site_sk#15782, sales_price#15784, profit#15785, return_amt#15786, net_loss#15787]\n                        :  +- *(18) BroadcastHashJoin [date_sk#15783], [d_date_sk#16088], Inner, BuildRight, false\n                        :     :- Union\n                        :     :  :- *(13) Project [ws_web_site_sk#16009 AS wsr_web_site_sk#15782, ws_sold_date_sk#15996 AS date_sk#15783, ws_ext_sales_price#16019 AS sales_price#15784, ws_net_profit#16029 AS profit#15785, 0.00 AS return_amt#15786, 0.00 AS net_loss#15787]\n                        :     :  :  +- *(13) Filter (isnotnull(ws_sold_date_sk#15996) AND isnotnull(ws_web_site_sk#16009))\n                        :     :  :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#16019, ws_net_profit#16029, ws_sold_date_sk#15996, ws_web_site_sk#16009], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#15996, ws_sold_time_sk#15997, ws_ship_date_sk#15998, ws_item_sk#15999, ws_bill_c..., Partition Cols: []]\n                        :     :  +- *(15) Project [ws_web_site_sk#16067 AS wsr_web_site_sk#15788, wr_returned_date_sk#16030 AS date_sk#15789, 0.00 AS sales_price#15790, 0.00 AS profit#15791, wr_return_amt#16045 AS return_amt#15792, wr_net_loss#16053 AS net_loss#15793]\n                        :     :     +- *(15) BroadcastHashJoin [wr_item_sk#16032, wr_order_number#16043L], [ws_item_sk#16057, ws_order_number#16071L], Inner, BuildLeft, false\n                        :     :        :- BroadcastExchange HashedRelationBroadcastMode(List(input[1, int, true], input[2, bigint, true]),false), [id=#21885]\n                        :     :        :  +- *(14) Filter isnotnull(wr_returned_date_sk#16030)\n                        :     :        :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_returned_date_sk#16030, wr_item_sk#16032, wr_order_number#16043L, wr_return_amt#16045, wr_net_loss#16053], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#16030, wr_returned_time_sk#16031, wr_item_sk#16032, wr_refunded_customer_sk#..., Partition Cols: []]\n                        :     :        +- *(15) Filter ((isnotnull(ws_item_sk#16057) AND isnotnull(ws_order_number#16071L)) AND isnotnull(ws_web_site_sk#16067))\n                        :     :           +- Scan hive tpcds_sf1_iceberg.web_sales [ws_item_sk#16057, ws_web_site_sk#16067, ws_order_number#16071L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#16054, ws_sold_time_sk#16055, ws_ship_date_sk#16056, ws_item_sk#16057, ws_bill_c..., Partition Cols: []]\n                        :     +- ReusedExchange [d_date_sk#16088], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#21830]\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#21905]\n                           +- *(17) Filter isnotnull(web_site_sk#16116)\n                              +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#16116, web_site_id#16117], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#16116, web_site_id#16117, web_rec_start_date#16118, web_rec_end_date#16119, web_name..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q5"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#16268, s_company_id#16279, s_street_number#16281, s_street_name#16282, s_street_type#16283, s_suite_number#16284, s_city#16285, s_county#16286, s_state#16287, s_zip#16288, 200), ENSURE_REQUIREMENTS, [id=#22109]\n+- *(5) HashAggregate(keys=[s_store_name#16268, s_company_id#16279, s_street_number#16281, s_street_name#16282, s_street_type#16283, s_suite_number#16284, s_city#16285, s_county#16286, s_state#16287, s_zip#16288], functions=[partial_sum(cast(CASE WHEN ((sr_returned_date_sk#16243 - ss_sold_date_sk#16220) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#16243 - ss_sold_date_sk#16220) > 30) AND ((sr_returned_date_sk#16243 - ss_sold_date_sk#16220) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#16243 - ss_sold_date_sk#16220) > 60) AND ((sr_returned_date_sk#16243 - ss_sold_date_sk#16220) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#16243 - ss_sold_date_sk#16220) > 90) AND ((sr_returned_date_sk#16243 - ss_sold_date_sk#16220) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((sr_returned_date_sk#16243 - ss_sold_date_sk#16220) > 120) THEN 1 ELSE 0 END as bigint))], output=[s_store_name#16268, s_company_id#16279, s_street_number#16281, s_street_name#16282, s_street_type#16283, s_suite_number#16284, s_city#16285, s_county#16286, s_state#16287, s_zip#16288, sum#16383L, sum#16384L, sum#16385L, sum#16386L, sum#16387L])\n   +- *(5) Project [ss_sold_date_sk#16220, sr_returned_date_sk#16243, s_store_name#16268, s_company_id#16279, s_street_number#16281, s_street_name#16282, s_street_type#16283, s_suite_number#16284, s_city#16285, s_county#16286, s_state#16287, s_zip#16288]\n      +- *(5) BroadcastHashJoin [sr_returned_date_sk#16243], [d_date_sk#16320], Inner, BuildRight, false\n         :- *(5) Project [ss_sold_date_sk#16220, sr_returned_date_sk#16243, s_store_name#16268, s_company_id#16279, s_street_number#16281, s_street_name#16282, s_street_type#16283, s_suite_number#16284, s_city#16285, s_county#16286, s_state#16287, s_zip#16288]\n         :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#16220], [d_date_sk#16292], Inner, BuildRight, false\n         :     :- *(5) Project [ss_sold_date_sk#16220, sr_returned_date_sk#16243, s_store_name#16268, s_company_id#16279, s_street_number#16281, s_street_name#16282, s_street_type#16283, s_suite_number#16284, s_city#16285, s_county#16286, s_state#16287, s_zip#16288]\n         :     :  +- *(5) BroadcastHashJoin [ss_store_sk#16227], [s_store_sk#16263], Inner, BuildRight, false\n         :     :     :- *(5) Project [ss_sold_date_sk#16220, ss_store_sk#16227, sr_returned_date_sk#16243]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_ticket_number#16229L, ss_item_sk#16222, ss_customer_sk#16223], [sr_ticket_number#16252L, sr_item_sk#16245, sr_customer_sk#16246], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter ((((isnotnull(ss_ticket_number#16229L) AND isnotnull(ss_item_sk#16222)) AND isnotnull(ss_customer_sk#16223)) AND isnotnull(ss_store_sk#16227)) AND isnotnull(ss_sold_date_sk#16220))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#16220, ss_item_sk#16222, ss_customer_sk#16223, ss_store_sk#16227, ss_ticket_number#16229L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#16220, ss_sold_time_sk#16221, ss_item_sk#16222, ss_customer_sk#16223, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, bigint, false], input[1, int, false], input[2, int, false]),false), [id=#22081]\n         :     :     :        +- *(1) Filter (((isnotnull(sr_ticket_number#16252L) AND isnotnull(sr_item_sk#16245)) AND isnotnull(sr_customer_sk#16246)) AND isnotnull(sr_returned_date_sk#16243))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#16243, sr_item_sk#16245, sr_customer_sk#16246, sr_ticket_number#16252L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#16243, sr_return_time_sk#16244, sr_item_sk#16245, sr_customer_sk#16246, sr_c..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22088]\n         :     :        +- *(2) Filter isnotnull(s_store_sk#16263)\n         :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#16263, s_store_name#16268, s_company_id#16279, s_street_number#16281, s_street_name#16282, s_street_type#16283, s_suite_number#16284, s_city#16285, s_county#16286, s_state#16287, s_zip#16288], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#16263, s_store_id#16264, s_rec_start_date#16265, s_rec_end_date#16266, s_closed_date_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22095]\n         :        +- *(3) Filter isnotnull(d_date_sk#16292)\n         :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#16292], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#16292, d_date_id#16293, d_date#16294, d_month_seq#16295, d_week_seq#16296, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22103]\n            +- *(4) Project [d_date_sk#16320]\n               +- *(4) Filter ((((isnotnull(d_year#16326) AND isnotnull(d_moy#16328)) AND (d_year#16326 = 2000)) AND (d_moy#16328 = 9)) AND isnotnull(d_date_sk#16320))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#16320, d_moy#16328, d_year#16326], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#16320, d_date_id#16321, d_date#16322, d_month_seq#16323, d_week_seq#16324, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q50"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(item_sk#16404, 200), ENSURE_REQUIREMENTS, [id=#22419]\n+- *(13) Project [CASE WHEN isnotnull(item_sk#16410) THEN item_sk#16410 ELSE item_sk#16412 END AS item_sk#16404, CASE WHEN isnotnull(d_date#16450) THEN d_date#16450 ELSE d_date#16501 END AS d_date#16405, cume_sales#16411 AS web_sales#16406, cume_sales#16413 AS store_sales#16407]\n   +- SortMergeJoin [item_sk#16410, d_date#16450], [item_sk#16412, d_date#16501], FullOuter\n      :- *(6) Sort [item_sk#16410 ASC NULLS FIRST, d_date#16450 ASC NULLS FIRST], false, 0\n      :  +- Exchange hashpartitioning(item_sk#16410, d_date#16450, 200), ENSURE_REQUIREMENTS, [id=#22268]\n      :     +- *(5) Project [item_sk#16410, d_date#16450, cume_sales#16411]\n      :        +- Window [sum(_w0#16531) windowspecdefinition(ws_item_sk#16417, d_date#16450 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#16411], [ws_item_sk#16417], [d_date#16450 ASC NULLS FIRST]\n      :           +- *(4) Sort [ws_item_sk#16417 ASC NULLS FIRST, d_date#16450 ASC NULLS FIRST], false, 0\n      :              +- Exchange hashpartitioning(ws_item_sk#16417, 200), ENSURE_REQUIREMENTS, [id=#22260]\n      :                 +- *(3) HashAggregate(keys=[ws_item_sk#16417, d_date#16450], functions=[sum(UnscaledValue(ws_sales_price#16435))], output=[item_sk#16410, d_date#16450, _w0#16531, ws_item_sk#16417])\n      :                    +- Exchange hashpartitioning(ws_item_sk#16417, d_date#16450, 200), ENSURE_REQUIREMENTS, [id=#22256]\n      :                       +- *(2) HashAggregate(keys=[ws_item_sk#16417, d_date#16450], functions=[partial_sum(UnscaledValue(ws_sales_price#16435))], output=[ws_item_sk#16417, d_date#16450, sum#16542L])\n      :                          +- *(2) Project [ws_item_sk#16417, ws_sales_price#16435, d_date#16450]\n      :                             +- *(2) BroadcastHashJoin [ws_sold_date_sk#16414], [d_date_sk#16448], Inner, BuildRight, false\n      :                                :- *(2) Filter (isnotnull(ws_item_sk#16417) AND isnotnull(ws_sold_date_sk#16414))\n      :                                :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#16414, ws_item_sk#16417, ws_sales_price#16435], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#16414, ws_sold_time_sk#16415, ws_ship_date_sk#16416, ws_item_sk#16417, ws_bill_c..., Partition Cols: []]\n      :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22250]\n      :                                   +- *(1) Project [d_date_sk#16448, d_date#16450]\n      :                                      +- *(1) Filter (((isnotnull(d_month_seq#16451) AND (d_month_seq#16451 >= 1177)) AND (d_month_seq#16451 <= 1188)) AND isnotnull(d_date_sk#16448))\n      :                                         +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#16450, d_date_sk#16448, d_month_seq#16451], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#16448, d_date_id#16449, d_date#16450, d_month_seq#16451, d_week_seq#16452, d_quarter_s..., Partition Cols: []]\n      +- *(12) Sort [item_sk#16412 ASC NULLS FIRST, d_date#16501 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(item_sk#16412, d_date#16501, 200), ENSURE_REQUIREMENTS, [id=#22347]\n            +- *(11) Project [item_sk#16412, d_date#16501, cume_sales#16413]\n               +- Window [sum(_w0#16532) windowspecdefinition(ss_item_sk#16478, d_date#16501 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#16413], [ss_item_sk#16478], [d_date#16501 ASC NULLS FIRST]\n                  +- *(10) Sort [ss_item_sk#16478 ASC NULLS FIRST, d_date#16501 ASC NULLS FIRST], false, 0\n                     +- Exchange hashpartitioning(ss_item_sk#16478, 200), ENSURE_REQUIREMENTS, [id=#22339]\n                        +- *(9) HashAggregate(keys=[ss_item_sk#16478, d_date#16501], functions=[sum(UnscaledValue(ss_sales_price#16489))], output=[item_sk#16412, d_date#16501, _w0#16532, ss_item_sk#16478])\n                           +- Exchange hashpartitioning(ss_item_sk#16478, d_date#16501, 200), ENSURE_REQUIREMENTS, [id=#22335]\n                              +- *(8) HashAggregate(keys=[ss_item_sk#16478, d_date#16501], functions=[partial_sum(UnscaledValue(ss_sales_price#16489))], output=[ss_item_sk#16478, d_date#16501, sum#16544L])\n                                 +- *(8) Project [ss_item_sk#16478, ss_sales_price#16489, d_date#16501]\n                                    +- *(8) BroadcastHashJoin [ss_sold_date_sk#16476], [d_date_sk#16499], Inner, BuildRight, false\n                                       :- *(8) Filter (isnotnull(ss_item_sk#16478) AND isnotnull(ss_sold_date_sk#16476))\n                                       :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#16476, ss_item_sk#16478, ss_sales_price#16489], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#16476, ss_sold_time_sk#16477, ss_item_sk#16478, ss_customer_sk#16479, ss_cdemo_s..., Partition Cols: []]\n                                       +- ReusedExchange [d_date_sk#16499, d_date#16501], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22250]\n",
    "iteration" : 1,
    "name" : "q51"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#16567, i_brand#16620, i_brand_id#16619, 200), ENSURE_REQUIREMENTS, [id=#22507]\n+- *(3) HashAggregate(keys=[d_year#16567, i_brand#16620, i_brand_id#16619], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#16604))], output=[d_year#16567, i_brand#16620, i_brand_id#16619, sum#16643L])\n   +- *(3) Project [d_year#16567, ss_ext_sales_price#16604, i_brand_id#16619, i_brand#16620]\n      +- *(3) BroadcastHashJoin [ss_item_sk#16591], [i_item_sk#16612], Inner, BuildRight, false\n         :- *(3) Project [d_year#16567, ss_item_sk#16591, ss_ext_sales_price#16604]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#16561], [ss_sold_date_sk#16589], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22491]\n         :     :  +- *(1) Project [d_date_sk#16561, d_year#16567]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#16569) AND isnotnull(d_year#16567)) AND (d_moy#16569 = 12)) AND (d_year#16567 = 2001)) AND isnotnull(d_date_sk#16561))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#16561, d_moy#16569, d_year#16567], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#16561, d_date_id#16562, d_date#16563, d_month_seq#16564, d_week_seq#16565, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#16589) AND isnotnull(ss_item_sk#16591))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#16589, ss_item_sk#16591, ss_ext_sales_price#16604], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#16589, ss_sold_time_sk#16590, ss_item_sk#16591, ss_customer_sk#16592, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22501]\n            +- *(2) Project [i_item_sk#16612, i_brand_id#16619, i_brand#16620]\n               +- *(2) Filter ((isnotnull(i_manager_id#16632) AND (i_manager_id#16632 = 1)) AND isnotnull(i_item_sk#16612))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#16620, i_brand_id#16619, i_item_sk#16612, i_manager_id#16632], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#16612, i_item_id#16613, i_rec_start_date#16614, i_rec_end_date#16615, i_item_desc#1661..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q52"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manufact_id#16664, 200), ENSURE_REQUIREMENTS, [id=#22638]\n+- *(5) HashAggregate(keys=[i_manufact_id#16664, d_qoy#16706], functions=[sum(UnscaledValue(ss_sales_price#16686))], output=[i_manufact_id#16664, sum_sales#16649, _w0#16756])\n   +- Exchange hashpartitioning(i_manufact_id#16664, d_qoy#16706, 200), ENSURE_REQUIREMENTS, [id=#22634]\n      +- *(4) HashAggregate(keys=[i_manufact_id#16664, d_qoy#16706], functions=[partial_sum(UnscaledValue(ss_sales_price#16686))], output=[i_manufact_id#16664, d_qoy#16706, sum#16761L])\n         +- *(4) Project [i_manufact_id#16664, ss_sales_price#16686, d_qoy#16706]\n            +- *(4) BroadcastHashJoin [ss_store_sk#16680], [s_store_sk#16724], Inner, BuildRight, false\n               :- *(4) Project [i_manufact_id#16664, ss_store_sk#16680, ss_sales_price#16686, d_qoy#16706]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#16673], [d_date_sk#16696], Inner, BuildRight, false\n               :     :- *(4) Project [i_manufact_id#16664, ss_sold_date_sk#16673, ss_store_sk#16680, ss_sales_price#16686]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#16651], [ss_item_sk#16675], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22611]\n               :     :     :  +- *(1) Project [i_item_sk#16651, i_manufact_id#16664]\n               :     :     :     +- *(1) Filter ((((i_category#16663 IN (Books,Children,Electronics) AND i_class#16661 IN (personal,portable,reference,self-help)) AND i_brand#16659 IN (scholaramalgamalg #14,scholaramalgamalg #7,exportiunivamalg #9,scholaramalgamalg #9)) OR ((i_category#16663 IN (Women,Music,Men) AND i_class#16661 IN (accessories,classical,fragrances,pants)) AND i_brand#16659 IN (amalgimporto #1,edu packscholar #1,exportiimporto #1,importoamalg #1))) AND isnotnull(i_item_sk#16651))\n               :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#16659, i_category#16663, i_class#16661, i_item_sk#16651, i_manufact_id#16664], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#16651, i_item_id#16652, i_rec_start_date#16653, i_rec_end_date#16654, i_item_desc#1665..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#16675) AND isnotnull(ss_sold_date_sk#16673)) AND isnotnull(ss_store_sk#16680))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#16673, ss_item_sk#16675, ss_store_sk#16680, ss_sales_price#16686], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#16673, ss_sold_time_sk#16674, ss_item_sk#16675, ss_customer_sk#16676, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22621]\n               :        +- *(2) Project [d_date_sk#16696, d_qoy#16706]\n               :           +- *(2) Filter (d_month_seq#16699 INSET (1190,1196,1191,1199,1195,1192,1194,1198,1188,1189,1193,1197) AND isnotnull(d_date_sk#16696))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#16696, d_month_seq#16699, d_qoy#16706], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#16696, d_date_id#16697, d_date#16698, d_month_seq#16699, d_week_seq#16700, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22628]\n                  +- *(3) Filter isnotnull(s_store_sk#16724)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#16724], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#16724, s_store_id#16725, s_rec_start_date#16726, s_rec_end_date#16727, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q53"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(segment#16777, 200), ENSURE_REQUIREMENTS, [id=#22968]\n+- *(14) HashAggregate(keys=[segment#16777], functions=[partial_count(1)], output=[segment#16777, count#17071L])\n   +- *(14) HashAggregate(keys=[c_customer_sk#16897], functions=[sum(UnscaledValue(ss_ext_sales_price#16930))], output=[segment#16777])\n      +- *(14) HashAggregate(keys=[c_customer_sk#16897], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#16930))], output=[c_customer_sk#16897, sum#17073L])\n         +- *(14) Project [c_customer_sk#16897, ss_ext_sales_price#16930]\n            +- *(14) BroadcastHashJoin [ss_sold_date_sk#16915], [d_date_sk#16980], Inner, BuildRight, false\n               :- *(14) Project [c_customer_sk#16897, ss_sold_date_sk#16915, ss_ext_sales_price#16930]\n               :  +- *(14) BroadcastHashJoin [ca_county#16945, ca_state#16946], [s_county#16974, s_state#16975], Inner, BuildRight, false\n               :     :- *(14) Project [c_customer_sk#16897, ss_sold_date_sk#16915, ss_ext_sales_price#16930, ca_county#16945, ca_state#16946]\n               :     :  +- *(14) BroadcastHashJoin [c_current_addr_sk#16901], [ca_address_sk#16938], Inner, BuildRight, false\n               :     :     :- *(14) Project [c_customer_sk#16897, c_current_addr_sk#16901, ss_sold_date_sk#16915, ss_ext_sales_price#16930]\n               :     :     :  +- *(14) SortMergeJoin [c_customer_sk#16897], [ss_customer_sk#16918], Inner\n               :     :     :     :- *(8) Sort [c_customer_sk#16897 ASC NULLS FIRST], false, 0\n               :     :     :     :  +- Exchange hashpartitioning(c_customer_sk#16897, 200), ENSURE_REQUIREMENTS, [id=#22927]\n               :     :     :     :     +- *(7) HashAggregate(keys=[c_customer_sk#16897, c_current_addr_sk#16901], functions=[], output=[c_customer_sk#16897, c_current_addr_sk#16901])\n               :     :     :     :        +- Exchange hashpartitioning(c_customer_sk#16897, c_current_addr_sk#16901, 200), ENSURE_REQUIREMENTS, [id=#22923]\n               :     :     :     :           +- *(6) HashAggregate(keys=[c_customer_sk#16897, c_current_addr_sk#16901], functions=[], output=[c_customer_sk#16897, c_current_addr_sk#16901])\n               :     :     :     :              +- *(6) Project [c_customer_sk#16897, c_current_addr_sk#16901]\n               :     :     :     :                 +- *(6) BroadcastHashJoin [customer_sk#16769], [c_customer_sk#16897], Inner, BuildRight, false\n               :     :     :     :                    :- *(6) Project [customer_sk#16769]\n               :     :     :     :                    :  +- *(6) BroadcastHashJoin [sold_date_sk#16768], [d_date_sk#16869], Inner, BuildRight, false\n               :     :     :     :                    :     :- *(6) Project [sold_date_sk#16768, customer_sk#16769]\n               :     :     :     :                    :     :  +- *(6) BroadcastHashJoin [item_sk#16770], [i_item_sk#16847], Inner, BuildRight, false\n               :     :     :     :                    :     :     :- Union\n               :     :     :     :                    :     :     :  :- *(1) Project [cs_sold_date_sk#16779 AS sold_date_sk#16768, cs_bill_customer_sk#16782 AS customer_sk#16769, cs_item_sk#16794 AS item_sk#16770]\n               :     :     :     :                    :     :     :  :  +- *(1) Filter ((isnotnull(cs_item_sk#16794) AND isnotnull(cs_sold_date_sk#16779)) AND isnotnull(cs_bill_customer_sk#16782))\n               :     :     :     :                    :     :     :  :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_bill_customer_sk#16782, cs_item_sk#16794, cs_sold_date_sk#16779], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#16779, cs_sold_time_sk#16780, cs_ship_date_sk#16781, cs_bill_customer_sk#16782, ..., Partition Cols: []]\n               :     :     :     :                    :     :     :  +- *(2) Project [ws_sold_date_sk#16813 AS sold_date_sk#16771, ws_bill_customer_sk#16817 AS customer_sk#16772, ws_item_sk#16816 AS item_sk#16773]\n               :     :     :     :                    :     :     :     +- *(2) Filter ((isnotnull(ws_item_sk#16816) AND isnotnull(ws_sold_date_sk#16813)) AND isnotnull(ws_bill_customer_sk#16817))\n               :     :     :     :                    :     :     :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_bill_customer_sk#16817, ws_item_sk#16816, ws_sold_date_sk#16813], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#16813, ws_sold_time_sk#16814, ws_ship_date_sk#16815, ws_item_sk#16816, ws_bill_c..., Partition Cols: []]\n               :     :     :     :                    :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22902]\n               :     :     :     :                    :     :        +- *(3) Project [i_item_sk#16847]\n               :     :     :     :                    :     :           +- *(3) Filter ((((isnotnull(i_category#16859) AND isnotnull(i_class#16857)) AND (i_category#16859 = Men)) AND (i_class#16857 = pants)) AND isnotnull(i_item_sk#16847))\n               :     :     :     :                    :     :              +- Scan hive tpcds_sf1_iceberg.item [i_category#16859, i_class#16857, i_item_sk#16847], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#16847, i_item_id#16848, i_rec_start_date#16849, i_rec_end_date#16850, i_item_desc#1685..., Partition Cols: []]\n               :     :     :     :                    :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22910]\n               :     :     :     :                    :        +- *(4) Project [d_date_sk#16869]\n               :     :     :     :                    :           +- *(4) Filter ((((isnotnull(d_moy#16877) AND isnotnull(d_year#16875)) AND (d_moy#16877 = 5)) AND (d_year#16875 = 2002)) AND isnotnull(d_date_sk#16869))\n               :     :     :     :                    :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#16869, d_moy#16877, d_year#16875], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#16869, d_date_id#16870, d_date#16871, d_month_seq#16872, d_week_seq#16873, d_quarter_s..., Partition Cols: []]\n               :     :     :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22917]\n               :     :     :     :                       +- *(5) Filter (isnotnull(c_customer_sk#16897) AND isnotnull(c_current_addr_sk#16901))\n               :     :     :     :                          +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#16897, c_current_addr_sk#16901], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#16897, c_customer_id#16898, c_current_cdemo_sk#16899, c_current_hdemo_sk#16900, c_..., Partition Cols: []]\n               :     :     :     +- *(10) Sort [ss_customer_sk#16918 ASC NULLS FIRST], false, 0\n               :     :     :        +- Exchange hashpartitioning(ss_customer_sk#16918, 200), ENSURE_REQUIREMENTS, [id=#22935]\n               :     :     :           +- *(9) Filter (isnotnull(ss_customer_sk#16918) AND isnotnull(ss_sold_date_sk#16915))\n               :     :     :              +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#16915, ss_customer_sk#16918, ss_ext_sales_price#16930], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#16915, ss_sold_time_sk#16916, ss_item_sk#16917, ss_customer_sk#16918, ss_cdemo_s..., Partition Cols: []]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#22945]\n               :     :        +- *(11) Filter ((isnotnull(ca_address_sk#16938) AND isnotnull(ca_county#16945)) AND isnotnull(ca_state#16946))\n               :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#16938, ca_county#16945, ca_state#16946], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#16938, ca_address_id#16939, ca_street_number#16940, ca_street_name#16941, ca_stree..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [id=#22952]\n               :        +- *(12) Filter (isnotnull(s_county#16974) AND isnotnull(s_state#16975))\n               :           +- Scan hive tpcds_sf1_iceberg.store [s_county#16974, s_state#16975], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#16951, s_store_id#16952, s_rec_start_date#16953, s_rec_end_date#16954, s_closed_date_..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#22960]\n                  +- *(13) Project [d_date_sk#16980]\n                     +- *(13) Filter (((isnotnull(d_month_seq#16983) AND (d_month_seq#16983 >= Subquery scalar-subquery#16774, [id=#22815])) AND (d_month_seq#16983 <= Subquery scalar-subquery#16775, [id=#22836])) AND isnotnull(d_date_sk#16980))\n                        :  :- Subquery scalar-subquery#16774, [id=#22815]\n                        :  :  +- *(2) HashAggregate(keys=[(d_month_seq + 1)#17036], functions=[], output=[(d_month_seq + 1)#17036])\n                        :  :     +- Exchange hashpartitioning((d_month_seq + 1)#17036, 200), ENSURE_REQUIREMENTS, [id=#22811]\n                        :  :        +- *(1) HashAggregate(keys=[(d_month_seq + 1)#17036], functions=[], output=[(d_month_seq + 1)#17036])\n                        :  :           +- *(1) Project [(d_month_seq#17011 + 1) AS (d_month_seq + 1)#17036]\n                        :  :              +- *(1) Filter (((isnotnull(d_year#17014) AND isnotnull(d_moy#17016)) AND (d_year#17014 = 2002)) AND (d_moy#17016 = 5))\n                        :  :                 +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#17011, d_moy#17016, d_year#17014], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#17008, d_date_id#17009, d_date#17010, d_month_seq#17011, d_week_seq#17012, d_quarter_s..., Partition Cols: []]\n                        :  +- Subquery scalar-subquery#16775, [id=#22836]\n                        :     +- *(2) HashAggregate(keys=[(d_month_seq + 3)#17065], functions=[], output=[(d_month_seq + 3)#17065])\n                        :        +- Exchange hashpartitioning((d_month_seq + 3)#17065, 200), ENSURE_REQUIREMENTS, [id=#22832]\n                        :           +- *(1) HashAggregate(keys=[(d_month_seq + 3)#17065], functions=[], output=[(d_month_seq + 3)#17065])\n                        :              +- *(1) Project [(d_month_seq#17040 + 3) AS (d_month_seq + 3)#17065]\n                        :                 +- *(1) Filter (((isnotnull(d_year#17043) AND isnotnull(d_moy#17045)) AND (d_year#17043 = 2002)) AND (d_moy#17045 = 5))\n                        :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#17040, d_moy#17045, d_year#17043], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#17037, d_date_id#17038, d_date#17039, d_month_seq#17040, d_week_seq#17041, d_quarter_s..., Partition Cols: []]\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#16980, d_month_seq#16983], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#16980, d_date_id#16981, d_date#16982, d_month_seq#16983, d_week_seq#16984, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q54"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand#17140, i_brand_id#17139, 200), ENSURE_REQUIREMENTS, [id=#23124]\n+- *(3) HashAggregate(keys=[i_brand#17140, i_brand_id#17139], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#17124))], output=[i_brand#17140, i_brand_id#17139, sum#17162L])\n   +- *(3) Project [ss_ext_sales_price#17124, i_brand_id#17139, i_brand#17140]\n      +- *(3) BroadcastHashJoin [ss_item_sk#17111], [i_item_sk#17132], Inner, BuildRight, false\n         :- *(3) Project [ss_item_sk#17111, ss_ext_sales_price#17124]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#17081], [ss_sold_date_sk#17109], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23108]\n         :     :  +- *(1) Project [d_date_sk#17081]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#17089) AND isnotnull(d_year#17087)) AND (d_moy#17089 = 11)) AND (d_year#17087 = 2001)) AND isnotnull(d_date_sk#17081))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#17081, d_moy#17089, d_year#17087], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#17081, d_date_id#17082, d_date#17083, d_month_seq#17084, d_week_seq#17085, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#17109) AND isnotnull(ss_item_sk#17111))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#17109, ss_item_sk#17111, ss_ext_sales_price#17124], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#17109, ss_sold_time_sk#17110, ss_item_sk#17111, ss_customer_sk#17112, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23118]\n            +- *(2) Project [i_item_sk#17132, i_brand_id#17139, i_brand#17140]\n               +- *(2) Filter ((isnotnull(i_manager_id#17152) AND (i_manager_id#17152 = 67)) AND isnotnull(i_item_sk#17132))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#17140, i_brand_id#17139, i_item_sk#17132, i_manager_id#17152], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#17132, i_item_id#17133, i_rec_start_date#17134, i_rec_end_date#17135, i_item_desc#1713..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q55"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#17239, 200), ENSURE_REQUIREMENTS, [id=#23756]\n+- *(19) HashAggregate(keys=[i_item_id#17239], functions=[partial_sum(total_sales#17169)], output=[i_item_id#17239, sum#17530, isEmpty#17531])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_item_id#17239], functions=[sum(UnscaledValue(ss_ext_sales_price#17189))], output=[i_item_id#17239, total_sales#17169])\n      :  +- Exchange hashpartitioning(i_item_id#17239, 200), ENSURE_REQUIREMENTS, [id=#23446]\n      :     +- *(5) HashAggregate(keys=[i_item_id#17239], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#17189))], output=[i_item_id#17239, sum#17533L])\n      :        +- *(5) Project [ss_ext_sales_price#17189, i_item_id#17239]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#17176], [i_item_sk#17238], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#17176, ss_ext_sales_price#17189]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#17180], [ca_address_sk#17225], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#17176, ss_addr_sk#17180, ss_ext_sales_price#17189]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#17174], [d_date_sk#17197], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#17174) AND isnotnull(ss_addr_sk#17180)) AND isnotnull(ss_item_sk#17176))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#17174, ss_item_sk#17176, ss_addr_sk#17180, ss_ext_sales_price#17189], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#17174, ss_sold_time_sk#17175, ss_item_sk#17176, ss_customer_sk#17177, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23418]\n      :              :     :        +- *(1) Project [d_date_sk#17197]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#17203) AND isnotnull(d_moy#17205)) AND (d_year#17203 = 1999)) AND (d_moy#17205 = 6)) AND isnotnull(d_date_sk#17197))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#17197, d_moy#17205, d_year#17203], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#17197, d_date_id#17198, d_date#17199, d_month_seq#17200, d_week_seq#17201, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23426]\n      :              :        +- *(2) Project [ca_address_sk#17225]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#17236) AND (ca_gmt_offset#17236 = -7.00)) AND isnotnull(ca_address_sk#17225))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#17225, ca_gmt_offset#17236], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#17225, ca_address_id#17226, ca_street_number#17227, ca_street_name#17228, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23440]\n      :                 +- *(4) BroadcastHashJoin [i_item_id#17239], [i_item_id#17455], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#17238)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#17238, i_item_id#17239], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#17238, i_item_id#17239, i_rec_start_date#17240, i_rec_end_date#17241, i_item_desc#1724..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#23436]\n      :                       +- *(3) Project [i_item_id#17455]\n      :                          +- *(3) Filter i_color#17471 IN (blanched,spring,seashell)\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_color#17471, i_item_id#17455], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#17454, i_item_id#17455, i_rec_start_date#17456, i_rec_end_date#17457, i_item_desc#1745..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_item_id#17336], functions=[sum(UnscaledValue(cs_ext_sales_price#17283))], output=[i_item_id#17336, total_sales#17171])\n      :  +- Exchange hashpartitioning(i_item_id#17336, 200), ENSURE_REQUIREMENTS, [id=#23620]\n      :     +- *(11) HashAggregate(keys=[i_item_id#17336], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#17283))], output=[i_item_id#17336, sum#17535L])\n      :        +- *(11) Project [cs_ext_sales_price#17283, i_item_id#17336]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#17275], [i_item_sk#17335], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#17275, cs_ext_sales_price#17283]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#17266], [ca_address_sk#17322], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#17266, cs_item_sk#17275, cs_ext_sales_price#17283]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#17260], [d_date_sk#17294], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#17260) AND isnotnull(cs_bill_addr_sk#17266)) AND isnotnull(cs_item_sk#17275))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#17260, cs_bill_addr_sk#17266, cs_item_sk#17275, cs_ext_sales_price#17283], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#17260, cs_sold_time_sk#17261, cs_ship_date_sk#17262, cs_bill_customer_sk#17263, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#17294], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23418]\n      :              :     +- ReusedExchange [ca_address_sk#17322], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23426]\n      :              +- ReusedExchange [i_item_sk#17335, i_item_id#17336], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23440]\n      +- *(18) HashAggregate(keys=[i_item_id#17433], functions=[sum(UnscaledValue(ws_ext_sales_price#17380))], output=[i_item_id#17433, total_sales#17173])\n         +- Exchange hashpartitioning(i_item_id#17433, 200), ENSURE_REQUIREMENTS, [id=#23724]\n            +- *(17) HashAggregate(keys=[i_item_id#17433], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#17380))], output=[i_item_id#17433, sum#17537L])\n               +- *(17) Project [ws_ext_sales_price#17380, i_item_id#17433]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#17360], [i_item_sk#17432], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#17360, ws_ext_sales_price#17380]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#17364], [ca_address_sk#17419], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#17360, ws_bill_addr_sk#17364, ws_ext_sales_price#17380]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#17357], [d_date_sk#17391], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#17357) AND isnotnull(ws_bill_addr_sk#17364)) AND isnotnull(ws_item_sk#17360))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#17357, ws_item_sk#17360, ws_bill_addr_sk#17364, ws_ext_sales_price#17380], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#17357, ws_sold_time_sk#17358, ws_ship_date_sk#17359, ws_item_sk#17360, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#17391], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23418]\n                     :     +- ReusedExchange [ca_address_sk#17419], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#23426]\n                     +- ReusedExchange [i_item_sk#17432, i_item_id#17433], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#23440]\n",
    "iteration" : 1,
    "name" : "q56"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#17567, i_brand#17563, cc_name#17645, rn#17546, 200), ENSURE_REQUIREMENTS, [id=#24117]\n+- *(9) Project [i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, sum_sales#17544, avg_monthly_sales#17545, rn#17546]\n   +- *(9) Filter (((((isnotnull(d_year#17617) AND isnotnull(avg_monthly_sales#17545)) AND (d_year#17617 = 2000)) AND (avg_monthly_sales#17545 > 0.000000)) AND (CASE WHEN (avg_monthly_sales#17545 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#17544 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#17545 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#17545 as decimal(22,6)))), DecimalType(38,16), true) ELSE null END > 0.1000000000000000)) AND isnotnull(rn#17546))\n      +- Window [rank(d_year#17617, d_moy#17619) windowspecdefinition(i_category#17567, i_brand#17563, cc_name#17645, d_year#17617 ASC NULLS FIRST, d_moy#17619 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#17546], [i_category#17567, i_brand#17563, cc_name#17645], [d_year#17617 ASC NULLS FIRST, d_moy#17619 ASC NULLS FIRST]\n         +- *(8) Sort [i_category#17567 ASC NULLS FIRST, i_brand#17563 ASC NULLS FIRST, cc_name#17645 ASC NULLS FIRST, d_year#17617 ASC NULLS FIRST, d_moy#17619 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(i_category#17567, i_brand#17563, cc_name#17645, 200), ENSURE_REQUIREMENTS, [id=#24108]\n               +- *(7) Project [i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, d_moy#17619, sum_sales#17544, avg_monthly_sales#17545]\n                  +- Window [avg(_w0#17933) windowspecdefinition(i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#17545], [i_category#17567, i_brand#17563, cc_name#17645, d_year#17617]\n                     +- *(6) Sort [i_category#17567 ASC NULLS FIRST, i_brand#17563 ASC NULLS FIRST, cc_name#17645 ASC NULLS FIRST, d_year#17617 ASC NULLS FIRST], false, 0\n                        +- Exchange hashpartitioning(i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, 200), ENSURE_REQUIREMENTS, [id=#24100]\n                           +- *(5) HashAggregate(keys=[i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, d_moy#17619], functions=[sum(UnscaledValue(cs_sales_price#17598))], output=[i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, d_moy#17619, sum_sales#17544, _w0#17933])\n                              +- Exchange hashpartitioning(i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, d_moy#17619, 200), ENSURE_REQUIREMENTS, [id=#24096]\n                                 +- *(4) HashAggregate(keys=[i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, d_moy#17619], functions=[partial_sum(UnscaledValue(cs_sales_price#17598))], output=[i_category#17567, i_brand#17563, cc_name#17645, d_year#17617, d_moy#17619, sum#18072L])\n                                    +- *(4) Project [i_brand#17563, i_category#17567, cs_sales_price#17598, d_year#17617, d_moy#17619, cc_name#17645]\n                                       +- *(4) BroadcastHashJoin [cs_call_center_sk#17588], [cc_call_center_sk#17639], Inner, BuildRight, false\n                                          :- *(4) Project [i_brand#17563, i_category#17567, cs_call_center_sk#17588, cs_sales_price#17598, d_year#17617, d_moy#17619]\n                                          :  +- *(4) BroadcastHashJoin [cs_sold_date_sk#17577], [d_date_sk#17611], Inner, BuildRight, false\n                                          :     :- *(4) Project [i_brand#17563, i_category#17567, cs_sold_date_sk#17577, cs_call_center_sk#17588, cs_sales_price#17598]\n                                          :     :  +- *(4) BroadcastHashJoin [i_item_sk#17555], [cs_item_sk#17592], Inner, BuildLeft, false\n                                          :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24074]\n                                          :     :     :  +- *(1) Filter ((isnotnull(i_item_sk#17555) AND isnotnull(i_category#17567)) AND isnotnull(i_brand#17563))\n                                          :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#17555, i_brand#17563, i_category#17567], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#17555, i_item_id#17556, i_rec_start_date#17557, i_rec_end_date#17558, i_item_desc#1755..., Partition Cols: []]\n                                          :     :     +- *(4) Filter ((isnotnull(cs_item_sk#17592) AND isnotnull(cs_sold_date_sk#17577)) AND isnotnull(cs_call_center_sk#17588))\n                                          :     :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#17577, cs_call_center_sk#17588, cs_item_sk#17592, cs_sales_price#17598], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#17577, cs_sold_time_sk#17578, cs_ship_date_sk#17579, cs_bill_customer_sk#17580, ..., Partition Cols: []]\n                                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24083]\n                                          :        +- *(2) Filter ((((d_year#17617 = 2000) OR ((d_year#17617 = 1999) AND (d_moy#17619 = 12))) OR ((d_year#17617 = 2001) AND (d_moy#17619 = 1))) AND isnotnull(d_date_sk#17611))\n                                          :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#17611, d_year#17617, d_moy#17619], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#17611, d_date_id#17612, d_date#17613, d_month_seq#17614, d_week_seq#17615, d_quarter_s..., Partition Cols: []]\n                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24090]\n                                             +- *(3) Filter (isnotnull(cc_call_center_sk#17639) AND isnotnull(cc_name#17645))\n                                                +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#17639, cc_name#17645], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#17639, cc_call_center_id#17640, cc_rec_start_date#17641, cc_rec_end_date#17642..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q57"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#18148, 200), ENSURE_REQUIREMENTS, [id=#24800]\n+- *(4) HashAggregate(keys=[i_item_id#18148], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#18139))], output=[i_item_id#18148, sum#18545L])\n   +- *(4) Project [ss_ext_sales_price#18139, i_item_id#18148]\n      +- *(4) BroadcastHashJoin [ss_sold_date_sk#18124], [d_date_sk#18169], Inner, BuildRight, false\n         :- *(4) Project [ss_sold_date_sk#18124, ss_ext_sales_price#18139, i_item_id#18148]\n         :  +- *(4) BroadcastHashJoin [ss_item_sk#18126], [i_item_sk#18147], Inner, BuildRight, false\n         :     :- *(4) Filter (isnotnull(ss_item_sk#18126) AND isnotnull(ss_sold_date_sk#18124))\n         :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#18124, ss_item_sk#18126, ss_ext_sales_price#18139], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#18124, ss_sold_time_sk#18125, ss_item_sk#18126, ss_customer_sk#18127, ss_cdemo_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#24779]\n         :        +- *(1) Filter (isnotnull(i_item_sk#18147) AND isnotnull(i_item_id#18148))\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#18147, i_item_id#18148], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#18147, i_item_id#18148, i_rec_start_date#18149, i_rec_end_date#18150, i_item_desc#1815..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#24794]\n            +- *(3) Project [d_date_sk#18169]\n               +- *(3) BroadcastHashJoin [d_date#18171], [d_date#18367], LeftSemi, BuildRight, false\n                  :- *(3) Filter isnotnull(d_date_sk#18169)\n                  :  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#18169, d_date#18171], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#18169, d_date_id#18170, d_date#18171, d_month_seq#18172, d_week_seq#18173, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#24789]\n                     +- *(2) Project [d_date#18367]\n                        +- *(2) Filter (isnotnull(d_week_seq#18369) AND (d_week_seq#18369 = Subquery scalar-subquery#18112, [id=#24666]))\n                           :  +- Subquery scalar-subquery#18112, [id=#24666]\n                           :     +- *(1) Project [d_week_seq#18397]\n                           :        +- *(1) Filter (isnotnull(d_date#18395) AND (d_date#18395 = 11101))\n                           :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#18395, d_week_seq#18397], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#18393, d_date_id#18394, d_date#18395, d_month_seq#18396, d_week_seq#18397, d_quarter_s..., Partition Cols: []]\n                           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#18367, d_week_seq#18369], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#18365, d_date_id#18366, d_date#18367, d_month_seq#18368, d_week_seq#18369, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q58"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_id1#18564, d_week_seq1#18563, 200), ENSURE_REQUIREMENTS, [id=#25320]\n+- *(5) Project [s_store_name#18645 AS s_store_name1#18562, d_week_seq#18616 AS d_week_seq1#18563, s_store_id#18641 AS s_store_id1#18564, sun_sales#18582 AS sun_sales1#18565, mon_sales#18583 AS mon_sales1#18566, tue_sales#18584 AS tue_sales1#18567, wed_sales#18585 AS wed_sales1#18568, thu_sales#18586 AS thu_sales1#18569, fri_sales#18587 AS fri_sales1#18570, sat_sales#18588 AS sat_sales1#18571]\n   +- *(5) BroadcastHashJoin [d_week_seq#18616], [d_week_seq#18673], Inner, BuildRight, false\n      :- *(5) Project [d_week_seq#18616, sun_sales#18582, mon_sales#18583, tue_sales#18584, wed_sales#18585, thu_sales#18586, fri_sales#18587, sat_sales#18588, s_store_id#18641, s_store_name#18645]\n      :  +- *(5) BroadcastHashJoin [ss_store_sk#18596], [s_store_sk#18640], Inner, BuildRight, false\n      :     :- *(5) HashAggregate(keys=[d_week_seq#18616, ss_store_sk#18596], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Sunday) THEN ss_sales_price#18602 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Monday) THEN ss_sales_price#18602 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Tuesday) THEN ss_sales_price#18602 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Wednesday) THEN ss_sales_price#18602 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Thursday) THEN ss_sales_price#18602 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Friday) THEN ss_sales_price#18602 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Saturday) THEN ss_sales_price#18602 ELSE null END))], output=[d_week_seq#18616, ss_store_sk#18596, sun_sales#18582, mon_sales#18583, tue_sales#18584, wed_sales#18585, thu_sales#18586, fri_sales#18587, sat_sales#18588])\n      :     :  +- Exchange hashpartitioning(d_week_seq#18616, ss_store_sk#18596, 200), ENSURE_REQUIREMENTS, [id=#25301]\n      :     :     +- *(2) HashAggregate(keys=[d_week_seq#18616, ss_store_sk#18596], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Sunday) THEN ss_sales_price#18602 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Monday) THEN ss_sales_price#18602 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Tuesday) THEN ss_sales_price#18602 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Wednesday) THEN ss_sales_price#18602 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Thursday) THEN ss_sales_price#18602 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Friday) THEN ss_sales_price#18602 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#18626 = Saturday) THEN ss_sales_price#18602 ELSE null END))], output=[d_week_seq#18616, ss_store_sk#18596, sum#18843L, sum#18844L, sum#18845L, sum#18846L, sum#18847L, sum#18848L, sum#18849L])\n      :     :        +- *(2) Project [ss_store_sk#18596, ss_sales_price#18602, d_week_seq#18616, d_day_name#18626]\n      :     :           +- *(2) BroadcastHashJoin [ss_sold_date_sk#18589], [d_date_sk#18612], Inner, BuildRight, false\n      :     :              :- *(2) Filter (isnotnull(ss_sold_date_sk#18589) AND isnotnull(ss_store_sk#18596))\n      :     :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#18589, ss_store_sk#18596, ss_sales_price#18602], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#18589, ss_sold_time_sk#18590, ss_item_sk#18591, ss_customer_sk#18592, ss_cdemo_s..., Partition Cols: []]\n      :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25295]\n      :     :                 +- *(1) Filter (isnotnull(d_date_sk#18612) AND isnotnull(d_week_seq#18616))\n      :     :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#18612, d_week_seq#18616, d_day_name#18626], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#18612, d_date_id#18613, d_date#18614, d_month_seq#18615, d_week_seq#18616, d_quarter_s..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25307]\n      :        +- *(3) Filter (isnotnull(s_store_sk#18640) AND isnotnull(s_store_id#18641))\n      :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#18640, s_store_id#18641, s_store_name#18645], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#18640, s_store_id#18641, s_rec_start_date#18642, s_rec_end_date#18643, s_closed_date_..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25315]\n         +- *(4) Project [d_week_seq#18673]\n            +- *(4) Filter (((isnotnull(d_month_seq#18672) AND (d_month_seq#18672 >= 1197)) AND (d_month_seq#18672 <= 1208)) AND isnotnull(d_week_seq#18673))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#18672, d_week_seq#18673], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#18669, d_date_id#18670, d_date#18671, d_month_seq#18672, d_week_seq#18673, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q59"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_state#18903, 200), ENSURE_REQUIREMENTS, [id=#25683]\n+- *(13) HashAggregate(keys=[ca_state#18903], functions=[partial_count(1)], output=[ca_state#18903, count#19058L])\n   +- *(13) Project [ca_state#18903]\n      +- *(13) SortMergeJoin [ss_item_sk#18928], [i_item_sk#18977], Inner\n         :- *(8) Sort [ss_item_sk#18928 ASC NULLS FIRST], false, 0\n         :  +- Exchange hashpartitioning(ss_item_sk#18928, 200), ENSURE_REQUIREMENTS, [id=#25653]\n         :     +- *(7) Project [ca_state#18903, ss_item_sk#18928]\n         :        +- *(7) BroadcastHashJoin [ss_sold_date_sk#18926], [d_date_sk#18949], Inner, BuildRight, false\n         :           :- *(7) Project [ca_state#18903, ss_sold_date_sk#18926, ss_item_sk#18928]\n         :           :  +- *(7) SortMergeJoin [c_customer_sk#18908], [ss_customer_sk#18929], Inner\n         :           :     :- *(3) Sort [c_customer_sk#18908 ASC NULLS FIRST], false, 0\n         :           :     :  +- Exchange hashpartitioning(c_customer_sk#18908, 200), ENSURE_REQUIREMENTS, [id=#25629]\n         :           :     :     +- *(2) Project [ca_state#18903, c_customer_sk#18908]\n         :           :     :        +- *(2) BroadcastHashJoin [ca_address_sk#18895], [c_current_addr_sk#18912], Inner, BuildLeft, false\n         :           :     :           :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#25622]\n         :           :     :           :  +- *(1) Filter isnotnull(ca_address_sk#18895)\n         :           :     :           :     +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#18895, ca_state#18903], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#18895, ca_address_id#18896, ca_street_number#18897, ca_street_name#18898, ca_stree..., Partition Cols: []]\n         :           :     :           +- *(2) Filter (isnotnull(c_current_addr_sk#18912) AND isnotnull(c_customer_sk#18908))\n         :           :     :              +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#18908, c_current_addr_sk#18912], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#18908, c_customer_id#18909, c_current_cdemo_sk#18910, c_current_hdemo_sk#18911, c_..., Partition Cols: []]\n         :           :     +- *(5) Sort [ss_customer_sk#18929 ASC NULLS FIRST], false, 0\n         :           :        +- Exchange hashpartitioning(ss_customer_sk#18929, 200), ENSURE_REQUIREMENTS, [id=#25637]\n         :           :           +- *(4) Filter ((isnotnull(ss_customer_sk#18929) AND isnotnull(ss_sold_date_sk#18926)) AND isnotnull(ss_item_sk#18928))\n         :           :              +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#18926, ss_item_sk#18928, ss_customer_sk#18929], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#18926, ss_sold_time_sk#18927, ss_item_sk#18928, ss_customer_sk#18929, ss_cdemo_s..., Partition Cols: []]\n         :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25648]\n         :              +- *(6) Project [d_date_sk#18949]\n         :                 +- *(6) Filter ((isnotnull(d_month_seq#18952) AND (d_month_seq#18952 = Subquery scalar-subquery#18889, [id=#25570])) AND isnotnull(d_date_sk#18949))\n         :                    :  +- Subquery scalar-subquery#18889, [id=#25570]\n         :                    :     +- *(2) HashAggregate(keys=[d_month_seq#19002], functions=[], output=[d_month_seq#19002])\n         :                    :        +- Exchange hashpartitioning(d_month_seq#19002, 200), ENSURE_REQUIREMENTS, [id=#25566]\n         :                    :           +- *(1) HashAggregate(keys=[d_month_seq#19002], functions=[], output=[d_month_seq#19002])\n         :                    :              +- *(1) Project [d_month_seq#19002]\n         :                    :                 +- *(1) Filter (((isnotnull(d_year#19005) AND isnotnull(d_moy#19007)) AND (d_year#19005 = 2002)) AND (d_moy#19007 = 3))\n         :                    :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#19002, d_moy#19007, d_year#19005], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#18999, d_date_id#19000, d_date#19001, d_month_seq#19002, d_week_seq#19003, d_quarter_s..., Partition Cols: []]\n         :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#18949, d_month_seq#18952], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#18949, d_date_id#18950, d_date#18951, d_month_seq#18952, d_week_seq#18953, d_quarter_s..., Partition Cols: []]\n         +- *(12) Sort [i_item_sk#18977 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(i_item_sk#18977, 200), ENSURE_REQUIREMENTS, [id=#25674]\n               +- *(11) Project [i_item_sk#18977]\n                  +- *(11) Filter (cast(i_current_price#18982 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#19050)), DecimalType(14,7), true))\n                     +- *(11) BroadcastHashJoin [i_category#18989], [i_category#19039], LeftOuter, BuildRight, false\n                        :- *(11) Filter (isnotnull(i_current_price#18982) AND isnotnull(i_item_sk#18977))\n                        :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#18977, i_current_price#18982, i_category#18989], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#18977, i_item_id#18978, i_rec_start_date#18979, i_rec_end_date#18980, i_item_desc#1898..., Partition Cols: []]\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#25668]\n                           +- *(10) HashAggregate(keys=[i_category#19039], functions=[avg(UnscaledValue(i_current_price#19032))], output=[avg(i_current_price)#19050, i_category#19039])\n                              +- Exchange hashpartitioning(i_category#19039, 200), ENSURE_REQUIREMENTS, [id=#25664]\n                                 +- *(9) HashAggregate(keys=[i_category#19039], functions=[partial_avg(UnscaledValue(i_current_price#19032))], output=[i_category#19039, sum#19061, count#19062L])\n                                    +- *(9) Filter isnotnull(i_category#19039)\n                                       +- Scan hive tpcds_sf1_iceberg.item [i_current_price#19032, i_category#19039], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#19027, i_item_id#19028, i_rec_start_date#19029, i_rec_end_date#19030, i_item_desc#1903..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q6"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#19138, 200), ENSURE_REQUIREMENTS, [id=#26317]\n+- *(19) HashAggregate(keys=[i_item_id#19138], functions=[partial_sum(total_sales#19068)], output=[i_item_id#19138, sum#19429, isEmpty#19430])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_item_id#19138], functions=[sum(UnscaledValue(ss_ext_sales_price#19088))], output=[i_item_id#19138, total_sales#19068])\n      :  +- Exchange hashpartitioning(i_item_id#19138, 200), ENSURE_REQUIREMENTS, [id=#26007]\n      :     +- *(5) HashAggregate(keys=[i_item_id#19138], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#19088))], output=[i_item_id#19138, sum#19432L])\n      :        +- *(5) Project [ss_ext_sales_price#19088, i_item_id#19138]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#19075], [i_item_sk#19137], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#19075, ss_ext_sales_price#19088]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#19079], [ca_address_sk#19124], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#19075, ss_addr_sk#19079, ss_ext_sales_price#19088]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#19073], [d_date_sk#19096], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#19073) AND isnotnull(ss_addr_sk#19079)) AND isnotnull(ss_item_sk#19075))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#19073, ss_item_sk#19075, ss_addr_sk#19079, ss_ext_sales_price#19088], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#19073, ss_sold_time_sk#19074, ss_item_sk#19075, ss_customer_sk#19076, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25979]\n      :              :     :        +- *(1) Project [d_date_sk#19096]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#19102) AND isnotnull(d_moy#19104)) AND (d_year#19102 = 1998)) AND (d_moy#19104 = 10)) AND isnotnull(d_date_sk#19096))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#19096, d_moy#19104, d_year#19102], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#19096, d_date_id#19097, d_date#19098, d_month_seq#19099, d_week_seq#19100, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25987]\n      :              :        +- *(2) Project [ca_address_sk#19124]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#19135) AND (ca_gmt_offset#19135 = -5.00)) AND isnotnull(ca_address_sk#19124))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#19124, ca_gmt_offset#19135], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#19124, ca_address_id#19125, ca_street_number#19126, ca_street_name#19127, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26001]\n      :                 +- *(4) BroadcastHashJoin [i_item_id#19138], [i_item_id#19354], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#19137)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#19137, i_item_id#19138], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#19137, i_item_id#19138, i_rec_start_date#19139, i_rec_end_date#19140, i_item_desc#1914..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#25997]\n      :                       +- *(3) Project [i_item_id#19354]\n      :                          +- *(3) Filter (isnotnull(i_category#19365) AND (i_category#19365 = Shoes))\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_category#19365, i_item_id#19354], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#19353, i_item_id#19354, i_rec_start_date#19355, i_rec_end_date#19356, i_item_desc#1935..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_item_id#19235], functions=[sum(UnscaledValue(cs_ext_sales_price#19182))], output=[i_item_id#19235, total_sales#19070])\n      :  +- Exchange hashpartitioning(i_item_id#19235, 200), ENSURE_REQUIREMENTS, [id=#26181]\n      :     +- *(11) HashAggregate(keys=[i_item_id#19235], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#19182))], output=[i_item_id#19235, sum#19434L])\n      :        +- *(11) Project [cs_ext_sales_price#19182, i_item_id#19235]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#19174], [i_item_sk#19234], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#19174, cs_ext_sales_price#19182]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#19165], [ca_address_sk#19221], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#19165, cs_item_sk#19174, cs_ext_sales_price#19182]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#19159], [d_date_sk#19193], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#19159) AND isnotnull(cs_bill_addr_sk#19165)) AND isnotnull(cs_item_sk#19174))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#19159, cs_bill_addr_sk#19165, cs_item_sk#19174, cs_ext_sales_price#19182], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#19159, cs_sold_time_sk#19160, cs_ship_date_sk#19161, cs_bill_customer_sk#19162, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#19193], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25979]\n      :              :     +- ReusedExchange [ca_address_sk#19221], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25987]\n      :              +- ReusedExchange [i_item_sk#19234, i_item_id#19235], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26001]\n      +- *(18) HashAggregate(keys=[i_item_id#19332], functions=[sum(UnscaledValue(ws_ext_sales_price#19279))], output=[i_item_id#19332, total_sales#19072])\n         +- Exchange hashpartitioning(i_item_id#19332, 200), ENSURE_REQUIREMENTS, [id=#26285]\n            +- *(17) HashAggregate(keys=[i_item_id#19332], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#19279))], output=[i_item_id#19332, sum#19436L])\n               +- *(17) Project [ws_ext_sales_price#19279, i_item_id#19332]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#19259], [i_item_sk#19331], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#19259, ws_ext_sales_price#19279]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#19263], [ca_address_sk#19318], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#19259, ws_bill_addr_sk#19263, ws_ext_sales_price#19279]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#19256], [d_date_sk#19290], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#19256) AND isnotnull(ws_bill_addr_sk#19263)) AND isnotnull(ws_item_sk#19259))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#19256, ws_item_sk#19259, ws_bill_addr_sk#19263, ws_ext_sales_price#19279], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#19256, ws_sold_time_sk#19257, ws_ship_date_sk#19258, ws_item_sk#19259, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#19290], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25979]\n                     :     +- ReusedExchange [ca_address_sk#19318], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#25987]\n                     +- ReusedExchange [i_item_sk#19331, i_item_id#19332], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26001]\n",
    "iteration" : 1,
    "name" : "q60"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#26791]\n+- *(14) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#19612))], output=[sum#19739L])\n   +- *(14) Project [ss_ext_sales_price#19612]\n      +- *(14) BroadcastHashJoin [ss_item_sk#19599], [i_item_sk#19708], Inner, BuildRight, false\n         :- *(14) Project [ss_item_sk#19599, ss_ext_sales_price#19612]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#19681], [ca_address_sk#19695], Inner, BuildRight, false\n         :     :- *(14) Project [ss_item_sk#19599, ss_ext_sales_price#19612, c_current_addr_sk#19681]\n         :     :  +- *(14) BroadcastHashJoin [ss_customer_sk#19600], [c_customer_sk#19677], Inner, BuildRight, false\n         :     :     :- *(14) Project [ss_item_sk#19599, ss_customer_sk#19600, ss_ext_sales_price#19612]\n         :     :     :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#19597], [d_date_sk#19649], Inner, BuildRight, false\n         :     :     :     :- *(14) Project [ss_sold_date_sk#19597, ss_item_sk#19599, ss_customer_sk#19600, ss_ext_sales_price#19612]\n         :     :     :     :  +- *(14) BroadcastHashJoin [ss_store_sk#19604], [s_store_sk#19620], Inner, BuildRight, false\n         :     :     :     :     :- *(14) Filter (((isnotnull(ss_store_sk#19604) AND isnotnull(ss_sold_date_sk#19597)) AND isnotnull(ss_customer_sk#19600)) AND isnotnull(ss_item_sk#19599))\n         :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#19597, ss_item_sk#19599, ss_customer_sk#19600, ss_store_sk#19604, ss_ext_sales_price#19612], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#19597, ss_sold_time_sk#19598, ss_item_sk#19599, ss_customer_sk#19600, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     +- ReusedExchange [s_store_sk#19620], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26591]\n         :     :     :     +- ReusedExchange [d_date_sk#19649], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26607]\n         :     :     +- ReusedExchange [c_customer_sk#19677, c_current_addr_sk#19681], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26614]\n         :     +- ReusedExchange [ca_address_sk#19695], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26622]\n         +- ReusedExchange [i_item_sk#19708], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#26630]\n",
    "iteration" : 1,
    "name" : "q61"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(substr(w_warehouse_name#19787, 1, 20)#19876, sm_type#19801, web_name#19809, 200), ENSURE_REQUIREMENTS, [id=#27006]\n+- *(5) HashAggregate(keys=[substr(w_warehouse_name#19787, 1, 20) AS substr(w_warehouse_name#19787, 1, 20)#19876, sm_type#19801, web_name#19809], functions=[partial_sum(cast(CASE WHEN ((ws_ship_date_sk#19753 - ws_sold_date_sk#19751) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#19753 - ws_sold_date_sk#19751) > 30) AND ((ws_ship_date_sk#19753 - ws_sold_date_sk#19751) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#19753 - ws_sold_date_sk#19751) > 60) AND ((ws_ship_date_sk#19753 - ws_sold_date_sk#19751) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#19753 - ws_sold_date_sk#19751) > 90) AND ((ws_ship_date_sk#19753 - ws_sold_date_sk#19751) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((ws_ship_date_sk#19753 - ws_sold_date_sk#19751) > 120) THEN 1 ELSE 0 END as bigint))], output=[substr(w_warehouse_name#19787, 1, 20)#19876, sm_type#19801, web_name#19809, sum#19882L, sum#19883L, sum#19884L, sum#19885L, sum#19886L])\n   +- *(5) Project [ws_sold_date_sk#19751, ws_ship_date_sk#19753, w_warehouse_name#19787, sm_type#19801, web_name#19809]\n      +- *(5) BroadcastHashJoin [ws_ship_date_sk#19753], [d_date_sk#19831], Inner, BuildRight, false\n         :- *(5) Project [ws_sold_date_sk#19751, ws_ship_date_sk#19753, w_warehouse_name#19787, sm_type#19801, web_name#19809]\n         :  +- *(5) BroadcastHashJoin [ws_web_site_sk#19764], [web_site_sk#19805], Inner, BuildRight, false\n         :     :- *(5) Project [ws_sold_date_sk#19751, ws_ship_date_sk#19753, ws_web_site_sk#19764, w_warehouse_name#19787, sm_type#19801]\n         :     :  +- *(5) BroadcastHashJoin [ws_ship_mode_sk#19765], [sm_ship_mode_sk#19799], Inner, BuildRight, false\n         :     :     :- *(5) Project [ws_sold_date_sk#19751, ws_ship_date_sk#19753, ws_web_site_sk#19764, ws_ship_mode_sk#19765, w_warehouse_name#19787]\n         :     :     :  +- *(5) BroadcastHashJoin [ws_warehouse_sk#19766], [w_warehouse_sk#19785], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(ws_warehouse_sk#19766) AND isnotnull(ws_ship_mode_sk#19765)) AND isnotnull(ws_web_site_sk#19764)) AND isnotnull(ws_ship_date_sk#19753))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#19751, ws_ship_date_sk#19753, ws_web_site_sk#19764, ws_ship_mode_sk#19765, ws_warehouse_sk#19766], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#19751, ws_sold_time_sk#19752, ws_ship_date_sk#19753, ws_item_sk#19754, ws_bill_c..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26978]\n         :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#19785)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#19785, w_warehouse_name#19787], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#19785, w_warehouse_id#19786, w_warehouse_name#19787, w_warehouse_sq_ft#19788, w_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26985]\n         :     :        +- *(2) Filter isnotnull(sm_ship_mode_sk#19799)\n         :     :           +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_ship_mode_sk#19799, sm_type#19801], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#19799, sm_ship_mode_id#19800, sm_type#19801, sm_code#19802, sm_carrier#19803, sm..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#26992]\n         :        +- *(3) Filter isnotnull(web_site_sk#19805)\n         :           +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#19805, web_name#19809], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#19805, web_site_id#19806, web_rec_start_date#19807, web_rec_end_date#19808, web_name..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27000]\n            +- *(4) Project [d_date_sk#19831]\n               +- *(4) Filter (((isnotnull(d_month_seq#19834) AND (d_month_seq#19834 >= 1194)) AND (d_month_seq#19834 <= 1205)) AND isnotnull(d_date_sk#19831))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#19831, d_month_seq#19834], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#19831, d_date_id#19832, d_date#19833, d_month_seq#19834, d_week_seq#19835, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q62"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manager_id#19918, 200), ENSURE_REQUIREMENTS, [id=#27137]\n+- *(5) HashAggregate(keys=[i_manager_id#19918, d_moy#19951], functions=[sum(UnscaledValue(ss_sales_price#19933))], output=[i_manager_id#19918, sum_sales#19896, _w0#20003])\n   +- Exchange hashpartitioning(i_manager_id#19918, d_moy#19951, 200), ENSURE_REQUIREMENTS, [id=#27133]\n      +- *(4) HashAggregate(keys=[i_manager_id#19918, d_moy#19951], functions=[partial_sum(UnscaledValue(ss_sales_price#19933))], output=[i_manager_id#19918, d_moy#19951, sum#20008L])\n         +- *(4) Project [i_manager_id#19918, ss_sales_price#19933, d_moy#19951]\n            +- *(4) BroadcastHashJoin [ss_store_sk#19927], [s_store_sk#19971], Inner, BuildRight, false\n               :- *(4) Project [i_manager_id#19918, ss_store_sk#19927, ss_sales_price#19933, d_moy#19951]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#19920], [d_date_sk#19943], Inner, BuildRight, false\n               :     :- *(4) Project [i_manager_id#19918, ss_sold_date_sk#19920, ss_store_sk#19927, ss_sales_price#19933]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#19898], [ss_item_sk#19922], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27110]\n               :     :     :  +- *(1) Project [i_item_sk#19898, i_manager_id#19918]\n               :     :     :     +- *(1) Filter ((((i_category#19910 IN (Books,Children,Electronics) AND i_class#19908 IN (personal,portable,reference,self-help)) AND i_brand#19906 IN (scholaramalgamalg #14,scholaramalgamalg #7,exportiunivamalg #9,scholaramalgamalg #9)) OR ((i_category#19910 IN (Women,Music,Men) AND i_class#19908 IN (accessories,classical,fragrances,pants)) AND i_brand#19906 IN (amalgimporto #1,edu packscholar #1,exportiimporto #1,importoamalg #1))) AND isnotnull(i_item_sk#19898))\n               :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#19906, i_category#19910, i_class#19908, i_item_sk#19898, i_manager_id#19918], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#19898, i_item_id#19899, i_rec_start_date#19900, i_rec_end_date#19901, i_item_desc#1990..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#19922) AND isnotnull(ss_sold_date_sk#19920)) AND isnotnull(ss_store_sk#19927))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#19920, ss_item_sk#19922, ss_store_sk#19927, ss_sales_price#19933], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#19920, ss_sold_time_sk#19921, ss_item_sk#19922, ss_customer_sk#19923, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#27120]\n               :        +- *(2) Project [d_date_sk#19943, d_moy#19951]\n               :           +- *(2) Filter (d_month_seq#19946 INSET (1233,1222,1228,1232,1223,1227,1231,1226,1224,1225,1230,1229) AND isnotnull(d_date_sk#19943))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#19943, d_month_seq#19946, d_moy#19951], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#19943, d_date_id#19944, d_date#19945, d_month_seq#19946, d_week_seq#19947, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27127]\n                  +- *(3) Filter isnotnull(s_store_sk#19971)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#19971], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#19971, s_store_id#19972, s_rec_start_date#19973, s_rec_end_date#19974, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q63"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(product_name#20021 ASC NULLS FIRST, store_name#20023 ASC NULLS FIRST, cnt#20755L ASC NULLS FIRST, s1#20037 ASC NULLS FIRST, s1#20756 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#28605]\n+- *(47) Project [product_name#20021, store_name#20023, store_zip#20024, b_street_number#20025, b_street_name#20026, b_city#20027, b_zip#20028, c_street_number#20029, c_street_name#20030, c_city#20031, c_zip#20032, syear#20033, cnt#20036L, s1#20037 AS s11#20013, s2#20038 AS s21#20014, s3#20039 AS s31#20015, s1#20756 AS s12#20016, s2#20757 AS s22#20017, s3#20758 AS s32#20018, syear#20752, cnt#20755L, s1#20037, s1#20756]\n   +- *(47) SortMergeJoin [item_sk#20022, store_name#20023, store_zip#20024], [item_sk#20741, store_name#20742, store_zip#20743], Inner, (cnt#20755L <= cnt#20036L)\n      :- *(23) Sort [item_sk#20022 ASC NULLS FIRST, store_name#20023 ASC NULLS FIRST, store_zip#20024 ASC NULLS FIRST], false, 0\n      :  +- Exchange hashpartitioning(item_sk#20022, store_name#20023, store_zip#20024, 200), ENSURE_REQUIREMENTS, [id=#28303]\n      :     +- *(22) HashAggregate(keys=[i_product_name#20377, i_item_sk#20356, s_store_name#20235, s_zip#20255, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333, ca_street_number#20339, ca_street_name#20340, ca_city#20343, ca_zip#20346, d_year#20152, d_year#20180, d_year#20208], functions=[count(1), sum(UnscaledValue(ss_wholesale_cost#20053)), sum(UnscaledValue(ss_list_price#20054)), sum(UnscaledValue(ss_coupon_amt#20061))], output=[product_name#20021, item_sk#20022, store_name#20023, store_zip#20024, b_street_number#20025, b_street_name#20026, b_city#20027, b_zip#20028, c_street_number#20029, c_street_name#20030, c_city#20031, c_zip#20032, syear#20033, cnt#20036L, s1#20037, s2#20038, s3#20039])\n      :        +- *(22) HashAggregate(keys=[i_product_name#20377, i_item_sk#20356, s_store_name#20235, s_zip#20255, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333, ca_street_number#20339, ca_street_name#20340, ca_city#20343, ca_zip#20346, d_year#20152, d_year#20180, d_year#20208], functions=[partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#20053)), partial_sum(UnscaledValue(ss_list_price#20054)), partial_sum(UnscaledValue(ss_coupon_amt#20061))], output=[i_product_name#20377, i_item_sk#20356, s_store_name#20235, s_zip#20255, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333, ca_street_number#20339, ca_street_name#20340, ca_city#20343, ca_zip#20346, d_year#20152, d_year#20180, d_year#20208, count#20788L, sum#20789L, sum#20790L, sum#20791L])\n      :           +- *(22) Project [ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, d_year#20180, d_year#20208, s_store_name#20235, s_zip#20255, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333, ca_street_number#20339, ca_street_name#20340, ca_city#20343, ca_zip#20346, i_item_sk#20356, i_product_name#20377]\n      :              +- *(22) BroadcastHashJoin [ss_item_sk#20044], [i_item_sk#20356], Inner, BuildRight, false\n      :                 :- *(22) Project [ss_item_sk#20044, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, d_year#20180, d_year#20208, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333, ca_street_number#20339, ca_street_name#20340, ca_city#20343, ca_zip#20346]\n      :                 :  +- *(22) BroadcastHashJoin [hd_income_band_sk#20320], [ib_income_band_sk#20353], Inner, BuildRight, false\n      :                 :     :- *(22) Project [ss_item_sk#20044, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, d_year#20180, d_year#20208, hd_income_band_sk#20320, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333, ca_street_number#20339, ca_street_name#20340, ca_city#20343, ca_zip#20346]\n      :                 :     :  +- *(22) BroadcastHashJoin [hd_income_band_sk#20315], [ib_income_band_sk#20350], Inner, BuildRight, false\n      :                 :     :     :- *(22) Project [ss_item_sk#20044, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, d_year#20180, d_year#20208, hd_income_band_sk#20315, hd_income_band_sk#20320, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333, ca_street_number#20339, ca_street_name#20340, ca_city#20343, ca_zip#20346]\n      :                 :     :     :  +- *(22) BroadcastHashJoin [c_current_addr_sk#20263], [ca_address_sk#20337], Inner, BuildRight, false\n      :                 :     :     :     :- *(22) Project [ss_item_sk#20044, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_addr_sk#20263, d_year#20180, d_year#20208, hd_income_band_sk#20315, hd_income_band_sk#20320, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333]\n      :                 :     :     :     :  +- *(22) BroadcastHashJoin [ss_addr_sk#20048], [ca_address_sk#20324], Inner, BuildRight, false\n      :                 :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_addr_sk#20048, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_addr_sk#20263, d_year#20180, d_year#20208, hd_income_band_sk#20315, hd_income_band_sk#20320]\n      :                 :     :     :     :     :  +- *(22) BroadcastHashJoin [c_current_hdemo_sk#20262], [hd_demo_sk#20319], Inner, BuildRight, false\n      :                 :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_addr_sk#20048, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_hdemo_sk#20262, c_current_addr_sk#20263, d_year#20180, d_year#20208, hd_income_band_sk#20315]\n      :                 :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_hdemo_sk#20047], [hd_demo_sk#20314], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_hdemo_sk#20262, c_current_addr_sk#20263, d_year#20180, d_year#20208]\n      :                 :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_promo_sk#20050], [p_promo_sk#20295], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_hdemo_sk#20262, c_current_addr_sk#20263, d_year#20180, d_year#20208]\n      :                 :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_current_cdemo_sk#20261], [cd_demo_sk#20286], Inner, BuildRight, NOT (cd_marital_status#20279 = cd_marital_status#20288), false\n      :                 :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_cdemo_sk#20261, c_current_hdemo_sk#20262, c_current_addr_sk#20263, d_year#20180, d_year#20208, cd_marital_status#20279]\n      :                 :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_cdemo_sk#20046], [cd_demo_sk#20277], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_cdemo_sk#20046, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_cdemo_sk#20261, c_current_hdemo_sk#20262, c_current_addr_sk#20263, d_year#20180, d_year#20208]\n      :                 :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_first_shipto_date_sk#20264], [d_date_sk#20202], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_cdemo_sk#20046, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_cdemo_sk#20261, c_current_hdemo_sk#20262, c_current_addr_sk#20263, c_first_shipto_date_sk#20264, d_year#20180]\n      :                 :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_first_sales_date_sk#20265], [d_date_sk#20174], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_cdemo_sk#20046, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255, c_current_cdemo_sk#20261, c_current_hdemo_sk#20262, c_current_addr_sk#20263, c_first_shipto_date_sk#20264, c_first_sales_date_sk#20265]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_customer_sk#20045], [c_customer_sk#20259], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_customer_sk#20045, ss_cdemo_sk#20046, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152, s_store_name#20235, s_zip#20255]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_store_sk#20049], [s_store_sk#20230], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#20044, ss_customer_sk#20045, ss_cdemo_sk#20046, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_store_sk#20049, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061, d_year#20152]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_sold_date_sk#20042], [d_date_sk#20146], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_sold_date_sk#20042, ss_item_sk#20044, ss_customer_sk#20045, ss_cdemo_sk#20046, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_store_sk#20049, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) SortMergeJoin [ss_item_sk#20044], [cs_item_sk#20100], Inner\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(3) Sort [ss_item_sk#20044 ASC NULLS FIRST], false, 0\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- Exchange hashpartitioning(ss_item_sk#20044, 200), ENSURE_REQUIREMENTS, [id=#27910]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#20042, ss_item_sk#20044, ss_customer_sk#20045, ss_cdemo_sk#20046, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_store_sk#20049, ss_promo_sk#20050, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_item_sk#20044, ss_ticket_number#20051L], [sr_item_sk#20067, sr_ticket_number#20074L], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           :- *(2) Filter ((((((((isnotnull(ss_item_sk#20044) AND isnotnull(ss_ticket_number#20051L)) AND isnotnull(ss_sold_date_sk#20042)) AND isnotnull(ss_store_sk#20049)) AND isnotnull(ss_customer_sk#20045)) AND isnotnull(ss_cdemo_sk#20046)) AND isnotnull(ss_promo_sk#20050)) AND isnotnull(ss_hdemo_sk#20047)) AND isnotnull(ss_addr_sk#20048))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#20042, ss_item_sk#20044, ss_customer_sk#20045, ss_cdemo_sk#20046, ss_hdemo_sk#20047, ss_addr_sk#20048, ss_store_sk#20049, ss_promo_sk#20050, ss_ticket_number#20051L, ss_wholesale_cost#20053, ss_list_price#20054, ss_coupon_amt#20061], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#20042, ss_sold_time_sk#20043, ss_item_sk#20044, ss_customer_sk#20045, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#27905]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(1) Filter (isnotnull(sr_item_sk#20067) AND isnotnull(sr_ticket_number#20074L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#20067, sr_ticket_number#20074L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#20065, sr_return_time_sk#20066, sr_item_sk#20067, sr_customer_sk#20068, sr_c..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(6) Sort [cs_item_sk#20100 ASC NULLS FIRST], false, 0\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(6) Project [cs_item_sk#20100]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- *(6) Filter (isnotnull(sum(cs_ext_list_price#20110)#20721) AND (cast(sum(cs_ext_list_price#20110)#20721 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#20142 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#20143 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#20144 as decimal(9,2)))), DecimalType(9,2), true))#20722)), DecimalType(21,2), true)))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(6) HashAggregate(keys=[cs_item_sk#20100], functions=[sum(UnscaledValue(cs_ext_list_price#20110)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#20142 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#20143 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#20144 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#20100, sum(cs_ext_list_price#20110)#20721, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#20142 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#20143 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#20144 as decimal(9,2)))), DecimalType(9,2), true))#20722])\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- Exchange hashpartitioning(cs_item_sk#20100, 200), ENSURE_REQUIREMENTS, [id=#27926]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                    +- *(5) HashAggregate(keys=[cs_item_sk#20100], functions=[partial_sum(UnscaledValue(cs_ext_list_price#20110)), partial_sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#20142 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#20143 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#20144 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#20100, sum#20795L, sum#20796, isEmpty#20797])\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                       +- *(5) Project [cs_item_sk#20100, cs_ext_list_price#20110, cr_refunded_cash#20142, cr_reversed_charge#20143, cr_store_credit#20144]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                          +- *(5) BroadcastHashJoin [cs_item_sk#20100, cs_order_number#20102L], [cr_item_sk#20121, cr_order_number#20135L], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :- *(5) Filter (isnotnull(cs_item_sk#20100) AND isnotnull(cs_order_number#20102L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#20100, cs_order_number#20102L, cs_ext_list_price#20110], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#20085, cs_sold_time_sk#20086, cs_ship_date_sk#20087, cs_bill_customer_sk#20088, ..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#27920]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                +- *(4) Filter (isnotnull(cr_item_sk#20121) AND isnotnull(cr_order_number#20135L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                   +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#20121, cr_order_number#20135L, cr_refunded_cash#20142, cr_reversed_charge#20143, cr_store_credit#20144], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#20119, cr_returned_time_sk#20120, cr_item_sk#20121, cr_refunded_customer_sk#..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27939]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(7) Filter ((isnotnull(d_year#20152) AND (d_year#20152 = 2001)) AND isnotnull(d_date_sk#20146))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#20146, d_year#20152], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#20146, d_date_id#20147, d_date#20148, d_month_seq#20149, d_week_seq#20150, d_quarter_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27946]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(8) Filter ((isnotnull(s_store_sk#20230) AND isnotnull(s_store_name#20235)) AND isnotnull(s_zip#20255))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#20230, s_store_name#20235, s_zip#20255], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#20230, s_store_id#20231, s_rec_start_date#20232, s_rec_end_date#20233, s_closed_date_..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27953]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :        +- *(9) Filter (((((isnotnull(c_customer_sk#20259) AND isnotnull(c_first_sales_date_sk#20265)) AND isnotnull(c_first_shipto_date_sk#20264)) AND isnotnull(c_current_cdemo_sk#20261)) AND isnotnull(c_current_hdemo_sk#20262)) AND isnotnull(c_current_addr_sk#20263))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#20259, c_current_cdemo_sk#20261, c_current_hdemo_sk#20262, c_current_addr_sk#20263, c_first_shipto_date_sk#20264, c_first_sales_date_sk#20265], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#20259, c_customer_id#20260, c_current_cdemo_sk#20261, c_current_hdemo_sk#20262, c_..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27960]\n      :                 :     :     :     :     :     :     :     :     :     :     :        +- *(10) Filter isnotnull(d_date_sk#20174)\n      :                 :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#20174, d_year#20180], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#20174, d_date_id#20175, d_date#20176, d_month_seq#20177, d_week_seq#20178, d_quarter_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#20202, d_year#20208], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27960]\n      :                 :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27974]\n      :                 :     :     :     :     :     :     :     :     :        +- *(12) Filter (isnotnull(cd_demo_sk#20277) AND isnotnull(cd_marital_status#20279))\n      :                 :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#20277, cd_marital_status#20279], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#20277, cd_gender#20278, cd_marital_status#20279, cd_education_status#20280, cd_purcha..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#20286, cd_marital_status#20288], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27974]\n      :                 :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27988]\n      :                 :     :     :     :     :     :     :        +- *(14) Filter isnotnull(p_promo_sk#20295)\n      :                 :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.promotion [p_promo_sk#20295], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#20295, p_promo_id#20296, p_start_date_sk#20297, p_end_date_sk#20298, p_item_sk#20299,..., Partition Cols: []]\n      :                 :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27995]\n      :                 :     :     :     :     :     :        +- *(15) Filter (isnotnull(hd_demo_sk#20314) AND isnotnull(hd_income_band_sk#20315))\n      :                 :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#20314, hd_income_band_sk#20315], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#20314, hd_income_band_sk#20315, hd_buy_potential#20316, hd_dep_count#20317, hd_vehicl..., Partition Cols: []]\n      :                 :     :     :     :     :     +- ReusedExchange [hd_demo_sk#20319, hd_income_band_sk#20320], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27995]\n      :                 :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28009]\n      :                 :     :     :     :        +- *(17) Filter isnotnull(ca_address_sk#20324)\n      :                 :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#20324, ca_street_number#20326, ca_street_name#20327, ca_city#20330, ca_zip#20333], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#20324, ca_address_id#20325, ca_street_number#20326, ca_street_name#20327, ca_stree..., Partition Cols: []]\n      :                 :     :     :     +- ReusedExchange [ca_address_sk#20337, ca_street_number#20339, ca_street_name#20340, ca_city#20343, ca_zip#20346], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28009]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28023]\n      :                 :     :        +- *(19) Filter isnotnull(ib_income_band_sk#20350)\n      :                 :     :           +- Scan hive tpcds_sf1_iceberg.income_band [ib_income_band_sk#20350], HiveTableRelation [`tpcds_sf1_iceberg`.`income_band`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ib_income_band_sk#20350, ib_lower_bound#20351, ib_upper_bound#20352], Partition Cols: []]\n      :                 :     +- ReusedExchange [ib_income_band_sk#20353], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28023]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28038]\n      :                    +- *(21) Project [i_item_sk#20356, i_product_name#20377]\n      :                       +- *(21) Filter ((((((isnotnull(i_current_price#20361) AND i_color#20373 IN (ivory,purple,almond,bisque,lawn,azure)) AND (i_current_price#20361 >= 60.00)) AND (i_current_price#20361 <= 70.00)) AND (i_current_price#20361 >= 61.00)) AND (i_current_price#20361 <= 75.00)) AND isnotnull(i_item_sk#20356))\n      :                          +- Scan hive tpcds_sf1_iceberg.item [i_color#20373, i_current_price#20361, i_item_sk#20356, i_product_name#20377], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#20356, i_item_id#20357, i_rec_start_date#20358, i_rec_end_date#20359, i_item_desc#2036..., Partition Cols: []]\n      +- *(46) Sort [item_sk#20741 ASC NULLS FIRST, store_name#20742 ASC NULLS FIRST, store_zip#20743 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(item_sk#20741, store_name#20742, store_zip#20743, 200), ENSURE_REQUIREMENTS, [id=#28597]\n            +- *(45) HashAggregate(keys=[i_product_name#20713, i_item_sk#20692, s_store_name#20571, s_zip#20591, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669, ca_street_number#20675, ca_street_name#20676, ca_city#20679, ca_zip#20682, d_year#20488, d_year#20516, d_year#20544], functions=[count(1), sum(UnscaledValue(ss_wholesale_cost#20389)), sum(UnscaledValue(ss_list_price#20390)), sum(UnscaledValue(ss_coupon_amt#20397))], output=[item_sk#20741, store_name#20742, store_zip#20743, syear#20752, cnt#20755L, s1#20756, s2#20757, s3#20758])\n               +- *(45) HashAggregate(keys=[i_product_name#20713, i_item_sk#20692, s_store_name#20571, s_zip#20591, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669, ca_street_number#20675, ca_street_name#20676, ca_city#20679, ca_zip#20682, d_year#20488, d_year#20516, d_year#20544], functions=[partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#20389)), partial_sum(UnscaledValue(ss_list_price#20390)), partial_sum(UnscaledValue(ss_coupon_amt#20397))], output=[i_product_name#20713, i_item_sk#20692, s_store_name#20571, s_zip#20591, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669, ca_street_number#20675, ca_street_name#20676, ca_city#20679, ca_zip#20682, d_year#20488, d_year#20516, d_year#20544, count#20802L, sum#20803L, sum#20804L, sum#20805L])\n                  +- *(45) Project [ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, d_year#20516, d_year#20544, s_store_name#20571, s_zip#20591, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669, ca_street_number#20675, ca_street_name#20676, ca_city#20679, ca_zip#20682, i_item_sk#20692, i_product_name#20713]\n                     +- *(45) BroadcastHashJoin [ss_item_sk#20380], [i_item_sk#20692], Inner, BuildRight, false\n                        :- *(45) Project [ss_item_sk#20380, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, d_year#20516, d_year#20544, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669, ca_street_number#20675, ca_street_name#20676, ca_city#20679, ca_zip#20682]\n                        :  +- *(45) BroadcastHashJoin [hd_income_band_sk#20656], [ib_income_band_sk#20689], Inner, BuildRight, false\n                        :     :- *(45) Project [ss_item_sk#20380, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, d_year#20516, d_year#20544, hd_income_band_sk#20656, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669, ca_street_number#20675, ca_street_name#20676, ca_city#20679, ca_zip#20682]\n                        :     :  +- *(45) BroadcastHashJoin [hd_income_band_sk#20651], [ib_income_band_sk#20686], Inner, BuildRight, false\n                        :     :     :- *(45) Project [ss_item_sk#20380, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, d_year#20516, d_year#20544, hd_income_band_sk#20651, hd_income_band_sk#20656, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669, ca_street_number#20675, ca_street_name#20676, ca_city#20679, ca_zip#20682]\n                        :     :     :  +- *(45) BroadcastHashJoin [c_current_addr_sk#20599], [ca_address_sk#20673], Inner, BuildRight, false\n                        :     :     :     :- *(45) Project [ss_item_sk#20380, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_addr_sk#20599, d_year#20516, d_year#20544, hd_income_band_sk#20651, hd_income_band_sk#20656, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669]\n                        :     :     :     :  +- *(45) BroadcastHashJoin [ss_addr_sk#20384], [ca_address_sk#20660], Inner, BuildRight, false\n                        :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_addr_sk#20384, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_addr_sk#20599, d_year#20516, d_year#20544, hd_income_band_sk#20651, hd_income_band_sk#20656]\n                        :     :     :     :     :  +- *(45) BroadcastHashJoin [c_current_hdemo_sk#20598], [hd_demo_sk#20655], Inner, BuildRight, false\n                        :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_addr_sk#20384, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_hdemo_sk#20598, c_current_addr_sk#20599, d_year#20516, d_year#20544, hd_income_band_sk#20651]\n                        :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_hdemo_sk#20383], [hd_demo_sk#20650], Inner, BuildRight, false\n                        :     :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_hdemo_sk#20598, c_current_addr_sk#20599, d_year#20516, d_year#20544]\n                        :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_promo_sk#20386], [p_promo_sk#20631], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_hdemo_sk#20598, c_current_addr_sk#20599, d_year#20516, d_year#20544]\n                        :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_current_cdemo_sk#20597], [cd_demo_sk#20622], Inner, BuildRight, NOT (cd_marital_status#20615 = cd_marital_status#20624), false\n                        :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_cdemo_sk#20597, c_current_hdemo_sk#20598, c_current_addr_sk#20599, d_year#20516, d_year#20544, cd_marital_status#20615]\n                        :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_cdemo_sk#20382], [cd_demo_sk#20613], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_cdemo_sk#20382, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_cdemo_sk#20597, c_current_hdemo_sk#20598, c_current_addr_sk#20599, d_year#20516, d_year#20544]\n                        :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_first_shipto_date_sk#20600], [d_date_sk#20538], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_cdemo_sk#20382, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_cdemo_sk#20597, c_current_hdemo_sk#20598, c_current_addr_sk#20599, c_first_shipto_date_sk#20600, d_year#20516]\n                        :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_first_sales_date_sk#20601], [d_date_sk#20510], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_cdemo_sk#20382, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591, c_current_cdemo_sk#20597, c_current_hdemo_sk#20598, c_current_addr_sk#20599, c_first_shipto_date_sk#20600, c_first_sales_date_sk#20601]\n                        :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_customer_sk#20381], [c_customer_sk#20595], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_customer_sk#20381, ss_cdemo_sk#20382, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488, s_store_name#20571, s_zip#20591]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_store_sk#20385], [s_store_sk#20566], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#20380, ss_customer_sk#20381, ss_cdemo_sk#20382, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_store_sk#20385, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397, d_year#20488]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_sold_date_sk#20378], [d_date_sk#20482], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_sold_date_sk#20378, ss_item_sk#20380, ss_customer_sk#20381, ss_cdemo_sk#20382, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_store_sk#20385, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) SortMergeJoin [ss_item_sk#20380], [cs_item_sk#20436], Inner\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(26) Sort [ss_item_sk#20380 ASC NULLS FIRST], false, 0\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- ReusedExchange [ss_sold_date_sk#20378, ss_item_sk#20380, ss_customer_sk#20381, ss_cdemo_sk#20382, ss_hdemo_sk#20383, ss_addr_sk#20384, ss_store_sk#20385, ss_promo_sk#20386, ss_wholesale_cost#20389, ss_list_price#20390, ss_coupon_amt#20397], Exchange hashpartitioning(ss_item_sk#20044, 200), ENSURE_REQUIREMENTS, [id=#27910]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(29) Sort [cs_item_sk#20436 ASC NULLS FIRST], false, 0\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(29) Project [cs_item_sk#20436]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- *(29) Filter (isnotnull(sum(cs_ext_list_price#20446)#20726) AND (cast(sum(cs_ext_list_price#20446)#20726 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#20478 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#20479 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#20480 as decimal(9,2)))), DecimalType(9,2), true))#20727)), DecimalType(21,2), true)))\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(29) HashAggregate(keys=[cs_item_sk#20436], functions=[sum(UnscaledValue(cs_ext_list_price#20446)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#20478 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#20479 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#20480 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#20436, sum(cs_ext_list_price#20446)#20726, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#20478 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#20479 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#20480 as decimal(9,2)))), DecimalType(9,2), true))#20727])\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- ReusedExchange [cs_item_sk#20436, sum#20809L, sum#20810, isEmpty#20811], Exchange hashpartitioning(cs_item_sk#20100, 200), ENSURE_REQUIREMENTS, [id=#27926]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28089]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(30) Filter ((isnotnull(d_year#20488) AND (d_year#20488 = 2002)) AND isnotnull(d_date_sk#20482))\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#20482, d_year#20488], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#20482, d_date_id#20483, d_date#20484, d_month_seq#20485, d_week_seq#20486, d_quarter_s..., Partition Cols: []]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [s_store_sk#20566, s_store_name#20571, s_zip#20591], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27946]\n                        :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [c_customer_sk#20595, c_current_cdemo_sk#20597, c_current_hdemo_sk#20598, c_current_addr_sk#20599, c_first_shipto_date_sk#20600, c_first_sales_date_sk#20601], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27953]\n                        :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#20510, d_year#20516], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27960]\n                        :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#20538, d_year#20544], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27960]\n                        :     :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#20613, cd_marital_status#20615], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27974]\n                        :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#20622, cd_marital_status#20624], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27974]\n                        :     :     :     :     :     :     :     +- ReusedExchange [p_promo_sk#20631], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27988]\n                        :     :     :     :     :     :     +- ReusedExchange [hd_demo_sk#20650, hd_income_band_sk#20651], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27995]\n                        :     :     :     :     :     +- ReusedExchange [hd_demo_sk#20655, hd_income_band_sk#20656], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#27995]\n                        :     :     :     :     +- ReusedExchange [ca_address_sk#20660, ca_street_number#20662, ca_street_name#20663, ca_city#20666, ca_zip#20669], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28009]\n                        :     :     :     +- ReusedExchange [ca_address_sk#20673, ca_street_number#20675, ca_street_name#20676, ca_city#20679, ca_zip#20682], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28009]\n                        :     :     +- ReusedExchange [ib_income_band_sk#20686], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28023]\n                        :     +- ReusedExchange [ib_income_band_sk#20689], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28023]\n                        +- ReusedExchange [i_item_sk#20692, i_product_name#20713], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28038]\n",
    "iteration" : 1,
    "name" : "q64"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ss_store_sk#20952, 200), ENSURE_REQUIREMENTS, [id=#28783]\n+- *(5) Project [s_store_name#20848, ss_store_sk#20952, revenue#20842, i_item_desc#20876, i_current_price#20877, i_wholesale_cost#20878, i_brand#20880]\n   +- *(5) BroadcastHashJoin [ss_item_sk#20947], [i_item_sk#20872], Inner, BuildRight, false\n      :- *(5) Project [s_store_name#20848, ss_store_sk#20952, ss_item_sk#20947, revenue#20842]\n      :  +- *(5) BroadcastHashJoin [s_store_sk#20843], [ss_store_sk#20952], Inner, BuildLeft, false\n      :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28755]\n      :     :  +- *(1) Filter isnotnull(s_store_sk#20843)\n      :     :     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#20843, s_store_name#20848], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#20843, s_store_id#20844, s_rec_start_date#20845, s_rec_end_date#20846, s_closed_date_..., Partition Cols: []]\n      :     +- *(5) Filter isnotnull(revenue#20842)\n      :        +- *(5) HashAggregate(keys=[ss_store_sk#20952, ss_item_sk#20947], functions=[sum(UnscaledValue(ss_sales_price#20958))], output=[ss_store_sk#20952, ss_item_sk#20947, revenue#20842])\n      :           +- Exchange hashpartitioning(ss_store_sk#20952, ss_item_sk#20947, 200), ENSURE_REQUIREMENTS, [id=#28769]\n      :              +- *(3) HashAggregate(keys=[ss_store_sk#20952, ss_item_sk#20947], functions=[partial_sum(UnscaledValue(ss_sales_price#20958))], output=[ss_store_sk#20952, ss_item_sk#20947, sum#21006L])\n      :                 +- *(3) Project [ss_item_sk#20947, ss_store_sk#20952, ss_sales_price#20958]\n      :                    +- *(3) BroadcastHashJoin [ss_sold_date_sk#20945], [d_date_sk#20968], Inner, BuildRight, false\n      :                       :- *(3) Filter ((isnotnull(ss_sold_date_sk#20945) AND isnotnull(ss_store_sk#20952)) AND isnotnull(ss_item_sk#20947))\n      :                       :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#20945, ss_item_sk#20947, ss_store_sk#20952, ss_sales_price#20958], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#20945, ss_sold_time_sk#20946, ss_item_sk#20947, ss_customer_sk#20948, ss_cdemo_s..., Partition Cols: []]\n      :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#28763]\n      :                          +- *(2) Project [d_date_sk#20968]\n      :                             +- *(2) Filter (((isnotnull(d_month_seq#20971) AND (d_month_seq#20971 >= 1185)) AND (d_month_seq#20971 <= 1196)) AND isnotnull(d_date_sk#20968))\n      :                                +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#20968, d_month_seq#20971], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#20968, d_date_id#20969, d_date#20970, d_month_seq#20971, d_week_seq#20972, d_quarter_s..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#28778]\n         +- *(4) Filter isnotnull(i_item_sk#20872)\n            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#20872, i_item_desc#20876, i_current_price#20877, i_wholesale_cost#20878, i_brand#20880], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#20872, i_item_id#20873, i_rec_start_date#20874, i_rec_end_date#20875, i_item_desc#2087..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q65"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, ship_carriers#21022, year#21023, 200), ENSURE_REQUIREMENTS, [id=#29308]\n+- *(13) HashAggregate(keys=[w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, ship_carriers#21022, year#21023], functions=[partial_sum(jan_sales#21024), partial_sum(feb_sales#21025), partial_sum(mar_sales#21026), partial_sum(apr_sales#21027), partial_sum(may_sales#21028), partial_sum(jun_sales#21029), partial_sum(jul_sales#21030), partial_sum(aug_sales#21031), partial_sum(sep_sales#21032), partial_sum(oct_sales#21033), partial_sum(nov_sales#21034), partial_sum(dec_sales#21035), partial_sum(CheckOverflow((promote_precision(jan_sales#21024) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(feb_sales#21025) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(mar_sales#21026) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(apr_sales#21027) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(may_sales#21028) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(jun_sales#21029) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(jul_sales#21030) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(aug_sales#21031) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(sep_sales#21032) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(oct_sales#21033) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(nov_sales#21034) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(dec_sales#21035) / promote_precision(cast(cast(w_warehouse_sq_ft#21147 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), ... 12 more fields], output=[w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, ship_carriers#21022, year#21023, sum#21495, isEmpty#21496, sum#21497, isEmpty#21498, sum#21499, isEmpty#21500, sum#21501, isEmpty#21502, sum#21503, isEmpty#21504, sum#21505, isEmpty#21506, sum#21507, isEmpty#21508, sum#21509, isEmpty#21510, ... 56 more fields])\n   +- Union\n      :- *(6) HashAggregate(keys=[w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, d_year#21164], functions=[sum(CASE WHEN (d_moy#21166 = 1) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 2) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 3) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 4) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 5) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 6) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 7) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 8) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 9) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 10) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 11) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 12) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 1) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 2) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 3) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 4) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 5) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 6) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 7) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 8) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 9) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 10) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 11) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21166 = 12) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, ship_carriers#21022, year#21023, jan_sales#21024, feb_sales#21025, mar_sales#21026, apr_sales#21027, may_sales#21028, jun_sales#21029, jul_sales#21030, aug_sales#21031, sep_sales#21032, oct_sales#21033, nov_sales#21034, dec_sales#21035, jan_net#21036, feb_net#21037, mar_net#21038, apr_net#21039, ... 8 more fields])\n      :  +- Exchange hashpartitioning(w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, d_year#21164, 200), ENSURE_REQUIREMENTS, [id=#29117]\n      :     +- *(5) HashAggregate(keys=[w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, d_year#21164], functions=[partial_sum(CASE WHEN (d_moy#21166 = 1) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 2) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 3) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 4) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 5) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 6) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 7) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 8) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 9) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 10) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 11) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 12) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#21135 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 1) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 2) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 3) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 4) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 5) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 6) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 7) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 8) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 9) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 10) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 11) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21166 = 12) THEN CheckOverflow((promote_precision(cast(ws_net_profit#21143 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#21128 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, d_year#21164, sum#21615, isEmpty#21616, sum#21617, isEmpty#21618, sum#21619, isEmpty#21620, sum#21621, isEmpty#21622, sum#21623, isEmpty#21624, sum#21625, isEmpty#21626, sum#21627, isEmpty#21628, sum#21629, isEmpty#21630, sum#21631, ... 31 more fields])\n      :        +- *(5) Project [ws_quantity#21128, ws_ext_list_price#21135, ws_net_profit#21143, w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, d_year#21164, d_moy#21166]\n      :           +- *(5) BroadcastHashJoin [ws_ship_mode_sk#21124], [sm_ship_mode_sk#21196], Inner, BuildRight, false\n      :              :- *(5) Project [ws_ship_mode_sk#21124, ws_quantity#21128, ws_ext_list_price#21135, ws_net_profit#21143, w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, d_year#21164, d_moy#21166]\n      :              :  +- *(5) BroadcastHashJoin [ws_sold_time_sk#21111], [t_time_sk#21186], Inner, BuildRight, false\n      :              :     :- *(5) Project [ws_sold_time_sk#21111, ws_ship_mode_sk#21124, ws_quantity#21128, ws_ext_list_price#21135, ws_net_profit#21143, w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156, d_year#21164, d_moy#21166]\n      :              :     :  +- *(5) BroadcastHashJoin [ws_sold_date_sk#21110], [d_date_sk#21158], Inner, BuildRight, false\n      :              :     :     :- *(5) Project [ws_sold_date_sk#21110, ws_sold_time_sk#21111, ws_ship_mode_sk#21124, ws_quantity#21128, ws_ext_list_price#21135, ws_net_profit#21143, w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156]\n      :              :     :     :  +- *(5) BroadcastHashJoin [ws_warehouse_sk#21125], [w_warehouse_sk#21144], Inner, BuildRight, false\n      :              :     :     :     :- *(5) Filter (((isnotnull(ws_warehouse_sk#21125) AND isnotnull(ws_sold_date_sk#21110)) AND isnotnull(ws_sold_time_sk#21111)) AND isnotnull(ws_ship_mode_sk#21124))\n      :              :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#21110, ws_sold_time_sk#21111, ws_ship_mode_sk#21124, ws_warehouse_sk#21125, ws_quantity#21128, ws_ext_list_price#21135, ws_net_profit#21143], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#21110, ws_sold_time_sk#21111, ws_ship_date_sk#21112, ws_item_sk#21113, ws_bill_c..., Partition Cols: []]\n      :              :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29088]\n      :              :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#21144)\n      :              :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#21144, w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_city#21152, w_county#21153, w_state#21154, w_country#21156], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#21144, w_warehouse_id#21145, w_warehouse_name#21146, w_warehouse_sq_ft#21147, w_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29095]\n      :              :     :        +- *(2) Filter ((isnotnull(d_year#21164) AND (d_year#21164 = 2002)) AND isnotnull(d_date_sk#21158))\n      :              :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#21158, d_year#21164, d_moy#21166], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#21158, d_date_id#21159, d_date#21160, d_month_seq#21161, d_week_seq#21162, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29103]\n      :              :        +- *(3) Project [t_time_sk#21186]\n      :              :           +- *(3) Filter (((isnotnull(t_time#21188) AND (t_time#21188 >= 2662)) AND (t_time#21188 <= 31462)) AND isnotnull(t_time_sk#21186))\n      :              :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_time#21188, t_time_sk#21186], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#21186, t_time_id#21187, t_time#21188, t_hour#21189, t_minute#21190, t_second#21191, t_..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29111]\n      :                 +- *(4) Project [sm_ship_mode_sk#21196]\n      :                    +- *(4) Filter (sm_carrier#21200 IN (FEDEX,MSC) AND isnotnull(sm_ship_mode_sk#21196))\n      :                       +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_carrier#21200, sm_ship_mode_sk#21196], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#21196, sm_ship_mode_id#21197, sm_type#21198, sm_code#21199, sm_carrier#21200, sm..., Partition Cols: []]\n      +- *(12) HashAggregate(keys=[w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248, d_year#21256], functions=[sum(CASE WHEN (d_moy#21258 = 1) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 2) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 3) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 4) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 5) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 6) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 7) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 8) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 9) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 10) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 11) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 12) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 1) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 2) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 3) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 4) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 5) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 6) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 7) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 8) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 9) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 10) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 11) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#21258 = 12) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248, ship_carriers#21048, year#21049, jan_sales#21050, feb_sales#21051, mar_sales#21052, apr_sales#21053, may_sales#21054, jun_sales#21055, jul_sales#21056, aug_sales#21057, sep_sales#21058, oct_sales#21059, nov_sales#21060, dec_sales#21061, jan_net#21062, feb_net#21063, mar_net#21064, apr_net#21065, ... 8 more fields])\n         +- Exchange hashpartitioning(w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248, d_year#21256, 200), ENSURE_REQUIREMENTS, [id=#29242]\n            +- *(11) HashAggregate(keys=[w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248, d_year#21256], functions=[partial_sum(CASE WHEN (d_moy#21258 = 1) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 2) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 3) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 4) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 5) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 6) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 7) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 8) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 9) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 10) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 11) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 12) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#21227 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 1) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 2) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 3) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 4) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 5) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 6) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 7) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 8) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 9) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 10) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 11) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#21258 = 12) THEN CheckOverflow((promote_precision(cast(cs_net_profit#21235 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#21220 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248, d_year#21256, sum#21711, isEmpty#21712, sum#21713, isEmpty#21714, sum#21715, isEmpty#21716, sum#21717, isEmpty#21718, sum#21719, isEmpty#21720, sum#21721, isEmpty#21722, sum#21723, isEmpty#21724, sum#21725, isEmpty#21726, sum#21727, ... 31 more fields])\n               +- *(11) Project [cs_quantity#21220, cs_ext_list_price#21227, cs_net_profit#21235, w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248, d_year#21256, d_moy#21258]\n                  +- *(11) BroadcastHashJoin [cs_ship_mode_sk#21215], [sm_ship_mode_sk#21288], Inner, BuildRight, false\n                     :- *(11) Project [cs_ship_mode_sk#21215, cs_quantity#21220, cs_ext_list_price#21227, cs_net_profit#21235, w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248, d_year#21256, d_moy#21258]\n                     :  +- *(11) BroadcastHashJoin [cs_sold_time_sk#21203], [t_time_sk#21278], Inner, BuildRight, false\n                     :     :- *(11) Project [cs_sold_time_sk#21203, cs_ship_mode_sk#21215, cs_quantity#21220, cs_ext_list_price#21227, cs_net_profit#21235, w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248, d_year#21256, d_moy#21258]\n                     :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#21202], [d_date_sk#21250], Inner, BuildRight, false\n                     :     :     :- *(11) Project [cs_sold_date_sk#21202, cs_sold_time_sk#21203, cs_ship_mode_sk#21215, cs_quantity#21220, cs_ext_list_price#21227, cs_net_profit#21235, w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248]\n                     :     :     :  +- *(11) BroadcastHashJoin [cs_warehouse_sk#21216], [w_warehouse_sk#21236], Inner, BuildRight, false\n                     :     :     :     :- *(11) Filter (((isnotnull(cs_warehouse_sk#21216) AND isnotnull(cs_sold_date_sk#21202)) AND isnotnull(cs_sold_time_sk#21203)) AND isnotnull(cs_ship_mode_sk#21215))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#21202, cs_sold_time_sk#21203, cs_ship_mode_sk#21215, cs_warehouse_sk#21216, cs_quantity#21220, cs_ext_list_price#21227, cs_net_profit#21235], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#21202, cs_sold_time_sk#21203, cs_ship_date_sk#21204, cs_bill_customer_sk#21205, ..., Partition Cols: []]\n                     :     :     :     +- ReusedExchange [w_warehouse_sk#21236, w_warehouse_name#21238, w_warehouse_sq_ft#21239, w_city#21244, w_county#21245, w_state#21246, w_country#21248], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29088]\n                     :     :     +- ReusedExchange [d_date_sk#21250, d_year#21256, d_moy#21258], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29095]\n                     :     +- ReusedExchange [t_time_sk#21278], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29103]\n                     +- ReusedExchange [sm_ship_mode_sk#21288], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29111]\n",
    "iteration" : 1,
    "name" : "q66"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#22016, 200), ENSURE_REQUIREMENTS, [id=#29437]\n+- *(5) HashAggregate(keys=[i_category#22016, i_class#22017, i_brand#22018, i_product_name#22019, d_year#22020, d_qoy#22021, d_moy#22022, s_store_id#22023, spark_grouping_id#22015L], functions=[sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#21917 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#21914 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))], output=[i_category#22016, i_class#22017, i_brand#22018, i_product_name#22019, d_year#22020, d_qoy#22021, d_moy#22022, s_store_id#22023, sumsales#21900])\n   +- Exchange hashpartitioning(i_category#22016, i_class#22017, i_brand#22018, i_product_name#22019, d_year#22020, d_qoy#22021, d_moy#22022, s_store_id#22023, spark_grouping_id#22015L, 200), ENSURE_REQUIREMENTS, [id=#29433]\n      +- *(4) HashAggregate(keys=[i_category#22016, i_class#22017, i_brand#22018, i_product_name#22019, d_year#22020, d_qoy#22021, d_moy#22022, s_store_id#22023, spark_grouping_id#22015L], functions=[partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#21917 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#21914 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))], output=[i_category#22016, i_class#22017, i_brand#22018, i_product_name#22019, d_year#22020, d_qoy#22021, d_moy#22022, s_store_id#22023, spark_grouping_id#22015L, sum#22045, isEmpty#22046])\n         +- *(4) Expand [List(ss_quantity#21914, ss_sales_price#21917, i_category#21996, i_class#21994, i_brand#21992, i_product_name#22005, d_year#21933, d_qoy#21937, d_moy#21935, s_store_id#21956, 0), List(ss_quantity#21914, ss_sales_price#21917, i_category#21996, i_class#21994, i_brand#21992, i_product_name#22005, d_year#21933, d_qoy#21937, d_moy#21935, null, 1), List(ss_quantity#21914, ss_sales_price#21917, i_category#21996, i_class#21994, i_brand#21992, i_product_name#22005, d_year#21933, d_qoy#21937, null, null, 3), List(ss_quantity#21914, ss_sales_price#21917, i_category#21996, i_class#21994, i_brand#21992, i_product_name#22005, d_year#21933, null, null, null, 7), List(ss_quantity#21914, ss_sales_price#21917, i_category#21996, i_class#21994, i_brand#21992, i_product_name#22005, null, null, null, null, 15), List(ss_quantity#21914, ss_sales_price#21917, i_category#21996, i_class#21994, i_brand#21992, null, null, null, null, null, 31), List(ss_quantity#21914, ss_sales_price#21917, i_category#21996, i_class#21994, null, null, null, null, null, null, 63), List(ss_quantity#21914, ss_sales_price#21917, i_category#21996, null, null, null, null, null, null, null, 127), List(ss_quantity#21914, ss_sales_price#21917, null, null, null, null, null, null, null, null, 255)], [ss_quantity#21914, ss_sales_price#21917, i_category#22016, i_class#22017, i_brand#22018, i_product_name#22019, d_year#22020, d_qoy#22021, d_moy#22022, s_store_id#22023, spark_grouping_id#22015L]\n            +- *(4) Project [ss_quantity#21914, ss_sales_price#21917, i_category#21996, i_class#21994, i_brand#21992, i_product_name#22005, d_year#21933, d_qoy#21937, d_moy#21935, s_store_id#21956]\n               +- *(4) BroadcastHashJoin [ss_item_sk#21906], [i_item_sk#21984], Inner, BuildRight, false\n                  :- *(4) Project [ss_item_sk#21906, ss_quantity#21914, ss_sales_price#21917, d_year#21933, d_moy#21935, d_qoy#21937, s_store_id#21956]\n                  :  +- *(4) BroadcastHashJoin [ss_store_sk#21911], [s_store_sk#21955], Inner, BuildRight, false\n                  :     :- *(4) Project [ss_item_sk#21906, ss_store_sk#21911, ss_quantity#21914, ss_sales_price#21917, d_year#21933, d_moy#21935, d_qoy#21937]\n                  :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#21904], [d_date_sk#21927], Inner, BuildRight, false\n                  :     :     :- *(4) Filter ((isnotnull(ss_sold_date_sk#21904) AND isnotnull(ss_store_sk#21911)) AND isnotnull(ss_item_sk#21906))\n                  :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#21904, ss_item_sk#21906, ss_store_sk#21911, ss_quantity#21914, ss_sales_price#21917], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#21904, ss_sold_time_sk#21905, ss_item_sk#21906, ss_customer_sk#21907, ss_cdemo_s..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29412]\n                  :     :        +- *(1) Project [d_date_sk#21927, d_year#21933, d_moy#21935, d_qoy#21937]\n                  :     :           +- *(1) Filter (((isnotnull(d_month_seq#21930) AND (d_month_seq#21930 >= 1177)) AND (d_month_seq#21930 <= 1188)) AND isnotnull(d_date_sk#21927))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#21927, d_month_seq#21930, d_moy#21935, d_qoy#21937, d_year#21933], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#21927, d_date_id#21928, d_date#21929, d_month_seq#21930, d_week_seq#21931, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29419]\n                  :        +- *(2) Filter isnotnull(s_store_sk#21955)\n                  :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#21955, s_store_id#21956], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#21955, s_store_id#21956, s_rec_start_date#21957, s_rec_end_date#21958, s_closed_date_..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29426]\n                     +- *(3) Filter isnotnull(i_item_sk#21984)\n                        +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#21984, i_brand#21992, i_class#21994, i_category#21996, i_product_name#22005], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#21984, i_item_id#21985, i_rec_start_date#21986, i_rec_end_date#21987, i_item_desc#2198..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q67"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 1,
    "name" : "q68"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(cd_gender#22258, cd_marital_status#22259, cd_education_status#22260, cd_purchase_estimate#22261, cd_credit_rating#22262, 200), ENSURE_REQUIREMENTS, [id=#29949]\n+- *(14) HashAggregate(keys=[cd_gender#22258, cd_marital_status#22259, cd_education_status#22260, cd_purchase_estimate#22261, cd_credit_rating#22262], functions=[partial_count(1)], output=[cd_gender#22258, cd_marital_status#22259, cd_education_status#22260, cd_purchase_estimate#22261, cd_credit_rating#22262, count#22450L])\n   +- *(14) Project [cd_gender#22258, cd_marital_status#22259, cd_education_status#22260, cd_purchase_estimate#22261, cd_credit_rating#22262]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#22228], [cd_demo_sk#22257], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#22228]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#22230], [ca_address_sk#22244], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#22228, c_current_addr_sk#22230]\n         :     :  +- SortMergeJoin [c_customer_sk#22226], [cs_ship_customer_sk#22386], LeftAnti\n         :     :     :- SortMergeJoin [c_customer_sk#22226], [ws_bill_customer_sk#22321], LeftAnti\n         :     :     :  :- SortMergeJoin [c_customer_sk#22226], [ss_customer_sk#22269], LeftSemi\n         :     :     :  :  :- *(2) Sort [c_customer_sk#22226 ASC NULLS FIRST], false, 0\n         :     :     :  :  :  +- Exchange hashpartitioning(c_customer_sk#22226, 200), ENSURE_REQUIREMENTS, [id=#29821]\n         :     :     :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#22230) AND isnotnull(c_current_cdemo_sk#22228))\n         :     :     :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#22226, c_current_cdemo_sk#22228, c_current_addr_sk#22230], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#22226, c_customer_id#22227, c_current_cdemo_sk#22228, c_current_hdemo_sk#22229, c_..., Partition Cols: []]\n         :     :     :  :  +- *(5) Sort [ss_customer_sk#22269 ASC NULLS FIRST], false, 0\n         :     :     :  :     +- Exchange hashpartitioning(ss_customer_sk#22269, 200), ENSURE_REQUIREMENTS, [id=#29836]\n         :     :     :  :        +- *(4) Project [ss_customer_sk#22269]\n         :     :     :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#22266], [d_date_sk#22289], Inner, BuildRight, false\n         :     :     :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#22266)\n         :     :     :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#22266, ss_customer_sk#22269], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#22266, ss_sold_time_sk#22267, ss_item_sk#22268, ss_customer_sk#22269, ss_cdemo_s..., Partition Cols: []]\n         :     :     :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29831]\n         :     :     :  :                 +- *(3) Project [d_date_sk#22289]\n         :     :     :  :                    +- *(3) Filter (((((isnotnull(d_year#22295) AND isnotnull(d_moy#22297)) AND (d_year#22295 = 1999)) AND (d_moy#22297 >= 1)) AND (d_moy#22297 <= 3)) AND isnotnull(d_date_sk#22289))\n         :     :     :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#22289, d_moy#22297, d_year#22295], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#22289, d_date_id#22290, d_date#22291, d_month_seq#22292, d_week_seq#22293, d_quarter_s..., Partition Cols: []]\n         :     :     :  +- *(8) Sort [ws_bill_customer_sk#22321 ASC NULLS FIRST], false, 0\n         :     :     :     +- Exchange hashpartitioning(ws_bill_customer_sk#22321, 200), ENSURE_REQUIREMENTS, [id=#29918]\n         :     :     :        +- *(7) Project [ws_bill_customer_sk#22321]\n         :     :     :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#22317], [d_date_sk#22351], Inner, BuildRight, false\n         :     :     :              :- *(7) Filter isnotnull(ws_sold_date_sk#22317)\n         :     :     :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#22317, ws_bill_customer_sk#22321], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#22317, ws_sold_time_sk#22318, ws_ship_date_sk#22319, ws_item_sk#22320, ws_bill_c..., Partition Cols: []]\n         :     :     :              +- ReusedExchange [d_date_sk#22351], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29831]\n         :     :     +- *(11) Sort [cs_ship_customer_sk#22386 ASC NULLS FIRST], false, 0\n         :     :        +- Exchange hashpartitioning(cs_ship_customer_sk#22386, 200), ENSURE_REQUIREMENTS, [id=#29936]\n         :     :           +- *(10) Project [cs_ship_customer_sk#22386]\n         :     :              +- *(10) BroadcastHashJoin [cs_sold_date_sk#22379], [d_date_sk#22413], Inner, BuildRight, false\n         :     :                 :- *(10) Filter isnotnull(cs_sold_date_sk#22379)\n         :     :                 :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#22379, cs_ship_customer_sk#22386], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#22379, cs_sold_time_sk#22380, cs_ship_date_sk#22381, cs_bill_customer_sk#22382, ..., Partition Cols: []]\n         :     :                 +- ReusedExchange [d_date_sk#22413], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29831]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#29879]\n         :        +- *(12) Project [ca_address_sk#22244]\n         :           +- *(12) Filter (ca_state#22252 IN (IL,FL,SD) AND isnotnull(ca_address_sk#22244))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#22244, ca_state#22252], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#22244, ca_address_id#22245, ca_street_number#22246, ca_street_name#22247, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#29886]\n            +- *(13) Filter isnotnull(cd_demo_sk#22257)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#22257, cd_gender#22258, cd_marital_status#22259, cd_education_status#22260, cd_purchase_estimate#22261, cd_credit_rating#22262], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#22257, cd_gender#22258, cd_marital_status#22259, cd_education_status#22260, cd_purcha..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q69"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#22525, 200), ENSURE_REQUIREMENTS, [id=#30086]\n+- *(5) HashAggregate(keys=[i_item_id#22525], functions=[partial_avg(cast(ss_quantity#22474 as bigint)), partial_avg(UnscaledValue(ss_list_price#22476)), partial_avg(UnscaledValue(ss_coupon_amt#22483)), partial_avg(UnscaledValue(ss_sales_price#22477))], output=[i_item_id#22525, sum#22583, count#22584L, sum#22585, count#22586L, sum#22587, count#22588L, sum#22589, count#22590L])\n   +- *(5) Project [ss_quantity#22474, ss_list_price#22476, ss_sales_price#22477, ss_coupon_amt#22483, i_item_id#22525]\n      +- *(5) BroadcastHashJoin [ss_promo_sk#22472], [p_promo_sk#22546], Inner, BuildRight, false\n         :- *(5) Project [ss_promo_sk#22472, ss_quantity#22474, ss_list_price#22476, ss_sales_price#22477, ss_coupon_amt#22483, i_item_id#22525]\n         :  +- *(5) BroadcastHashJoin [ss_item_sk#22466], [i_item_sk#22524], Inner, BuildRight, false\n         :     :- *(5) Project [ss_item_sk#22466, ss_promo_sk#22472, ss_quantity#22474, ss_list_price#22476, ss_sales_price#22477, ss_coupon_amt#22483]\n         :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#22464], [d_date_sk#22496], Inner, BuildRight, false\n         :     :     :- *(5) Project [ss_sold_date_sk#22464, ss_item_sk#22466, ss_promo_sk#22472, ss_quantity#22474, ss_list_price#22476, ss_sales_price#22477, ss_coupon_amt#22483]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#22468], [cd_demo_sk#22487], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(ss_cdemo_sk#22468) AND isnotnull(ss_sold_date_sk#22464)) AND isnotnull(ss_item_sk#22466)) AND isnotnull(ss_promo_sk#22472))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#22464, ss_item_sk#22466, ss_cdemo_sk#22468, ss_promo_sk#22472, ss_quantity#22474, ss_list_price#22476, ss_sales_price#22477, ss_coupon_amt#22483], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#22464, ss_sold_time_sk#22465, ss_item_sk#22466, ss_customer_sk#22467, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30057]\n         :     :     :        +- *(1) Project [cd_demo_sk#22487]\n         :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#22488) AND isnotnull(cd_marital_status#22489)) AND isnotnull(cd_education_status#22490)) AND (cd_gender#22488 = F)) AND (cd_marital_status#22489 = W)) AND (cd_education_status#22490 = College)) AND isnotnull(cd_demo_sk#22487))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#22487, cd_education_status#22490, cd_gender#22488, cd_marital_status#22489], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#22487, cd_gender#22488, cd_marital_status#22489, cd_education_status#22490, cd_purcha..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30065]\n         :     :        +- *(2) Project [d_date_sk#22496]\n         :     :           +- *(2) Filter ((isnotnull(d_year#22502) AND (d_year#22502 = 2001)) AND isnotnull(d_date_sk#22496))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#22496, d_year#22502], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#22496, d_date_id#22497, d_date#22498, d_month_seq#22499, d_week_seq#22500, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30072]\n         :        +- *(3) Filter isnotnull(i_item_sk#22524)\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#22524, i_item_id#22525], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#22524, i_item_id#22525, i_rec_start_date#22526, i_rec_end_date#22527, i_item_desc#2252..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30080]\n            +- *(4) Project [p_promo_sk#22546]\n               +- *(4) Filter (((p_channel_email#22555 = N) OR (p_channel_event#22560 = N)) AND isnotnull(p_promo_sk#22546))\n                  +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_email#22555, p_channel_event#22560, p_promo_sk#22546], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#22546, p_promo_id#22547, p_start_date_sk#22548, p_end_date_sk#22549, p_item_sk#22550,..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q7"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#22801, _w2#22802, 200), ENSURE_REQUIREMENTS, [id=#30437]\n+- *(12) HashAggregate(keys=[s_state#22787, s_county#22788, spark_grouping_id#22786L], functions=[sum(UnscaledValue(ss_net_profit#22627))], output=[total_sum#22600, s_state#22787, s_county#22788, lochierarchy#22601, _w1#22801, _w2#22802, _w3#22803])\n   +- Exchange hashpartitioning(s_state#22787, s_county#22788, spark_grouping_id#22786L, 200), ENSURE_REQUIREMENTS, [id=#30433]\n      +- *(11) HashAggregate(keys=[s_state#22787, s_county#22788, spark_grouping_id#22786L], functions=[partial_sum(UnscaledValue(ss_net_profit#22627))], output=[s_state#22787, s_county#22788, spark_grouping_id#22786L, sum#22825L])\n         +- *(11) Expand [List(ss_net_profit#22627, s_state#22680, s_county#22679, 0), List(ss_net_profit#22627, s_state#22680, null, 1), List(ss_net_profit#22627, null, null, 3)], [ss_net_profit#22627, s_state#22787, s_county#22788, spark_grouping_id#22786L]\n            +- *(11) Project [ss_net_profit#22627, s_state#22680, s_county#22679]\n               +- *(11) BroadcastHashJoin [ss_store_sk#22612], [s_store_sk#22656], Inner, BuildRight, false\n                  :- *(11) Project [ss_store_sk#22612, ss_net_profit#22627]\n                  :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#22605], [d_date_sk#22628], Inner, BuildRight, false\n                  :     :- *(11) Filter (isnotnull(ss_sold_date_sk#22605) AND isnotnull(ss_store_sk#22612))\n                  :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#22605, ss_store_sk#22612, ss_net_profit#22627], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#22605, ss_sold_time_sk#22606, ss_item_sk#22607, ss_customer_sk#22608, ss_cdemo_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30255]\n                  :        +- *(1) Project [d_date_sk#22628]\n                  :           +- *(1) Filter (((isnotnull(d_month_seq#22631) AND (d_month_seq#22631 >= 1206)) AND (d_month_seq#22631 <= 1217)) AND isnotnull(d_date_sk#22628))\n                  :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#22628, d_month_seq#22631], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#22628, d_date_id#22629, d_date#22630, d_month_seq#22631, d_week_seq#22632, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30363]\n                     +- SortMergeJoin [s_state#22680], [s_state#22597], LeftSemi\n                        :- *(3) Sort [s_state#22680 ASC NULLS FIRST], false, 0\n                        :  +- Exchange hashpartitioning(s_state#22680, 200), ENSURE_REQUIREMENTS, [id=#30262]\n                        :     +- *(2) Filter isnotnull(s_store_sk#22656)\n                        :        +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#22656, s_county#22679, s_state#22680], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#22656, s_store_id#22657, s_rec_start_date#22658, s_rec_end_date#22659, s_closed_date_..., Partition Cols: []]\n                        +- *(10) Sort [s_state#22597 ASC NULLS FIRST], false, 0\n                           +- Exchange hashpartitioning(s_state#22597, 200), ENSURE_REQUIREMENTS, [id=#30358]\n                              +- *(9) Project [s_state#22597]\n                                 +- *(9) Filter (isnotnull(ranking#22598) AND (ranking#22598 <= 5))\n                                    +- Window [rank(_w2#22775) windowspecdefinition(s_state#22734, _w2#22775 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#22598], [s_state#22734], [_w2#22775 DESC NULLS LAST]\n                                       +- *(8) Sort [s_state#22734 ASC NULLS FIRST, _w2#22775 DESC NULLS LAST], false, 0\n                                          +- Exchange hashpartitioning(s_state#22734, 200), ENSURE_REQUIREMENTS, [id=#30349]\n                                             +- *(7) HashAggregate(keys=[s_state#22734], functions=[sum(UnscaledValue(ss_net_profit#22709))], output=[s_state#22597, s_state#22734, _w2#22775])\n                                                +- Exchange hashpartitioning(s_state#22734, 200), ENSURE_REQUIREMENTS, [id=#30345]\n                                                   +- *(6) HashAggregate(keys=[s_state#22734], functions=[partial_sum(UnscaledValue(ss_net_profit#22709))], output=[s_state#22734, sum#22827L])\n                                                      +- *(6) Project [ss_net_profit#22709, s_state#22734]\n                                                         +- *(6) BroadcastHashJoin [ss_sold_date_sk#22687], [d_date_sk#22739], Inner, BuildRight, false\n                                                            :- *(6) Project [ss_sold_date_sk#22687, ss_net_profit#22709, s_state#22734]\n                                                            :  +- *(6) BroadcastHashJoin [ss_store_sk#22694], [s_store_sk#22710], Inner, BuildRight, false\n                                                            :     :- *(6) Filter (isnotnull(ss_store_sk#22694) AND isnotnull(ss_sold_date_sk#22687))\n                                                            :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#22687, ss_store_sk#22694, ss_net_profit#22709], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#22687, ss_sold_time_sk#22688, ss_item_sk#22689, ss_customer_sk#22690, ss_cdemo_s..., Partition Cols: []]\n                                                            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30271]\n                                                            :        +- *(4) Filter isnotnull(s_store_sk#22710)\n                                                            :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#22710, s_state#22734], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#22710, s_store_id#22711, s_rec_start_date#22712, s_rec_end_date#22713, s_closed_date_..., Partition Cols: []]\n                                                            +- ReusedExchange [d_date_sk#22739], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30255]\n",
    "iteration" : 1,
    "name" : "q70"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(ext_price#22857 DESC NULLS LAST, brand_id#22855 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#30690]\n+- *(10) HashAggregate(keys=[i_brand#22866, i_brand_id#22865, t_hour#23058, t_minute#23059], functions=[sum(UnscaledValue(ext_price#22843))], output=[brand_id#22855, brand#22856, t_hour#23058, t_minute#23059, ext_price#22857])\n   +- Exchange hashpartitioning(i_brand#22866, i_brand_id#22865, t_hour#23058, t_minute#23059, 200), ENSURE_REQUIREMENTS, [id=#30686]\n      +- *(9) HashAggregate(keys=[i_brand#22866, i_brand_id#22865, t_hour#23058, t_minute#23059], functions=[partial_sum(UnscaledValue(ext_price#22843))], output=[i_brand#22866, i_brand_id#22865, t_hour#23058, t_minute#23059, sum#23075L])\n         +- *(9) Project [i_brand_id#22865, i_brand#22866, ext_price#22843, t_hour#23058, t_minute#23059]\n            +- *(9) BroadcastHashJoin [time_sk#22846], [t_time_sk#23055], Inner, BuildRight, false\n               :- *(9) Project [i_brand_id#22865, i_brand#22866, ext_price#22843, time_sk#22846]\n               :  +- *(9) BroadcastHashJoin [i_item_sk#22858], [sold_item_sk#22845], Inner, BuildLeft, false\n               :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30587]\n               :     :  +- *(1) Project [i_item_sk#22858, i_brand_id#22865, i_brand#22866]\n               :     :     +- *(1) Filter ((isnotnull(i_manager_id#22878) AND (i_manager_id#22878 = 1)) AND isnotnull(i_item_sk#22858))\n               :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#22866, i_brand_id#22865, i_item_sk#22858, i_manager_id#22878], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#22858, i_item_id#22859, i_rec_start_date#22860, i_rec_end_date#22861, i_item_desc#2286..., Partition Cols: []]\n               :     +- Union\n               :        :- *(3) Project [ws_ext_sales_price#22903 AS ext_price#22843, ws_item_sk#22883 AS sold_item_sk#22845, ws_sold_time_sk#22881 AS time_sk#22846]\n               :        :  +- *(3) BroadcastHashJoin [ws_sold_date_sk#22880], [d_date_sk#22914], Inner, BuildRight, false\n               :        :     :- *(3) Filter ((isnotnull(ws_sold_date_sk#22880) AND isnotnull(ws_item_sk#22883)) AND isnotnull(ws_sold_time_sk#22881))\n               :        :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#22880, ws_sold_time_sk#22881, ws_item_sk#22883, ws_ext_sales_price#22903], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#22880, ws_sold_time_sk#22881, ws_ship_date_sk#22882, ws_item_sk#22883, ws_bill_c..., Partition Cols: []]\n               :        :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30595]\n               :        :        +- *(2) Project [d_date_sk#22914]\n               :        :           +- *(2) Filter ((((isnotnull(d_moy#22922) AND isnotnull(d_year#22920)) AND (d_moy#22922 = 11)) AND (d_year#22920 = 1999)) AND isnotnull(d_date_sk#22914))\n               :        :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#22914, d_moy#22922, d_year#22920], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#22914, d_date_id#22915, d_date#22916, d_month_seq#22917, d_week_seq#22918, d_quarter_s..., Partition Cols: []]\n               :        :- *(5) Project [cs_ext_sales_price#22965 AS ext_price#22847, cs_item_sk#22957 AS sold_item_sk#22849, cs_sold_time_sk#22943 AS time_sk#22850]\n               :        :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#22942], [d_date_sk#22976], Inner, BuildRight, false\n               :        :     :- *(5) Filter ((isnotnull(cs_sold_date_sk#22942) AND isnotnull(cs_item_sk#22957)) AND isnotnull(cs_sold_time_sk#22943))\n               :        :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#22942, cs_sold_time_sk#22943, cs_item_sk#22957, cs_ext_sales_price#22965], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#22942, cs_sold_time_sk#22943, cs_ship_date_sk#22944, cs_bill_customer_sk#22945, ..., Partition Cols: []]\n               :        :     +- ReusedExchange [d_date_sk#22976], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30595]\n               :        +- *(7) Project [ss_ext_sales_price#23019 AS ext_price#22851, ss_item_sk#23006 AS sold_item_sk#22853, ss_sold_time_sk#23005 AS time_sk#22854]\n               :           +- *(7) BroadcastHashJoin [ss_sold_date_sk#23004], [d_date_sk#23027], Inner, BuildRight, false\n               :              :- *(7) Filter ((isnotnull(ss_sold_date_sk#23004) AND isnotnull(ss_item_sk#23006)) AND isnotnull(ss_sold_time_sk#23005))\n               :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#23004, ss_sold_time_sk#23005, ss_item_sk#23006, ss_ext_sales_price#23019], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#23004, ss_sold_time_sk#23005, ss_item_sk#23006, ss_customer_sk#23007, ss_cdemo_s..., Partition Cols: []]\n               :              +- ReusedExchange [d_date_sk#23027], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30595]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30630]\n                  +- *(8) Project [t_time_sk#23055, t_hour#23058, t_minute#23059]\n                     +- *(8) Filter (((t_meal_time#23064 = breakfast) OR (t_meal_time#23064 = dinner)) AND isnotnull(t_time_sk#23055))\n                        +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#23058, t_meal_time#23064, t_minute#23059, t_time_sk#23055], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#23055, t_time_id#23056, t_time#23057, t_hour#23058, t_minute#23059, t_second#23060, t_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q71"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_desc#23142, w_warehouse_name#23126, d_week_seq#23178, 200), ENSURE_REQUIREMENTS, [id=#30989]\n+- *(14) HashAggregate(keys=[i_item_desc#23142, w_warehouse_name#23126, d_week_seq#23178], functions=[partial_sum(cast(CASE WHEN isnull(p_promo_sk#23258) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN isnotnull(p_promo_sk#23258) THEN 1 ELSE 0 END as bigint)), partial_count(1)], output=[i_item_desc#23142, w_warehouse_name#23126, d_week_seq#23178, sum#23319L, sum#23320L, count#23321L])\n   +- *(14) Project [w_warehouse_name#23126, i_item_desc#23142, d_week_seq#23178, p_promo_sk#23258]\n      +- *(14) BroadcastHashJoin [cs_item_sk#23101, cs_order_number#23103L], [cr_item_sk#23279, cr_order_number#23293L], LeftOuter, BuildRight, false\n         :- *(14) Project [cs_item_sk#23101, cs_order_number#23103L, w_warehouse_name#23126, i_item_desc#23142, d_week_seq#23178, p_promo_sk#23258]\n         :  +- *(14) BroadcastHashJoin [cs_promo_sk#23102], [p_promo_sk#23258], LeftOuter, BuildRight, false\n         :     :- *(14) Project [cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, w_warehouse_name#23126, i_item_desc#23142, d_week_seq#23178]\n         :     :  +- *(14) BroadcastHashJoin [cs_ship_date_sk#23088], [d_date_sk#23230], Inner, BuildRight, (d_date#23232 > d_date#23176 + 5 days), false\n         :     :     :- *(14) Project [cs_ship_date_sk#23088, cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, w_warehouse_name#23126, i_item_desc#23142, d_date#23176, d_week_seq#23178]\n         :     :     :  +- *(14) BroadcastHashJoin [d_week_seq#23178, inv_date_sk#23120], [d_week_seq#23206, d_date_sk#23202], Inner, BuildRight, false\n         :     :     :     :- *(14) Project [cs_ship_date_sk#23088, cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, inv_date_sk#23120, w_warehouse_name#23126, i_item_desc#23142, d_date#23176, d_week_seq#23178]\n         :     :     :     :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#23086], [d_date_sk#23174], Inner, BuildRight, false\n         :     :     :     :     :- *(14) Project [cs_sold_date_sk#23086, cs_ship_date_sk#23088, cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, inv_date_sk#23120, w_warehouse_name#23126, i_item_desc#23142]\n         :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_bill_hdemo_sk#23091], [hd_demo_sk#23169], Inner, BuildRight, false\n         :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#23086, cs_ship_date_sk#23088, cs_bill_hdemo_sk#23091, cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, inv_date_sk#23120, w_warehouse_name#23126, i_item_desc#23142]\n         :     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_bill_cdemo_sk#23090], [cd_demo_sk#23160], Inner, BuildRight, false\n         :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#23086, cs_ship_date_sk#23088, cs_bill_cdemo_sk#23090, cs_bill_hdemo_sk#23091, cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, inv_date_sk#23120, w_warehouse_name#23126, i_item_desc#23142]\n         :     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_item_sk#23101], [i_item_sk#23138], Inner, BuildRight, false\n         :     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#23086, cs_ship_date_sk#23088, cs_bill_cdemo_sk#23090, cs_bill_hdemo_sk#23091, cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, inv_date_sk#23120, w_warehouse_name#23126]\n         :     :     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [inv_warehouse_sk#23122], [w_warehouse_sk#23124], Inner, BuildRight, false\n         :     :     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#23086, cs_ship_date_sk#23088, cs_bill_cdemo_sk#23090, cs_bill_hdemo_sk#23091, cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, inv_date_sk#23120, inv_warehouse_sk#23122]\n         :     :     :     :     :     :     :     :     :  +- *(14) SortMergeJoin [cs_item_sk#23101], [inv_item_sk#23121], Inner, (inv_quantity_on_hand#23123 < cs_quantity#23104)\n         :     :     :     :     :     :     :     :     :     :- *(2) Sort [cs_item_sk#23101 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :     :     :     :     :  +- Exchange hashpartitioning(cs_item_sk#23101, 200), ENSURE_REQUIREMENTS, [id=#30906]\n         :     :     :     :     :     :     :     :     :     :     +- *(1) Filter (((((isnotnull(cs_quantity#23104) AND isnotnull(cs_item_sk#23101)) AND isnotnull(cs_bill_cdemo_sk#23090)) AND isnotnull(cs_bill_hdemo_sk#23091)) AND isnotnull(cs_sold_date_sk#23086)) AND isnotnull(cs_ship_date_sk#23088))\n         :     :     :     :     :     :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#23086, cs_ship_date_sk#23088, cs_bill_cdemo_sk#23090, cs_bill_hdemo_sk#23091, cs_item_sk#23101, cs_promo_sk#23102, cs_order_number#23103L, cs_quantity#23104], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#23086, cs_sold_time_sk#23087, cs_ship_date_sk#23088, cs_bill_customer_sk#23089, ..., Partition Cols: []]\n         :     :     :     :     :     :     :     :     :     +- *(4) Sort [inv_item_sk#23121 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :     :     :     :        +- Exchange hashpartitioning(inv_item_sk#23121, 200), ENSURE_REQUIREMENTS, [id=#30914]\n         :     :     :     :     :     :     :     :     :           +- *(3) Filter (((isnotnull(inv_quantity_on_hand#23123) AND isnotnull(inv_item_sk#23121)) AND isnotnull(inv_warehouse_sk#23122)) AND isnotnull(inv_date_sk#23120))\n         :     :     :     :     :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#23120, inv_item_sk#23121, inv_warehouse_sk#23122, inv_quantity_on_hand#23123], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#23120, inv_item_sk#23121, inv_warehouse_sk#23122, inv_quantity_on_hand#23123], Partition Cols: []]\n         :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30924]\n         :     :     :     :     :     :     :     :        +- *(5) Filter isnotnull(w_warehouse_sk#23124)\n         :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#23124, w_warehouse_name#23126], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#23124, w_warehouse_id#23125, w_warehouse_name#23126, w_warehouse_sq_ft#23127, w_s..., Partition Cols: []]\n         :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30931]\n         :     :     :     :     :     :     :        +- *(6) Filter isnotnull(i_item_sk#23138)\n         :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#23138, i_item_desc#23142], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#23138, i_item_id#23139, i_rec_start_date#23140, i_rec_end_date#23141, i_item_desc#2314..., Partition Cols: []]\n         :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30939]\n         :     :     :     :     :     :        +- *(7) Project [cd_demo_sk#23160]\n         :     :     :     :     :     :           +- *(7) Filter ((isnotnull(cd_marital_status#23162) AND (cd_marital_status#23162 = S)) AND isnotnull(cd_demo_sk#23160))\n         :     :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#23160, cd_marital_status#23162], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#23160, cd_gender#23161, cd_marital_status#23162, cd_education_status#23163, cd_purcha..., Partition Cols: []]\n         :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30947]\n         :     :     :     :     :        +- *(8) Project [hd_demo_sk#23169]\n         :     :     :     :     :           +- *(8) Filter ((isnotnull(hd_buy_potential#23171) AND (hd_buy_potential#23171 = 1001-5000)) AND isnotnull(hd_demo_sk#23169))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#23171, hd_demo_sk#23169], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#23169, hd_income_band_sk#23170, hd_buy_potential#23171, hd_dep_count#23172, hd_vehicl..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#30955]\n         :     :     :     :        +- *(9) Project [d_date_sk#23174, d_date#23176, d_week_seq#23178]\n         :     :     :     :           +- *(9) Filter ((((isnotnull(d_year#23180) AND (d_year#23180 = 2000)) AND isnotnull(d_date_sk#23174)) AND isnotnull(d_week_seq#23178)) AND isnotnull(d_date#23176))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#23176, d_date_sk#23174, d_week_seq#23178, d_year#23180], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#23174, d_date_id#23175, d_date#23176, d_month_seq#23177, d_week_seq#23178, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [id=#30962]\n         :     :     :        +- *(10) Filter (isnotnull(d_week_seq#23206) AND isnotnull(d_date_sk#23202))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#23202, d_week_seq#23206], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#23202, d_date_id#23203, d_date#23204, d_month_seq#23205, d_week_seq#23206, d_quarter_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30969]\n         :     :        +- *(11) Filter (isnotnull(d_date#23232) AND isnotnull(d_date_sk#23230))\n         :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#23230, d_date#23232], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#23230, d_date_id#23231, d_date#23232, d_month_seq#23233, d_week_seq#23234, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#30976]\n         :        +- *(12) Filter isnotnull(p_promo_sk#23258)\n         :           +- Scan hive tpcds_sf1_iceberg.promotion [p_promo_sk#23258], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#23258, p_promo_id#23259, p_start_date_sk#23260, p_end_date_sk#23261, p_item_sk#23262,..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#30983]\n            +- *(13) Filter (isnotnull(cr_item_sk#23279) AND isnotnull(cr_order_number#23293L))\n               +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#23279, cr_order_number#23293L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#23277, cr_returned_time_sk#23278, cr_item_sk#23279, cr_refunded_customer_sk#..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q72"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(cnt#23329L DESC NULLS LAST, c_last_name#23425 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#31139]\n+- *(6) Project [c_last_name#23425, c_first_name#23424, c_salutation#23423, c_preferred_cust_flag#23426, ss_ticket_number#23340L, cnt#23329L]\n   +- *(6) BroadcastHashJoin [ss_customer_sk#23334], [c_customer_sk#23416], Inner, BuildRight, false\n      :- *(6) Filter ((cnt#23329L >= 1) AND (cnt#23329L <= 5))\n      :  +- *(6) HashAggregate(keys=[ss_ticket_number#23340L, ss_customer_sk#23334], functions=[count(1)], output=[ss_ticket_number#23340L, ss_customer_sk#23334, cnt#23329L])\n      :     +- Exchange hashpartitioning(ss_ticket_number#23340L, ss_customer_sk#23334, 200), ENSURE_REQUIREMENTS, [id=#31127]\n      :        +- *(4) HashAggregate(keys=[ss_ticket_number#23340L, ss_customer_sk#23334], functions=[partial_count(1)], output=[ss_ticket_number#23340L, ss_customer_sk#23334, count#23441L])\n      :           +- *(4) Project [ss_customer_sk#23334, ss_ticket_number#23340L]\n      :              +- *(4) BroadcastHashJoin [ss_hdemo_sk#23336], [hd_demo_sk#23411], Inner, BuildRight, false\n      :                 :- *(4) Project [ss_customer_sk#23334, ss_hdemo_sk#23336, ss_ticket_number#23340L]\n      :                 :  +- *(4) BroadcastHashJoin [ss_store_sk#23338], [s_store_sk#23382], Inner, BuildRight, false\n      :                 :     :- *(4) Project [ss_customer_sk#23334, ss_hdemo_sk#23336, ss_store_sk#23338, ss_ticket_number#23340L]\n      :                 :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#23331], [d_date_sk#23354], Inner, BuildRight, false\n      :                 :     :     :- *(4) Filter (((isnotnull(ss_sold_date_sk#23331) AND isnotnull(ss_store_sk#23338)) AND isnotnull(ss_hdemo_sk#23336)) AND isnotnull(ss_customer_sk#23334))\n      :                 :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#23331, ss_customer_sk#23334, ss_hdemo_sk#23336, ss_store_sk#23338, ss_ticket_number#23340L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#23331, ss_sold_time_sk#23332, ss_item_sk#23333, ss_customer_sk#23334, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31105]\n      :                 :     :        +- *(1) Project [d_date_sk#23354]\n      :                 :     :           +- *(1) Filter ((((isnotnull(d_dom#23363) AND (d_dom#23363 >= 1)) AND (d_dom#23363 <= 2)) AND d_year#23360 IN (1999,2000,2001)) AND isnotnull(d_date_sk#23354))\n      :                 :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#23354, d_dom#23363, d_year#23360], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#23354, d_date_id#23355, d_date#23356, d_month_seq#23357, d_week_seq#23358, d_quarter_s..., Partition Cols: []]\n      :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31113]\n      :                 :        +- *(2) Project [s_store_sk#23382]\n      :                 :           +- *(2) Filter (s_county#23405 IN (Humboldt County,Hickman County,Galax city,Abbeville County) AND isnotnull(s_store_sk#23382))\n      :                 :              +- Scan hive tpcds_sf1_iceberg.store [s_county#23405, s_store_sk#23382], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#23382, s_store_id#23383, s_rec_start_date#23384, s_rec_end_date#23385, s_closed_date_..., Partition Cols: []]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#31121]\n      :                    +- *(3) Project [hd_demo_sk#23411]\n      :                       +- *(3) Filter ((((isnotnull(hd_vehicle_count#23415) AND ((hd_buy_potential#23413 = 1001-5000) OR (hd_buy_potential#23413 = Unknown))) AND (hd_vehicle_count#23415 > 0)) AND (CASE WHEN (hd_vehicle_count#23415 > 0) THEN (cast(hd_dep_count#23414 as double) / cast(hd_vehicle_count#23415 as double)) ELSE null END > 1.0)) AND isnotnull(hd_demo_sk#23411))\n      :                          +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#23413, hd_demo_sk#23411, hd_dep_count#23414, hd_vehicle_count#23415], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#23411, hd_income_band_sk#23412, hd_buy_potential#23413, hd_dep_count#23414, hd_vehicl..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31134]\n         +- *(5) Filter isnotnull(c_customer_sk#23416)\n            +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#23416, c_salutation#23423, c_first_name#23424, c_last_name#23425, c_preferred_cust_flag#23426], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#23416, c_customer_id#23417, c_current_cdemo_sk#23418, c_current_hdemo_sk#23419, c_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q73"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#23449, 200), ENSURE_REQUIREMENTS, [id=#31431]\n+- *(4) Filter (isnotnull(year_total#23453) AND (year_total#23453 > 0.00))\n   +- *(4) HashAggregate(keys=[c_customer_id#23462, c_first_name#23469, c_last_name#23470, d_year#23508], functions=[max(ss_net_paid#23499)], output=[customer_id#23449, year_total#23453])\n      +- Exchange hashpartitioning(c_customer_id#23462, c_first_name#23469, c_last_name#23470, d_year#23508, 200), ENSURE_REQUIREMENTS, [id=#31426]\n         +- *(3) HashAggregate(keys=[c_customer_id#23462, c_first_name#23469, c_last_name#23470, d_year#23508], functions=[partial_max(ss_net_paid#23499)], output=[c_customer_id#23462, c_first_name#23469, c_last_name#23470, d_year#23508, max#24087])\n            +- *(3) Project [c_customer_id#23462, c_first_name#23469, c_last_name#23470, ss_net_paid#23499, d_year#23508]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#23479], [d_date_sk#23502], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#23462, c_first_name#23469, c_last_name#23470, ss_sold_date_sk#23479, ss_net_paid#23499]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#23461], [ss_customer_sk#23482], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31411]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#23461) AND isnotnull(c_customer_id#23462))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#23461, c_customer_id#23462, c_first_name#23469, c_last_name#23470], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#23461, c_customer_id#23462, c_current_cdemo_sk#23463, c_current_hdemo_sk#23464, c_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#23482) AND isnotnull(ss_sold_date_sk#23479))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#23479, ss_customer_sk#23482, ss_net_paid#23499], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#23479, ss_sold_time_sk#23480, ss_item_sk#23481, ss_customer_sk#23482, ss_cdemo_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#31420]\n                     +- *(2) Filter (((isnotnull(d_year#23508) AND (d_year#23508 = 2001)) AND d_year#23508 IN (2001,2002)) AND isnotnull(d_date_sk#23502))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#23502, d_year#23508], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#23502, d_date_id#23503, d_date#23504, d_month_seq#23505, d_week_seq#23506, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q74"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, 200), ENSURE_REQUIREMENTS, [id=#32444]\n+- *(15) HashAggregate(keys=[d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167], functions=[sum(cast(sales_cnt#24112 as bigint)), sum(UnscaledValue(sales_amt#24113))], output=[d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, sales_cnt#24118L, sales_amt#24119])\n   +- Exchange hashpartitioning(d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, 200), ENSURE_REQUIREMENTS, [id=#32440]\n      +- *(14) HashAggregate(keys=[d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167], functions=[partial_sum(cast(sales_cnt#24112 as bigint)), partial_sum(UnscaledValue(sales_amt#24113))], output=[d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, sum#24762L, sum#24763L])\n         +- *(14) HashAggregate(keys=[d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, sales_cnt#24112, sales_amt#24113], functions=[], output=[d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, sales_cnt#24112, sales_amt#24113])\n            +- Exchange hashpartitioning(d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, sales_cnt#24112, sales_amt#24113, 200), ENSURE_REQUIREMENTS, [id=#32435]\n               +- *(13) HashAggregate(keys=[d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, sales_cnt#24112, sales_amt#24113], functions=[], output=[d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, sales_cnt#24112, sales_amt#24113])\n                  +- Union\n                     :- *(4) Project [d_year#24182, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, (cs_quantity#24138 - coalesce(cr_return_quantity#24221, 0)) AS sales_cnt#24112, CheckOverflow((promote_precision(cast(cs_ext_sales_price#24143 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#24222, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#24113]\n                     :  +- *(4) BroadcastHashJoin [cs_order_number#24137L, cs_item_sk#24135], [cr_order_number#24220L, cr_item_sk#24206], LeftOuter, BuildRight, false\n                     :     :- *(4) Project [cs_item_sk#24135, cs_order_number#24137L, cs_quantity#24138, cs_ext_sales_price#24143, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167, d_year#24182]\n                     :     :  +- *(4) BroadcastHashJoin [cs_sold_date_sk#24120], [d_date_sk#24176], Inner, BuildRight, false\n                     :     :     :- *(4) Project [cs_sold_date_sk#24120, cs_item_sk#24135, cs_order_number#24137L, cs_quantity#24138, cs_ext_sales_price#24143, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167]\n                     :     :     :  +- *(4) BroadcastHashJoin [cs_item_sk#24135], [i_item_sk#24154], Inner, BuildRight, false\n                     :     :     :     :- *(4) Filter (isnotnull(cs_item_sk#24135) AND isnotnull(cs_sold_date_sk#24120))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#24120, cs_item_sk#24135, cs_order_number#24137L, cs_quantity#24138, cs_ext_sales_price#24143], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#24120, cs_sold_time_sk#24121, cs_ship_date_sk#24122, cs_bill_customer_sk#24123, ..., Partition Cols: []]\n                     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32183]\n                     :     :     :        +- *(1) Project [i_item_sk#24154, i_brand_id#24161, i_class_id#24163, i_category_id#24165, i_manufact_id#24167]\n                     :     :     :           +- *(1) Filter ((((((isnotnull(i_category#24166) AND (i_category#24166 = Books)) AND isnotnull(i_item_sk#24154)) AND isnotnull(i_brand_id#24161)) AND isnotnull(i_class_id#24163)) AND isnotnull(i_category_id#24165)) AND isnotnull(i_manufact_id#24167))\n                     :     :     :              +- Scan hive tpcds_sf1_iceberg.item [i_brand_id#24161, i_category#24166, i_category_id#24165, i_class_id#24163, i_item_sk#24154, i_manufact_id#24167], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#24154, i_item_id#24155, i_rec_start_date#24156, i_rec_end_date#24157, i_item_desc#2415..., Partition Cols: []]\n                     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32190]\n                     :     :        +- *(2) Filter ((isnotnull(d_year#24182) AND (d_year#24182 = 2001)) AND isnotnull(d_date_sk#24176))\n                     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#24176, d_year#24182], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#24176, d_date_id#24177, d_date#24178, d_month_seq#24179, d_week_seq#24180, d_quarter_s..., Partition Cols: []]\n                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#32197]\n                     :        +- *(3) Filter (isnotnull(cr_order_number#24220L) AND isnotnull(cr_item_sk#24206))\n                     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#24206, cr_order_number#24220L, cr_return_quantity#24221, cr_return_amount#24222], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#24204, cr_returned_time_sk#24205, cr_item_sk#24206, cr_refunded_customer_sk#..., Partition Cols: []]\n                     :- *(8) Project [d_year#24282, i_brand_id#24261, i_class_id#24263, i_category_id#24265, i_manufact_id#24267, (ss_quantity#24241 - coalesce(sr_return_quantity#24314, 0)) AS sales_cnt#24114, CheckOverflow((promote_precision(cast(ss_ext_sales_price#24246 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#24315, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#24115]\n                     :  +- *(8) BroadcastHashJoin [ss_ticket_number#24240L, ss_item_sk#24233], [sr_ticket_number#24313L, sr_item_sk#24306], LeftOuter, BuildRight, false\n                     :     :- *(8) Project [ss_item_sk#24233, ss_ticket_number#24240L, ss_quantity#24241, ss_ext_sales_price#24246, i_brand_id#24261, i_class_id#24263, i_category_id#24265, i_manufact_id#24267, d_year#24282]\n                     :     :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#24231], [d_date_sk#24276], Inner, BuildRight, false\n                     :     :     :- *(8) Project [ss_sold_date_sk#24231, ss_item_sk#24233, ss_ticket_number#24240L, ss_quantity#24241, ss_ext_sales_price#24246, i_brand_id#24261, i_class_id#24263, i_category_id#24265, i_manufact_id#24267]\n                     :     :     :  +- *(8) BroadcastHashJoin [ss_item_sk#24233], [i_item_sk#24254], Inner, BuildRight, false\n                     :     :     :     :- *(8) Filter (isnotnull(ss_item_sk#24233) AND isnotnull(ss_sold_date_sk#24231))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#24231, ss_item_sk#24233, ss_ticket_number#24240L, ss_quantity#24241, ss_ext_sales_price#24246], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#24231, ss_sold_time_sk#24232, ss_item_sk#24233, ss_customer_sk#24234, ss_cdemo_s..., Partition Cols: []]\n                     :     :     :     +- ReusedExchange [i_item_sk#24254, i_brand_id#24261, i_class_id#24263, i_category_id#24265, i_manufact_id#24267], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32183]\n                     :     :     +- ReusedExchange [d_date_sk#24276, d_year#24282], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32190]\n                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#32222]\n                     :        +- *(7) Filter (isnotnull(sr_ticket_number#24313L) AND isnotnull(sr_item_sk#24306))\n                     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#24306, sr_ticket_number#24313L, sr_return_quantity#24314, sr_return_amt#24315], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#24304, sr_return_time_sk#24305, sr_item_sk#24306, sr_customer_sk#24307, sr_c..., Partition Cols: []]\n                     +- *(12) Project [d_year#24386, i_brand_id#24365, i_class_id#24367, i_category_id#24369, i_manufact_id#24371, (ws_quantity#24342 - coalesce(wr_return_quantity#24422, 0)) AS sales_cnt#24116, CheckOverflow((promote_precision(cast(ws_ext_sales_price#24347 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#24423, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#24117]\n                        +- *(12) BroadcastHashJoin [ws_order_number#24341L, ws_item_sk#24327], [wr_order_number#24421L, wr_item_sk#24410], LeftOuter, BuildRight, false\n                           :- *(12) Project [ws_item_sk#24327, ws_order_number#24341L, ws_quantity#24342, ws_ext_sales_price#24347, i_brand_id#24365, i_class_id#24367, i_category_id#24369, i_manufact_id#24371, d_year#24386]\n                           :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#24324], [d_date_sk#24380], Inner, BuildRight, false\n                           :     :- *(12) Project [ws_sold_date_sk#24324, ws_item_sk#24327, ws_order_number#24341L, ws_quantity#24342, ws_ext_sales_price#24347, i_brand_id#24365, i_class_id#24367, i_category_id#24369, i_manufact_id#24371]\n                           :     :  +- *(12) BroadcastHashJoin [ws_item_sk#24327], [i_item_sk#24358], Inner, BuildRight, false\n                           :     :     :- *(12) Filter (isnotnull(ws_item_sk#24327) AND isnotnull(ws_sold_date_sk#24324))\n                           :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#24324, ws_item_sk#24327, ws_order_number#24341L, ws_quantity#24342, ws_ext_sales_price#24347], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#24324, ws_sold_time_sk#24325, ws_ship_date_sk#24326, ws_item_sk#24327, ws_bill_c..., Partition Cols: []]\n                           :     :     +- ReusedExchange [i_item_sk#24358, i_brand_id#24365, i_class_id#24367, i_category_id#24369, i_manufact_id#24371], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#32183]\n                           :     +- ReusedExchange [d_date_sk#24380, d_year#24386], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32190]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#32247]\n                              +- *(11) Filter (isnotnull(wr_order_number#24421L) AND isnotnull(wr_item_sk#24410))\n                                 +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#24410, wr_order_number#24421L, wr_return_quantity#24422, wr_return_amt#24423], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#24408, wr_returned_time_sk#24409, wr_item_sk#24410, wr_refunded_customer_sk#..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q75"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#24791, col_name#24792, d_year#24854, d_qoy#24858, i_category#24838, 200), ENSURE_REQUIREMENTS, [id=#33017]\n+- *(10) HashAggregate(keys=[channel#24791, col_name#24792, d_year#24854, d_qoy#24858, i_category#24838], functions=[partial_count(1), partial_sum(UnscaledValue(ext_sales_price#24793))], output=[channel#24791, col_name#24792, d_year#24854, d_qoy#24858, i_category#24838, count#25059L, sum#25060L])\n   +- Union\n      :- *(3) Project [store AS channel#24791, ss_promo_sk AS col_name#24792, d_year#24854, d_qoy#24858, i_category#24838, ss_ext_sales_price#24818 AS ext_sales_price#24793]\n      :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#24803], [d_date_sk#24848], Inner, BuildRight, false\n      :     :- *(3) Project [ss_sold_date_sk#24803, ss_ext_sales_price#24818, i_category#24838]\n      :     :  +- *(3) BroadcastHashJoin [ss_item_sk#24805], [i_item_sk#24826], Inner, BuildRight, false\n      :     :     :- *(3) Project [ss_sold_date_sk#24803, ss_item_sk#24805, ss_ext_sales_price#24818]\n      :     :     :  +- *(3) Filter ((isnull(ss_promo_sk#24811) AND isnotnull(ss_item_sk#24805)) AND isnotnull(ss_sold_date_sk#24803))\n      :     :     :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_ext_sales_price#24818, ss_item_sk#24805, ss_promo_sk#24811, ss_sold_date_sk#24803], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#24803, ss_sold_time_sk#24804, ss_item_sk#24805, ss_customer_sk#24806, ss_cdemo_s..., Partition Cols: []]\n      :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32902]\n      :     :        +- *(1) Filter isnotnull(i_item_sk#24826)\n      :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#24826, i_category#24838], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#24826, i_item_id#24827, i_rec_start_date#24828, i_rec_end_date#24829, i_item_desc#2483..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32909]\n      :        +- *(2) Filter isnotnull(d_date_sk#24848)\n      :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#24848, d_year#24854, d_qoy#24858], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#24848, d_date_id#24849, d_date#24850, d_month_seq#24851, d_week_seq#24852, d_quarter_s..., Partition Cols: []]\n      :- *(6) Project [web AS channel#24794, ws_ship_addr_sk AS col_name#24795, d_year#24938, d_qoy#24942, i_category#24922, ws_ext_sales_price#24899 AS ext_sales_price#24796]\n      :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#24876], [d_date_sk#24932], Inner, BuildRight, false\n      :     :- *(6) Project [ws_sold_date_sk#24876, ws_ext_sales_price#24899, i_category#24922]\n      :     :  +- *(6) BroadcastHashJoin [ws_item_sk#24879], [i_item_sk#24910], Inner, BuildRight, false\n      :     :     :- *(6) Project [ws_sold_date_sk#24876, ws_item_sk#24879, ws_ext_sales_price#24899]\n      :     :     :  +- *(6) Filter ((isnull(ws_ship_addr_sk#24887) AND isnotnull(ws_item_sk#24879)) AND isnotnull(ws_sold_date_sk#24876))\n      :     :     :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#24899, ws_item_sk#24879, ws_ship_addr_sk#24887, ws_sold_date_sk#24876], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#24876, ws_sold_time_sk#24877, ws_ship_date_sk#24878, ws_item_sk#24879, ws_bill_c..., Partition Cols: []]\n      :     :     +- ReusedExchange [i_item_sk#24910, i_category#24922], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32902]\n      :     +- ReusedExchange [d_date_sk#24932, d_year#24938, d_qoy#24942], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32909]\n      +- *(9) Project [catalog AS channel#24797, cs_ship_customer_sk AS col_name#24798, d_year#25022, d_qoy#25026, i_category#25006, cs_ext_sales_price#24983 AS ext_sales_price#24799]\n         +- *(9) BroadcastHashJoin [cs_sold_date_sk#24960], [d_date_sk#25016], Inner, BuildRight, false\n            :- *(9) Project [cs_sold_date_sk#24960, cs_ext_sales_price#24983, i_category#25006]\n            :  +- *(9) BroadcastHashJoin [cs_item_sk#24975], [i_item_sk#24994], Inner, BuildRight, false\n            :     :- *(9) Project [cs_sold_date_sk#24960, cs_item_sk#24975, cs_ext_sales_price#24983]\n            :     :  +- *(9) Filter ((isnull(cs_ship_customer_sk#24967) AND isnotnull(cs_item_sk#24975)) AND isnotnull(cs_sold_date_sk#24960))\n            :     :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ext_sales_price#24983, cs_item_sk#24975, cs_ship_customer_sk#24967, cs_sold_date_sk#24960], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#24960, cs_sold_time_sk#24961, cs_ship_date_sk#24962, cs_bill_customer_sk#24963, ..., Partition Cols: []]\n            :     +- ReusedExchange [i_item_sk#24994, i_category#25006], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32902]\n            +- ReusedExchange [d_date_sk#25016, d_year#25022, d_qoy#25026], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#32909]\n",
    "iteration" : 1,
    "name" : "q76"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#25531, id#25532, spark_grouping_id#25530L, 200), ENSURE_REQUIREMENTS, [id=#33750]\n+- *(26) HashAggregate(keys=[channel#25531, id#25532, spark_grouping_id#25530L], functions=[partial_sum(sales#25083), partial_sum(returns#25071), partial_sum(profit#25523)], output=[channel#25531, id#25532, spark_grouping_id#25530L, sum#25548, isEmpty#25549, sum#25550, isEmpty#25551, sum#25552, isEmpty#25553])\n   +- *(26) Expand [List(sales#25083, returns#25071, profit#25523, channel#25069, id#25070, 0), List(sales#25083, returns#25071, profit#25523, channel#25069, null, 1), List(sales#25083, returns#25071, profit#25523, null, null, 3)], [sales#25083, returns#25071, profit#25523, channel#25531, id#25532, spark_grouping_id#25530L]\n      +- Union\n         :- *(9) Project [sales#25083, coalesce(returns#25085, 0.00) AS returns#25071, CheckOverflow((promote_precision(cast(profit#25084 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#25086, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#25523, store channel AS channel#25069, s_store_sk#25146 AS id#25070]\n         :  +- SortMergeJoin [s_store_sk#25146], [s_store_sk#25223], LeftOuter\n         :     :- *(4) Sort [s_store_sk#25146 ASC NULLS FIRST], false, 0\n         :     :  +- *(4) HashAggregate(keys=[s_store_sk#25146], functions=[sum(UnscaledValue(ss_ext_sales_price#25110)), sum(UnscaledValue(ss_net_profit#25117))], output=[s_store_sk#25146, sales#25083, profit#25084])\n         :     :     +- Exchange hashpartitioning(s_store_sk#25146, 200), ENSURE_REQUIREMENTS, [id=#33391]\n         :     :        +- *(3) HashAggregate(keys=[s_store_sk#25146], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#25110)), partial_sum(UnscaledValue(ss_net_profit#25117))], output=[s_store_sk#25146, sum#25556L, sum#25557L])\n         :     :           +- *(3) Project [ss_ext_sales_price#25110, ss_net_profit#25117, s_store_sk#25146]\n         :     :              +- *(3) BroadcastHashJoin [ss_store_sk#25102], [s_store_sk#25146], Inner, BuildRight, false\n         :     :                 :- *(3) Project [ss_store_sk#25102, ss_ext_sales_price#25110, ss_net_profit#25117]\n         :     :                 :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#25095], [d_date_sk#25118], Inner, BuildRight, false\n         :     :                 :     :- *(3) Filter (isnotnull(ss_sold_date_sk#25095) AND isnotnull(ss_store_sk#25102))\n         :     :                 :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#25095, ss_store_sk#25102, ss_ext_sales_price#25110, ss_net_profit#25117], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#25095, ss_sold_time_sk#25096, ss_item_sk#25097, ss_customer_sk#25098, ss_cdemo_s..., Partition Cols: []]\n         :     :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33378]\n         :     :                 :        +- *(1) Project [d_date_sk#25118]\n         :     :                 :           +- *(1) Filter (((isnotnull(d_date#25120) AND (d_date#25120 >= 11550)) AND (d_date#25120 <= 11580)) AND isnotnull(d_date_sk#25118))\n         :     :                 :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#25120, d_date_sk#25118], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#25118, d_date_id#25119, d_date#25120, d_month_seq#25121, d_week_seq#25122, d_quarter_s..., Partition Cols: []]\n         :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33385]\n         :     :                    +- *(2) Filter isnotnull(s_store_sk#25146)\n         :     :                       +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#25146], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#25146, s_store_id#25147, s_rec_start_date#25148, s_rec_end_date#25149, s_closed_date_..., Partition Cols: []]\n         :     +- *(8) Sort [s_store_sk#25223 ASC NULLS FIRST], false, 0\n         :        +- *(8) HashAggregate(keys=[s_store_sk#25223], functions=[sum(UnscaledValue(sr_return_amt#25186)), sum(UnscaledValue(sr_net_loss#25194))], output=[s_store_sk#25223, returns#25085, profit_loss#25086])\n         :           +- Exchange hashpartitioning(s_store_sk#25223, 200), ENSURE_REQUIREMENTS, [id=#33560]\n         :              +- *(7) HashAggregate(keys=[s_store_sk#25223], functions=[partial_sum(UnscaledValue(sr_return_amt#25186)), partial_sum(UnscaledValue(sr_net_loss#25194))], output=[s_store_sk#25223, sum#25560L, sum#25561L])\n         :                 +- *(7) Project [sr_return_amt#25186, sr_net_loss#25194, s_store_sk#25223]\n         :                    +- *(7) BroadcastHashJoin [sr_store_sk#25182], [s_store_sk#25223], Inner, BuildRight, false\n         :                       :- *(7) Project [sr_store_sk#25182, sr_return_amt#25186, sr_net_loss#25194]\n         :                       :  +- *(7) BroadcastHashJoin [sr_returned_date_sk#25175], [d_date_sk#25195], Inner, BuildRight, false\n         :                       :     :- *(7) Filter (isnotnull(sr_returned_date_sk#25175) AND isnotnull(sr_store_sk#25182))\n         :                       :     :  +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#25175, sr_store_sk#25182, sr_return_amt#25186, sr_net_loss#25194], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#25175, sr_return_time_sk#25176, sr_item_sk#25177, sr_customer_sk#25178, sr_c..., Partition Cols: []]\n         :                       :     +- ReusedExchange [d_date_sk#25195], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33378]\n         :                       +- ReusedExchange [s_store_sk#25223], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33385]\n         :- *(16) Project [sales#25087, returns#25089, CheckOverflow((promote_precision(cast(profit#25088 as decimal(18,2))) - promote_precision(cast(profit_loss#25090 as decimal(18,2)))), DecimalType(18,2), true) AS profit#25075, catalog channel AS channel#25073, cs_call_center_sk#25263 AS id#25074]\n         :  +- CartesianProduct\n         :     :- *(12) HashAggregate(keys=[cs_call_center_sk#25263], functions=[sum(UnscaledValue(cs_ext_sales_price#25275)), sum(UnscaledValue(cs_net_profit#25285))], output=[cs_call_center_sk#25263, sales#25087, profit#25088])\n         :     :  +- Exchange hashpartitioning(cs_call_center_sk#25263, 200), ENSURE_REQUIREMENTS, [id=#33621]\n         :     :     +- *(11) HashAggregate(keys=[cs_call_center_sk#25263], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#25275)), partial_sum(UnscaledValue(cs_net_profit#25285))], output=[cs_call_center_sk#25263, sum#25564L, sum#25565L])\n         :     :        +- *(11) Project [cs_call_center_sk#25263, cs_ext_sales_price#25275, cs_net_profit#25285]\n         :     :           +- *(11) BroadcastHashJoin [cs_sold_date_sk#25252], [d_date_sk#25286], Inner, BuildRight, false\n         :     :              :- *(11) Filter isnotnull(cs_sold_date_sk#25252)\n         :     :              :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#25252, cs_call_center_sk#25263, cs_ext_sales_price#25275, cs_net_profit#25285], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#25252, cs_sold_time_sk#25253, cs_ship_date_sk#25254, cs_bill_customer_sk#25255, ..., Partition Cols: []]\n         :     :              +- ReusedExchange [d_date_sk#25286], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33378]\n         :     +- *(15) HashAggregate(keys=[cr_call_center_sk#25325], functions=[sum(UnscaledValue(cr_return_amount#25332)), sum(UnscaledValue(cr_net_loss#25340))], output=[returns#25089, profit_loss#25090])\n         :        +- Exchange hashpartitioning(cr_call_center_sk#25325, 200), ENSURE_REQUIREMENTS, [id=#33639]\n         :           +- *(14) HashAggregate(keys=[cr_call_center_sk#25325], functions=[partial_sum(UnscaledValue(cr_return_amount#25332)), partial_sum(UnscaledValue(cr_net_loss#25340))], output=[cr_call_center_sk#25325, sum#25568L, sum#25569L])\n         :              +- *(14) Project [cr_call_center_sk#25325, cr_return_amount#25332, cr_net_loss#25340]\n         :                 +- *(14) BroadcastHashJoin [cr_returned_date_sk#25314], [d_date_sk#25341], Inner, BuildRight, false\n         :                    :- *(14) Filter isnotnull(cr_returned_date_sk#25314)\n         :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_returned_date_sk#25314, cr_call_center_sk#25325, cr_return_amount#25332, cr_net_loss#25340], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#25314, cr_returned_time_sk#25315, cr_item_sk#25316, cr_refunded_customer_sk#..., Partition Cols: []]\n         :                    +- ReusedExchange [d_date_sk#25341], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33378]\n         +- *(25) Project [sales#25091, coalesce(returns#25093, 0.00) AS returns#25078, CheckOverflow((promote_precision(cast(profit#25092 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#25094, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#25524, web channel AS channel#25540, wp_web_page_sk#25431 AS id#25541]\n            +- SortMergeJoin [wp_web_page_sk#25431], [wp_web_page_sk#25497], LeftOuter\n               :- *(20) Sort [wp_web_page_sk#25431 ASC NULLS FIRST], false, 0\n               :  +- *(20) HashAggregate(keys=[wp_web_page_sk#25431], functions=[sum(UnscaledValue(ws_ext_sales_price#25392)), sum(UnscaledValue(ws_net_profit#25402))], output=[wp_web_page_sk#25431, sales#25091, profit#25092])\n               :     +- Exchange hashpartitioning(wp_web_page_sk#25431, 200), ENSURE_REQUIREMENTS, [id=#33663]\n               :        +- *(19) HashAggregate(keys=[wp_web_page_sk#25431], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#25392)), partial_sum(UnscaledValue(ws_net_profit#25402))], output=[wp_web_page_sk#25431, sum#25572L, sum#25573L])\n               :           +- *(19) Project [ws_ext_sales_price#25392, ws_net_profit#25402, wp_web_page_sk#25431]\n               :              +- *(19) BroadcastHashJoin [ws_web_page_sk#25381], [wp_web_page_sk#25431], Inner, BuildRight, false\n               :                 :- *(19) Project [ws_web_page_sk#25381, ws_ext_sales_price#25392, ws_net_profit#25402]\n               :                 :  +- *(19) BroadcastHashJoin [ws_sold_date_sk#25369], [d_date_sk#25403], Inner, BuildRight, false\n               :                 :     :- *(19) Filter (isnotnull(ws_sold_date_sk#25369) AND isnotnull(ws_web_page_sk#25381))\n               :                 :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#25369, ws_web_page_sk#25381, ws_ext_sales_price#25392, ws_net_profit#25402], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#25369, ws_sold_time_sk#25370, ws_ship_date_sk#25371, ws_item_sk#25372, ws_bill_c..., Partition Cols: []]\n               :                 :     +- ReusedExchange [d_date_sk#25403], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33378]\n               :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33473]\n               :                    +- *(18) Filter isnotnull(wp_web_page_sk#25431)\n               :                       +- Scan hive tpcds_sf1_iceberg.web_page [wp_web_page_sk#25431], HiveTableRelation [`tpcds_sf1_iceberg`.`web_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wp_web_page_sk#25431, wp_web_page_id#25432, wp_rec_start_date#25433, wp_rec_end_date#25434, wp_c..., Partition Cols: []]\n               +- *(24) Sort [wp_web_page_sk#25497 ASC NULLS FIRST], false, 0\n                  +- *(24) HashAggregate(keys=[wp_web_page_sk#25497], functions=[sum(UnscaledValue(wr_return_amt#25460)), sum(UnscaledValue(wr_net_loss#25468))], output=[wp_web_page_sk#25497, returns#25093, profit_loss#25094])\n                     +- Exchange hashpartitioning(wp_web_page_sk#25497, 200), ENSURE_REQUIREMENTS, [id=#33698]\n                        +- *(23) HashAggregate(keys=[wp_web_page_sk#25497], functions=[partial_sum(UnscaledValue(wr_return_amt#25460)), partial_sum(UnscaledValue(wr_net_loss#25468))], output=[wp_web_page_sk#25497, sum#25576L, sum#25577L])\n                           +- *(23) Project [wr_return_amt#25460, wr_net_loss#25468, wp_web_page_sk#25497]\n                              +- *(23) BroadcastHashJoin [wr_web_page_sk#25456], [wp_web_page_sk#25497], Inner, BuildRight, false\n                                 :- *(23) Project [wr_web_page_sk#25456, wr_return_amt#25460, wr_net_loss#25468]\n                                 :  +- *(23) BroadcastHashJoin [wr_returned_date_sk#25445], [d_date_sk#25469], Inner, BuildRight, false\n                                 :     :- *(23) Filter (isnotnull(wr_returned_date_sk#25445) AND isnotnull(wr_web_page_sk#25456))\n                                 :     :  +- Scan hive tpcds_sf1_iceberg.web_returns [wr_returned_date_sk#25445, wr_web_page_sk#25456, wr_return_amt#25460, wr_net_loss#25468], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#25445, wr_returned_time_sk#25446, wr_item_sk#25447, wr_refunded_customer_sk#..., Partition Cols: []]\n                                 :     +- ReusedExchange [d_date_sk#25469], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#33378]\n                                 +- ReusedExchange [wp_web_page_sk#25497], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33473]\n",
    "iteration" : 1,
    "name" : "q77"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#25662, ss_item_sk#25615, ss_customer_sk#25616, 200), ENSURE_REQUIREMENTS, [id=#33980]\n+- *(3) HashAggregate(keys=[d_year#25662, ss_item_sk#25615, ss_customer_sk#25616], functions=[partial_sum(cast(ss_quantity#25623 as bigint)), partial_sum(UnscaledValue(ss_wholesale_cost#25624)), partial_sum(UnscaledValue(ss_sales_price#25626))], output=[d_year#25662, ss_item_sk#25615, ss_customer_sk#25616, sum#25879L, sum#25880L, sum#25881L])\n   +- *(3) Project [ss_item_sk#25615, ss_customer_sk#25616, ss_quantity#25623, ss_wholesale_cost#25624, ss_sales_price#25626, d_year#25662]\n      +- *(3) BroadcastHashJoin [ss_sold_date_sk#25613], [d_date_sk#25656], Inner, BuildRight, false\n         :- *(3) Project [ss_sold_date_sk#25613, ss_item_sk#25615, ss_customer_sk#25616, ss_quantity#25623, ss_wholesale_cost#25624, ss_sales_price#25626]\n         :  +- *(3) Filter isnull(sr_ticket_number#25645L)\n         :     +- *(3) BroadcastHashJoin [ss_ticket_number#25622L, ss_item_sk#25615], [sr_ticket_number#25645L, sr_item_sk#25638], LeftOuter, BuildRight, false\n         :        :- *(3) Filter isnotnull(ss_sold_date_sk#25613)\n         :        :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#25613, ss_item_sk#25615, ss_customer_sk#25616, ss_ticket_number#25622L, ss_quantity#25623, ss_wholesale_cost#25624, ss_sales_price#25626], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#25613, ss_sold_time_sk#25614, ss_item_sk#25615, ss_customer_sk#25616, ss_cdemo_s..., Partition Cols: []]\n         :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#33966]\n         :           +- *(1) Filter (isnotnull(sr_ticket_number#25645L) AND isnotnull(sr_item_sk#25638))\n         :              +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#25638, sr_ticket_number#25645L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#25636, sr_return_time_sk#25637, sr_item_sk#25638, sr_customer_sk#25639, sr_c..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#33974]\n            +- *(2) Filter ((isnotnull(d_year#25662) AND (d_year#25662 = 2000)) AND isnotnull(d_date_sk#25656))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#25656, d_year#25662], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#25656, d_date_id#25657, d_date#25658, d_month_seq#25659, d_week_seq#25660, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q78"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 1,
    "name" : "q79"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#26089, 200), ENSURE_REQUIREMENTS, [id=#34439]\n+- *(11) HashAggregate(keys=[s_store_name#26089], functions=[partial_sum(UnscaledValue(ss_net_profit#26055))], output=[s_store_name#26089, sum#26172L])\n   +- *(11) Project [ss_net_profit#26055, s_store_name#26089]\n      +- *(11) BroadcastHashJoin [substr(s_zip#26109, 1, 2)], [substr(ca_zip#26028, 1, 2)], Inner, BuildRight, false\n         :- *(11) Project [ss_net_profit#26055, s_store_name#26089, s_zip#26109]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#26040], [s_store_sk#26084], Inner, BuildRight, false\n         :     :- *(11) Project [ss_store_sk#26040, ss_net_profit#26055]\n         :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#26033], [d_date_sk#26056], Inner, BuildRight, false\n         :     :     :- *(11) Filter (isnotnull(ss_sold_date_sk#26033) AND isnotnull(ss_store_sk#26040))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#26033, ss_store_sk#26040, ss_net_profit#26055], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#26033, ss_sold_time_sk#26034, ss_item_sk#26035, ss_customer_sk#26036, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34384]\n         :     :        +- *(1) Project [d_date_sk#26056]\n         :     :           +- *(1) Filter ((((isnotnull(d_qoy#26066) AND isnotnull(d_year#26062)) AND (d_qoy#26066 = 2)) AND (d_year#26062 = 1998)) AND isnotnull(d_date_sk#26056))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#26056, d_qoy#26066, d_year#26062], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#26056, d_date_id#26057, d_date#26058, d_month_seq#26059, d_week_seq#26060, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34391]\n         :        +- *(2) Filter (isnotnull(s_store_sk#26084) AND isnotnull(s_zip#26109))\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#26084, s_store_name#26089, s_zip#26109], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#26084, s_store_id#26085, s_rec_start_date#26086, s_rec_end_date#26087, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [id=#34433]\n            +- *(10) HashAggregate(keys=[ca_zip#26028], functions=[], output=[ca_zip#26028])\n               +- Exchange hashpartitioning(ca_zip#26028, 200), ENSURE_REQUIREMENTS, [id=#34429]\n                  +- *(9) HashAggregate(keys=[ca_zip#26028], functions=[], output=[ca_zip#26028])\n                     +- *(9) Project [substr(ca_zip#26122, 1, 5) AS ca_zip#26028]\n                        +- SortMergeJoin [coalesce(substr(ca_zip#26122, 1, 5), ), isnull(substr(ca_zip#26122, 1, 5))], [coalesce(ca_zip#26029, ), isnull(ca_zip#26029)], LeftSemi\n                           :- *(4) Sort [coalesce(substr(ca_zip#26122, 1, 5), ) ASC NULLS FIRST, isnull(substr(ca_zip#26122, 1, 5)) ASC NULLS FIRST], false, 0\n                           :  +- Exchange hashpartitioning(coalesce(substr(ca_zip#26122, 1, 5), ), isnull(substr(ca_zip#26122, 1, 5)), 200), ENSURE_REQUIREMENTS, [id=#34398]\n                           :     +- *(3) Filter (substr(ca_zip#26122, 1, 5) INSET (69952,33467,27413,19489,63792,52868,56436,11686,18360,99060,73134,36430,84919,73873,32754,12197,98338,86379,56877,86709,91110,45676,53163,17193,11652,98569,20244,49140,75742,57649,92292,94835,71836,27642,40936,92645,12318,15475,59004,47602,50788,25115,83910,84844,89338,41351,63180,14851,17895,25494,96560,25973,54010,20712,51782,21727,99132,69280,41352,27052,83647,73108,83833,37119,51793,31830,17672,56355,68908,35390,19988,13443,72592,85761,98862,59130,83086,27700,32919,28810,30621,20534,14073,45484,21060,58058,30106,77817,23952,95694,21094,61997,38607,73219,73146,43639,95430,65177,47529,63073,52389,45645,18410,25214,27369,70070,60560,41419,81755,18218,14196,11340,71144,65501,19326,82080,18700,38353,68293,59494,36479,25717,81003,71948,75675,49211,56455,59852,88217,46507,70450,64592,19444,70041,21800,30415,58032,90209,16704,10425,14440,31013,49230,51634,55233,45859,28239,97462,16791,43933,50412,39503,16005,13261,25264,50679,33773,46131,74686,15543,58062,98584,20317,50636,40146,95042,13123,24987,33869,10374,92380,34306,13844,60083,67975,66943,17819,48567,68605,15751,43432,91894,96435,95464,56600,46081,24660,81963,32958,81504,54207,24594,34594,19753,41162,27385,26217,49254,71997,89193,88086,54558,82602,34473,27287,81084,13378,18367,48333,83986,18829,51089,14155,92696,45533,35926,67881,94791,24286,21814,66057,60624,16515,83041,57839,68852,98072,80332,39459,54364,28571,17291,36335,49101,25333,51717,63991,28577,47369,44529,94898,37914,34948,32961,71256,57631,20601,79658,24891,67998,31655,29752,90669,41232,88137,39500,18421,71954,41255,15782,18767,63193,49130,16891,24227,51766,73021,84680,60298,68770,59226,81070,33562,12350,97173,47289,62361,51184,61527,47770,51195,93498,45266,18434,15371,31016,43830,52094,24255,48017,34972,33113,16226,14530,98069,16364,18884,15734,78366,32669,57553,65148,75660,21204,58581,18569,82620,38919,84247,48162,26689,42361,14242,90229,70073,68101,79077,55349,13338,41807,78093,58412,14312,58117,50632,62878,80846,19833,56224,52301,35076,68341,51933,13869,85066,61860,83583,69998,11912,21343,11489,15794,25178,27156,59080,53565,17879,40979,58218,53535,37788,28055,36201,23065,11855,63294,21231,68843,54585,22815,35863,61794,29450,29818,57025,12320,13376,22728,60736,77454,75752,13918,72991,11618,58454,27116,68730,29392,59386,22911,49472,62585,59345,10298,41836,17167,71286,13086,41967,33122,48530,35834,39214,33159,29086,81335,98533,32489,86057,41331) AND isnotnull(substr(ca_zip#26122, 1, 5)))\n                           :        +- Scan hive tpcds_sf1_iceberg.customer_address [ca_zip#26122], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#26113, ca_address_id#26114, ca_street_number#26115, ca_street_name#26116, ca_stree..., Partition Cols: []]\n                           +- *(8) Sort [coalesce(ca_zip#26029, ) ASC NULLS FIRST, isnull(ca_zip#26029) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(ca_zip#26029, ), isnull(ca_zip#26029), 200), ENSURE_REQUIREMENTS, [id=#34420]\n                                 +- *(7) Project [ca_zip#26029]\n                                    +- *(7) Filter (count(1)#26158L > 10)\n                                       +- *(7) HashAggregate(keys=[ca_zip#26135], functions=[count(1)], output=[ca_zip#26029, count(1)#26158L])\n                                          +- Exchange hashpartitioning(ca_zip#26135, 200), ENSURE_REQUIREMENTS, [id=#34414]\n                                             +- *(6) HashAggregate(keys=[ca_zip#26135], functions=[partial_count(1)], output=[ca_zip#26135, count#26174L])\n                                                +- *(6) Project [ca_zip#26135]\n                                                   +- *(6) BroadcastHashJoin [ca_address_sk#26126], [c_current_addr_sk#26143], Inner, BuildLeft, false\n                                                      :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34405]\n                                                      :  +- *(5) Filter isnotnull(ca_address_sk#26126)\n                                                      :     +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#26126, ca_zip#26135], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#26126, ca_address_id#26127, ca_street_number#26128, ca_street_name#26129, ca_stree..., Partition Cols: []]\n                                                      +- *(6) Project [c_current_addr_sk#26143]\n                                                         +- *(6) Filter ((isnotnull(c_preferred_cust_flag#26149) AND (c_preferred_cust_flag#26149 = Y)) AND isnotnull(c_current_addr_sk#26143))\n                                                            +- Scan hive tpcds_sf1_iceberg.customer [c_current_addr_sk#26143, c_preferred_cust_flag#26149], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#26139, c_customer_id#26140, c_current_cdemo_sk#26141, c_current_hdemo_sk#26142, c_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q8"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#26646, id#26647, spark_grouping_id#26645L, 200), ENSURE_REQUIREMENTS, [id=#35131]\n+- *(22) HashAggregate(keys=[channel#26646, id#26647, spark_grouping_id#26645L], functions=[partial_sum(sales#26188), partial_sum(returns#26189), partial_sum(profit#26190)], output=[channel#26646, id#26647, spark_grouping_id#26645L, sum#26665, isEmpty#26666, sum#26667, isEmpty#26668, sum#26669, isEmpty#26670])\n   +- *(22) Expand [List(sales#26188, returns#26189, profit#26190, channel#26643, id#26644, 0), List(sales#26188, returns#26189, profit#26190, channel#26643, null, 1), List(sales#26188, returns#26189, profit#26190, null, null, 3)], [sales#26188, returns#26189, profit#26190, channel#26646, id#26647, spark_grouping_id#26645L]\n      +- Union\n         :- *(7) HashAggregate(keys=[s_store_id#26270], functions=[sum(UnscaledValue(ss_ext_sales_price#26213)), sum(coalesce(cast(sr_return_amt#26232 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#26220 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#26240 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#26188, returns#26189, profit#26190, channel#26643, id#26644])\n         :  +- Exchange hashpartitioning(s_store_id#26270, 200), ENSURE_REQUIREMENTS, [id=#34908]\n         :     +- *(6) HashAggregate(keys=[s_store_id#26270], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#26213)), partial_sum(coalesce(cast(sr_return_amt#26232 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#26220 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#26240 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[s_store_id#26270, sum#26676L, sum#26677, isEmpty#26678, sum#26679, isEmpty#26680])\n         :        +- *(6) Project [ss_ext_sales_price#26213, ss_net_profit#26220, sr_return_amt#26232, sr_net_loss#26240, s_store_id#26270]\n         :           +- *(6) BroadcastHashJoin [ss_promo_sk#26206], [p_promo_sk#26320], Inner, BuildRight, false\n         :              :- *(6) Project [ss_promo_sk#26206, ss_ext_sales_price#26213, ss_net_profit#26220, sr_return_amt#26232, sr_net_loss#26240, s_store_id#26270]\n         :              :  +- *(6) BroadcastHashJoin [ss_item_sk#26200], [i_item_sk#26298], Inner, BuildRight, false\n         :              :     :- *(6) Project [ss_item_sk#26200, ss_promo_sk#26206, ss_ext_sales_price#26213, ss_net_profit#26220, sr_return_amt#26232, sr_net_loss#26240, s_store_id#26270]\n         :              :     :  +- *(6) BroadcastHashJoin [ss_store_sk#26205], [s_store_sk#26269], Inner, BuildRight, false\n         :              :     :     :- *(6) Project [ss_item_sk#26200, ss_store_sk#26205, ss_promo_sk#26206, ss_ext_sales_price#26213, ss_net_profit#26220, sr_return_amt#26232, sr_net_loss#26240]\n         :              :     :     :  +- *(6) BroadcastHashJoin [ss_sold_date_sk#26198], [d_date_sk#26241], Inner, BuildRight, false\n         :              :     :     :     :- *(6) Project [ss_sold_date_sk#26198, ss_item_sk#26200, ss_store_sk#26205, ss_promo_sk#26206, ss_ext_sales_price#26213, ss_net_profit#26220, sr_return_amt#26232, sr_net_loss#26240]\n         :              :     :     :     :  +- *(6) BroadcastHashJoin [ss_item_sk#26200, ss_ticket_number#26207L], [sr_item_sk#26223, sr_ticket_number#26230L], LeftOuter, BuildRight, false\n         :              :     :     :     :     :- *(6) Filter (((isnotnull(ss_sold_date_sk#26198) AND isnotnull(ss_store_sk#26205)) AND isnotnull(ss_item_sk#26200)) AND isnotnull(ss_promo_sk#26206))\n         :              :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#26198, ss_item_sk#26200, ss_store_sk#26205, ss_promo_sk#26206, ss_ticket_number#26207L, ss_ext_sales_price#26213, ss_net_profit#26220], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#26198, ss_sold_time_sk#26199, ss_item_sk#26200, ss_customer_sk#26201, ss_cdemo_s..., Partition Cols: []]\n         :              :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#34871]\n         :              :     :     :     :        +- *(1) Filter (isnotnull(sr_item_sk#26223) AND isnotnull(sr_ticket_number#26230L))\n         :              :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#26223, sr_ticket_number#26230L, sr_return_amt#26232, sr_net_loss#26240], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#26221, sr_return_time_sk#26222, sr_item_sk#26223, sr_customer_sk#26224, sr_c..., Partition Cols: []]\n         :              :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34879]\n         :              :     :     :        +- *(2) Project [d_date_sk#26241]\n         :              :     :     :           +- *(2) Filter (((isnotnull(d_date#26243) AND (d_date#26243 >= 11553)) AND (d_date#26243 <= 11613)) AND isnotnull(d_date_sk#26241))\n         :              :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#26243, d_date_sk#26241], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#26241, d_date_id#26242, d_date#26243, d_month_seq#26244, d_week_seq#26245, d_quarter_s..., Partition Cols: []]\n         :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34886]\n         :              :     :        +- *(3) Filter isnotnull(s_store_sk#26269)\n         :              :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#26269, s_store_id#26270], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#26269, s_store_id#26270, s_rec_start_date#26271, s_rec_end_date#26272, s_closed_date_..., Partition Cols: []]\n         :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34894]\n         :              :        +- *(4) Project [i_item_sk#26298]\n         :              :           +- *(4) Filter ((isnotnull(i_current_price#26303) AND (i_current_price#26303 > 50.00)) AND isnotnull(i_item_sk#26298))\n         :              :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#26303, i_item_sk#26298], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#26298, i_item_id#26299, i_rec_start_date#26300, i_rec_end_date#26301, i_item_desc#2630..., Partition Cols: []]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34902]\n         :                 +- *(5) Project [p_promo_sk#26320]\n         :                    +- *(5) Filter ((isnotnull(p_channel_tv#26331) AND (p_channel_tv#26331 = N)) AND isnotnull(p_promo_sk#26320))\n         :                       +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_tv#26331, p_promo_sk#26320], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#26320, p_promo_id#26321, p_start_date_sk#26322, p_end_date_sk#26323, p_item_sk#26324,..., Partition Cols: []]\n         :- *(14) HashAggregate(keys=[cp_catalog_page_id#26429], functions=[sum(UnscaledValue(cs_ext_sales_price#26362)), sum(coalesce(cast(cr_return_amount#26391 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#26372 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#26399 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#26192, returns#26193, profit#26194, channel#26655, id#26656])\n         :  +- Exchange hashpartitioning(cp_catalog_page_id#26429, 200), ENSURE_REQUIREMENTS, [id=#35078]\n         :     +- *(13) HashAggregate(keys=[cp_catalog_page_id#26429], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#26362)), partial_sum(coalesce(cast(cr_return_amount#26391 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#26372 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#26399 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[cp_catalog_page_id#26429, sum#26686L, sum#26687, isEmpty#26688, sum#26689, isEmpty#26690])\n         :        +- *(13) Project [cs_ext_sales_price#26362, cs_net_profit#26372, cr_return_amount#26391, cr_net_loss#26399, cp_catalog_page_id#26429]\n         :           +- *(13) BroadcastHashJoin [cs_promo_sk#26355], [p_promo_sk#26459], Inner, BuildRight, false\n         :              :- *(13) Project [cs_promo_sk#26355, cs_ext_sales_price#26362, cs_net_profit#26372, cr_return_amount#26391, cr_net_loss#26399, cp_catalog_page_id#26429]\n         :              :  +- *(13) BroadcastHashJoin [cs_item_sk#26354], [i_item_sk#26437], Inner, BuildRight, false\n         :              :     :- *(13) Project [cs_item_sk#26354, cs_promo_sk#26355, cs_ext_sales_price#26362, cs_net_profit#26372, cr_return_amount#26391, cr_net_loss#26399, cp_catalog_page_id#26429]\n         :              :     :  +- *(13) BroadcastHashJoin [cs_catalog_page_sk#26351], [cp_catalog_page_sk#26428], Inner, BuildRight, false\n         :              :     :     :- *(13) Project [cs_catalog_page_sk#26351, cs_item_sk#26354, cs_promo_sk#26355, cs_ext_sales_price#26362, cs_net_profit#26372, cr_return_amount#26391, cr_net_loss#26399]\n         :              :     :     :  +- *(13) BroadcastHashJoin [cs_sold_date_sk#26339], [d_date_sk#26400], Inner, BuildRight, false\n         :              :     :     :     :- *(13) Project [cs_sold_date_sk#26339, cs_catalog_page_sk#26351, cs_item_sk#26354, cs_promo_sk#26355, cs_ext_sales_price#26362, cs_net_profit#26372, cr_return_amount#26391, cr_net_loss#26399]\n         :              :     :     :     :  +- *(13) BroadcastHashJoin [cs_item_sk#26354, cs_order_number#26356L], [cr_item_sk#26375, cr_order_number#26389L], LeftOuter, BuildRight, false\n         :              :     :     :     :     :- *(13) Filter (((isnotnull(cs_sold_date_sk#26339) AND isnotnull(cs_catalog_page_sk#26351)) AND isnotnull(cs_item_sk#26354)) AND isnotnull(cs_promo_sk#26355))\n         :              :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#26339, cs_catalog_page_sk#26351, cs_item_sk#26354, cs_promo_sk#26355, cs_order_number#26356L, cs_ext_sales_price#26362, cs_net_profit#26372], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#26339, cs_sold_time_sk#26340, cs_ship_date_sk#26341, cs_bill_customer_sk#26342, ..., Partition Cols: []]\n         :              :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#34917]\n         :              :     :     :     :        +- *(8) Filter (isnotnull(cr_item_sk#26375) AND isnotnull(cr_order_number#26389L))\n         :              :     :     :     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#26375, cr_order_number#26389L, cr_return_amount#26391, cr_net_loss#26399], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#26373, cr_returned_time_sk#26374, cr_item_sk#26375, cr_refunded_customer_sk#..., Partition Cols: []]\n         :              :     :     :     +- ReusedExchange [d_date_sk#26400], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34879]\n         :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34932]\n         :              :     :        +- *(10) Filter isnotnull(cp_catalog_page_sk#26428)\n         :              :     :           +- Scan hive tpcds_sf1_iceberg.catalog_page [cp_catalog_page_sk#26428, cp_catalog_page_id#26429], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cp_catalog_page_sk#26428, cp_catalog_page_id#26429, cp_start_date_sk#26430, cp_end_date_sk#26431..., Partition Cols: []]\n         :              :     +- ReusedExchange [i_item_sk#26437], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34894]\n         :              +- ReusedExchange [p_promo_sk#26459], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34902]\n         +- *(21) HashAggregate(keys=[web_site_id#26565], functions=[sum(UnscaledValue(ws_ext_sales_price#26501)), sum(coalesce(cast(wr_return_amt#26527 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#26511 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#26535 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#26195, returns#26196, profit#26197, channel#26657, id#26658])\n            +- Exchange hashpartitioning(web_site_id#26565, 200), ENSURE_REQUIREMENTS, [id=#35122]\n               +- *(20) HashAggregate(keys=[web_site_id#26565], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#26501)), partial_sum(coalesce(cast(wr_return_amt#26527 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#26511 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#26535 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[web_site_id#26565, sum#26696L, sum#26697, isEmpty#26698, sum#26699, isEmpty#26700])\n                  +- *(20) Project [ws_ext_sales_price#26501, ws_net_profit#26511, wr_return_amt#26527, wr_net_loss#26535, web_site_id#26565]\n                     +- *(20) BroadcastHashJoin [ws_promo_sk#26494], [p_promo_sk#26612], Inner, BuildRight, false\n                        :- *(20) Project [ws_promo_sk#26494, ws_ext_sales_price#26501, ws_net_profit#26511, wr_return_amt#26527, wr_net_loss#26535, web_site_id#26565]\n                        :  +- *(20) BroadcastHashJoin [ws_item_sk#26481], [i_item_sk#26590], Inner, BuildRight, false\n                        :     :- *(20) Project [ws_item_sk#26481, ws_promo_sk#26494, ws_ext_sales_price#26501, ws_net_profit#26511, wr_return_amt#26527, wr_net_loss#26535, web_site_id#26565]\n                        :     :  +- *(20) BroadcastHashJoin [ws_web_site_sk#26491], [web_site_sk#26564], Inner, BuildRight, false\n                        :     :     :- *(20) Project [ws_item_sk#26481, ws_web_site_sk#26491, ws_promo_sk#26494, ws_ext_sales_price#26501, ws_net_profit#26511, wr_return_amt#26527, wr_net_loss#26535]\n                        :     :     :  +- *(20) BroadcastHashJoin [ws_sold_date_sk#26478], [d_date_sk#26536], Inner, BuildRight, false\n                        :     :     :     :- *(20) Project [ws_sold_date_sk#26478, ws_item_sk#26481, ws_web_site_sk#26491, ws_promo_sk#26494, ws_ext_sales_price#26501, ws_net_profit#26511, wr_return_amt#26527, wr_net_loss#26535]\n                        :     :     :     :  +- *(20) BroadcastHashJoin [ws_item_sk#26481, ws_order_number#26495L], [wr_item_sk#26514, wr_order_number#26525L], LeftOuter, BuildRight, false\n                        :     :     :     :     :- *(20) Filter (((isnotnull(ws_sold_date_sk#26478) AND isnotnull(ws_web_site_sk#26491)) AND isnotnull(ws_item_sk#26481)) AND isnotnull(ws_promo_sk#26494))\n                        :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#26478, ws_item_sk#26481, ws_web_site_sk#26491, ws_promo_sk#26494, ws_order_number#26495L, ws_ext_sales_price#26501, ws_net_profit#26511], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#26478, ws_sold_time_sk#26479, ws_ship_date_sk#26480, ws_item_sk#26481, ws_bill_c..., Partition Cols: []]\n                        :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#34963]\n                        :     :     :     :        +- *(15) Filter (isnotnull(wr_item_sk#26514) AND isnotnull(wr_order_number#26525L))\n                        :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#26514, wr_order_number#26525L, wr_return_amt#26527, wr_net_loss#26535], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#26512, wr_returned_time_sk#26513, wr_item_sk#26514, wr_refunded_customer_sk#..., Partition Cols: []]\n                        :     :     :     +- ReusedExchange [d_date_sk#26536], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34879]\n                        :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#34978]\n                        :     :        +- *(17) Filter isnotnull(web_site_sk#26564)\n                        :     :           +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#26564, web_site_id#26565], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#26564, web_site_id#26565, web_rec_start_date#26566, web_rec_end_date#26567, web_name..., Partition Cols: []]\n                        :     +- ReusedExchange [i_item_sk#26590], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34894]\n                        +- ReusedExchange [p_promo_sk#26612], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#34902]\n",
    "iteration" : 1,
    "name" : "q80"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 1,
    "name" : "q81"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#26927, i_item_desc#26930, i_current_price#26931, 200), ENSURE_REQUIREMENTS, [id=#35613]\n+- *(7) HashAggregate(keys=[i_item_id#26927, i_item_desc#26930, i_current_price#26931], functions=[], output=[i_item_id#26927, i_item_desc#26930, i_current_price#26931])\n   +- *(7) Project [i_item_id#26927, i_item_desc#26930, i_current_price#26931]\n      +- *(7) SortMergeJoin [i_item_sk#26926], [ss_item_sk#26982], Inner\n         :- *(4) Sort [i_item_sk#26926 ASC NULLS FIRST], false, 0\n         :  +- Exchange hashpartitioning(i_item_sk#26926, 200), ENSURE_REQUIREMENTS, [id=#35596]\n         :     +- *(3) Project [i_item_sk#26926, i_item_id#26927, i_item_desc#26930, i_current_price#26931]\n         :        +- *(3) BroadcastHashJoin [inv_date_sk#26948], [d_date_sk#26952], Inner, BuildRight, false\n         :           :- *(3) Project [i_item_sk#26926, i_item_id#26927, i_item_desc#26930, i_current_price#26931, inv_date_sk#26948]\n         :           :  +- *(3) BroadcastHashJoin [i_item_sk#26926], [inv_item_sk#26949], Inner, BuildLeft, false\n         :           :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35580]\n         :           :     :  +- *(1) Project [i_item_sk#26926, i_item_id#26927, i_item_desc#26930, i_current_price#26931]\n         :           :     :     +- *(1) Filter ((((isnotnull(i_current_price#26931) AND (i_current_price#26931 >= 68.00)) AND (i_current_price#26931 <= 98.00)) AND i_manufact_id#26939 IN (562,370,230,182)) AND isnotnull(i_item_sk#26926))\n         :           :     :        +- Scan hive tpcds_sf1_iceberg.item [i_current_price#26931, i_item_desc#26930, i_item_id#26927, i_item_sk#26926, i_manufact_id#26939], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#26926, i_item_id#26927, i_rec_start_date#26928, i_rec_end_date#26929, i_item_desc#2693..., Partition Cols: []]\n         :           :     +- *(3) Project [inv_date_sk#26948, inv_item_sk#26949]\n         :           :        +- *(3) Filter ((((isnotnull(inv_quantity_on_hand#26951) AND (inv_quantity_on_hand#26951 >= 100)) AND (inv_quantity_on_hand#26951 <= 500)) AND isnotnull(inv_item_sk#26949)) AND isnotnull(inv_date_sk#26948))\n         :           :           +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#26948, inv_item_sk#26949, inv_quantity_on_hand#26951], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#26948, inv_item_sk#26949, inv_warehouse_sk#26950, inv_quantity_on_hand#26951], Partition Cols: []]\n         :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35591]\n         :              +- *(2) Project [d_date_sk#26952]\n         :                 +- *(2) Filter (((isnotnull(d_date#26954) AND (d_date#26954 >= 11815)) AND (d_date#26954 <= 11875)) AND isnotnull(d_date_sk#26952))\n         :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#26954, d_date_sk#26952], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#26952, d_date_id#26953, d_date#26954, d_month_seq#26955, d_week_seq#26956, d_quarter_s..., Partition Cols: []]\n         +- *(6) Sort [ss_item_sk#26982 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(ss_item_sk#26982, 200), ENSURE_REQUIREMENTS, [id=#35604]\n               +- *(5) Filter isnotnull(ss_item_sk#26982)\n                  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#26982], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#26980, ss_sold_time_sk#26981, ss_item_sk#26982, ss_customer_sk#26983, ss_cdemo_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q82"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#27047, 200), ENSURE_REQUIREMENTS, [id=#35976]\n+- *(5) HashAggregate(keys=[i_item_id#27047], functions=[partial_sum(cast(sr_return_quantity#27036 as bigint))], output=[i_item_id#27047, sum#27427L])\n   +- *(5) Project [sr_return_quantity#27036, i_item_id#27047]\n      +- *(5) BroadcastHashJoin [sr_returned_date_sk#27026], [d_date_sk#27068], Inner, BuildRight, false\n         :- *(5) Project [sr_returned_date_sk#27026, sr_return_quantity#27036, i_item_id#27047]\n         :  +- *(5) BroadcastHashJoin [sr_item_sk#27028], [i_item_sk#27046], Inner, BuildRight, false\n         :     :- *(5) Filter (isnotnull(sr_item_sk#27028) AND isnotnull(sr_returned_date_sk#27026))\n         :     :  +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#27026, sr_item_sk#27028, sr_return_quantity#27036], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#27026, sr_return_time_sk#27027, sr_item_sk#27028, sr_customer_sk#27029, sr_c..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#35949]\n         :        +- *(1) Filter (isnotnull(i_item_sk#27046) AND isnotnull(i_item_id#27047))\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#27046, i_item_id#27047], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#27046, i_item_id#27047, i_rec_start_date#27048, i_rec_end_date#27049, i_item_desc#2705..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35970]\n            +- *(4) Project [d_date_sk#27068]\n               +- *(4) BroadcastHashJoin [d_date#27070], [d_date#27249], LeftSemi, BuildRight, false\n                  :- *(4) Filter isnotnull(d_date_sk#27068)\n                  :  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#27068, d_date#27070], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#27068, d_date_id#27069, d_date#27070, d_month_seq#27071, d_week_seq#27072, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#35965]\n                     +- *(3) Project [d_date#27249]\n                        +- *(3) BroadcastHashJoin [d_week_seq#27251], [d_week_seq#27279], LeftSemi, BuildRight, false\n                           :- Scan hive tpcds_sf1_iceberg.date_dim [d_date#27249, d_week_seq#27251], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#27247, d_date_id#27248, d_date#27249, d_month_seq#27250, d_week_seq#27251, d_quarter_s..., Partition Cols: []]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#35960]\n                              +- *(2) Project [d_week_seq#27279]\n                                 +- *(2) Filter cast(d_date#27277 as string) IN (2000-02-20,2000-10-08,2000-11-04)\n                                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#27277, d_week_seq#27279], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#27275, d_date_id#27276, d_date#27277, d_month_seq#27278, d_week_seq#27279, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q83"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 1,
    "name" : "q84"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(r_reason_desc#27652, 200), ENSURE_REQUIREMENTS, [id=#36636]\n+- *(8) HashAggregate(keys=[r_reason_desc#27652], functions=[partial_avg(cast(ws_quantity#27537 as bigint)), partial_avg(UnscaledValue(wr_refunded_cash#27573)), partial_avg(UnscaledValue(wr_fee#27571))], output=[r_reason_desc#27652, sum#27677, count#27678L, sum#27679, count#27680L, sum#27681, count#27682L])\n   +- *(8) Project [ws_quantity#27537, wr_fee#27571, wr_refunded_cash#27573, r_reason_desc#27652]\n      +- *(8) BroadcastHashJoin [wr_reason_sk#27565], [r_reason_sk#27650], Inner, BuildRight, false\n         :- *(8) Project [ws_quantity#27537, wr_reason_sk#27565, wr_fee#27571, wr_refunded_cash#27573]\n         :  +- *(8) BroadcastHashJoin [ws_sold_date_sk#27519], [d_date_sk#27622], Inner, BuildRight, false\n         :     :- *(8) Project [ws_sold_date_sk#27519, ws_quantity#27537, wr_reason_sk#27565, wr_fee#27571, wr_refunded_cash#27573]\n         :     :  +- *(8) BroadcastHashJoin [wr_refunded_addr_sk#27559], [ca_address_sk#27609], Inner, BuildRight, ((((ca_state#27617 IN (IA,ND,FL) AND (ws_net_profit#27552 >= 100.00)) AND (ws_net_profit#27552 <= 200.00)) OR ((ca_state#27617 IN (OH,MS,VA) AND (ws_net_profit#27552 >= 150.00)) AND (ws_net_profit#27552 <= 300.00))) OR ((ca_state#27617 IN (MN,LA,TX) AND (ws_net_profit#27552 >= 50.00)) AND (ws_net_profit#27552 <= 250.00))), false\n         :     :     :- *(8) Project [ws_sold_date_sk#27519, ws_quantity#27537, ws_net_profit#27552, wr_refunded_addr_sk#27559, wr_reason_sk#27565, wr_fee#27571, wr_refunded_cash#27573]\n         :     :     :  +- *(8) BroadcastHashJoin [wr_returning_cdemo_sk#27561, cd_marital_status#27593, cd_education_status#27594], [cd_demo_sk#27600, cd_marital_status#27602, cd_education_status#27603], Inner, BuildRight, false\n         :     :     :     :- *(8) Project [ws_sold_date_sk#27519, ws_quantity#27537, ws_net_profit#27552, wr_refunded_addr_sk#27559, wr_returning_cdemo_sk#27561, wr_reason_sk#27565, wr_fee#27571, wr_refunded_cash#27573, cd_marital_status#27593, cd_education_status#27594]\n         :     :     :     :  +- *(8) BroadcastHashJoin [wr_refunded_cdemo_sk#27557], [cd_demo_sk#27591], Inner, BuildRight, ((((((cd_marital_status#27593 = D) AND (cd_education_status#27594 = 4 yr Degree)) AND (ws_sales_price#27540 >= 100.00)) AND (ws_sales_price#27540 <= 150.00)) OR ((((cd_marital_status#27593 = M) AND (cd_education_status#27594 = Primary)) AND (ws_sales_price#27540 >= 50.00)) AND (ws_sales_price#27540 <= 100.00))) OR ((((cd_marital_status#27593 = U) AND (cd_education_status#27594 = 2 yr Degree)) AND (ws_sales_price#27540 >= 150.00)) AND (ws_sales_price#27540 <= 200.00))), false\n         :     :     :     :     :- *(8) Project [ws_sold_date_sk#27519, ws_quantity#27537, ws_sales_price#27540, ws_net_profit#27552, wr_refunded_cdemo_sk#27557, wr_refunded_addr_sk#27559, wr_returning_cdemo_sk#27561, wr_reason_sk#27565, wr_fee#27571, wr_refunded_cash#27573]\n         :     :     :     :     :  +- *(8) BroadcastHashJoin [ws_web_page_sk#27531], [wp_web_page_sk#27577], Inner, BuildRight, false\n         :     :     :     :     :     :- *(8) Project [ws_sold_date_sk#27519, ws_web_page_sk#27531, ws_quantity#27537, ws_sales_price#27540, ws_net_profit#27552, wr_refunded_cdemo_sk#27557, wr_refunded_addr_sk#27559, wr_returning_cdemo_sk#27561, wr_reason_sk#27565, wr_fee#27571, wr_refunded_cash#27573]\n         :     :     :     :     :     :  +- *(8) BroadcastHashJoin [ws_item_sk#27522, ws_order_number#27536L], [wr_item_sk#27555, wr_order_number#27566L], Inner, BuildRight, false\n         :     :     :     :     :     :     :- *(8) Filter (((((isnotnull(ws_item_sk#27522) AND isnotnull(ws_order_number#27536L)) AND isnotnull(ws_web_page_sk#27531)) AND isnotnull(ws_sold_date_sk#27519)) AND ((((ws_sales_price#27540 >= 100.00) AND (ws_sales_price#27540 <= 150.00)) OR ((ws_sales_price#27540 >= 50.00) AND (ws_sales_price#27540 <= 100.00))) OR ((ws_sales_price#27540 >= 150.00) AND (ws_sales_price#27540 <= 200.00)))) AND ((((ws_net_profit#27552 >= 100.00) AND (ws_net_profit#27552 <= 200.00)) OR ((ws_net_profit#27552 >= 150.00) AND (ws_net_profit#27552 <= 300.00))) OR ((ws_net_profit#27552 >= 50.00) AND (ws_net_profit#27552 <= 250.00))))\n         :     :     :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#27519, ws_item_sk#27522, ws_web_page_sk#27531, ws_order_number#27536L, ws_quantity#27537, ws_sales_price#27540, ws_net_profit#27552], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#27519, ws_sold_time_sk#27520, ws_ship_date_sk#27521, ws_item_sk#27522, ws_bill_c..., Partition Cols: []]\n         :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[5, bigint, false]),false), [id=#36586]\n         :     :     :     :     :     :        +- *(1) Filter (((((isnotnull(wr_item_sk#27555) AND isnotnull(wr_order_number#27566L)) AND isnotnull(wr_refunded_cdemo_sk#27557)) AND isnotnull(wr_returning_cdemo_sk#27561)) AND isnotnull(wr_refunded_addr_sk#27559)) AND isnotnull(wr_reason_sk#27565))\n         :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#27555, wr_refunded_cdemo_sk#27557, wr_refunded_addr_sk#27559, wr_returning_cdemo_sk#27561, wr_reason_sk#27565, wr_order_number#27566L, wr_fee#27571, wr_refunded_cash#27573], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#27553, wr_returned_time_sk#27554, wr_item_sk#27555, wr_refunded_customer_sk#..., Partition Cols: []]\n         :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36593]\n         :     :     :     :     :        +- *(2) Filter isnotnull(wp_web_page_sk#27577)\n         :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_page [wp_web_page_sk#27577], HiveTableRelation [`tpcds_sf1_iceberg`.`web_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wp_web_page_sk#27577, wp_web_page_id#27578, wp_rec_start_date#27579, wp_rec_end_date#27580, wp_c..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36600]\n         :     :     :     :        +- *(3) Filter (((isnotnull(cd_demo_sk#27591) AND isnotnull(cd_marital_status#27593)) AND isnotnull(cd_education_status#27594)) AND ((((cd_marital_status#27593 = D) AND (cd_education_status#27594 = 4 yr Degree)) OR ((cd_marital_status#27593 = M) AND (cd_education_status#27594 = Primary))) OR ((cd_marital_status#27593 = U) AND (cd_education_status#27594 = 2 yr Degree))))\n         :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#27591, cd_marital_status#27593, cd_education_status#27594], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#27591, cd_gender#27592, cd_marital_status#27593, cd_education_status#27594, cd_purcha..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, string, false], input[2, string, false]),false), [id=#36607]\n         :     :     :        +- *(4) Filter ((isnotnull(cd_demo_sk#27600) AND isnotnull(cd_marital_status#27602)) AND isnotnull(cd_education_status#27603))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#27600, cd_marital_status#27602, cd_education_status#27603], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#27600, cd_gender#27601, cd_marital_status#27602, cd_education_status#27603, cd_purcha..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36615]\n         :     :        +- *(5) Project [ca_address_sk#27609, ca_state#27617]\n         :     :           +- *(5) Filter (((isnotnull(ca_country#27619) AND (ca_country#27619 = United States)) AND isnotnull(ca_address_sk#27609)) AND ((ca_state#27617 IN (IA,ND,FL) OR ca_state#27617 IN (OH,MS,VA)) OR ca_state#27617 IN (MN,LA,TX)))\n         :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#27609, ca_country#27619, ca_state#27617], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#27609, ca_address_id#27610, ca_street_number#27611, ca_street_name#27612, ca_stree..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36623]\n         :        +- *(6) Project [d_date_sk#27622]\n         :           +- *(6) Filter ((isnotnull(d_year#27628) AND (d_year#27628 = 2001)) AND isnotnull(d_date_sk#27622))\n         :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#27622, d_year#27628], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#27622, d_date_id#27623, d_date#27624, d_month_seq#27625, d_week_seq#27626, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36630]\n            +- *(7) Filter isnotnull(r_reason_sk#27650)\n               +- Scan hive tpcds_sf1_iceberg.reason [r_reason_sk#27650, r_reason_desc#27652], HiveTableRelation [`tpcds_sf1_iceberg`.`reason`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [r_reason_sk#27650, r_reason_id#27651, r_reason_desc#27652], Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q85"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#27796, _w2#27797, 200), ENSURE_REQUIREMENTS, [id=#36752]\n+- *(4) HashAggregate(keys=[i_category#27782, i_class#27783, spark_grouping_id#27781L], functions=[sum(UnscaledValue(ws_net_paid#27722))], output=[total_sum#27688, i_category#27782, i_class#27783, lochierarchy#27689, _w1#27796, _w2#27797, _w3#27798])\n   +- Exchange hashpartitioning(i_category#27782, i_class#27783, spark_grouping_id#27781L, 200), ENSURE_REQUIREMENTS, [id=#36748]\n      +- *(3) HashAggregate(keys=[i_category#27782, i_class#27783, spark_grouping_id#27781L], functions=[partial_sum(UnscaledValue(ws_net_paid#27722))], output=[i_category#27782, i_class#27783, spark_grouping_id#27781L, sum#27814L])\n         +- *(3) Expand [List(ws_net_paid#27722, i_category#27767, i_class#27765, 0), List(ws_net_paid#27722, i_category#27767, null, 1), List(ws_net_paid#27722, null, null, 3)], [ws_net_paid#27722, i_category#27782, i_class#27783, spark_grouping_id#27781L]\n            +- *(3) Project [ws_net_paid#27722, i_category#27767, i_class#27765]\n               +- *(3) BroadcastHashJoin [ws_item_sk#27696], [i_item_sk#27755], Inner, BuildRight, false\n                  :- *(3) Project [ws_item_sk#27696, ws_net_paid#27722]\n                  :  +- *(3) BroadcastHashJoin [ws_sold_date_sk#27693], [d_date_sk#27727], Inner, BuildRight, false\n                  :     :- *(3) Filter (isnotnull(ws_sold_date_sk#27693) AND isnotnull(ws_item_sk#27696))\n                  :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#27693, ws_item_sk#27696, ws_net_paid#27722], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#27693, ws_sold_time_sk#27694, ws_ship_date_sk#27695, ws_item_sk#27696, ws_bill_c..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36734]\n                  :        +- *(1) Project [d_date_sk#27727]\n                  :           +- *(1) Filter (((isnotnull(d_month_seq#27730) AND (d_month_seq#27730 >= 1217)) AND (d_month_seq#27730 <= 1228)) AND isnotnull(d_date_sk#27727))\n                  :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#27727, d_month_seq#27730], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#27727, d_date_id#27728, d_date#27729, d_month_seq#27730, d_week_seq#27731, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36741]\n                     +- *(2) Filter isnotnull(i_item_sk#27755)\n                        +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#27755, i_class#27765, i_category#27767], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#27755, i_item_id#27756, i_rec_start_date#27757, i_rec_end_date#27758, i_item_desc#2775..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q86"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#37258]\n+- *(16) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#28054L])\n   +- *(16) HashAggregate(keys=[c_last_name#27882, c_first_name#27881, d_date#27847], functions=[], output=[])\n      +- *(16) HashAggregate(keys=[c_last_name#27882, c_first_name#27881, d_date#27847], functions=[], output=[c_last_name#27882, c_first_name#27881, d_date#27847])\n         +- *(16) HashAggregate(keys=[c_last_name#27882, c_first_name#27881, d_date#27847], functions=[], output=[c_last_name#27882, c_first_name#27881, d_date#27847])\n            +- *(16) HashAggregate(keys=[c_last_name#27882, c_first_name#27881, d_date#27847], functions=[], output=[c_last_name#27882, c_first_name#27881, d_date#27847])\n               +- *(16) HashAggregate(keys=[c_last_name#27882, c_first_name#27881, d_date#27847], functions=[], output=[c_last_name#27882, c_first_name#27881, d_date#27847])\n                  +- Exchange hashpartitioning(c_last_name#27882, c_first_name#27881, d_date#27847, 200), ENSURE_REQUIREMENTS, [id=#37210]\n                     +- *(15) HashAggregate(keys=[c_last_name#27882, c_first_name#27881, d_date#27847], functions=[], output=[c_last_name#27882, c_first_name#27881, d_date#27847])\n                        +- SortMergeJoin [coalesce(c_last_name#27882, ), isnull(c_last_name#27882), coalesce(c_first_name#27881, ), isnull(c_first_name#27881), coalesce(d_date#27847, 0), isnull(d_date#27847)], [coalesce(c_last_name#28042, ), isnull(c_last_name#28042), coalesce(c_first_name#28041, ), isnull(c_first_name#28041), coalesce(d_date#28007, 0), isnull(d_date#28007)], LeftAnti\n                           :- SortMergeJoin [coalesce(c_last_name#27882, ), isnull(c_last_name#27882), coalesce(c_first_name#27881, ), isnull(c_first_name#27881), coalesce(d_date#27847, 0), isnull(d_date#27847)], [coalesce(c_last_name#27962, ), isnull(c_last_name#27962), coalesce(c_first_name#27961, ), isnull(c_first_name#27961), coalesce(d_date#27927, 0), isnull(d_date#27927)], LeftAnti\n                           :  :- *(4) Sort [coalesce(c_last_name#27882, ) ASC NULLS FIRST, isnull(c_last_name#27882) ASC NULLS FIRST, coalesce(c_first_name#27881, ) ASC NULLS FIRST, isnull(c_first_name#27881) ASC NULLS FIRST, coalesce(d_date#27847, 0) ASC NULLS FIRST, isnull(d_date#27847) ASC NULLS FIRST], false, 0\n                           :  :  +- Exchange hashpartitioning(coalesce(c_last_name#27882, ), isnull(c_last_name#27882), coalesce(c_first_name#27881, ), isnull(c_first_name#27881), coalesce(d_date#27847, 0), isnull(d_date#27847), 200), ENSURE_REQUIREMENTS, [id=#37001]\n                           :  :     +- *(3) Project [d_date#27847, c_first_name#27881, c_last_name#27882]\n                           :  :        +- *(3) BroadcastHashJoin [ss_customer_sk#27825], [c_customer_sk#27873], Inner, BuildRight, false\n                           :  :           :- *(3) Project [ss_customer_sk#27825, d_date#27847]\n                           :  :           :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#27822], [d_date_sk#27845], Inner, BuildRight, false\n                           :  :           :     :- *(3) Filter (isnotnull(ss_sold_date_sk#27822) AND isnotnull(ss_customer_sk#27825))\n                           :  :           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#27822, ss_customer_sk#27825], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#27822, ss_sold_time_sk#27823, ss_item_sk#27824, ss_customer_sk#27825, ss_cdemo_s..., Partition Cols: []]\n                           :  :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36989]\n                           :  :           :        +- *(1) Project [d_date_sk#27845, d_date#27847]\n                           :  :           :           +- *(1) Filter (((isnotnull(d_month_seq#27848) AND (d_month_seq#27848 >= 1224)) AND (d_month_seq#27848 <= 1235)) AND isnotnull(d_date_sk#27845))\n                           :  :           :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#27847, d_date_sk#27845, d_month_seq#27848], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#27845, d_date_id#27846, d_date#27847, d_month_seq#27848, d_week_seq#27849, d_quarter_s..., Partition Cols: []]\n                           :  :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36996]\n                           :  :              +- *(2) Filter isnotnull(c_customer_sk#27873)\n                           :  :                 +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#27873, c_first_name#27881, c_last_name#27882], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#27873, c_customer_id#27874, c_current_cdemo_sk#27875, c_current_hdemo_sk#27876, c_..., Partition Cols: []]\n                           :  +- *(9) Sort [coalesce(c_last_name#27962, ) ASC NULLS FIRST, isnull(c_last_name#27962) ASC NULLS FIRST, coalesce(c_first_name#27961, ) ASC NULLS FIRST, isnull(c_first_name#27961) ASC NULLS FIRST, coalesce(d_date#27927, 0) ASC NULLS FIRST, isnull(d_date#27927) ASC NULLS FIRST], false, 0\n                           :     +- Exchange hashpartitioning(coalesce(c_last_name#27962, ), isnull(c_last_name#27962), coalesce(c_first_name#27961, ), isnull(c_first_name#27961), coalesce(d_date#27927, 0), isnull(d_date#27927), 200), ENSURE_REQUIREMENTS, [id=#37119]\n                           :        +- *(8) HashAggregate(keys=[c_last_name#27962, c_first_name#27961, d_date#27927], functions=[], output=[c_last_name#27962, c_first_name#27961, d_date#27927])\n                           :           +- Exchange hashpartitioning(c_last_name#27962, c_first_name#27961, d_date#27927, 200), ENSURE_REQUIREMENTS, [id=#37115]\n                           :              +- *(7) HashAggregate(keys=[c_last_name#27962, c_first_name#27961, d_date#27927], functions=[], output=[c_last_name#27962, c_first_name#27961, d_date#27927])\n                           :                 +- *(7) Project [c_last_name#27962, c_first_name#27961, d_date#27927]\n                           :                    +- *(7) BroadcastHashJoin [cs_bill_customer_sk#27894], [c_customer_sk#27953], Inner, BuildRight, false\n                           :                       :- *(7) Project [cs_bill_customer_sk#27894, d_date#27927]\n                           :                       :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#27891], [d_date_sk#27925], Inner, BuildRight, false\n                           :                       :     :- *(7) Filter (isnotnull(cs_sold_date_sk#27891) AND isnotnull(cs_bill_customer_sk#27894))\n                           :                       :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#27891, cs_bill_customer_sk#27894], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#27891, cs_sold_time_sk#27892, cs_ship_date_sk#27893, cs_bill_customer_sk#27894, ..., Partition Cols: []]\n                           :                       :     +- ReusedExchange [d_date_sk#27925, d_date#27927], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36989]\n                           :                       +- ReusedExchange [c_customer_sk#27953, c_first_name#27961, c_last_name#27962], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36996]\n                           +- *(14) Sort [coalesce(c_last_name#28042, ) ASC NULLS FIRST, isnull(c_last_name#28042) ASC NULLS FIRST, coalesce(c_first_name#28041, ) ASC NULLS FIRST, isnull(c_first_name#28041) ASC NULLS FIRST, coalesce(d_date#28007, 0) ASC NULLS FIRST, isnull(d_date#28007) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(c_last_name#28042, ), isnull(c_last_name#28042), coalesce(c_first_name#28041, ), isnull(c_first_name#28041), coalesce(d_date#28007, 0), isnull(d_date#28007), 200), ENSURE_REQUIREMENTS, [id=#37196]\n                                 +- *(13) HashAggregate(keys=[c_last_name#28042, c_first_name#28041, d_date#28007], functions=[], output=[c_last_name#28042, c_first_name#28041, d_date#28007])\n                                    +- Exchange hashpartitioning(c_last_name#28042, c_first_name#28041, d_date#28007, 200), ENSURE_REQUIREMENTS, [id=#37173]\n                                       +- *(12) HashAggregate(keys=[c_last_name#28042, c_first_name#28041, d_date#28007], functions=[], output=[c_last_name#28042, c_first_name#28041, d_date#28007])\n                                          +- *(12) Project [c_last_name#28042, c_first_name#28041, d_date#28007]\n                                             +- *(12) BroadcastHashJoin [ws_bill_customer_sk#27975], [c_customer_sk#28033], Inner, BuildRight, false\n                                                :- *(12) Project [ws_bill_customer_sk#27975, d_date#28007]\n                                                :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#27971], [d_date_sk#28005], Inner, BuildRight, false\n                                                :     :- *(12) Filter (isnotnull(ws_sold_date_sk#27971) AND isnotnull(ws_bill_customer_sk#27975))\n                                                :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#27971, ws_bill_customer_sk#27975], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#27971, ws_sold_time_sk#27972, ws_ship_date_sk#27973, ws_item_sk#27974, ws_bill_c..., Partition Cols: []]\n                                                :     +- ReusedExchange [d_date_sk#28005, d_date#28007], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#36989]\n                                                +- ReusedExchange [c_customer_sk#28033, c_first_name#28041, c_last_name#28042], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#36996]\n",
    "iteration" : 1,
    "name" : "q87"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#38654]\n+- *(39) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#28632L])\n   +- *(39) Project\n      +- *(39) BroadcastHashJoin [ss_store_sk#28549], [s_store_sk#28580], Inner, BuildRight, false\n         :- *(39) Project [ss_store_sk#28549]\n         :  +- *(39) BroadcastHashJoin [ss_sold_time_sk#28543], [t_time_sk#28570], Inner, BuildRight, false\n         :     :- *(39) Project [ss_sold_time_sk#28543, ss_store_sk#28549]\n         :     :  +- *(39) BroadcastHashJoin [ss_hdemo_sk#28547], [hd_demo_sk#28565], Inner, BuildRight, false\n         :     :     :- *(39) Filter ((isnotnull(ss_hdemo_sk#28547) AND isnotnull(ss_sold_time_sk#28543)) AND isnotnull(ss_store_sk#28549))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_time_sk#28543, ss_hdemo_sk#28547, ss_store_sk#28549], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#28542, ss_sold_time_sk#28543, ss_item_sk#28544, ss_customer_sk#28545, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- ReusedExchange [hd_demo_sk#28565], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37924]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38168]\n         :        +- *(37) Project [t_time_sk#28570]\n         :           +- *(37) Filter ((((isnotnull(t_hour#28573) AND isnotnull(t_minute#28574)) AND (t_hour#28573 = 12)) AND (t_minute#28574 < 30)) AND isnotnull(t_time_sk#28570))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#28573, t_minute#28574, t_time_sk#28570], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#28570, t_time_id#28571, t_time#28572, t_hour#28573, t_minute#28574, t_second#28575, t_..., Partition Cols: []]\n         +- ReusedExchange [s_store_sk#28580], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#37940]\n",
    "iteration" : 1,
    "name" : "q88"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#28656, i_brand#28652, s_store_name#28722, s_company_name#28734, 200), ENSURE_REQUIREMENTS, [id=#38805]\n+- *(5) HashAggregate(keys=[i_category#28656, i_class#28654, i_brand#28652, s_store_name#28722, s_company_name#28734, d_moy#28697], functions=[sum(UnscaledValue(ss_sales_price#28679))], output=[i_category#28656, i_class#28654, i_brand#28652, s_store_name#28722, s_company_name#28734, d_moy#28697, sum_sales#28642, _w0#28749])\n   +- Exchange hashpartitioning(i_category#28656, i_class#28654, i_brand#28652, s_store_name#28722, s_company_name#28734, d_moy#28697, 200), ENSURE_REQUIREMENTS, [id=#38801]\n      +- *(4) HashAggregate(keys=[i_category#28656, i_class#28654, i_brand#28652, s_store_name#28722, s_company_name#28734, d_moy#28697], functions=[partial_sum(UnscaledValue(ss_sales_price#28679))], output=[i_category#28656, i_class#28654, i_brand#28652, s_store_name#28722, s_company_name#28734, d_moy#28697, sum#28759L])\n         +- *(4) Project [i_brand#28652, i_class#28654, i_category#28656, ss_sales_price#28679, d_moy#28697, s_store_name#28722, s_company_name#28734]\n            +- *(4) BroadcastHashJoin [ss_store_sk#28673], [s_store_sk#28717], Inner, BuildRight, false\n               :- *(4) Project [i_brand#28652, i_class#28654, i_category#28656, ss_store_sk#28673, ss_sales_price#28679, d_moy#28697]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#28666], [d_date_sk#28689], Inner, BuildRight, false\n               :     :- *(4) Project [i_brand#28652, i_class#28654, i_category#28656, ss_sold_date_sk#28666, ss_store_sk#28673, ss_sales_price#28679]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#28644], [ss_item_sk#28668], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#38778]\n               :     :     :  +- *(1) Filter (((i_category#28656 IN (Children,Home,Women) AND i_class#28654 IN (toddlers,flatware,fragrances)) OR (i_category#28656 IN (Music,Electronics,Shoes) AND i_class#28654 IN (country,dvd/vcr players,mens))) AND isnotnull(i_item_sk#28644))\n               :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#28644, i_brand#28652, i_class#28654, i_category#28656], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#28644, i_item_id#28645, i_rec_start_date#28646, i_rec_end_date#28647, i_item_desc#2864..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#28668) AND isnotnull(ss_sold_date_sk#28666)) AND isnotnull(ss_store_sk#28673))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#28666, ss_item_sk#28668, ss_store_sk#28673, ss_sales_price#28679], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#28666, ss_sold_time_sk#28667, ss_item_sk#28668, ss_customer_sk#28669, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#38788]\n               :        +- *(2) Project [d_date_sk#28689, d_moy#28697]\n               :           +- *(2) Filter ((isnotnull(d_year#28695) AND (d_year#28695 = 2001)) AND isnotnull(d_date_sk#28689))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#28689, d_moy#28697, d_year#28695], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#28689, d_date_id#28690, d_date#28691, d_month_seq#28692, d_week_seq#28693, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#38795]\n                  +- *(3) Filter isnotnull(s_store_sk#28717)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#28717, s_store_name#28722, s_company_name#28734], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#28717, s_store_id#28718, s_rec_start_date#28719, s_rec_end_date#28720, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q89"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 1,
    "name" : "q9"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#39659]\n+- *(9) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#29423L])\n   +- *(9) Project\n      +- *(9) BroadcastHashJoin [ws_web_page_sk#29368], [wp_web_page_sk#29405], Inner, BuildRight, false\n         :- *(9) Project [ws_web_page_sk#29368]\n         :  +- *(9) BroadcastHashJoin [ws_sold_time_sk#29357], [t_time_sk#29395], Inner, BuildRight, false\n         :     :- *(9) Project [ws_sold_time_sk#29357, ws_web_page_sk#29368]\n         :     :  +- *(9) BroadcastHashJoin [ws_ship_hdemo_sk#29366], [hd_demo_sk#29390], Inner, BuildRight, false\n         :     :     :- *(9) Filter ((isnotnull(ws_ship_hdemo_sk#29366) AND isnotnull(ws_sold_time_sk#29357)) AND isnotnull(ws_web_page_sk#29368))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_time_sk#29357, ws_ship_hdemo_sk#29366, ws_web_page_sk#29368], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#29356, ws_sold_time_sk#29357, ws_ship_date_sk#29358, ws_item_sk#29359, ws_bill_c..., Partition Cols: []]\n         :     :     +- ReusedExchange [hd_demo_sk#29390], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39535]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39575]\n         :        +- *(7) Project [t_time_sk#29395]\n         :           +- *(7) Filter (((isnotnull(t_hour#29398) AND (t_hour#29398 >= 20)) AND (t_hour#29398 <= 21)) AND isnotnull(t_time_sk#29395))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#29398, t_time_sk#29395], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#29395, t_time_id#29396, t_time#29397, t_hour#29398, t_minute#29399, t_second#29400, t_..., Partition Cols: []]\n         +- ReusedExchange [wp_web_page_sk#29405], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39551]\n",
    "iteration" : 1,
    "name" : "q90"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(Returns_Loss#29429 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [id=#39902]\n+- *(8) HashAggregate(keys=[cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cd_marital_status#29549, cd_education_status#29550], functions=[sum(UnscaledValue(cr_net_loss#29487))], output=[Call_Center#29426, Call_Center_Name#29427, Manager#29428, Returns_Loss#29429])\n   +- Exchange hashpartitioning(cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cd_marital_status#29549, cd_education_status#29550, 200), ENSURE_REQUIREMENTS, [id=#39898]\n      +- *(7) HashAggregate(keys=[cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cd_marital_status#29549, cd_education_status#29550], functions=[partial_sum(UnscaledValue(cr_net_loss#29487))], output=[cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cd_marital_status#29549, cd_education_status#29550, sum#29569L])\n         +- *(7) Project [cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cr_net_loss#29487, cd_marital_status#29549, cd_education_status#29550]\n            +- *(7) BroadcastHashJoin [c_current_hdemo_sk#29519], [hd_demo_sk#29556], Inner, BuildRight, false\n               :- *(7) Project [cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cr_net_loss#29487, c_current_hdemo_sk#29519, cd_marital_status#29549, cd_education_status#29550]\n               :  +- *(7) BroadcastHashJoin [c_current_cdemo_sk#29518], [cd_demo_sk#29547], Inner, BuildRight, false\n               :     :- *(7) Project [cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cr_net_loss#29487, c_current_cdemo_sk#29518, c_current_hdemo_sk#29519]\n               :     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#29520], [ca_address_sk#29534], Inner, BuildRight, false\n               :     :     :- *(7) Project [cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cr_net_loss#29487, c_current_cdemo_sk#29518, c_current_hdemo_sk#29519, c_current_addr_sk#29520]\n               :     :     :  +- *(7) BroadcastHashJoin [cr_returning_customer_sk#29468], [c_customer_sk#29516], Inner, BuildRight, false\n               :     :     :     :- *(7) Project [cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cr_returning_customer_sk#29468, cr_net_loss#29487]\n               :     :     :     :  +- *(7) BroadcastHashJoin [cr_returned_date_sk#29461], [d_date_sk#29488], Inner, BuildRight, false\n               :     :     :     :     :- *(7) Project [cc_call_center_id#29431, cc_name#29436, cc_manager#29441, cr_returned_date_sk#29461, cr_returning_customer_sk#29468, cr_net_loss#29487]\n               :     :     :     :     :  +- *(7) BroadcastHashJoin [cc_call_center_sk#29430], [cr_call_center_sk#29472], Inner, BuildLeft, false\n               :     :     :     :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#39852]\n               :     :     :     :     :     :  +- *(1) Filter isnotnull(cc_call_center_sk#29430)\n               :     :     :     :     :     :     +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#29430, cc_call_center_id#29431, cc_name#29436, cc_manager#29441], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#29430, cc_call_center_id#29431, cc_rec_start_date#29432, cc_rec_end_date#29433..., Partition Cols: []]\n               :     :     :     :     :     +- *(7) Filter ((isnotnull(cr_call_center_sk#29472) AND isnotnull(cr_returned_date_sk#29461)) AND isnotnull(cr_returning_customer_sk#29468))\n               :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_returned_date_sk#29461, cr_returning_customer_sk#29468, cr_call_center_sk#29472, cr_net_loss#29487], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#29461, cr_returned_time_sk#29462, cr_item_sk#29463, cr_refunded_customer_sk#..., Partition Cols: []]\n               :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39862]\n               :     :     :     :        +- *(2) Project [d_date_sk#29488]\n               :     :     :     :           +- *(2) Filter ((((isnotnull(d_year#29494) AND isnotnull(d_moy#29496)) AND (d_year#29494 = 1998)) AND (d_moy#29496 = 12)) AND isnotnull(d_date_sk#29488))\n               :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#29488, d_moy#29496, d_year#29494], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#29488, d_date_id#29489, d_date#29490, d_month_seq#29491, d_week_seq#29492, d_quarter_s..., Partition Cols: []]\n               :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#39869]\n               :     :     :        +- *(3) Filter (((isnotnull(c_customer_sk#29516) AND isnotnull(c_current_addr_sk#29520)) AND isnotnull(c_current_cdemo_sk#29518)) AND isnotnull(c_current_hdemo_sk#29519))\n               :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#29516, c_current_cdemo_sk#29518, c_current_hdemo_sk#29519, c_current_addr_sk#29520], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#29516, c_customer_id#29517, c_current_cdemo_sk#29518, c_current_hdemo_sk#29519, c_..., Partition Cols: []]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39877]\n               :     :        +- *(4) Project [ca_address_sk#29534]\n               :     :           +- *(4) Filter ((isnotnull(ca_gmt_offset#29545) AND (ca_gmt_offset#29545 = -6.00)) AND isnotnull(ca_address_sk#29534))\n               :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#29534, ca_gmt_offset#29545], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#29534, ca_address_id#29535, ca_street_number#29536, ca_street_name#29537, ca_stree..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#39884]\n               :        +- *(5) Filter ((((cd_marital_status#29549 = M) AND (cd_education_status#29550 = Unknown)) OR ((cd_marital_status#29549 = W) AND (cd_education_status#29550 = Advanced Degree))) AND isnotnull(cd_demo_sk#29547))\n               :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#29547, cd_marital_status#29549, cd_education_status#29550], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#29547, cd_gender#29548, cd_marital_status#29549, cd_education_status#29550, cd_purcha..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#39892]\n                  +- *(6) Project [hd_demo_sk#29556]\n                     +- *(6) Filter ((isnotnull(hd_buy_potential#29558) AND StartsWith(hd_buy_potential#29558, Unknown)) AND isnotnull(hd_demo_sk#29556))\n                        +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#29558, hd_demo_sk#29556], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#29556, hd_income_band_sk#29557, hd_buy_potential#29558, hd_dep_count#29559, hd_vehicl..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q91"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#40096]\n+- *(8) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ws_ext_discount_amt#29599))], output=[sum#29730L])\n   +- *(8) Project [ws_ext_discount_amt#29599]\n      +- *(8) BroadcastHashJoin [ws_sold_date_sk#29577], [d_date_sk#29633], Inner, BuildRight, false\n         :- *(8) Project [ws_sold_date_sk#29577, ws_ext_discount_amt#29599]\n         :  +- *(8) SortMergeJoin [i_item_sk#29611], [ws_item_sk#29664], Inner, (cast(ws_ext_discount_amt#29599 as decimal(14,7)) > (CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#29724)\n         :     :- *(3) Sort [i_item_sk#29611 ASC NULLS FIRST], false, 0\n         :     :  +- Exchange hashpartitioning(i_item_sk#29611, 200), ENSURE_REQUIREMENTS, [id=#40033]\n         :     :     +- *(2) Project [ws_sold_date_sk#29577, ws_ext_discount_amt#29599, i_item_sk#29611]\n         :     :        +- *(2) BroadcastHashJoin [ws_item_sk#29580], [i_item_sk#29611], Inner, BuildRight, false\n         :     :           :- *(2) Filter ((isnotnull(ws_item_sk#29580) AND isnotnull(ws_ext_discount_amt#29599)) AND isnotnull(ws_sold_date_sk#29577))\n         :     :           :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#29577, ws_item_sk#29580, ws_ext_discount_amt#29599], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#29577, ws_sold_time_sk#29578, ws_ship_date_sk#29579, ws_item_sk#29580, ws_bill_c..., Partition Cols: []]\n         :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40028]\n         :     :              +- *(1) Project [i_item_sk#29611]\n         :     :                 +- *(1) Filter ((isnotnull(i_manufact_id#29624) AND (i_manufact_id#29624 = 172)) AND isnotnull(i_item_sk#29611))\n         :     :                    +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#29611, i_manufact_id#29624], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#29611, i_item_id#29612, i_rec_start_date#29613, i_rec_end_date#29614, i_item_desc#2961..., Partition Cols: []]\n         :     +- *(6) Sort [ws_item_sk#29664 ASC NULLS FIRST], false, 0\n         :        +- *(6) Filter isnotnull((CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#29724)\n         :           +- *(6) HashAggregate(keys=[ws_item_sk#29664], functions=[avg(UnscaledValue(ws_ext_discount_amt#29683))], output=[(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#29724, ws_item_sk#29664])\n         :              +- Exchange hashpartitioning(ws_item_sk#29664, 200), ENSURE_REQUIREMENTS, [id=#40050]\n         :                 +- *(5) HashAggregate(keys=[ws_item_sk#29664], functions=[partial_avg(UnscaledValue(ws_ext_discount_amt#29683))], output=[ws_item_sk#29664, sum#29733, count#29734L])\n         :                    +- *(5) Project [ws_item_sk#29664, ws_ext_discount_amt#29683]\n         :                       +- *(5) BroadcastHashJoin [ws_sold_date_sk#29661], [d_date_sk#29695], Inner, BuildRight, false\n         :                          :- *(5) Filter (isnotnull(ws_sold_date_sk#29661) AND isnotnull(ws_item_sk#29664))\n         :                          :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#29661, ws_item_sk#29664, ws_ext_discount_amt#29683], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#29661, ws_sold_time_sk#29662, ws_ship_date_sk#29663, ws_item_sk#29664, ws_bill_c..., Partition Cols: []]\n         :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40044]\n         :                             +- *(4) Project [d_date_sk#29695]\n         :                                +- *(4) Filter (((isnotnull(d_date#29697) AND (d_date#29697 >= 10603)) AND (d_date#29697 <= 10693)) AND isnotnull(d_date_sk#29695))\n         :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#29697, d_date_sk#29695], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#29695, d_date_id#29696, d_date#29697, d_month_seq#29698, d_week_seq#29699, d_quarter_s..., Partition Cols: []]\n         +- ReusedExchange [d_date_sk#29633], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40044]\n",
    "iteration" : 1,
    "name" : "q92"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ss_customer_sk#29742, 200), ENSURE_REQUIREMENTS, [id=#40174]\n+- *(3) HashAggregate(keys=[ss_customer_sk#29742], functions=[partial_sum(act_sales#29737)], output=[ss_customer_sk#29742, sum#29792, isEmpty#29793])\n   +- *(3) Project [ss_customer_sk#29742, CASE WHEN isnotnull(sr_return_quantity#29772) THEN CheckOverflow((promote_precision(cast(cast((ss_quantity#29749 - sr_return_quantity#29772) as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29752 as decimal(12,2)))), DecimalType(18,2), true) ELSE CheckOverflow((promote_precision(cast(cast(ss_quantity#29749 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#29752 as decimal(12,2)))), DecimalType(18,2), true) END AS act_sales#29737]\n      +- *(3) BroadcastHashJoin [sr_reason_sk#29770], [r_reason_sk#29782], Inner, BuildRight, false\n         :- *(3) Project [ss_customer_sk#29742, ss_quantity#29749, ss_sales_price#29752, sr_reason_sk#29770, sr_return_quantity#29772]\n         :  +- *(3) BroadcastHashJoin [ss_item_sk#29741, ss_ticket_number#29748L], [sr_item_sk#29764, sr_ticket_number#29771L], Inner, BuildRight, false\n         :     :- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#29741, ss_customer_sk#29742, ss_ticket_number#29748L, ss_quantity#29749, ss_sales_price#29752], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#29739, ss_sold_time_sk#29740, ss_item_sk#29741, ss_customer_sk#29742, ss_cdemo_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[2, bigint, false]),false), [id=#40160]\n         :        +- *(1) Filter ((isnotnull(sr_item_sk#29764) AND isnotnull(sr_ticket_number#29771L)) AND isnotnull(sr_reason_sk#29770))\n         :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#29764, sr_reason_sk#29770, sr_ticket_number#29771L, sr_return_quantity#29772], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#29762, sr_return_time_sk#29763, sr_item_sk#29764, sr_customer_sk#29765, sr_c..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40168]\n            +- *(2) Project [r_reason_sk#29782]\n               +- *(2) Filter ((isnotnull(r_reason_desc#29784) AND (r_reason_desc#29784 = reason 58)) AND isnotnull(r_reason_sk#29782))\n                  +- Scan hive tpcds_sf1_iceberg.reason [r_reason_desc#29784, r_reason_sk#29782], HiveTableRelation [`tpcds_sf1_iceberg`.`reason`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [r_reason_sk#29782, r_reason_id#29783, r_reason_desc#29784], Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q93"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#40334]\n+- *(5) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#29830)), merge_sum(UnscaledValue(ws_net_profit#29835)), partial_count(distinct ws_order_number#29819L)], output=[sum#29970L, sum#29972L, count#29975L])\n   +- *(5) HashAggregate(keys=[ws_order_number#29819L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#29830)), merge_sum(UnscaledValue(ws_net_profit#29835))], output=[ws_order_number#29819L, sum#29970L, sum#29972L])\n      +- Exchange hashpartitioning(ws_order_number#29819L, 200), ENSURE_REQUIREMENTS, [id=#40329]\n         +- *(4) HashAggregate(keys=[ws_order_number#29819L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#29830)), partial_sum(UnscaledValue(ws_net_profit#29835))], output=[ws_order_number#29819L, sum#29970L, sum#29972L])\n            +- *(4) Project [ws_order_number#29819L, ws_ext_ship_cost#29830, ws_net_profit#29835]\n               +- *(4) BroadcastHashJoin [ws_web_site_sk#29815], [web_site_sk#29877], Inner, BuildRight, false\n                  :- *(4) Project [ws_web_site_sk#29815, ws_order_number#29819L, ws_ext_ship_cost#29830, ws_net_profit#29835]\n                  :  +- *(4) BroadcastHashJoin [ws_ship_addr_sk#29813], [ca_address_sk#29864], Inner, BuildRight, false\n                  :     :- *(4) Project [ws_ship_addr_sk#29813, ws_web_site_sk#29815, ws_order_number#29819L, ws_ext_ship_cost#29830, ws_net_profit#29835]\n                  :     :  +- *(4) BroadcastHashJoin [ws_ship_date_sk#29804], [d_date_sk#29836], Inner, BuildRight, false\n                  :     :     :- *(4) BroadcastHashJoin [ws_order_number#29819L], [wr_order_number#29950L], LeftAnti, BuildRight, false\n                  :     :     :  :- *(4) Project [ws_ship_date_sk#29804, ws_ship_addr_sk#29813, ws_web_site_sk#29815, ws_order_number#29819L, ws_ext_ship_cost#29830, ws_net_profit#29835]\n                  :     :     :  :  +- *(4) BroadcastHashJoin [ws_order_number#29819L], [ws_order_number#29920L], LeftSemi, BuildRight, NOT (ws_warehouse_sk#29817 = ws_warehouse_sk#29918), false\n                  :     :     :  :     :- *(4) Filter ((isnotnull(ws_ship_date_sk#29804) AND isnotnull(ws_ship_addr_sk#29813)) AND isnotnull(ws_web_site_sk#29815))\n                  :     :     :  :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ship_date_sk#29804, ws_ship_addr_sk#29813, ws_web_site_sk#29815, ws_warehouse_sk#29817, ws_order_number#29819L, ws_ext_ship_cost#29830, ws_net_profit#29835], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#29802, ws_sold_time_sk#29803, ws_ship_date_sk#29804, ws_item_sk#29805, ws_bill_c..., Partition Cols: []]\n                  :     :     :  :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#40269]\n                  :     :     :  :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#29918, ws_order_number#29920L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#29903, ws_sold_time_sk#29904, ws_ship_date_sk#29905, ws_item_sk#29906, ws_bill_c..., Partition Cols: []]\n                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#40273]\n                  :     :     :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_order_number#29950L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#29937, wr_returned_time_sk#29938, wr_item_sk#29939, wr_refunded_customer_sk#..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40307]\n                  :     :        +- *(1) Project [d_date_sk#29836]\n                  :     :           +- *(1) Filter (((isnotnull(d_date#29838) AND (d_date#29838 >= 11747)) AND (d_date#29838 <= 11807)) AND isnotnull(d_date_sk#29836))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#29838, d_date_sk#29836], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#29836, d_date_id#29837, d_date#29838, d_month_seq#29839, d_week_seq#29840, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40315]\n                  :        +- *(2) Project [ca_address_sk#29864]\n                  :           +- *(2) Filter ((isnotnull(ca_state#29872) AND (ca_state#29872 = GA)) AND isnotnull(ca_address_sk#29864))\n                  :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#29864, ca_state#29872], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#29864, ca_address_id#29865, ca_street_number#29866, ca_street_name#29867, ca_stree..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40323]\n                     +- *(3) Project [web_site_sk#29877]\n                        +- *(3) Filter ((isnotnull(web_company_name#29891) AND (web_company_name#29891 = pri)) AND isnotnull(web_site_sk#29877))\n                           +- Scan hive tpcds_sf1_iceberg.web_site [web_company_name#29891, web_site_sk#29877], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#29877, web_site_id#29878, web_rec_start_date#29879, web_rec_end_date#29880, web_name..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q94"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#40625]\n+- *(13) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#30016)), merge_sum(UnscaledValue(ws_net_profit#30021)), partial_count(distinct ws_order_number#30005L)], output=[sum#30258L, sum#30260L, count#30263L])\n   +- *(13) HashAggregate(keys=[ws_order_number#30005L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#30016)), merge_sum(UnscaledValue(ws_net_profit#30021))], output=[ws_order_number#30005L, sum#30258L, sum#30260L])\n      +- *(13) HashAggregate(keys=[ws_order_number#30005L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#30016)), partial_sum(UnscaledValue(ws_net_profit#30021))], output=[ws_order_number#30005L, sum#30258L, sum#30260L])\n         +- *(13) Project [ws_order_number#30005L, ws_ext_ship_cost#30016, ws_net_profit#30021]\n            +- *(13) BroadcastHashJoin [ws_web_site_sk#30001], [web_site_sk#30063], Inner, BuildRight, false\n               :- *(13) Project [ws_web_site_sk#30001, ws_order_number#30005L, ws_ext_ship_cost#30016, ws_net_profit#30021]\n               :  +- *(13) BroadcastHashJoin [ws_ship_addr_sk#29999], [ca_address_sk#30050], Inner, BuildRight, false\n               :     :- *(13) Project [ws_ship_addr_sk#29999, ws_web_site_sk#30001, ws_order_number#30005L, ws_ext_ship_cost#30016, ws_net_profit#30021]\n               :     :  +- *(13) BroadcastHashJoin [ws_ship_date_sk#29990], [d_date_sk#30022], Inner, BuildRight, false\n               :     :     :- SortMergeJoin [ws_order_number#30005L], [wr_order_number#30170L], LeftSemi\n               :     :     :  :- SortMergeJoin [ws_order_number#30005L], [ws_order_number#30106L], LeftSemi\n               :     :     :  :  :- *(2) Sort [ws_order_number#30005L ASC NULLS FIRST], false, 0\n               :     :     :  :  :  +- Exchange hashpartitioning(ws_order_number#30005L, 200), ENSURE_REQUIREMENTS, [id=#40515]\n               :     :     :  :  :     +- *(1) Filter ((isnotnull(ws_ship_date_sk#29990) AND isnotnull(ws_ship_addr_sk#29999)) AND isnotnull(ws_web_site_sk#30001))\n               :     :     :  :  :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ship_date_sk#29990, ws_ship_addr_sk#29999, ws_web_site_sk#30001, ws_order_number#30005L, ws_ext_ship_cost#30016, ws_net_profit#30021], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#29988, ws_sold_time_sk#29989, ws_ship_date_sk#29990, ws_item_sk#29991, ws_bill_c..., Partition Cols: []]\n               :     :     :  :  +- *(5) Sort [ws_order_number#30106L ASC NULLS FIRST], false, 0\n               :     :     :  :     +- Exchange hashpartitioning(ws_order_number#30106L, 200), ENSURE_REQUIREMENTS, [id=#40529]\n               :     :     :  :        +- *(4) Project [ws_order_number#30106L]\n               :     :     :  :           +- *(4) BroadcastHashJoin [ws_order_number#30106L], [ws_order_number#30140L], Inner, BuildRight, NOT (ws_warehouse_sk#30104 = ws_warehouse_sk#30138), false\n               :     :     :  :              :- *(4) Filter (isnotnull(ws_order_number#30106L) AND isnotnull(ws_warehouse_sk#30104))\n               :     :     :  :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#30104, ws_order_number#30106L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#30089, ws_sold_time_sk#30090, ws_ship_date_sk#30091, ws_item_sk#30092, ws_bill_c..., Partition Cols: []]\n               :     :     :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false]),false), [id=#40524]\n               :     :     :  :                 +- *(3) Filter (isnotnull(ws_order_number#30140L) AND isnotnull(ws_warehouse_sk#30138))\n               :     :     :  :                    +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#30138, ws_order_number#30140L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#30123, ws_sold_time_sk#30124, ws_ship_date_sk#30125, ws_item_sk#30126, ws_bill_c..., Partition Cols: []]\n               :     :     :  +- *(9) Sort [wr_order_number#30170L ASC NULLS FIRST], false, 0\n               :     :     :     +- Exchange hashpartitioning(wr_order_number#30170L, 200), ENSURE_REQUIREMENTS, [id=#40609]\n               :     :     :        +- *(8) Project [wr_order_number#30170L]\n               :     :     :           +- *(8) BroadcastHashJoin [wr_order_number#30170L], [ws_order_number#30198L], Inner, BuildLeft, false\n               :     :     :              :- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#40537]\n               :     :     :              :  +- *(6) Filter isnotnull(wr_order_number#30170L)\n               :     :     :              :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_order_number#30170L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#30157, wr_returned_time_sk#30158, wr_item_sk#30159, wr_refunded_customer_sk#..., Partition Cols: []]\n               :     :     :              +- *(8) Project [ws_order_number#30198L]\n               :     :     :                 +- *(8) BroadcastHashJoin [ws_order_number#30198L], [ws_order_number#30232L], Inner, BuildRight, NOT (ws_warehouse_sk#30196 = ws_warehouse_sk#30230), false\n               :     :     :                    :- *(8) Filter (isnotnull(ws_order_number#30198L) AND isnotnull(ws_warehouse_sk#30196))\n               :     :     :                    :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#30196, ws_order_number#30198L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#30181, ws_sold_time_sk#30182, ws_ship_date_sk#30183, ws_item_sk#30184, ws_bill_c..., Partition Cols: []]\n               :     :     :                    +- ReusedExchange [ws_warehouse_sk#30230, ws_order_number#30232L], BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false]),false), [id=#40524]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40561]\n               :     :        +- *(10) Project [d_date_sk#30022]\n               :     :           +- *(10) Filter (((isnotnull(d_date#30024) AND (d_date#30024 >= 11382)) AND (d_date#30024 <= 11442)) AND isnotnull(d_date_sk#30022))\n               :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#30024, d_date_sk#30022], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#30022, d_date_id#30023, d_date#30024, d_month_seq#30025, d_week_seq#30026, d_quarter_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40569]\n               :        +- *(11) Project [ca_address_sk#30050]\n               :           +- *(11) Filter ((isnotnull(ca_state#30058) AND (ca_state#30058 = NE)) AND isnotnull(ca_address_sk#30050))\n               :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#30050, ca_state#30058], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#30050, ca_address_id#30051, ca_street_number#30052, ca_street_name#30053, ca_stree..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40577]\n                  +- *(12) Project [web_site_sk#30063]\n                     +- *(12) Filter ((isnotnull(web_company_name#30077) AND (web_company_name#30077 = pri)) AND isnotnull(web_site_sk#30063))\n                        +- Scan hive tpcds_sf1_iceberg.web_site [web_company_name#30077, web_site_sk#30063], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#30063, web_site_id#30064, web_rec_start_date#30065, web_rec_end_date#30066, web_name..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q95"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#40738]\n+- *(4) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#30342L])\n   +- *(4) Project\n      +- *(4) BroadcastHashJoin [ss_store_sk#30278], [s_store_sk#30309], Inner, BuildRight, false\n         :- *(4) Project [ss_store_sk#30278]\n         :  +- *(4) BroadcastHashJoin [ss_sold_time_sk#30272], [t_time_sk#30299], Inner, BuildRight, false\n         :     :- *(4) Project [ss_sold_time_sk#30272, ss_store_sk#30278]\n         :     :  +- *(4) BroadcastHashJoin [ss_hdemo_sk#30276], [hd_demo_sk#30294], Inner, BuildRight, false\n         :     :     :- *(4) Filter ((isnotnull(ss_hdemo_sk#30276) AND isnotnull(ss_sold_time_sk#30272)) AND isnotnull(ss_store_sk#30278))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_time_sk#30272, ss_hdemo_sk#30276, ss_store_sk#30278], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#30271, ss_sold_time_sk#30272, ss_item_sk#30273, ss_customer_sk#30274, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40716]\n         :     :        +- *(1) Project [hd_demo_sk#30294]\n         :     :           +- *(1) Filter ((isnotnull(hd_dep_count#30297) AND (hd_dep_count#30297 = 0)) AND isnotnull(hd_demo_sk#30294))\n         :     :              +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#30294, hd_dep_count#30297], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#30294, hd_income_band_sk#30295, hd_buy_potential#30296, hd_dep_count#30297, hd_vehicl..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40724]\n         :        +- *(2) Project [t_time_sk#30299]\n         :           +- *(2) Filter ((((isnotnull(t_hour#30302) AND isnotnull(t_minute#30303)) AND (t_hour#30302 = 16)) AND (t_minute#30303 >= 30)) AND isnotnull(t_time_sk#30299))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#30302, t_minute#30303, t_time_sk#30299], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#30299, t_time_id#30300, t_time#30301, t_hour#30302, t_minute#30303, t_second#30304, t_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40732]\n            +- *(3) Project [s_store_sk#30309]\n               +- *(3) Filter ((isnotnull(s_store_name#30314) AND (s_store_name#30314 = ese)) AND isnotnull(s_store_sk#30309))\n                  +- Scan hive tpcds_sf1_iceberg.store [s_store_name#30314, s_store_sk#30309], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#30309, s_store_id#30310, s_rec_start_date#30311, s_rec_end_date#30312, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q96"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#40914]\n+- *(7) HashAggregate(keys=[], functions=[partial_sum(cast(CASE WHEN (isnotnull(customer_sk#30348) AND isnull(customer_sk#30350)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (isnull(customer_sk#30348) AND isnotnull(customer_sk#30350)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (isnotnull(customer_sk#30348) AND isnotnull(customer_sk#30350)) THEN 1 ELSE 0 END as bigint))], output=[sum#30474L, sum#30475L, sum#30476L])\n   +- *(7) Project [customer_sk#30348, customer_sk#30350]\n      +- SortMergeJoin [customer_sk#30348, item_sk#30349], [customer_sk#30350, item_sk#30351], FullOuter\n         :- *(3) Sort [customer_sk#30348 ASC NULLS FIRST, item_sk#30349 ASC NULLS FIRST], false, 0\n         :  +- *(3) HashAggregate(keys=[ss_customer_sk#30355, ss_item_sk#30354], functions=[], output=[customer_sk#30348, item_sk#30349])\n         :     +- Exchange hashpartitioning(ss_customer_sk#30355, ss_item_sk#30354, 200), ENSURE_REQUIREMENTS, [id=#40851]\n         :        +- *(2) HashAggregate(keys=[ss_customer_sk#30355, ss_item_sk#30354], functions=[], output=[ss_customer_sk#30355, ss_item_sk#30354])\n         :           +- *(2) Project [ss_item_sk#30354, ss_customer_sk#30355]\n         :              +- *(2) BroadcastHashJoin [ss_sold_date_sk#30352], [d_date_sk#30375], Inner, BuildRight, false\n         :                 :- *(2) Filter isnotnull(ss_sold_date_sk#30352)\n         :                 :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#30352, ss_item_sk#30354, ss_customer_sk#30355], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#30352, ss_sold_time_sk#30353, ss_item_sk#30354, ss_customer_sk#30355, ss_cdemo_s..., Partition Cols: []]\n         :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40845]\n         :                    +- *(1) Project [d_date_sk#30375]\n         :                       +- *(1) Filter (((isnotnull(d_month_seq#30378) AND (d_month_seq#30378 >= 1219)) AND (d_month_seq#30378 <= 1230)) AND isnotnull(d_date_sk#30375))\n         :                          +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#30375, d_month_seq#30378], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#30375, d_date_id#30376, d_date#30377, d_month_seq#30378, d_week_seq#30379, d_quarter_s..., Partition Cols: []]\n         +- *(6) Sort [customer_sk#30350 ASC NULLS FIRST, item_sk#30351 ASC NULLS FIRST], false, 0\n            +- *(6) HashAggregate(keys=[cs_bill_customer_sk#30406, cs_item_sk#30418], functions=[], output=[customer_sk#30350, item_sk#30351])\n               +- Exchange hashpartitioning(cs_bill_customer_sk#30406, cs_item_sk#30418, 200), ENSURE_REQUIREMENTS, [id=#40904]\n                  +- *(5) HashAggregate(keys=[cs_bill_customer_sk#30406, cs_item_sk#30418], functions=[], output=[cs_bill_customer_sk#30406, cs_item_sk#30418])\n                     +- *(5) Project [cs_bill_customer_sk#30406, cs_item_sk#30418]\n                        +- *(5) BroadcastHashJoin [cs_sold_date_sk#30403], [d_date_sk#30437], Inner, BuildRight, false\n                           :- *(5) Filter isnotnull(cs_sold_date_sk#30403)\n                           :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#30403, cs_bill_customer_sk#30406, cs_item_sk#30418], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#30403, cs_sold_time_sk#30404, cs_ship_date_sk#30405, cs_bill_customer_sk#30406, ..., Partition Cols: []]\n                           +- ReusedExchange [d_date_sk#30437], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#40845]\n",
    "iteration" : 1,
    "name" : "q97"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(i_category#30518 ASC NULLS FIRST, i_class#30516 ASC NULLS FIRST, i_item_id#30507 ASC NULLS FIRST, i_item_desc#30510 ASC NULLS FIRST, revenueratio#30482 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#41022]\n+- *(6) Project [i_item_id#30507, i_item_desc#30510, i_category#30518, i_class#30516, i_current_price#30511, itemrevenue#30481, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#30560) * 100.00), DecimalType(21,2), true) as decimal(27,2))) / promote_precision(_we0#30562)), DecimalType(38,17), true) AS revenueratio#30482]\n   +- Window [sum(_w1#30561) windowspecdefinition(i_class#30516, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#30562], [i_class#30516]\n      +- *(5) Sort [i_class#30516 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(i_class#30516, 200), ENSURE_REQUIREMENTS, [id=#41014]\n            +- *(4) HashAggregate(keys=[i_item_id#30507, i_item_desc#30510, i_category#30518, i_class#30516, i_current_price#30511], functions=[sum(UnscaledValue(ss_ext_sales_price#30498))], output=[i_item_id#30507, i_item_desc#30510, i_category#30518, i_class#30516, i_current_price#30511, itemrevenue#30481, _w0#30560, _w1#30561])\n               +- Exchange hashpartitioning(i_item_id#30507, i_item_desc#30510, i_category#30518, i_class#30516, i_current_price#30511, 200), ENSURE_REQUIREMENTS, [id=#41010]\n                  +- *(3) HashAggregate(keys=[i_item_id#30507, i_item_desc#30510, i_category#30518, i_class#30516, i_current_price#30511], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#30498))], output=[i_item_id#30507, i_item_desc#30510, i_category#30518, i_class#30516, i_current_price#30511, sum#30571L])\n                     +- *(3) Project [ss_ext_sales_price#30498, i_item_id#30507, i_item_desc#30510, i_current_price#30511, i_class#30516, i_category#30518]\n                        +- *(3) BroadcastHashJoin [ss_sold_date_sk#30483], [d_date_sk#30528], Inner, BuildRight, false\n                           :- *(3) Project [ss_sold_date_sk#30483, ss_ext_sales_price#30498, i_item_id#30507, i_item_desc#30510, i_current_price#30511, i_class#30516, i_category#30518]\n                           :  +- *(3) BroadcastHashJoin [ss_item_sk#30485], [i_item_sk#30506], Inner, BuildRight, false\n                           :     :- *(3) Filter (isnotnull(ss_item_sk#30485) AND isnotnull(ss_sold_date_sk#30483))\n                           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#30483, ss_item_sk#30485, ss_ext_sales_price#30498], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#30483, ss_sold_time_sk#30484, ss_item_sk#30485, ss_customer_sk#30486, ss_cdemo_s..., Partition Cols: []]\n                           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#40996]\n                           :        +- *(1) Filter (i_category#30518 IN (Books,Children,Sports) AND isnotnull(i_item_sk#30506))\n                           :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#30506, i_item_id#30507, i_item_desc#30510, i_current_price#30511, i_class#30516, i_category#30518], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#30506, i_item_id#30507, i_rec_start_date#30508, i_rec_end_date#30509, i_item_desc#3051..., Partition Cols: []]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41004]\n                              +- *(2) Project [d_date_sk#30528]\n                                 +- *(2) Filter (((isnotnull(d_date#30530) AND (d_date#30530 >= 11391)) AND (d_date#30530 <= 11421)) AND isnotnull(d_date_sk#30528))\n                                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#30530, d_date_sk#30528], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#30528, d_date_id#30529, d_date#30530, d_month_seq#30531, d_week_seq#30532, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q98"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(substr(w_warehouse_name#30621, 1, 20)#30715, sm_type#30635, cc_name#30645, 200), ENSURE_REQUIREMENTS, [id=#41152]\n+- *(5) HashAggregate(keys=[substr(w_warehouse_name#30621, 1, 20) AS substr(w_warehouse_name#30621, 1, 20)#30715, sm_type#30635, cc_name#30645], functions=[partial_sum(cast(CASE WHEN ((cs_ship_date_sk#30587 - cs_sold_date_sk#30585) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#30587 - cs_sold_date_sk#30585) > 30) AND ((cs_ship_date_sk#30587 - cs_sold_date_sk#30585) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#30587 - cs_sold_date_sk#30585) > 60) AND ((cs_ship_date_sk#30587 - cs_sold_date_sk#30585) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#30587 - cs_sold_date_sk#30585) > 90) AND ((cs_ship_date_sk#30587 - cs_sold_date_sk#30585) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((cs_ship_date_sk#30587 - cs_sold_date_sk#30585) > 120) THEN 1 ELSE 0 END as bigint))], output=[substr(w_warehouse_name#30621, 1, 20)#30715, sm_type#30635, cc_name#30645, sum#30721L, sum#30722L, sum#30723L, sum#30724L, sum#30725L])\n   +- *(5) Project [cs_sold_date_sk#30585, cs_ship_date_sk#30587, w_warehouse_name#30621, sm_type#30635, cc_name#30645]\n      +- *(5) BroadcastHashJoin [cs_ship_date_sk#30587], [d_date_sk#30670], Inner, BuildRight, false\n         :- *(5) Project [cs_sold_date_sk#30585, cs_ship_date_sk#30587, w_warehouse_name#30621, sm_type#30635, cc_name#30645]\n         :  +- *(5) BroadcastHashJoin [cs_call_center_sk#30596], [cc_call_center_sk#30639], Inner, BuildRight, false\n         :     :- *(5) Project [cs_sold_date_sk#30585, cs_ship_date_sk#30587, cs_call_center_sk#30596, w_warehouse_name#30621, sm_type#30635]\n         :     :  +- *(5) BroadcastHashJoin [cs_ship_mode_sk#30598], [sm_ship_mode_sk#30633], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#30585, cs_ship_date_sk#30587, cs_call_center_sk#30596, cs_ship_mode_sk#30598, w_warehouse_name#30621]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_warehouse_sk#30599], [w_warehouse_sk#30619], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(cs_warehouse_sk#30599) AND isnotnull(cs_ship_mode_sk#30598)) AND isnotnull(cs_call_center_sk#30596)) AND isnotnull(cs_ship_date_sk#30587))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#30585, cs_ship_date_sk#30587, cs_call_center_sk#30596, cs_ship_mode_sk#30598, cs_warehouse_sk#30599], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#30585, cs_sold_time_sk#30586, cs_ship_date_sk#30587, cs_bill_customer_sk#30588, ..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#41124]\n         :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#30619)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#30619, w_warehouse_name#30621], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#30619, w_warehouse_id#30620, w_warehouse_name#30621, w_warehouse_sq_ft#30622, w_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#41131]\n         :     :        +- *(2) Filter isnotnull(sm_ship_mode_sk#30633)\n         :     :           +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_ship_mode_sk#30633, sm_type#30635], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#30633, sm_ship_mode_id#30634, sm_type#30635, sm_code#30636, sm_carrier#30637, sm..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#41138]\n         :        +- *(3) Filter isnotnull(cc_call_center_sk#30639)\n         :           +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#30639, cc_name#30645], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#30639, cc_call_center_id#30640, cc_rec_start_date#30641, cc_rec_end_date#30642..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41146]\n            +- *(4) Project [d_date_sk#30670]\n               +- *(4) Filter (((isnotnull(d_month_seq#30673) AND (d_month_seq#30673 >= 1205)) AND (d_month_seq#30673 <= 1216)) AND isnotnull(d_date_sk#30670))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#30670, d_month_seq#30673], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#30670, d_date_id#30671, d_date#30672, d_month_seq#30673, d_week_seq#30674, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 1,
    "name" : "q99"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 2,
    "name" : "q1"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(cd_gender#30947, cd_marital_status#30948, cd_education_status#30949, cd_purchase_estimate#30950, cd_credit_rating#30951, cd_dep_count#30952, cd_dep_employed_count#30953, cd_dep_college_count#30954, 200), ENSURE_REQUIREMENTS, [id=#41746]\n+- *(14) HashAggregate(keys=[cd_gender#30947, cd_marital_status#30948, cd_education_status#30949, cd_purchase_estimate#30950, cd_credit_rating#30951, cd_dep_count#30952, cd_dep_employed_count#30953, cd_dep_college_count#30954], functions=[partial_count(1)], output=[cd_gender#30947, cd_marital_status#30948, cd_education_status#30949, cd_purchase_estimate#30950, cd_credit_rating#30951, cd_dep_count#30952, cd_dep_employed_count#30953, cd_dep_college_count#30954, count#31147L])\n   +- *(14) Project [cd_gender#30947, cd_marital_status#30948, cd_education_status#30949, cd_purchase_estimate#30950, cd_credit_rating#30951, cd_dep_count#30952, cd_dep_employed_count#30953, cd_dep_college_count#30954]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#30917], [cd_demo_sk#30946], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#30917]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#30919], [ca_address_sk#30933], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#30917, c_current_addr_sk#30919]\n         :     :  +- *(14) Filter (exists#31144 OR exists#31145)\n         :     :     +- SortMergeJoin [c_customer_sk#30915], [cs_ship_customer_sk#31075], ExistenceJoin(exists#31145)\n         :     :        :- SortMergeJoin [c_customer_sk#30915], [ws_bill_customer_sk#31010], ExistenceJoin(exists#31144)\n         :     :        :  :- SortMergeJoin [c_customer_sk#30915], [ss_customer_sk#30958], LeftSemi\n         :     :        :  :  :- *(2) Sort [c_customer_sk#30915 ASC NULLS FIRST], false, 0\n         :     :        :  :  :  +- Exchange hashpartitioning(c_customer_sk#30915, 200), ENSURE_REQUIREMENTS, [id=#41616]\n         :     :        :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#30919) AND isnotnull(c_current_cdemo_sk#30917))\n         :     :        :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#30915, c_current_cdemo_sk#30917, c_current_addr_sk#30919], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#30915, c_customer_id#30916, c_current_cdemo_sk#30917, c_current_hdemo_sk#30918, c_..., Partition Cols: []]\n         :     :        :  :  +- *(5) Sort [ss_customer_sk#30958 ASC NULLS FIRST], false, 0\n         :     :        :  :     +- Exchange hashpartitioning(ss_customer_sk#30958, 200), ENSURE_REQUIREMENTS, [id=#41631]\n         :     :        :  :        +- *(4) Project [ss_customer_sk#30958]\n         :     :        :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#30955], [d_date_sk#30978], Inner, BuildRight, false\n         :     :        :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#30955)\n         :     :        :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#30955, ss_customer_sk#30958], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#30955, ss_sold_time_sk#30956, ss_item_sk#30957, ss_customer_sk#30958, ss_cdemo_s..., Partition Cols: []]\n         :     :        :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41626]\n         :     :        :  :                 +- *(3) Project [d_date_sk#30978]\n         :     :        :  :                    +- *(3) Filter (((((isnotnull(d_year#30984) AND isnotnull(d_moy#30986)) AND (d_year#30984 = 1999)) AND (d_moy#30986 >= 2)) AND (d_moy#30986 <= 5)) AND isnotnull(d_date_sk#30978))\n         :     :        :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#30978, d_moy#30986, d_year#30984], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#30978, d_date_id#30979, d_date#30980, d_month_seq#30981, d_week_seq#30982, d_quarter_s..., Partition Cols: []]\n         :     :        :  +- *(8) Sort [ws_bill_customer_sk#31010 ASC NULLS FIRST], false, 0\n         :     :        :     +- Exchange hashpartitioning(ws_bill_customer_sk#31010, 200), ENSURE_REQUIREMENTS, [id=#41714]\n         :     :        :        +- *(7) Project [ws_bill_customer_sk#31010]\n         :     :        :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#31006], [d_date_sk#31040], Inner, BuildRight, false\n         :     :        :              :- *(7) Filter isnotnull(ws_sold_date_sk#31006)\n         :     :        :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#31006, ws_bill_customer_sk#31010], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#31006, ws_sold_time_sk#31007, ws_ship_date_sk#31008, ws_item_sk#31009, ws_bill_c..., Partition Cols: []]\n         :     :        :              +- ReusedExchange [d_date_sk#31040], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41626]\n         :     :        +- *(11) Sort [cs_ship_customer_sk#31075 ASC NULLS FIRST], false, 0\n         :     :           +- Exchange hashpartitioning(cs_ship_customer_sk#31075, 200), ENSURE_REQUIREMENTS, [id=#41732]\n         :     :              +- *(10) Project [cs_ship_customer_sk#31075]\n         :     :                 +- *(10) BroadcastHashJoin [cs_sold_date_sk#31068], [d_date_sk#31102], Inner, BuildRight, false\n         :     :                    :- *(10) Filter isnotnull(cs_sold_date_sk#31068)\n         :     :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#31068, cs_ship_customer_sk#31075], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#31068, cs_sold_time_sk#31069, cs_ship_date_sk#31070, cs_bill_customer_sk#31071, ..., Partition Cols: []]\n         :     :                    +- ReusedExchange [d_date_sk#31102], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41626]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#41675]\n         :        +- *(12) Project [ca_address_sk#30933]\n         :           +- *(12) Filter (ca_county#30940 IN (Grady County,Marion County,Decatur County,Lyman County,Beaver County) AND isnotnull(ca_address_sk#30933))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#30933, ca_county#30940], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#30933, ca_address_id#30934, ca_street_number#30935, ca_street_name#30936, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#41682]\n            +- *(13) Filter isnotnull(cd_demo_sk#30946)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#30946, cd_gender#30947, cd_marital_status#30948, cd_education_status#30949, cd_purchase_estimate#30950, cd_credit_rating#30951, cd_dep_count#30952, cd_dep_employed_count#30953, cd_dep_college_count#30954], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#30946, cd_gender#30947, cd_marital_status#30948, cd_education_status#30949, cd_purcha..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q10"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#31163, 200), ENSURE_REQUIREMENTS, [id=#42039]\n+- *(4) Filter (isnotnull(year_total#31171) AND (year_total#31171 > 0.00))\n   +- *(4) HashAggregate(keys=[c_customer_id#31184, c_first_name#31191, c_last_name#31192, c_preferred_cust_flag#31193, c_birth_country#31197, c_login#31198, c_email_address#31199, d_year#31230], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#31218 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#31215 as decimal(8,2)))), DecimalType(8,2), true)))], output=[customer_id#31163, year_total#31171])\n      +- Exchange hashpartitioning(c_customer_id#31184, c_first_name#31191, c_last_name#31192, c_preferred_cust_flag#31193, c_birth_country#31197, c_login#31198, c_email_address#31199, d_year#31230, 200), ENSURE_REQUIREMENTS, [id=#42034]\n         +- *(3) HashAggregate(keys=[c_customer_id#31184, c_first_name#31191, c_last_name#31192, c_preferred_cust_flag#31193, c_birth_country#31197, c_login#31198, c_email_address#31199, d_year#31230], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#31218 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#31215 as decimal(8,2)))), DecimalType(8,2), true)))], output=[c_customer_id#31184, c_first_name#31191, c_last_name#31192, c_preferred_cust_flag#31193, c_birth_country#31197, c_login#31198, c_email_address#31199, d_year#31230, sum#31822L])\n            +- *(3) Project [c_customer_id#31184, c_first_name#31191, c_last_name#31192, c_preferred_cust_flag#31193, c_birth_country#31197, c_login#31198, c_email_address#31199, ss_ext_discount_amt#31215, ss_ext_list_price#31218, d_year#31230]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#31201], [d_date_sk#31224], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#31184, c_first_name#31191, c_last_name#31192, c_preferred_cust_flag#31193, c_birth_country#31197, c_login#31198, c_email_address#31199, ss_sold_date_sk#31201, ss_ext_discount_amt#31215, ss_ext_list_price#31218]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#31183], [ss_customer_sk#31204], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42019]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#31183) AND isnotnull(c_customer_id#31184))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#31183, c_customer_id#31184, c_first_name#31191, c_last_name#31192, c_preferred_cust_flag#31193, c_birth_country#31197, c_login#31198, c_email_address#31199], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#31183, c_customer_id#31184, c_current_cdemo_sk#31185, c_current_hdemo_sk#31186, c_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#31204) AND isnotnull(ss_sold_date_sk#31201))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#31201, ss_customer_sk#31204, ss_ext_discount_amt#31215, ss_ext_list_price#31218], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#31201, ss_sold_time_sk#31202, ss_item_sk#31203, ss_customer_sk#31204, ss_cdemo_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42028]\n                     +- *(2) Filter ((isnotnull(d_year#31230) AND (d_year#31230 = 2001)) AND isnotnull(d_date_sk#31224))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#31224, d_year#31230], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#31224, d_date_id#31225, d_date#31226, d_month_seq#31227, d_week_seq#31228, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q11"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_class#31888, 200), ENSURE_REQUIREMENTS, [id=#42439]\n+- *(4) HashAggregate(keys=[i_item_id#31879, i_item_desc#31882, i_category#31890, i_class#31888, i_current_price#31883], functions=[sum(UnscaledValue(ws_ext_sales_price#31867))], output=[i_item_id#31879, i_item_desc#31882, i_category#31890, i_class#31888, i_current_price#31883, itemrevenue#31842, _w0#31932, _w1#31933])\n   +- Exchange hashpartitioning(i_item_id#31879, i_item_desc#31882, i_category#31890, i_class#31888, i_current_price#31883, 200), ENSURE_REQUIREMENTS, [id=#42435]\n      +- *(3) HashAggregate(keys=[i_item_id#31879, i_item_desc#31882, i_category#31890, i_class#31888, i_current_price#31883], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#31867))], output=[i_item_id#31879, i_item_desc#31882, i_category#31890, i_class#31888, i_current_price#31883, sum#31943L])\n         +- *(3) Project [ws_ext_sales_price#31867, i_item_id#31879, i_item_desc#31882, i_current_price#31883, i_class#31888, i_category#31890]\n            +- *(3) BroadcastHashJoin [ws_sold_date_sk#31844], [d_date_sk#31900], Inner, BuildRight, false\n               :- *(3) Project [ws_sold_date_sk#31844, ws_ext_sales_price#31867, i_item_id#31879, i_item_desc#31882, i_current_price#31883, i_class#31888, i_category#31890]\n               :  +- *(3) BroadcastHashJoin [ws_item_sk#31847], [i_item_sk#31878], Inner, BuildRight, false\n               :     :- *(3) Filter (isnotnull(ws_item_sk#31847) AND isnotnull(ws_sold_date_sk#31844))\n               :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#31844, ws_item_sk#31847, ws_ext_sales_price#31867], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#31844, ws_sold_time_sk#31845, ws_ship_date_sk#31846, ws_item_sk#31847, ws_bill_c..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42421]\n               :        +- *(1) Filter (i_category#31890 IN (Children,Jewelry,Music) AND isnotnull(i_item_sk#31878))\n               :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#31878, i_item_id#31879, i_item_desc#31882, i_current_price#31883, i_class#31888, i_category#31890], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#31878, i_item_id#31879, i_rec_start_date#31880, i_rec_end_date#31881, i_item_desc#3188..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42429]\n                  +- *(2) Project [d_date_sk#31900]\n                     +- *(2) Filter (((isnotnull(d_date#31902) AND (d_date#31902 >= 11453)) AND (d_date#31902 <= 11483)) AND isnotnull(d_date_sk#31900))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#31902, d_date_sk#31900], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#31900, d_date_id#31901, d_date#31902, d_month_seq#31903, d_week_seq#31904, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q12"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#42598]\n+- *(6) HashAggregate(keys=[], functions=[partial_avg(cast(ss_quantity#31962 as bigint)), partial_avg(UnscaledValue(ss_ext_sales_price#31967)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#31968)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#31968))], output=[sum#32078, count#32079L, sum#32080, count#32081L, sum#32082, count#32083L, sum#32084L])\n   +- *(6) Project [ss_quantity#31962, ss_ext_sales_price#31967, ss_ext_wholesale_cost#31968]\n      +- *(6) BroadcastHashJoin [ss_hdemo_sk#31957], [hd_demo_sk#32013], Inner, BuildRight, (((((((cd_marital_status#32006 = M) AND (cd_education_status#32007 = Primary)) AND (ss_sales_price#31965 >= 100.00)) AND (ss_sales_price#31965 <= 150.00)) AND (hd_dep_count#32016 = 3)) OR (((((cd_marital_status#32006 = S) AND (cd_education_status#32007 = 4 yr Degree)) AND (ss_sales_price#31965 >= 50.00)) AND (ss_sales_price#31965 <= 100.00)) AND (hd_dep_count#32016 = 1))) OR (((((cd_marital_status#32006 = W) AND (cd_education_status#32007 = 2 yr Degree)) AND (ss_sales_price#31965 >= 150.00)) AND (ss_sales_price#31965 <= 200.00)) AND (hd_dep_count#32016 = 1))), false\n         :- *(6) Project [ss_hdemo_sk#31957, ss_quantity#31962, ss_sales_price#31965, ss_ext_sales_price#31967, ss_ext_wholesale_cost#31968, cd_marital_status#32006, cd_education_status#32007]\n         :  +- *(6) BroadcastHashJoin [ss_cdemo_sk#31956], [cd_demo_sk#32004], Inner, BuildRight, ((((((cd_marital_status#32006 = M) AND (cd_education_status#32007 = Primary)) AND (ss_sales_price#31965 >= 100.00)) AND (ss_sales_price#31965 <= 150.00)) OR ((((cd_marital_status#32006 = S) AND (cd_education_status#32007 = 4 yr Degree)) AND (ss_sales_price#31965 >= 50.00)) AND (ss_sales_price#31965 <= 100.00))) OR ((((cd_marital_status#32006 = W) AND (cd_education_status#32007 = 2 yr Degree)) AND (ss_sales_price#31965 >= 150.00)) AND (ss_sales_price#31965 <= 200.00))), false\n         :     :- *(6) Project [ss_cdemo_sk#31956, ss_hdemo_sk#31957, ss_quantity#31962, ss_sales_price#31965, ss_ext_sales_price#31967, ss_ext_wholesale_cost#31968]\n         :     :  +- *(6) BroadcastHashJoin [ss_sold_date_sk#31952], [d_date_sk#32031], Inner, BuildRight, false\n         :     :     :- *(6) Project [ss_sold_date_sk#31952, ss_cdemo_sk#31956, ss_hdemo_sk#31957, ss_quantity#31962, ss_sales_price#31965, ss_ext_sales_price#31967, ss_ext_wholesale_cost#31968]\n         :     :     :  +- *(6) BroadcastHashJoin [ss_addr_sk#31958], [ca_address_sk#32018], Inner, BuildRight, ((((ca_state#32026 IN (SC,WY,TX) AND (ss_net_profit#31974 >= 100.00)) AND (ss_net_profit#31974 <= 200.00)) OR ((ca_state#32026 IN (NY,NE,GA) AND (ss_net_profit#31974 >= 150.00)) AND (ss_net_profit#31974 <= 300.00))) OR ((ca_state#32026 IN (AL,AR,MI) AND (ss_net_profit#31974 >= 50.00)) AND (ss_net_profit#31974 <= 250.00))), false\n         :     :     :     :- *(6) Project [ss_sold_date_sk#31952, ss_cdemo_sk#31956, ss_hdemo_sk#31957, ss_addr_sk#31958, ss_quantity#31962, ss_sales_price#31965, ss_ext_sales_price#31967, ss_ext_wholesale_cost#31968, ss_net_profit#31974]\n         :     :     :     :  +- *(6) BroadcastHashJoin [ss_store_sk#31959], [s_store_sk#31975], Inner, BuildRight, false\n         :     :     :     :     :- *(6) Filter ((((((isnotnull(ss_store_sk#31959) AND isnotnull(ss_addr_sk#31958)) AND isnotnull(ss_sold_date_sk#31952)) AND isnotnull(ss_cdemo_sk#31956)) AND isnotnull(ss_hdemo_sk#31957)) AND ((((ss_net_profit#31974 >= 100.00) AND (ss_net_profit#31974 <= 200.00)) OR ((ss_net_profit#31974 >= 150.00) AND (ss_net_profit#31974 <= 300.00))) OR ((ss_net_profit#31974 >= 50.00) AND (ss_net_profit#31974 <= 250.00)))) AND ((((ss_sales_price#31965 >= 100.00) AND (ss_sales_price#31965 <= 150.00)) OR ((ss_sales_price#31965 >= 50.00) AND (ss_sales_price#31965 <= 100.00))) OR ((ss_sales_price#31965 >= 150.00) AND (ss_sales_price#31965 <= 200.00))))\n         :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#31952, ss_cdemo_sk#31956, ss_hdemo_sk#31957, ss_addr_sk#31958, ss_store_sk#31959, ss_quantity#31962, ss_sales_price#31965, ss_ext_sales_price#31967, ss_ext_wholesale_cost#31968, ss_net_profit#31974], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#31952, ss_sold_time_sk#31953, ss_item_sk#31954, ss_customer_sk#31955, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42562]\n         :     :     :     :        +- *(1) Filter isnotnull(s_store_sk#31975)\n         :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#31975], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#31975, s_store_id#31976, s_rec_start_date#31977, s_rec_end_date#31978, s_closed_date_..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42570]\n         :     :     :        +- *(2) Project [ca_address_sk#32018, ca_state#32026]\n         :     :     :           +- *(2) Filter (((isnotnull(ca_country#32028) AND (ca_country#32028 = United States)) AND isnotnull(ca_address_sk#32018)) AND ((ca_state#32026 IN (SC,WY,TX) OR ca_state#32026 IN (NY,NE,GA)) OR ca_state#32026 IN (AL,AR,MI)))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#32018, ca_country#32028, ca_state#32026], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#32018, ca_address_id#32019, ca_street_number#32020, ca_street_name#32021, ca_stree..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#42578]\n         :     :        +- *(3) Project [d_date_sk#32031]\n         :     :           +- *(3) Filter ((isnotnull(d_year#32037) AND (d_year#32037 = 2001)) AND isnotnull(d_date_sk#32031))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#32031, d_year#32037], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#32031, d_date_id#32032, d_date#32033, d_month_seq#32034, d_week_seq#32035, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42585]\n         :        +- *(4) Filter (isnotnull(cd_demo_sk#32004) AND ((((cd_marital_status#32006 = M) AND (cd_education_status#32007 = Primary)) OR ((cd_marital_status#32006 = S) AND (cd_education_status#32007 = 4 yr Degree))) OR ((cd_marital_status#32006 = W) AND (cd_education_status#32007 = 2 yr Degree))))\n         :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#32004, cd_marital_status#32006, cd_education_status#32007], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#32004, cd_gender#32005, cd_marital_status#32006, cd_education_status#32007, cd_purcha..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#42592]\n            +- *(5) Filter (isnotnull(hd_demo_sk#32013) AND (((hd_dep_count#32016 = 3) OR (hd_dep_count#32016 = 1)) OR (hd_dep_count#32016 = 1)))\n               +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#32013, hd_dep_count#32016], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#32013, hd_income_band_sk#32014, hd_buy_potential#32015, hd_dep_count#32016, hd_vehicl..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q13"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 2,
    "name" : "q14a"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 2,
    "name" : "q14b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_zip#35056, 200), ENSURE_REQUIREMENTS, [id=#49492]\n+- *(4) HashAggregate(keys=[ca_zip#35056], functions=[partial_sum(UnscaledValue(cs_sales_price#35016))], output=[ca_zip#35056, sum#35094L])\n   +- *(4) Project [cs_sales_price#35016, ca_zip#35056]\n      +- *(4) BroadcastHashJoin [cs_sold_date_sk#34995], [d_date_sk#35060], Inner, BuildRight, false\n         :- *(4) Project [cs_sold_date_sk#34995, cs_sales_price#35016, ca_zip#35056]\n         :  +- *(4) BroadcastHashJoin [c_current_addr_sk#35033], [ca_address_sk#35047], Inner, BuildRight, ((substr(ca_zip#35056, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#35055 IN (CA,WA,GA)) OR (cs_sales_price#35016 > 500.00)), false\n         :     :- *(4) Project [cs_sold_date_sk#34995, cs_sales_price#35016, c_current_addr_sk#35033]\n         :     :  +- *(4) BroadcastHashJoin [cs_bill_customer_sk#34998], [c_customer_sk#35029], Inner, BuildRight, false\n         :     :     :- *(4) Filter (isnotnull(cs_bill_customer_sk#34998) AND isnotnull(cs_sold_date_sk#34995))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#34995, cs_bill_customer_sk#34998, cs_sales_price#35016], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#34995, cs_sold_time_sk#34996, cs_ship_date_sk#34997, cs_bill_customer_sk#34998, ..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#49471]\n         :     :        +- *(1) Filter (isnotnull(c_customer_sk#35029) AND isnotnull(c_current_addr_sk#35033))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#35029, c_current_addr_sk#35033], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#35029, c_customer_id#35030, c_current_cdemo_sk#35031, c_current_hdemo_sk#35032, c_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#49478]\n         :        +- *(2) Filter isnotnull(ca_address_sk#35047)\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#35047, ca_state#35055, ca_zip#35056], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#35047, ca_address_id#35048, ca_street_number#35049, ca_street_name#35050, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49486]\n            +- *(3) Project [d_date_sk#35060]\n               +- *(3) Filter ((((isnotnull(d_qoy#35070) AND isnotnull(d_year#35066)) AND (d_qoy#35070 = 1)) AND (d_year#35066 = 1998)) AND isnotnull(d_date_sk#35060))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#35060, d_qoy#35070, d_year#35066], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#35060, d_date_id#35061, d_date#35062, d_month_seq#35063, d_week_seq#35064, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q15"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#49652]\n+- *(5) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#35131)), merge_sum(UnscaledValue(cs_net_profit#35136)), partial_count(distinct cs_order_number#35120L)], output=[sum#35279L, sum#35281L, count#35284L])\n   +- *(5) HashAggregate(keys=[cs_order_number#35120L], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#35131)), merge_sum(UnscaledValue(cs_net_profit#35136))], output=[cs_order_number#35120L, sum#35279L, sum#35281L])\n      +- Exchange hashpartitioning(cs_order_number#35120L, 200), ENSURE_REQUIREMENTS, [id=#49647]\n         +- *(4) HashAggregate(keys=[cs_order_number#35120L], functions=[partial_sum(UnscaledValue(cs_ext_ship_cost#35131)), partial_sum(UnscaledValue(cs_net_profit#35136))], output=[cs_order_number#35120L, sum#35279L, sum#35281L])\n            +- *(4) Project [cs_order_number#35120L, cs_ext_ship_cost#35131, cs_net_profit#35136]\n               +- *(4) BroadcastHashJoin [cs_call_center_sk#35114], [cc_call_center_sk#35178], Inner, BuildRight, false\n                  :- *(4) Project [cs_call_center_sk#35114, cs_order_number#35120L, cs_ext_ship_cost#35131, cs_net_profit#35136]\n                  :  +- *(4) BroadcastHashJoin [cs_ship_addr_sk#35113], [ca_address_sk#35165], Inner, BuildRight, false\n                  :     :- *(4) Project [cs_ship_addr_sk#35113, cs_call_center_sk#35114, cs_order_number#35120L, cs_ext_ship_cost#35131, cs_net_profit#35136]\n                  :     :  +- *(4) BroadcastHashJoin [cs_ship_date_sk#35105], [d_date_sk#35137], Inner, BuildRight, false\n                  :     :     :- *(4) BroadcastHashJoin [cs_order_number#35120L], [cr_order_number#35259L], LeftAnti, BuildRight, false\n                  :     :     :  :- *(4) Project [cs_ship_date_sk#35105, cs_ship_addr_sk#35113, cs_call_center_sk#35114, cs_order_number#35120L, cs_ext_ship_cost#35131, cs_net_profit#35136]\n                  :     :     :  :  +- *(4) BroadcastHashJoin [cs_order_number#35120L], [cs_order_number#35226L], LeftSemi, BuildRight, NOT (cs_warehouse_sk#35117 = cs_warehouse_sk#35223), false\n                  :     :     :  :     :- *(4) Filter ((isnotnull(cs_ship_date_sk#35105) AND isnotnull(cs_ship_addr_sk#35113)) AND isnotnull(cs_call_center_sk#35114))\n                  :     :     :  :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ship_date_sk#35105, cs_ship_addr_sk#35113, cs_call_center_sk#35114, cs_warehouse_sk#35117, cs_order_number#35120L, cs_ext_ship_cost#35131, cs_net_profit#35136], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#35103, cs_sold_time_sk#35104, cs_ship_date_sk#35105, cs_bill_customer_sk#35106, ..., Partition Cols: []]\n                  :     :     :  :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#49587]\n                  :     :     :  :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_warehouse_sk#35223, cs_order_number#35226L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#35209, cs_sold_time_sk#35210, cs_ship_date_sk#35211, cs_bill_customer_sk#35212, ..., Partition Cols: []]\n                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#49591]\n                  :     :     :     +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_order_number#35259L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#35243, cr_returned_time_sk#35244, cr_item_sk#35245, cr_refunded_customer_sk#..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49625]\n                  :     :        +- *(1) Project [d_date_sk#35137]\n                  :     :           +- *(1) Filter (((isnotnull(d_date#35139) AND (d_date#35139 >= 11017)) AND (d_date#35139 <= 11077)) AND isnotnull(d_date_sk#35137))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#35139, d_date_sk#35137], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#35137, d_date_id#35138, d_date#35139, d_month_seq#35140, d_week_seq#35141, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49633]\n                  :        +- *(2) Project [ca_address_sk#35165]\n                  :           +- *(2) Filter ((isnotnull(ca_state#35173) AND (ca_state#35173 = IA)) AND isnotnull(ca_address_sk#35165))\n                  :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#35165, ca_state#35173], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#35165, ca_address_id#35166, ca_street_number#35167, ca_street_name#35168, ca_stree..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49641]\n                     +- *(3) Project [cc_call_center_sk#35178]\n                        +- *(3) Filter (cc_county#35203 IN (Luce County,Wadena County,Jefferson Davis Parish,Daviess County,Williamson County) AND isnotnull(cc_call_center_sk#35178))\n                           +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#35178, cc_county#35203], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#35178, cc_call_center_id#35179, cc_rec_start_date#35180, cc_rec_end_date#35181..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q16"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#35493, i_item_desc#35496, s_state#35487, 200), ENSURE_REQUIREMENTS, [id=#49916]\n+- *(11) HashAggregate(keys=[i_item_id#35493, i_item_desc#35496, s_state#35487], functions=[partial_count(ss_quantity#35312), partial_avg(cast(ss_quantity#35312 as bigint)), partial_stddev_samp(cast(ss_quantity#35312 as double)), partial_count(sr_return_quantity#35335), partial_avg(cast(sr_return_quantity#35335 as bigint)), partial_stddev_samp(cast(sr_return_quantity#35335 as double)), partial_count(cs_quantity#35363), partial_avg(cast(cs_quantity#35363 as bigint)), partial_stddev_samp(cast(cs_quantity#35363 as double))], output=[i_item_id#35493, i_item_desc#35496, s_state#35487, count#35793L, sum#35794, count#35795L, n#35678, avg#35679, m2#35680, count#35796L, sum#35797, count#35798L, n#35694, avg#35695, m2#35696, count#35799L, sum#35800, count#35801L, n#35710, avg#35711, m2#35712])\n   +- *(11) Project [ss_quantity#35312, sr_return_quantity#35335, cs_quantity#35363, s_state#35487, i_item_id#35493, i_item_desc#35496]\n      +- *(11) BroadcastHashJoin [ss_item_sk#35304], [i_item_sk#35492], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#35304, ss_quantity#35312, sr_return_quantity#35335, cs_quantity#35363, s_state#35487]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#35309], [s_store_sk#35463], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#35304, ss_store_sk#35309, ss_quantity#35312, sr_return_quantity#35335, cs_quantity#35363]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#35345], [d_date_sk#35435], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#35304, ss_store_sk#35309, ss_quantity#35312, sr_return_quantity#35335, cs_sold_date_sk#35345, cs_quantity#35363]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#35325], [d_date_sk#35407], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#35304, ss_store_sk#35309, ss_quantity#35312, sr_returned_date_sk#35325, sr_return_quantity#35335, cs_sold_date_sk#35345, cs_quantity#35363]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#35302], [d_date_sk#35379], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#35302, ss_item_sk#35304, ss_store_sk#35309, ss_quantity#35312, sr_returned_date_sk#35325, sr_return_quantity#35335, cs_sold_date_sk#35345, cs_quantity#35363]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#35328, sr_item_sk#35327], [cs_bill_customer_sk#35348, cs_item_sk#35360], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#35328 ASC NULLS FIRST, sr_item_sk#35327 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#35328, sr_item_sk#35327, 200), ENSURE_REQUIREMENTS, [id=#49822]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#35302, ss_item_sk#35304, ss_store_sk#35309, ss_quantity#35312, sr_returned_date_sk#35325, sr_item_sk#35327, sr_customer_sk#35328, sr_return_quantity#35335]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#35305, ss_item_sk#35304, ss_ticket_number#35311L], [sr_customer_sk#35328, sr_item_sk#35327, sr_ticket_number#35334L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#35305) AND isnotnull(ss_item_sk#35304)) AND isnotnull(ss_ticket_number#35311L)) AND isnotnull(ss_sold_date_sk#35302)) AND isnotnull(ss_store_sk#35309))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#35302, ss_item_sk#35304, ss_customer_sk#35305, ss_store_sk#35309, ss_ticket_number#35311L, ss_quantity#35312], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#35302, ss_sold_time_sk#35303, ss_item_sk#35304, ss_customer_sk#35305, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#49817]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#35328) AND isnotnull(sr_item_sk#35327)) AND isnotnull(sr_ticket_number#35334L)) AND isnotnull(sr_returned_date_sk#35325))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#35325, sr_item_sk#35327, sr_customer_sk#35328, sr_ticket_number#35334L, sr_return_quantity#35335], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#35325, sr_return_time_sk#35326, sr_item_sk#35327, sr_customer_sk#35328, sr_c..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#35348 ASC NULLS FIRST, cs_item_sk#35360 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#35348, cs_item_sk#35360, 200), ENSURE_REQUIREMENTS, [id=#49830]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#35348) AND isnotnull(cs_item_sk#35360)) AND isnotnull(cs_sold_date_sk#35345))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#35345, cs_bill_customer_sk#35348, cs_item_sk#35360, cs_quantity#35363], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#35345, cs_sold_time_sk#35346, cs_ship_date_sk#35347, cs_bill_customer_sk#35348, ..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49841]\n         :     :     :     :        +- *(6) Project [d_date_sk#35379]\n         :     :     :     :           +- *(6) Filter ((isnotnull(d_quarter_name#35394) AND (d_quarter_name#35394 = 1999Q1)) AND isnotnull(d_date_sk#35379))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#35379, d_quarter_name#35394], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#35379, d_date_id#35380, d_date#35381, d_month_seq#35382, d_week_seq#35383, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49849]\n         :     :     :        +- *(7) Project [d_date_sk#35407]\n         :     :     :           +- *(7) Filter (d_quarter_name#35422 IN (1999Q1,1999Q2,1999Q3) AND isnotnull(d_date_sk#35407))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#35407, d_quarter_name#35422], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#35407, d_date_id#35408, d_date#35409, d_month_seq#35410, d_week_seq#35411, d_quarter_s..., Partition Cols: []]\n         :     :     +- ReusedExchange [d_date_sk#35435], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#49849]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#49864]\n         :        +- *(9) Filter isnotnull(s_store_sk#35463)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#35463, s_state#35487], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#35463, s_store_id#35464, s_rec_start_date#35465, s_rec_end_date#35466, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#49871]\n            +- *(10) Filter isnotnull(i_item_sk#35492)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#35492, i_item_id#35493, i_item_desc#35496], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#35492, i_item_id#35493, i_rec_start_date#35494, i_rec_end_date#35495, i_item_desc#3549..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q17"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#35970, ca_country#35971, ca_state#35972, ca_county#35973, spark_grouping_id#35969L, 200), ENSURE_REQUIREMENTS, [id=#50109]\n+- *(7) HashAggregate(keys=[i_item_id#35970, ca_country#35971, ca_state#35972, ca_county#35973, spark_grouping_id#35969L], functions=[partial_avg(cast(cs_quantity#35843 as decimal(12,2))), partial_avg(cast(cs_list_price#35845 as decimal(12,2))), partial_avg(cast(cs_coupon_amt#35852 as decimal(12,2))), partial_avg(cast(cs_sales_price#35846 as decimal(12,2))), partial_avg(cast(cs_net_profit#35858 as decimal(12,2))), partial_avg(cast(c_birth_year#35890 as decimal(12,2))), partial_avg(cast(cd_dep_count#35865 as decimal(12,2)))], output=[i_item_id#35970, ca_country#35971, ca_state#35972, ca_county#35973, spark_grouping_id#35969L, sum#36003, count#36004L, sum#36005, count#36006L, sum#36007, count#36008L, sum#36009, count#36010L, sum#36011, count#36012L, sum#36013, count#36014L, sum#36015, count#36016L])\n   +- *(7) Expand [List(cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, i_item_id#35937, ca_country#35905, ca_state#35903, ca_county#35902, 0), List(cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, i_item_id#35937, ca_country#35905, ca_state#35903, null, 1), List(cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, i_item_id#35937, ca_country#35905, null, null, 3), List(cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, i_item_id#35937, null, null, null, 7), List(cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, null, null, null, null, 15)], [cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, i_item_id#35970, ca_country#35971, ca_state#35972, ca_county#35973, spark_grouping_id#35969L]\n      +- *(7) Project [cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, i_item_id#35937, ca_country#35905, ca_state#35903, ca_county#35902]\n         +- *(7) BroadcastHashJoin [cs_item_sk#35840], [i_item_sk#35936], Inner, BuildRight, false\n            :- *(7) Project [cs_item_sk#35840, cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, ca_county#35902, ca_state#35903, ca_country#35905]\n            :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#35825], [d_date_sk#35908], Inner, BuildRight, false\n            :     :- *(7) Project [cs_sold_date_sk#35825, cs_item_sk#35840, cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_birth_year#35890, ca_county#35902, ca_state#35903, ca_country#35905]\n            :     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#35881], [ca_address_sk#35895], Inner, BuildRight, false\n            :     :     :- *(7) Project [cs_sold_date_sk#35825, cs_item_sk#35840, cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_current_addr_sk#35881, c_birth_year#35890]\n            :     :     :  +- *(7) BroadcastHashJoin [c_current_cdemo_sk#35879], [cd_demo_sk#35868], Inner, BuildRight, false\n            :     :     :     :- *(7) Project [cs_sold_date_sk#35825, cs_item_sk#35840, cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865, c_current_cdemo_sk#35879, c_current_addr_sk#35881, c_birth_year#35890]\n            :     :     :     :  +- *(7) BroadcastHashJoin [cs_bill_customer_sk#35828], [c_customer_sk#35877], Inner, BuildRight, false\n            :     :     :     :     :- *(7) Project [cs_sold_date_sk#35825, cs_bill_customer_sk#35828, cs_item_sk#35840, cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858, cd_dep_count#35865]\n            :     :     :     :     :  +- *(7) BroadcastHashJoin [cs_bill_cdemo_sk#35829], [cd_demo_sk#35859], Inner, BuildRight, false\n            :     :     :     :     :     :- *(7) Filter (((isnotnull(cs_bill_cdemo_sk#35829) AND isnotnull(cs_bill_customer_sk#35828)) AND isnotnull(cs_sold_date_sk#35825)) AND isnotnull(cs_item_sk#35840))\n            :     :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#35825, cs_bill_customer_sk#35828, cs_bill_cdemo_sk#35829, cs_item_sk#35840, cs_quantity#35843, cs_list_price#35845, cs_sales_price#35846, cs_coupon_amt#35852, cs_net_profit#35858], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#35825, cs_sold_time_sk#35826, cs_ship_date_sk#35827, cs_bill_customer_sk#35828, ..., Partition Cols: []]\n            :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50065]\n            :     :     :     :     :        +- *(1) Project [cd_demo_sk#35859, cd_dep_count#35865]\n            :     :     :     :     :           +- *(1) Filter ((((isnotnull(cd_gender#35860) AND isnotnull(cd_education_status#35862)) AND (cd_gender#35860 = F)) AND (cd_education_status#35862 = Unknown)) AND isnotnull(cd_demo_sk#35859))\n            :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#35859, cd_dep_count#35865, cd_education_status#35862, cd_gender#35860], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#35859, cd_gender#35860, cd_marital_status#35861, cd_education_status#35862, cd_purcha..., Partition Cols: []]\n            :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50073]\n            :     :     :     :        +- *(2) Project [c_customer_sk#35877, c_current_cdemo_sk#35879, c_current_addr_sk#35881, c_birth_year#35890]\n            :     :     :     :           +- *(2) Filter (((c_birth_month#35889 IN (4,8,12,10,11,9) AND isnotnull(c_customer_sk#35877)) AND isnotnull(c_current_cdemo_sk#35879)) AND isnotnull(c_current_addr_sk#35881))\n            :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer [c_birth_month#35889, c_birth_year#35890, c_current_addr_sk#35881, c_current_cdemo_sk#35879, c_customer_sk#35877], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#35877, c_customer_id#35878, c_current_cdemo_sk#35879, c_current_hdemo_sk#35880, c_..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50080]\n            :     :     :        +- *(3) Filter isnotnull(cd_demo_sk#35868)\n            :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#35868], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#35868, cd_gender#35869, cd_marital_status#35870, cd_education_status#35871, cd_purcha..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50087]\n            :     :        +- *(4) Filter (ca_state#35903 IN (AR,IA,TX,KS,LA,NC,SD) AND isnotnull(ca_address_sk#35895))\n            :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#35895, ca_county#35902, ca_state#35903, ca_country#35905], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#35895, ca_address_id#35896, ca_street_number#35897, ca_street_name#35898, ca_stree..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50095]\n            :        +- *(5) Project [d_date_sk#35908]\n            :           +- *(5) Filter ((isnotnull(d_year#35914) AND (d_year#35914 = 2001)) AND isnotnull(d_date_sk#35908))\n            :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#35908, d_year#35914], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#35908, d_date_id#35909, d_date#35910, d_month_seq#35911, d_week_seq#35912, d_quarter_s..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50102]\n               +- *(6) Filter isnotnull(i_item_sk#35936)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#35936, i_item_id#35937], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#35936, i_item_id#35937, i_rec_start_date#35938, i_rec_end_date#35939, i_item_desc#3594..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q18"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand#36091, i_brand_id#36090, i_manufact_id#36096, i_manufact#36097, 200), ENSURE_REQUIREMENTS, [id=#50268]\n+- *(6) HashAggregate(keys=[i_brand#36091, i_brand_id#36090, i_manufact_id#36096, i_manufact#36097], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#36075))], output=[i_brand#36091, i_brand_id#36090, i_manufact_id#36096, i_manufact#36097, sum#36179L])\n   +- *(6) Project [ss_ext_sales_price#36075, i_brand_id#36090, i_brand#36091, i_manufact_id#36096, i_manufact#36097]\n      +- *(6) BroadcastHashJoin [ss_store_sk#36067], [s_store_sk#36136], Inner, BuildRight, NOT (substr(ca_zip#36132, 1, 5) = substr(s_zip#36161, 1, 5)), false\n         :- *(6) Project [ss_store_sk#36067, ss_ext_sales_price#36075, i_brand_id#36090, i_brand#36091, i_manufact_id#36096, i_manufact#36097, ca_zip#36132]\n         :  +- *(6) BroadcastHashJoin [c_current_addr_sk#36109], [ca_address_sk#36123], Inner, BuildRight, false\n         :     :- *(6) Project [ss_store_sk#36067, ss_ext_sales_price#36075, i_brand_id#36090, i_brand#36091, i_manufact_id#36096, i_manufact#36097, c_current_addr_sk#36109]\n         :     :  +- *(6) BroadcastHashJoin [ss_customer_sk#36063], [c_customer_sk#36105], Inner, BuildRight, false\n         :     :     :- *(6) Project [ss_customer_sk#36063, ss_store_sk#36067, ss_ext_sales_price#36075, i_brand_id#36090, i_brand#36091, i_manufact_id#36096, i_manufact#36097]\n         :     :     :  +- *(6) BroadcastHashJoin [ss_item_sk#36062], [i_item_sk#36083], Inner, BuildRight, false\n         :     :     :     :- *(6) Project [ss_item_sk#36062, ss_customer_sk#36063, ss_store_sk#36067, ss_ext_sales_price#36075]\n         :     :     :     :  +- *(6) BroadcastHashJoin [d_date_sk#36032], [ss_sold_date_sk#36060], Inner, BuildLeft, false\n         :     :     :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50231]\n         :     :     :     :     :  +- *(1) Project [d_date_sk#36032]\n         :     :     :     :     :     +- *(1) Filter ((((isnotnull(d_moy#36040) AND isnotnull(d_year#36038)) AND (d_moy#36040 = 11)) AND (d_year#36038 = 2002)) AND isnotnull(d_date_sk#36032))\n         :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#36032, d_moy#36040, d_year#36038], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36032, d_date_id#36033, d_date#36034, d_month_seq#36035, d_week_seq#36036, d_quarter_s..., Partition Cols: []]\n         :     :     :     :     +- *(6) Filter (((isnotnull(ss_sold_date_sk#36060) AND isnotnull(ss_item_sk#36062)) AND isnotnull(ss_customer_sk#36063)) AND isnotnull(ss_store_sk#36067))\n         :     :     :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#36060, ss_item_sk#36062, ss_customer_sk#36063, ss_store_sk#36067, ss_ext_sales_price#36075], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#36060, ss_sold_time_sk#36061, ss_item_sk#36062, ss_customer_sk#36063, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50241]\n         :     :     :        +- *(2) Project [i_item_sk#36083, i_brand_id#36090, i_brand#36091, i_manufact_id#36096, i_manufact#36097]\n         :     :     :           +- *(2) Filter ((isnotnull(i_manager_id#36103) AND (i_manager_id#36103 = 63)) AND isnotnull(i_item_sk#36083))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.item [i_brand#36091, i_brand_id#36090, i_item_sk#36083, i_manager_id#36103, i_manufact#36097, i_manufact_id#36096], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#36083, i_item_id#36084, i_rec_start_date#36085, i_rec_end_date#36086, i_item_desc#3608..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50248]\n         :     :        +- *(3) Filter (isnotnull(c_customer_sk#36105) AND isnotnull(c_current_addr_sk#36109))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#36105, c_current_addr_sk#36109], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#36105, c_customer_id#36106, c_current_cdemo_sk#36107, c_current_hdemo_sk#36108, c_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50255]\n         :        +- *(4) Filter (isnotnull(ca_address_sk#36123) AND isnotnull(ca_zip#36132))\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#36123, ca_zip#36132], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#36123, ca_address_id#36124, ca_street_number#36125, ca_street_name#36126, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50262]\n            +- *(5) Filter (isnotnull(s_zip#36161) AND isnotnull(s_store_sk#36136))\n               +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#36136, s_zip#36161], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#36136, s_store_id#36137, s_rec_start_date#36138, s_rec_end_date#36139, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q19"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(d_week_seq1#36186 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#50607]\n+- *(14) Project [d_week_seq1#36186, round(CheckOverflow((promote_precision(sun_sales1#36187) / promote_precision(sun_sales2#36195)), DecimalType(37,20), true), 2) AS round((sun_sales1 / sun_sales2), 2)#36475, round(CheckOverflow((promote_precision(mon_sales1#36188) / promote_precision(mon_sales2#36196)), DecimalType(37,20), true), 2) AS round((mon_sales1 / mon_sales2), 2)#36476, round(CheckOverflow((promote_precision(tue_sales1#36189) / promote_precision(tue_sales2#36197)), DecimalType(37,20), true), 2) AS round((tue_sales1 / tue_sales2), 2)#36477, round(CheckOverflow((promote_precision(wed_sales1#36190) / promote_precision(wed_sales2#36198)), DecimalType(37,20), true), 2) AS round((wed_sales1 / wed_sales2), 2)#36478, round(CheckOverflow((promote_precision(thu_sales1#36191) / promote_precision(thu_sales2#36199)), DecimalType(37,20), true), 2) AS round((thu_sales1 / thu_sales2), 2)#36479, round(CheckOverflow((promote_precision(fri_sales1#36192) / promote_precision(fri_sales2#36200)), DecimalType(37,20), true), 2) AS round((fri_sales1 / fri_sales2), 2)#36480, round(CheckOverflow((promote_precision(sat_sales1#36193) / promote_precision(sat_sales2#36201)), DecimalType(37,20), true), 2) AS round((sat_sales1 / sat_sales2), 2)#36481]\n   +- *(14) SortMergeJoin [d_week_seq1#36186], [(d_week_seq2#36194 - 53)], Inner\n      :- *(6) Sort [d_week_seq1#36186 ASC NULLS FIRST], false, 0\n      :  +- *(6) Project [d_week_seq#36285 AS d_week_seq1#36186, sun_sales#36206 AS sun_sales1#36187, mon_sales#36207 AS mon_sales1#36188, tue_sales#36208 AS tue_sales1#36189, wed_sales#36209 AS wed_sales1#36190, thu_sales#36210 AS thu_sales1#36191, fri_sales#36211 AS fri_sales1#36192, sat_sales#36212 AS sat_sales1#36193]\n      :     +- *(6) BroadcastHashJoin [d_week_seq#36285], [d_week_seq#36313], Inner, BuildRight, false\n      :        :- *(6) HashAggregate(keys=[d_week_seq#36285], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Sunday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Monday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Tuesday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Wednesday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Thursday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Friday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Saturday) THEN sales_price#36203 ELSE null END))], output=[d_week_seq#36285, sun_sales#36206, mon_sales#36207, tue_sales#36208, wed_sales#36209, thu_sales#36210, fri_sales#36211, sat_sales#36212])\n      :        :  +- Exchange hashpartitioning(d_week_seq#36285, 200), ENSURE_REQUIREMENTS, [id=#50449]\n      :        :     +- *(4) HashAggregate(keys=[d_week_seq#36285], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Sunday) THEN sales_price#36203 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Monday) THEN sales_price#36203 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Tuesday) THEN sales_price#36203 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Wednesday) THEN sales_price#36203 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Thursday) THEN sales_price#36203 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Friday) THEN sales_price#36203 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#36295 = Saturday) THEN sales_price#36203 ELSE null END))], output=[d_week_seq#36285, sum#36497L, sum#36498L, sum#36499L, sum#36500L, sum#36501L, sum#36502L, sum#36503L])\n      :        :        +- *(4) Project [sales_price#36203, d_week_seq#36285, d_day_name#36295]\n      :        :           +- *(4) BroadcastHashJoin [sold_date_sk#36202], [d_date_sk#36281], Inner, BuildRight, false\n      :        :              :- Union\n      :        :              :  :- *(1) Project [ws_sold_date_sk#36213 AS sold_date_sk#36202, ws_ext_sales_price#36236 AS sales_price#36203]\n      :        :              :  :  +- *(1) Filter isnotnull(ws_sold_date_sk#36213)\n      :        :              :  :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#36236, ws_sold_date_sk#36213], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#36213, ws_sold_time_sk#36214, ws_ship_date_sk#36215, ws_item_sk#36216, ws_bill_c..., Partition Cols: []]\n      :        :              :  +- *(2) Project [cs_sold_date_sk#36247 AS sold_date_sk#36204, cs_ext_sales_price#36270 AS sales_price#36205]\n      :        :              :     +- *(2) Filter isnotnull(cs_sold_date_sk#36247)\n      :        :              :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ext_sales_price#36270, cs_sold_date_sk#36247], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#36247, cs_sold_time_sk#36248, cs_ship_date_sk#36249, cs_bill_customer_sk#36250, ..., Partition Cols: []]\n      :        :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50443]\n      :        :                 +- *(3) Filter (isnotnull(d_date_sk#36281) AND isnotnull(d_week_seq#36285))\n      :        :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#36281, d_week_seq#36285, d_day_name#36295], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36281, d_date_id#36282, d_date#36283, d_month_seq#36284, d_week_seq#36285, d_quarter_s..., Partition Cols: []]\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50456]\n      :           +- *(5) Project [d_week_seq#36313]\n      :              +- *(5) Filter ((isnotnull(d_year#36315) AND (d_year#36315 = 1998)) AND isnotnull(d_week_seq#36313))\n      :                 +- Scan hive tpcds_sf1_iceberg.date_dim [d_week_seq#36313, d_year#36315], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36309, d_date_id#36310, d_date#36311, d_month_seq#36312, d_week_seq#36313, d_quarter_s..., Partition Cols: []]\n      +- *(13) Sort [(d_week_seq2#36194 - 53) ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning((d_week_seq2#36194 - 53), 200), ENSURE_REQUIREMENTS, [id=#50599]\n            +- *(12) Project [d_week_seq#36409 AS d_week_seq2#36194, sun_sales#36206 AS sun_sales2#36195, mon_sales#36207 AS mon_sales2#36196, tue_sales#36208 AS tue_sales2#36197, wed_sales#36209 AS wed_sales2#36198, thu_sales#36210 AS thu_sales2#36199, fri_sales#36211 AS fri_sales2#36200, sat_sales#36212 AS sat_sales2#36201]\n               +- *(12) BroadcastHashJoin [d_week_seq#36409], [d_week_seq#36437], Inner, BuildRight, false\n                  :- *(12) HashAggregate(keys=[d_week_seq#36409], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#36419 = Sunday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36419 = Monday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36419 = Tuesday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36419 = Wednesday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36419 = Thursday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36419 = Friday) THEN sales_price#36203 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#36419 = Saturday) THEN sales_price#36203 ELSE null END))], output=[d_week_seq#36409, sun_sales#36206, mon_sales#36207, tue_sales#36208, wed_sales#36209, thu_sales#36210, fri_sales#36211, sat_sales#36212])\n                  :  +- ReusedExchange [d_week_seq#36409, sum#36511L, sum#36512L, sum#36513L, sum#36514L, sum#36515L, sum#36516L, sum#36517L], Exchange hashpartitioning(d_week_seq#36285, 200), ENSURE_REQUIREMENTS, [id=#50449]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50489]\n                     +- *(11) Project [d_week_seq#36437]\n                        +- *(11) Filter ((isnotnull(d_year#36439) AND (d_year#36439 = 1999)) AND isnotnull(d_week_seq#36437))\n                           +- Scan hive tpcds_sf1_iceberg.date_dim [d_week_seq#36437, d_year#36439], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36433, d_date_id#36434, d_date#36435, d_month_seq#36436, d_week_seq#36437, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q2"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_class#36587, 200), ENSURE_REQUIREMENTS, [id=#50704]\n+- *(4) HashAggregate(keys=[i_item_id#36578, i_item_desc#36581, i_category#36589, i_class#36587, i_current_price#36582], functions=[sum(UnscaledValue(cs_ext_sales_price#36566))], output=[i_item_id#36578, i_item_desc#36581, i_category#36589, i_class#36587, i_current_price#36582, itemrevenue#36541, _w0#36631, _w1#36632])\n   +- Exchange hashpartitioning(i_item_id#36578, i_item_desc#36581, i_category#36589, i_class#36587, i_current_price#36582, 200), ENSURE_REQUIREMENTS, [id=#50700]\n      +- *(3) HashAggregate(keys=[i_item_id#36578, i_item_desc#36581, i_category#36589, i_class#36587, i_current_price#36582], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#36566))], output=[i_item_id#36578, i_item_desc#36581, i_category#36589, i_class#36587, i_current_price#36582, sum#36642L])\n         +- *(3) Project [cs_ext_sales_price#36566, i_item_id#36578, i_item_desc#36581, i_current_price#36582, i_class#36587, i_category#36589]\n            +- *(3) BroadcastHashJoin [cs_sold_date_sk#36543], [d_date_sk#36599], Inner, BuildRight, false\n               :- *(3) Project [cs_sold_date_sk#36543, cs_ext_sales_price#36566, i_item_id#36578, i_item_desc#36581, i_current_price#36582, i_class#36587, i_category#36589]\n               :  +- *(3) BroadcastHashJoin [cs_item_sk#36558], [i_item_sk#36577], Inner, BuildRight, false\n               :     :- *(3) Filter (isnotnull(cs_item_sk#36558) AND isnotnull(cs_sold_date_sk#36543))\n               :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#36543, cs_item_sk#36558, cs_ext_sales_price#36566], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#36543, cs_sold_time_sk#36544, cs_ship_date_sk#36545, cs_bill_customer_sk#36546, ..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50686]\n               :        +- *(1) Filter (i_category#36589 IN (Electronics,Children,Home) AND isnotnull(i_item_sk#36577))\n               :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#36577, i_item_id#36578, i_item_desc#36581, i_current_price#36582, i_class#36587, i_category#36589], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#36577, i_item_id#36578, i_rec_start_date#36579, i_rec_end_date#36580, i_item_desc#3658..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50694]\n                  +- *(2) Project [d_date_sk#36599]\n                     +- *(2) Filter (((isnotnull(d_date#36601) AND (d_date#36601 >= 11765)) AND (d_date#36601 <= 11795)) AND isnotnull(d_date_sk#36599))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#36601, d_date_sk#36599], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36599, d_date_id#36600, d_date#36601, d_month_seq#36602, d_week_seq#36603, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q20"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_warehouse_name#36659, i_item_id#36672, 200), ENSURE_REQUIREMENTS, [id=#50819]\n+- *(4) HashAggregate(keys=[w_warehouse_name#36659, i_item_id#36672], functions=[partial_sum(cast(CASE WHEN (d_date#36695 < 10693) THEN inv_quantity_on_hand#36656 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (d_date#36695 >= 10693) THEN inv_quantity_on_hand#36656 ELSE 0 END as bigint))], output=[w_warehouse_name#36659, i_item_id#36672, sum#36729L, sum#36730L])\n   +- *(4) Project [inv_quantity_on_hand#36656, w_warehouse_name#36659, i_item_id#36672, d_date#36695]\n      +- *(4) BroadcastHashJoin [inv_date_sk#36653], [d_date_sk#36693], Inner, BuildRight, false\n         :- *(4) Project [inv_date_sk#36653, inv_quantity_on_hand#36656, w_warehouse_name#36659, i_item_id#36672]\n         :  +- *(4) BroadcastHashJoin [inv_item_sk#36654], [i_item_sk#36671], Inner, BuildRight, false\n         :     :- *(4) Project [inv_date_sk#36653, inv_item_sk#36654, inv_quantity_on_hand#36656, w_warehouse_name#36659]\n         :     :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#36655], [w_warehouse_sk#36657], Inner, BuildRight, false\n         :     :     :- *(4) Filter ((isnotnull(inv_warehouse_sk#36655) AND isnotnull(inv_item_sk#36654)) AND isnotnull(inv_date_sk#36653))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#36653, inv_item_sk#36654, inv_warehouse_sk#36655, inv_quantity_on_hand#36656], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#36653, inv_item_sk#36654, inv_warehouse_sk#36655, inv_quantity_on_hand#36656], Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50798]\n         :     :        +- *(1) Filter isnotnull(w_warehouse_sk#36657)\n         :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#36657, w_warehouse_name#36659], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#36657, w_warehouse_id#36658, w_warehouse_name#36659, w_warehouse_sq_ft#36660, w_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50806]\n         :        +- *(2) Project [i_item_sk#36671, i_item_id#36672]\n         :           +- *(2) Filter (((isnotnull(i_current_price#36676) AND (i_current_price#36676 >= 0.99)) AND (i_current_price#36676 <= 1.49)) AND isnotnull(i_item_sk#36671))\n         :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#36676, i_item_id#36672, i_item_sk#36671], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#36671, i_item_id#36672, i_rec_start_date#36673, i_rec_end_date#36674, i_item_desc#3667..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50813]\n            +- *(3) Filter (((isnotnull(d_date#36695) AND (d_date#36695 >= 10663)) AND (d_date#36695 <= 10723)) AND isnotnull(d_date_sk#36693))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#36693, d_date#36695], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36693, d_date_id#36694, d_date#36695, d_month_seq#36696, d_week_seq#36697, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q21"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_product_name#36797, i_brand#36798, i_class#36799, i_category#36800, spark_grouping_id#36796L, 200), ENSURE_REQUIREMENTS, [id=#50907]\n+- *(3) HashAggregate(keys=[i_product_name#36797, i_brand#36798, i_class#36799, i_category#36800, spark_grouping_id#36796L], functions=[partial_avg(cast(inv_quantity_on_hand#36740 as bigint))], output=[i_product_name#36797, i_brand#36798, i_class#36799, i_category#36800, spark_grouping_id#36796L, sum#36813, count#36814L])\n   +- *(3) Expand [List(inv_quantity_on_hand#36740, i_product_name#36790, i_brand#36777, i_class#36779, i_category#36781, 0), List(inv_quantity_on_hand#36740, i_product_name#36790, i_brand#36777, i_class#36779, null, 1), List(inv_quantity_on_hand#36740, i_product_name#36790, i_brand#36777, null, null, 3), List(inv_quantity_on_hand#36740, i_product_name#36790, null, null, null, 7), List(inv_quantity_on_hand#36740, null, null, null, null, 15)], [inv_quantity_on_hand#36740, i_product_name#36797, i_brand#36798, i_class#36799, i_category#36800, spark_grouping_id#36796L]\n      +- *(3) Project [inv_quantity_on_hand#36740, i_product_name#36790, i_brand#36777, i_class#36779, i_category#36781]\n         +- *(3) BroadcastHashJoin [inv_item_sk#36738], [i_item_sk#36769], Inner, BuildRight, false\n            :- *(3) Project [inv_item_sk#36738, inv_quantity_on_hand#36740]\n            :  +- *(3) BroadcastHashJoin [inv_date_sk#36737], [d_date_sk#36741], Inner, BuildRight, false\n            :     :- *(3) Filter (isnotnull(inv_date_sk#36737) AND isnotnull(inv_item_sk#36738))\n            :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#36737, inv_item_sk#36738, inv_quantity_on_hand#36740], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#36737, inv_item_sk#36738, inv_warehouse_sk#36739, inv_quantity_on_hand#36740], Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#50893]\n            :        +- *(1) Project [d_date_sk#36741]\n            :           +- *(1) Filter (((isnotnull(d_month_seq#36744) AND (d_month_seq#36744 >= 1188)) AND (d_month_seq#36744 <= 1199)) AND isnotnull(d_date_sk#36741))\n            :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#36741, d_month_seq#36744], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36741, d_date_id#36742, d_date#36743, d_month_seq#36744, d_week_seq#36745, d_quarter_s..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#50900]\n               +- *(2) Filter isnotnull(i_item_sk#36769)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#36769, i_brand#36777, i_class#36779, i_category#36781, i_product_name#36790], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#36769, i_item_id#36770, i_rec_start_date#36771, i_rec_end_date#36772, i_item_desc#3677..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q22"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#51890]\n+- *(29) HashAggregate(keys=[], functions=[partial_sum(sales#36823)], output=[sum#37358, isEmpty#37359])\n   +- Union\n      :- *(14) Project [CheckOverflow((promote_precision(cast(cast(cs_quantity#36853 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#36855 as decimal(12,2)))), DecimalType(18,2), true) AS sales#36823]\n      :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#36835], [d_date_sk#36869], Inner, BuildRight, false\n      :     :- *(14) Project [cs_sold_date_sk#36835, cs_quantity#36853, cs_list_price#36855]\n      :     :  +- SortMergeJoin [cs_bill_customer_sk#36838], [c_customer_sk#37061], LeftSemi\n      :     :     :- *(9) Sort [cs_bill_customer_sk#36838 ASC NULLS FIRST], false, 0\n      :     :     :  +- Exchange hashpartitioning(cs_bill_customer_sk#36838, 200), ENSURE_REQUIREMENTS, [id=#51468]\n      :     :     :     +- *(8) Project [cs_sold_date_sk#36835, cs_bill_customer_sk#36838, cs_quantity#36853, cs_list_price#36855]\n      :     :     :        +- SortMergeJoin [cs_item_sk#36850], [item_sk#36828], LeftSemi\n      :     :     :           :- *(2) Sort [cs_item_sk#36850 ASC NULLS FIRST], false, 0\n      :     :     :           :  +- Exchange hashpartitioning(cs_item_sk#36850, 200), ENSURE_REQUIREMENTS, [id=#51431]\n      :     :     :           :     +- *(1) Filter isnotnull(cs_sold_date_sk#36835)\n      :     :     :           :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#36835, cs_bill_customer_sk#36838, cs_item_sk#36850, cs_quantity#36853, cs_list_price#36855], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#36835, cs_sold_time_sk#36836, cs_ship_date_sk#36837, cs_bill_customer_sk#36838, ..., Partition Cols: []]\n      :     :     :           +- *(7) Sort [item_sk#36828 ASC NULLS FIRST], false, 0\n      :     :     :              +- Exchange hashpartitioning(item_sk#36828, 200), ENSURE_REQUIREMENTS, [id=#51460]\n      :     :     :                 +- *(6) Project [item_sk#36828]\n      :     :     :                    +- *(6) Filter (count(1)#37035L > 4)\n      :     :     :                       +- *(6) HashAggregate(keys=[substr(i_item_desc#37016, 1, 30)#37360, i_item_sk#37012, d_date#36986], functions=[count(1)], output=[item_sk#36828, count(1)#37035L])\n      :     :     :                          +- Exchange hashpartitioning(substr(i_item_desc#37016, 1, 30)#37360, i_item_sk#37012, d_date#36986, 200), ENSURE_REQUIREMENTS, [id=#51454]\n      :     :     :                             +- *(5) HashAggregate(keys=[substr(i_item_desc#37016, 1, 30) AS substr(i_item_desc#37016, 1, 30)#37360, i_item_sk#37012, d_date#36986], functions=[partial_count(1)], output=[substr(i_item_desc#37016, 1, 30)#37360, i_item_sk#37012, d_date#36986, count#37362L])\n      :     :     :                                +- *(5) Project [d_date#36986, i_item_sk#37012, i_item_desc#37016]\n      :     :     :                                   +- *(5) BroadcastHashJoin [ss_item_sk#36963], [i_item_sk#37012], Inner, BuildRight, false\n      :     :     :                                      :- *(5) Project [ss_item_sk#36963, d_date#36986]\n      :     :     :                                      :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#36961], [d_date_sk#36984], Inner, BuildRight, false\n      :     :     :                                      :     :- *(5) Filter (isnotnull(ss_sold_date_sk#36961) AND isnotnull(ss_item_sk#36963))\n      :     :     :                                      :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#36961, ss_item_sk#36963], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#36961, ss_sold_time_sk#36962, ss_item_sk#36963, ss_customer_sk#36964, ss_cdemo_s..., Partition Cols: []]\n      :     :     :                                      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#51441]\n      :     :     :                                      :        +- *(3) Project [d_date_sk#36984, d_date#36986]\n      :     :     :                                      :           +- *(3) Filter (d_year#36990 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#36984))\n      :     :     :                                      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#36986, d_date_sk#36984, d_year#36990], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36984, d_date_id#36985, d_date#36986, d_month_seq#36987, d_week_seq#36988, d_quarter_s..., Partition Cols: []]\n      :     :     :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51448]\n      :     :     :                                         +- *(4) Filter isnotnull(i_item_sk#37012)\n      :     :     :                                            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#37012, i_item_desc#37016], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#37012, i_item_id#37013, i_rec_start_date#37014, i_rec_end_date#37015, i_item_desc#3701..., Partition Cols: []]\n      :     :     +- *(12) Sort [c_customer_sk#37061 ASC NULLS FIRST], false, 0\n      :     :        +- *(12) Project [c_customer_sk#37061]\n      :     :           +- *(12) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37048 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37051 as decimal(12,2)))), DecimalType(18,2), true))#37153) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37048 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37051 as decimal(12,2)))), DecimalType(18,2), true))#37153 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery scalar-subquery#36834, [id=#51247] as decimal(32,6)))), DecimalType(38,8), true)))\n      :     :              :  +- Subquery scalar-subquery#36834, [id=#51247]\n      :     :              :     +- *(5) HashAggregate(keys=[], functions=[max(csales#36831)], output=[tpcds_cmax#36832])\n      :     :              :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#51243]\n      :     :              :           +- *(4) HashAggregate(keys=[], functions=[partial_max(csales#36831)], output=[max#37375])\n      :     :              :              +- *(4) HashAggregate(keys=[c_customer_sk#37103], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37090 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37093 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#36831])\n      :     :              :                 +- Exchange hashpartitioning(c_customer_sk#37103, 200), ENSURE_REQUIREMENTS, [id=#51238]\n      :     :              :                    +- *(3) HashAggregate(keys=[c_customer_sk#37103], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37090 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37093 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#37103, sum#37378, isEmpty#37379])\n      :     :              :                       +- *(3) Project [ss_quantity#37090, ss_sales_price#37093, c_customer_sk#37103]\n      :     :              :                          +- *(3) BroadcastHashJoin [ss_sold_date_sk#37080], [d_date_sk#37121], Inner, BuildRight, false\n      :     :              :                             :- *(3) Project [ss_sold_date_sk#37080, ss_quantity#37090, ss_sales_price#37093, c_customer_sk#37103]\n      :     :              :                             :  +- *(3) BroadcastHashJoin [ss_customer_sk#37083], [c_customer_sk#37103], Inner, BuildRight, false\n      :     :              :                             :     :- *(3) Filter (isnotnull(ss_customer_sk#37083) AND isnotnull(ss_sold_date_sk#37080))\n      :     :              :                             :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#37080, ss_customer_sk#37083, ss_quantity#37090, ss_sales_price#37093], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#37080, ss_sold_time_sk#37081, ss_item_sk#37082, ss_customer_sk#37083, ss_cdemo_s..., Partition Cols: []]\n      :     :              :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51224]\n      :     :              :                             :        +- *(1) Filter isnotnull(c_customer_sk#37103)\n      :     :              :                             :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#37103], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#37103, c_customer_id#37104, c_current_cdemo_sk#37105, c_current_hdemo_sk#37106, c_..., Partition Cols: []]\n      :     :              :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#51232]\n      :     :              :                                +- *(2) Project [d_date_sk#37121]\n      :     :              :                                   +- *(2) Filter (d_year#37127 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#37121))\n      :     :              :                                      +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#37121, d_year#37127], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#37121, d_date_id#37122, d_date#37123, d_month_seq#37124, d_week_seq#37125, d_quarter_s..., Partition Cols: []]\n      :     :              +- *(12) HashAggregate(keys=[c_customer_sk#37061], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37048 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37051 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#37061, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37048 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37051 as decimal(12,2)))), DecimalType(18,2), true))#37153])\n      :     :                 +- Exchange hashpartitioning(c_customer_sk#37061, 200), ENSURE_REQUIREMENTS, [id=#51483]\n      :     :                    +- *(11) HashAggregate(keys=[c_customer_sk#37061], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37048 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37051 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#37061, sum#37365, isEmpty#37366])\n      :     :                       +- *(11) Project [ss_quantity#37048, ss_sales_price#37051, c_customer_sk#37061]\n      :     :                          +- *(11) BroadcastHashJoin [ss_customer_sk#37041], [c_customer_sk#37061], Inner, BuildRight, false\n      :     :                             :- *(11) Filter isnotnull(ss_customer_sk#37041)\n      :     :                             :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_customer_sk#37041, ss_quantity#37048, ss_sales_price#37051], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#37038, ss_sold_time_sk#37039, ss_item_sk#37040, ss_customer_sk#37041, ss_cdemo_s..., Partition Cols: []]\n      :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#51477]\n      :     :                                +- *(10) Filter isnotnull(c_customer_sk#37061)\n      :     :                                   +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#37061], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#37061, c_customer_id#37062, c_current_cdemo_sk#37063, c_current_hdemo_sk#37064, c_..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#51497]\n      :        +- *(13) Project [d_date_sk#36869]\n      :           +- *(13) Filter ((((isnotnull(d_year#36875) AND isnotnull(d_moy#36877)) AND (d_year#36875 = 1998)) AND (d_moy#36877 = 7)) AND isnotnull(d_date_sk#36869))\n      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#36869, d_moy#36877, d_year#36875], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#36869, d_date_id#36870, d_date#36871, d_month_seq#36872, d_week_seq#36873, d_quarter_s..., Partition Cols: []]\n      +- *(28) Project [CheckOverflow((promote_precision(cast(cast(ws_quantity#36915 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#36917 as decimal(12,2)))), DecimalType(18,2), true) AS sales#36826]\n         +- *(28) BroadcastHashJoin [ws_sold_date_sk#36897], [d_date_sk#36931], Inner, BuildRight, false\n            :- *(28) Project [ws_sold_date_sk#36897, ws_quantity#36915, ws_list_price#36917]\n            :  +- SortMergeJoin [ws_bill_customer_sk#36901], [c_customer_sk#37258], LeftSemi\n            :     :- *(23) Sort [ws_bill_customer_sk#36901 ASC NULLS FIRST], false, 0\n            :     :  +- Exchange hashpartitioning(ws_bill_customer_sk#36901, 200), ENSURE_REQUIREMENTS, [id=#51695]\n            :     :     +- *(22) Project [ws_sold_date_sk#36897, ws_bill_customer_sk#36901, ws_quantity#36915, ws_list_price#36917]\n            :     :        +- SortMergeJoin [ws_item_sk#36900], [item_sk#36828], LeftSemi\n            :     :           :- *(16) Sort [ws_item_sk#36900 ASC NULLS FIRST], false, 0\n            :     :           :  +- Exchange hashpartitioning(ws_item_sk#36900, 200), ENSURE_REQUIREMENTS, [id=#51505]\n            :     :           :     +- *(15) Filter isnotnull(ws_sold_date_sk#36897)\n            :     :           :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#36897, ws_item_sk#36900, ws_bill_customer_sk#36901, ws_quantity#36915, ws_list_price#36917], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#36897, ws_sold_time_sk#36898, ws_ship_date_sk#36899, ws_item_sk#36900, ws_bill_c..., Partition Cols: []]\n            :     :           +- *(21) Sort [item_sk#36828 ASC NULLS FIRST], false, 0\n            :     :              +- ReusedExchange [item_sk#36828], Exchange hashpartitioning(item_sk#36828, 200), ENSURE_REQUIREMENTS, [id=#51460]\n            :     +- *(26) Sort [c_customer_sk#37258 ASC NULLS FIRST], false, 0\n            :        +- *(26) Project [c_customer_sk#37258]\n            :           +- *(26) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37248 as decimal(12,2)))), DecimalType(18,2), true))#37350) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37248 as decimal(12,2)))), DecimalType(18,2), true))#37350 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#36834, [id=#51247] as decimal(32,6)))), DecimalType(38,8), true)))\n            :              :  +- ReusedSubquery Subquery scalar-subquery#36834, [id=#51247]\n            :              +- *(26) HashAggregate(keys=[c_customer_sk#37258], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37248 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#37258, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37245 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37248 as decimal(12,2)))), DecimalType(18,2), true))#37350])\n            :                 +- ReusedExchange [c_customer_sk#37258, sum#37372, isEmpty#37373], Exchange hashpartitioning(c_customer_sk#37061, 200), ENSURE_REQUIREMENTS, [id=#51483]\n            +- ReusedExchange [d_date_sk#36931], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#51497]\n",
    "iteration" : 2,
    "name" : "q23a"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(c_last_name#37467, c_first_name#37466, 200), ENSURE_REQUIREMENTS, [id=#53495]\n+- *(19) HashAggregate(keys=[c_last_name#37467, c_first_name#37466], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#37442 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#37444 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#37467, c_first_name#37466, sum#37985, isEmpty#37986])\n   +- *(19) Project [cs_quantity#37442, cs_list_price#37444, c_first_name#37466, c_last_name#37467]\n      +- *(19) BroadcastHashJoin [cs_sold_date_sk#37424], [d_date_sk#37476], Inner, BuildRight, false\n         :- *(19) Project [cs_sold_date_sk#37424, cs_quantity#37442, cs_list_price#37444, c_first_name#37466, c_last_name#37467]\n         :  +- *(19) BroadcastHashJoin [cs_bill_customer_sk#37427], [c_customer_sk#37458], Inner, BuildRight, false\n         :     :- SortMergeJoin [cs_bill_customer_sk#37427], [c_customer_sk#37686], LeftSemi\n         :     :  :- *(9) Sort [cs_bill_customer_sk#37427 ASC NULLS FIRST], false, 0\n         :     :  :  +- Exchange hashpartitioning(cs_bill_customer_sk#37427, 200), ENSURE_REQUIREMENTS, [id=#52766]\n         :     :  :     +- *(8) Project [cs_sold_date_sk#37424, cs_bill_customer_sk#37427, cs_quantity#37442, cs_list_price#37444]\n         :     :  :        +- SortMergeJoin [cs_item_sk#37439], [item_sk#37417], LeftSemi\n         :     :  :           :- *(2) Sort [cs_item_sk#37439 ASC NULLS FIRST], false, 0\n         :     :  :           :  +- Exchange hashpartitioning(cs_item_sk#37439, 200), ENSURE_REQUIREMENTS, [id=#52729]\n         :     :  :           :     +- *(1) Filter (isnotnull(cs_bill_customer_sk#37427) AND isnotnull(cs_sold_date_sk#37424))\n         :     :  :           :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#37424, cs_bill_customer_sk#37427, cs_item_sk#37439, cs_quantity#37442, cs_list_price#37444], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#37424, cs_sold_time_sk#37425, cs_ship_date_sk#37426, cs_bill_customer_sk#37427, ..., Partition Cols: []]\n         :     :  :           +- *(7) Sort [item_sk#37417 ASC NULLS FIRST], false, 0\n         :     :  :              +- Exchange hashpartitioning(item_sk#37417, 200), ENSURE_REQUIREMENTS, [id=#52758]\n         :     :  :                 +- *(6) Project [item_sk#37417]\n         :     :  :                    +- *(6) Filter (count(1)#37660L > 4)\n         :     :  :                       +- *(6) HashAggregate(keys=[substr(i_item_desc#37641, 1, 30)#37987, i_item_sk#37637, d_date#37611], functions=[count(1)], output=[item_sk#37417, count(1)#37660L])\n         :     :  :                          +- Exchange hashpartitioning(substr(i_item_desc#37641, 1, 30)#37987, i_item_sk#37637, d_date#37611, 200), ENSURE_REQUIREMENTS, [id=#52752]\n         :     :  :                             +- *(5) HashAggregate(keys=[substr(i_item_desc#37641, 1, 30) AS substr(i_item_desc#37641, 1, 30)#37987, i_item_sk#37637, d_date#37611], functions=[partial_count(1)], output=[substr(i_item_desc#37641, 1, 30)#37987, i_item_sk#37637, d_date#37611, count#37989L])\n         :     :  :                                +- *(5) Project [d_date#37611, i_item_sk#37637, i_item_desc#37641]\n         :     :  :                                   +- *(5) BroadcastHashJoin [ss_item_sk#37588], [i_item_sk#37637], Inner, BuildRight, false\n         :     :  :                                      :- *(5) Project [ss_item_sk#37588, d_date#37611]\n         :     :  :                                      :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#37586], [d_date_sk#37609], Inner, BuildRight, false\n         :     :  :                                      :     :- *(5) Filter (isnotnull(ss_sold_date_sk#37586) AND isnotnull(ss_item_sk#37588))\n         :     :  :                                      :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#37586, ss_item_sk#37588], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#37586, ss_sold_time_sk#37587, ss_item_sk#37588, ss_customer_sk#37589, ss_cdemo_s..., Partition Cols: []]\n         :     :  :                                      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#52739]\n         :     :  :                                      :        +- *(3) Project [d_date_sk#37609, d_date#37611]\n         :     :  :                                      :           +- *(3) Filter (d_year#37615 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#37609))\n         :     :  :                                      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#37611, d_date_sk#37609, d_year#37615], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#37609, d_date_id#37610, d_date#37611, d_month_seq#37612, d_week_seq#37613, d_quarter_s..., Partition Cols: []]\n         :     :  :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52746]\n         :     :  :                                         +- *(4) Filter isnotnull(i_item_sk#37637)\n         :     :  :                                            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#37637, i_item_desc#37641], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#37637, i_item_id#37638, i_rec_start_date#37639, i_rec_end_date#37640, i_item_desc#3764..., Partition Cols: []]\n         :     :  +- *(12) Sort [c_customer_sk#37686 ASC NULLS FIRST], false, 0\n         :     :     +- *(12) Project [c_customer_sk#37686]\n         :     :        +- *(12) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))#37778) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))#37778 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery scalar-subquery#37423, [id=#52337] as decimal(32,6)))), DecimalType(38,8), true)))\n         :     :           :  +- Subquery scalar-subquery#37423, [id=#52337]\n         :     :           :     +- *(5) HashAggregate(keys=[], functions=[max(csales#37420)], output=[tpcds_cmax#37421])\n         :     :           :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#52333]\n         :     :           :           +- *(4) HashAggregate(keys=[], functions=[partial_max(csales#37420)], output=[max#38006])\n         :     :           :              +- *(4) HashAggregate(keys=[c_customer_sk#37728], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37715 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37718 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#37420])\n         :     :           :                 +- Exchange hashpartitioning(c_customer_sk#37728, 200), ENSURE_REQUIREMENTS, [id=#52328]\n         :     :           :                    +- *(3) HashAggregate(keys=[c_customer_sk#37728], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37715 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37718 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#37728, sum#38009, isEmpty#38010])\n         :     :           :                       +- *(3) Project [ss_quantity#37715, ss_sales_price#37718, c_customer_sk#37728]\n         :     :           :                          +- *(3) BroadcastHashJoin [ss_sold_date_sk#37705], [d_date_sk#37746], Inner, BuildRight, false\n         :     :           :                             :- *(3) Project [ss_sold_date_sk#37705, ss_quantity#37715, ss_sales_price#37718, c_customer_sk#37728]\n         :     :           :                             :  +- *(3) BroadcastHashJoin [ss_customer_sk#37708], [c_customer_sk#37728], Inner, BuildRight, false\n         :     :           :                             :     :- *(3) Filter (isnotnull(ss_customer_sk#37708) AND isnotnull(ss_sold_date_sk#37705))\n         :     :           :                             :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#37705, ss_customer_sk#37708, ss_quantity#37715, ss_sales_price#37718], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#37705, ss_sold_time_sk#37706, ss_item_sk#37707, ss_customer_sk#37708, ss_cdemo_s..., Partition Cols: []]\n         :     :           :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52314]\n         :     :           :                             :        +- *(1) Filter isnotnull(c_customer_sk#37728)\n         :     :           :                             :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#37728], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#37728, c_customer_id#37729, c_current_cdemo_sk#37730, c_current_hdemo_sk#37731, c_..., Partition Cols: []]\n         :     :           :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#52322]\n         :     :           :                                +- *(2) Project [d_date_sk#37746]\n         :     :           :                                   +- *(2) Filter (d_year#37752 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#37746))\n         :     :           :                                      +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#37746, d_year#37752], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#37746, d_date_id#37747, d_date#37748, d_month_seq#37749, d_week_seq#37750, d_quarter_s..., Partition Cols: []]\n         :     :           +- *(12) HashAggregate(keys=[c_customer_sk#37686], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#37686, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))#37778])\n         :     :              +- Exchange hashpartitioning(c_customer_sk#37686, 200), ENSURE_REQUIREMENTS, [id=#52781]\n         :     :                 +- *(11) HashAggregate(keys=[c_customer_sk#37686], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#37686, sum#37992, isEmpty#37993])\n         :     :                    +- *(11) Project [ss_quantity#37673, ss_sales_price#37676, c_customer_sk#37686]\n         :     :                       +- *(11) BroadcastHashJoin [ss_customer_sk#37666], [c_customer_sk#37686], Inner, BuildRight, false\n         :     :                          :- *(11) Filter isnotnull(ss_customer_sk#37666)\n         :     :                          :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_customer_sk#37666, ss_quantity#37673, ss_sales_price#37676], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#37663, ss_sold_time_sk#37664, ss_item_sk#37665, ss_customer_sk#37666, ss_cdemo_s..., Partition Cols: []]\n         :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#52775]\n         :     :                             +- *(10) Filter isnotnull(c_customer_sk#37686)\n         :     :                                +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#37686], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#37686, c_customer_id#37687, c_current_cdemo_sk#37688, c_current_hdemo_sk#37689, c_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#53487]\n         :        +- SortMergeJoin [c_customer_sk#37458], [c_customer_sk#37686], LeftSemi\n         :           :- *(14) Sort [c_customer_sk#37458 ASC NULLS FIRST], false, 0\n         :           :  +- Exchange hashpartitioning(c_customer_sk#37458, 200), ENSURE_REQUIREMENTS, [id=#52793]\n         :           :     +- *(13) Filter isnotnull(c_customer_sk#37458)\n         :           :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#37458, c_first_name#37466, c_last_name#37467], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#37458, c_customer_id#37459, c_current_cdemo_sk#37460, c_current_hdemo_sk#37461, c_..., Partition Cols: []]\n         :           +- *(17) Sort [c_customer_sk#37686 ASC NULLS FIRST], false, 0\n         :              +- *(17) Project [c_customer_sk#37686]\n         :                 +- *(17) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))#37778) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))#37778 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#37423, [id=#52337] as decimal(32,6)))), DecimalType(38,8), true)))\n         :                    :  +- ReusedSubquery Subquery scalar-subquery#37423, [id=#52337]\n         :                    +- *(17) HashAggregate(keys=[c_customer_sk#37686], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#37686, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#37673 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#37676 as decimal(12,2)))), DecimalType(18,2), true))#37778])\n         :                       +- ReusedExchange [c_customer_sk#37686, sum#37992, isEmpty#37993], Exchange hashpartitioning(c_customer_sk#37686, 200), ENSURE_REQUIREMENTS, [id=#52781]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#52824]\n            +- *(18) Project [d_date_sk#37476]\n               +- *(18) Filter ((((isnotnull(d_year#37482) AND isnotnull(d_moy#37484)) AND (d_year#37482 = 1998)) AND (d_moy#37484 = 7)) AND isnotnull(d_date_sk#37476))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#37476, d_moy#37484, d_year#37482], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#37476, d_date_id#37477, d_date#37478, d_month_seq#37479, d_week_seq#37480, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q23b"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 2,
    "name" : "q24a"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 2,
    "name" : "q24b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#38847, i_item_desc#38850, s_store_id#38818, s_store_name#38822, 200), ENSURE_REQUIREMENTS, [id=#54543]\n+- *(11) HashAggregate(keys=[i_item_id#38847, i_item_desc#38850, s_store_id#38818, s_store_name#38822], functions=[partial_min(ss_net_profit#38678), partial_min(sr_net_loss#38698), partial_min(cs_net_profit#38732)], output=[i_item_id#38847, i_item_desc#38850, s_store_id#38818, s_store_name#38822, min#38885, min#38886, min#38887])\n   +- *(11) Project [ss_net_profit#38678, sr_net_loss#38698, cs_net_profit#38732, s_store_id#38818, s_store_name#38822, i_item_id#38847, i_item_desc#38850]\n      +- *(11) BroadcastHashJoin [ss_item_sk#38658], [i_item_sk#38846], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#38658, ss_net_profit#38678, sr_net_loss#38698, cs_net_profit#38732, s_store_id#38818, s_store_name#38822]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#38663], [s_store_sk#38817], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#38658, ss_store_sk#38663, ss_net_profit#38678, sr_net_loss#38698, cs_net_profit#38732]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#38699], [d_date_sk#38789], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#38658, ss_store_sk#38663, ss_net_profit#38678, sr_net_loss#38698, cs_sold_date_sk#38699, cs_net_profit#38732]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#38679], [d_date_sk#38761], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#38658, ss_store_sk#38663, ss_net_profit#38678, sr_returned_date_sk#38679, sr_net_loss#38698, cs_sold_date_sk#38699, cs_net_profit#38732]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#38656], [d_date_sk#38733], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#38656, ss_item_sk#38658, ss_store_sk#38663, ss_net_profit#38678, sr_returned_date_sk#38679, sr_net_loss#38698, cs_sold_date_sk#38699, cs_net_profit#38732]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#38682, sr_item_sk#38681], [cs_bill_customer_sk#38702, cs_item_sk#38714], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#38682 ASC NULLS FIRST, sr_item_sk#38681 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#38682, sr_item_sk#38681, 200), ENSURE_REQUIREMENTS, [id=#54449]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#38656, ss_item_sk#38658, ss_store_sk#38663, ss_net_profit#38678, sr_returned_date_sk#38679, sr_item_sk#38681, sr_customer_sk#38682, sr_net_loss#38698]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#38659, ss_item_sk#38658, ss_ticket_number#38665L], [sr_customer_sk#38682, sr_item_sk#38681, sr_ticket_number#38688L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#38659) AND isnotnull(ss_item_sk#38658)) AND isnotnull(ss_ticket_number#38665L)) AND isnotnull(ss_sold_date_sk#38656)) AND isnotnull(ss_store_sk#38663))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#38656, ss_item_sk#38658, ss_customer_sk#38659, ss_store_sk#38663, ss_ticket_number#38665L, ss_net_profit#38678], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#38656, ss_sold_time_sk#38657, ss_item_sk#38658, ss_customer_sk#38659, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#54444]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#38682) AND isnotnull(sr_item_sk#38681)) AND isnotnull(sr_ticket_number#38688L)) AND isnotnull(sr_returned_date_sk#38679))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#38679, sr_item_sk#38681, sr_customer_sk#38682, sr_ticket_number#38688L, sr_net_loss#38698], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#38679, sr_return_time_sk#38680, sr_item_sk#38681, sr_customer_sk#38682, sr_c..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#38702 ASC NULLS FIRST, cs_item_sk#38714 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#38702, cs_item_sk#38714, 200), ENSURE_REQUIREMENTS, [id=#54457]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#38702) AND isnotnull(cs_item_sk#38714)) AND isnotnull(cs_sold_date_sk#38699))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#38699, cs_bill_customer_sk#38702, cs_item_sk#38714, cs_net_profit#38732], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#38699, cs_sold_time_sk#38700, cs_ship_date_sk#38701, cs_bill_customer_sk#38702, ..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54468]\n         :     :     :     :        +- *(6) Project [d_date_sk#38733]\n         :     :     :     :           +- *(6) Filter ((((isnotnull(d_moy#38741) AND isnotnull(d_year#38739)) AND (d_moy#38741 = 4)) AND (d_year#38739 = 2002)) AND isnotnull(d_date_sk#38733))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#38733, d_moy#38741, d_year#38739], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#38733, d_date_id#38734, d_date#38735, d_month_seq#38736, d_week_seq#38737, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54476]\n         :     :     :        +- *(7) Project [d_date_sk#38761]\n         :     :     :           +- *(7) Filter (((((isnotnull(d_moy#38769) AND isnotnull(d_year#38767)) AND (d_moy#38769 >= 4)) AND (d_moy#38769 <= 10)) AND (d_year#38767 = 2002)) AND isnotnull(d_date_sk#38761))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#38761, d_moy#38769, d_year#38767], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#38761, d_date_id#38762, d_date#38763, d_month_seq#38764, d_week_seq#38765, d_quarter_s..., Partition Cols: []]\n         :     :     +- ReusedExchange [d_date_sk#38789], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54476]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#54491]\n         :        +- *(9) Filter isnotnull(s_store_sk#38817)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#38817, s_store_id#38818, s_store_name#38822], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#38817, s_store_id#38818, s_rec_start_date#38819, s_rec_end_date#38820, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#54498]\n            +- *(10) Filter isnotnull(i_item_sk#38846)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#38846, i_item_id#38847, i_item_desc#38850], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#38846, i_item_id#38847, i_rec_start_date#38848, i_rec_end_date#38849, i_item_desc#3885..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q25"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#38972, 200), ENSURE_REQUIREMENTS, [id=#54680]\n+- *(5) HashAggregate(keys=[i_item_id#38972], functions=[partial_avg(cast(cs_quantity#38918 as bigint)), partial_avg(UnscaledValue(cs_list_price#38920)), partial_avg(UnscaledValue(cs_coupon_amt#38927)), partial_avg(UnscaledValue(cs_sales_price#38921))], output=[i_item_id#38972, sum#39030, count#39031L, sum#39032, count#39033L, sum#39034, count#39035L, sum#39036, count#39037L])\n   +- *(5) Project [cs_quantity#38918, cs_list_price#38920, cs_sales_price#38921, cs_coupon_amt#38927, i_item_id#38972]\n      +- *(5) BroadcastHashJoin [cs_promo_sk#38916], [p_promo_sk#38993], Inner, BuildRight, false\n         :- *(5) Project [cs_promo_sk#38916, cs_quantity#38918, cs_list_price#38920, cs_sales_price#38921, cs_coupon_amt#38927, i_item_id#38972]\n         :  +- *(5) BroadcastHashJoin [cs_item_sk#38915], [i_item_sk#38971], Inner, BuildRight, false\n         :     :- *(5) Project [cs_item_sk#38915, cs_promo_sk#38916, cs_quantity#38918, cs_list_price#38920, cs_sales_price#38921, cs_coupon_amt#38927]\n         :     :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#38900], [d_date_sk#38943], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#38900, cs_item_sk#38915, cs_promo_sk#38916, cs_quantity#38918, cs_list_price#38920, cs_sales_price#38921, cs_coupon_amt#38927]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_bill_cdemo_sk#38904], [cd_demo_sk#38934], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(cs_bill_cdemo_sk#38904) AND isnotnull(cs_sold_date_sk#38900)) AND isnotnull(cs_item_sk#38915)) AND isnotnull(cs_promo_sk#38916))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#38900, cs_bill_cdemo_sk#38904, cs_item_sk#38915, cs_promo_sk#38916, cs_quantity#38918, cs_list_price#38920, cs_sales_price#38921, cs_coupon_amt#38927], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#38900, cs_sold_time_sk#38901, cs_ship_date_sk#38902, cs_bill_customer_sk#38903, ..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54651]\n         :     :     :        +- *(1) Project [cd_demo_sk#38934]\n         :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#38935) AND isnotnull(cd_marital_status#38936)) AND isnotnull(cd_education_status#38937)) AND (cd_gender#38935 = F)) AND (cd_marital_status#38936 = M)) AND (cd_education_status#38937 = 4 yr Degree)) AND isnotnull(cd_demo_sk#38934))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#38934, cd_education_status#38937, cd_gender#38935, cd_marital_status#38936], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#38934, cd_gender#38935, cd_marital_status#38936, cd_education_status#38937, cd_purcha..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54659]\n         :     :        +- *(2) Project [d_date_sk#38943]\n         :     :           +- *(2) Filter ((isnotnull(d_year#38949) AND (d_year#38949 = 1998)) AND isnotnull(d_date_sk#38943))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#38943, d_year#38949], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#38943, d_date_id#38944, d_date#38945, d_month_seq#38946, d_week_seq#38947, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#54666]\n         :        +- *(3) Filter isnotnull(i_item_sk#38971)\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#38971, i_item_id#38972], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#38971, i_item_id#38972, i_rec_start_date#38973, i_rec_end_date#38974, i_item_desc#3897..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54674]\n            +- *(4) Project [p_promo_sk#38993]\n               +- *(4) Filter (((p_channel_email#39002 = N) OR (p_channel_event#39007 = N)) AND isnotnull(p_promo_sk#38993))\n                  +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_email#39002, p_channel_event#39007, p_promo_sk#38993], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#38993, p_promo_id#38994, p_start_date_sk#38995, p_end_date_sk#38996, p_item_sk#38997,..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q26"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#39167, s_state#39168, spark_grouping_id#39166L, 200), ENSURE_REQUIREMENTS, [id=#54820]\n+- *(5) HashAggregate(keys=[i_item_id#39167, s_state#39168, spark_grouping_id#39166L], functions=[partial_avg(cast(ss_quantity#39059 as bigint)), partial_avg(UnscaledValue(ss_list_price#39061)), partial_avg(UnscaledValue(ss_coupon_amt#39068)), partial_avg(UnscaledValue(ss_sales_price#39062))], output=[i_item_id#39167, s_state#39168, spark_grouping_id#39166L, sum#39187, count#39188L, sum#39189, count#39190L, sum#39191, count#39192L, sum#39193, count#39194L])\n   +- *(5) Expand [List(ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068, i_item_id#39139, s_state#39133, 0), List(ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068, i_item_id#39139, null, 1), List(ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068, null, null, 3)], [ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068, i_item_id#39167, s_state#39168, spark_grouping_id#39166L]\n      +- *(5) Project [ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068, i_item_id#39139, s_state#39133]\n         +- *(5) BroadcastHashJoin [ss_item_sk#39051], [i_item_sk#39138], Inner, BuildRight, false\n            :- *(5) Project [ss_item_sk#39051, ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068, s_state#39133]\n            :  +- *(5) BroadcastHashJoin [ss_store_sk#39056], [s_store_sk#39109], Inner, BuildRight, false\n            :     :- *(5) Project [ss_item_sk#39051, ss_store_sk#39056, ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068]\n            :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#39049], [d_date_sk#39081], Inner, BuildRight, false\n            :     :     :- *(5) Project [ss_sold_date_sk#39049, ss_item_sk#39051, ss_store_sk#39056, ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068]\n            :     :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#39053], [cd_demo_sk#39072], Inner, BuildRight, false\n            :     :     :     :- *(5) Filter (((isnotnull(ss_cdemo_sk#39053) AND isnotnull(ss_sold_date_sk#39049)) AND isnotnull(ss_store_sk#39056)) AND isnotnull(ss_item_sk#39051))\n            :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#39049, ss_item_sk#39051, ss_cdemo_sk#39053, ss_store_sk#39056, ss_quantity#39059, ss_list_price#39061, ss_sales_price#39062, ss_coupon_amt#39068], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#39049, ss_sold_time_sk#39050, ss_item_sk#39051, ss_customer_sk#39052, ss_cdemo_s..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54791]\n            :     :     :        +- *(1) Project [cd_demo_sk#39072]\n            :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#39073) AND isnotnull(cd_marital_status#39074)) AND isnotnull(cd_education_status#39075)) AND (cd_gender#39073 = M)) AND (cd_marital_status#39074 = M)) AND (cd_education_status#39075 = Secondary)) AND isnotnull(cd_demo_sk#39072))\n            :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#39072, cd_education_status#39075, cd_gender#39073, cd_marital_status#39074], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#39072, cd_gender#39073, cd_marital_status#39074, cd_education_status#39075, cd_purcha..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#54799]\n            :     :        +- *(2) Project [d_date_sk#39081]\n            :     :           +- *(2) Filter ((isnotnull(d_year#39087) AND (d_year#39087 = 1999)) AND isnotnull(d_date_sk#39081))\n            :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#39081, d_year#39087], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#39081, d_date_id#39082, d_date#39083, d_month_seq#39084, d_week_seq#39085, d_quarter_s..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#54806]\n            :        +- *(3) Filter (s_state#39133 IN (AL,FL,TX,NM,MI,GA) AND isnotnull(s_store_sk#39109))\n            :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#39109, s_state#39133], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#39109, s_store_id#39110, s_rec_start_date#39111, s_rec_end_date#39112, s_closed_date_..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#54813]\n               +- *(4) Filter isnotnull(i_item_sk#39138)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#39138, i_item_id#39139], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#39138, i_item_id#39139, i_rec_start_date#39140, i_rec_end_date#39141, i_item_desc#3914..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q27"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 2,
    "name" : "q28"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#39764, i_item_desc#39767, s_store_id#39735, s_store_name#39739, 200), ENSURE_REQUIREMENTS, [id=#55448]\n+- *(11) HashAggregate(keys=[i_item_id#39764, i_item_desc#39767, s_store_id#39735, s_store_name#39739], functions=[partial_stddev_samp(cast(ss_quantity#39583 as double)), partial_stddev_samp(cast(sr_return_quantity#39606 as double)), partial_stddev_samp(cast(cs_quantity#39634 as double))], output=[i_item_id#39764, i_item_desc#39767, s_store_id#39735, s_store_name#39739, n#39865, avg#39866, m2#39867, n#39873, avg#39874, m2#39875, n#39881, avg#39882, m2#39883])\n   +- *(11) Project [ss_quantity#39583, sr_return_quantity#39606, cs_quantity#39634, s_store_id#39735, s_store_name#39739, i_item_id#39764, i_item_desc#39767]\n      +- *(11) BroadcastHashJoin [ss_item_sk#39575], [i_item_sk#39763], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#39575, ss_quantity#39583, sr_return_quantity#39606, cs_quantity#39634, s_store_id#39735, s_store_name#39739]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#39580], [s_store_sk#39734], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#39575, ss_store_sk#39580, ss_quantity#39583, sr_return_quantity#39606, cs_quantity#39634]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#39616], [d_date_sk#39706], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#39575, ss_store_sk#39580, ss_quantity#39583, sr_return_quantity#39606, cs_sold_date_sk#39616, cs_quantity#39634]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#39596], [d_date_sk#39678], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#39575, ss_store_sk#39580, ss_quantity#39583, sr_returned_date_sk#39596, sr_return_quantity#39606, cs_sold_date_sk#39616, cs_quantity#39634]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#39573], [d_date_sk#39650], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#39573, ss_item_sk#39575, ss_store_sk#39580, ss_quantity#39583, sr_returned_date_sk#39596, sr_return_quantity#39606, cs_sold_date_sk#39616, cs_quantity#39634]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#39599, sr_item_sk#39598], [cs_bill_customer_sk#39619, cs_item_sk#39631], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#39599 ASC NULLS FIRST, sr_item_sk#39598 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#39599, sr_item_sk#39598, 200), ENSURE_REQUIREMENTS, [id=#55393]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#39573, ss_item_sk#39575, ss_store_sk#39580, ss_quantity#39583, sr_returned_date_sk#39596, sr_item_sk#39598, sr_customer_sk#39599, sr_return_quantity#39606]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#39576, ss_item_sk#39575, ss_ticket_number#39582L], [sr_customer_sk#39599, sr_item_sk#39598, sr_ticket_number#39605L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#39576) AND isnotnull(ss_item_sk#39575)) AND isnotnull(ss_ticket_number#39582L)) AND isnotnull(ss_sold_date_sk#39573)) AND isnotnull(ss_store_sk#39580))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#39573, ss_item_sk#39575, ss_customer_sk#39576, ss_store_sk#39580, ss_ticket_number#39582L, ss_quantity#39583], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#39573, ss_sold_time_sk#39574, ss_item_sk#39575, ss_customer_sk#39576, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#55388]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#39599) AND isnotnull(sr_item_sk#39598)) AND isnotnull(sr_ticket_number#39605L)) AND isnotnull(sr_returned_date_sk#39596))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#39596, sr_item_sk#39598, sr_customer_sk#39599, sr_ticket_number#39605L, sr_return_quantity#39606], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#39596, sr_return_time_sk#39597, sr_item_sk#39598, sr_customer_sk#39599, sr_c..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#39619 ASC NULLS FIRST, cs_item_sk#39631 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#39619, cs_item_sk#39631, 200), ENSURE_REQUIREMENTS, [id=#55401]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#39619) AND isnotnull(cs_item_sk#39631)) AND isnotnull(cs_sold_date_sk#39616))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#39616, cs_bill_customer_sk#39619, cs_item_sk#39631, cs_quantity#39634], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#39616, cs_sold_time_sk#39617, cs_ship_date_sk#39618, cs_bill_customer_sk#39619, ..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55412]\n         :     :     :     :        +- *(6) Project [d_date_sk#39650]\n         :     :     :     :           +- *(6) Filter ((((isnotnull(d_moy#39658) AND isnotnull(d_year#39656)) AND (d_moy#39658 = 4)) AND (d_year#39656 = 2000)) AND isnotnull(d_date_sk#39650))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#39650, d_moy#39658, d_year#39656], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#39650, d_date_id#39651, d_date#39652, d_month_seq#39653, d_week_seq#39654, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55420]\n         :     :     :        +- *(7) Project [d_date_sk#39678]\n         :     :     :           +- *(7) Filter (((((isnotnull(d_moy#39686) AND isnotnull(d_year#39684)) AND (d_moy#39686 >= 4)) AND (d_moy#39686 <= 7)) AND (d_year#39684 = 2000)) AND isnotnull(d_date_sk#39678))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#39678, d_moy#39686, d_year#39684], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#39678, d_date_id#39679, d_date#39680, d_month_seq#39681, d_week_seq#39682, d_quarter_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55428]\n         :     :        +- *(8) Project [d_date_sk#39706]\n         :     :           +- *(8) Filter (d_year#39712 IN (2000,2001,2002) AND isnotnull(d_date_sk#39706))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#39706, d_year#39712], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#39706, d_date_id#39707, d_date#39708, d_month_seq#39709, d_week_seq#39710, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55435]\n         :        +- *(9) Filter isnotnull(s_store_sk#39734)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#39734, s_store_id#39735, s_store_name#39739], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#39734, s_store_id#39735, s_rec_start_date#39736, s_rec_end_date#39737, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55442]\n            +- *(10) Filter isnotnull(i_item_sk#39763)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#39763, i_item_id#39764, i_item_desc#39767], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#39763, i_item_id#39764, i_rec_start_date#39765, i_rec_end_date#39766, i_item_desc#3976..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q29"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#39932, i_brand#39985, i_brand_id#39984, 200), ENSURE_REQUIREMENTS, [id=#55556]\n+- *(3) HashAggregate(keys=[d_year#39932, i_brand#39985, i_brand_id#39984], functions=[partial_sum(UnscaledValue(ss_sales_price#39967))], output=[d_year#39932, i_brand#39985, i_brand_id#39984, sum#40008L])\n   +- *(3) Project [d_year#39932, ss_sales_price#39967, i_brand_id#39984, i_brand#39985]\n      +- *(3) BroadcastHashJoin [ss_item_sk#39956], [i_item_sk#39977], Inner, BuildRight, false\n         :- *(3) Project [d_year#39932, ss_item_sk#39956, ss_sales_price#39967]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#39926], [ss_sold_date_sk#39954], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55540]\n         :     :  +- *(1) Project [d_date_sk#39926, d_year#39932]\n         :     :     +- *(1) Filter ((isnotnull(d_moy#39934) AND (d_moy#39934 = 11)) AND isnotnull(d_date_sk#39926))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#39926, d_moy#39934, d_year#39932], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#39926, d_date_id#39927, d_date#39928, d_month_seq#39929, d_week_seq#39930, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#39954) AND isnotnull(ss_item_sk#39956))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#39954, ss_item_sk#39956, ss_sales_price#39967], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#39954, ss_sold_time_sk#39955, ss_item_sk#39956, ss_customer_sk#39957, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#55550]\n            +- *(2) Project [i_item_sk#39977, i_brand_id#39984, i_brand#39985]\n               +- *(2) Filter ((isnotnull(i_manufact_id#39990) AND (i_manufact_id#39990 = 816)) AND isnotnull(i_item_sk#39977))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#39985, i_brand_id#39984, i_item_sk#39977, i_manufact_id#39990], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#39977, i_item_id#39978, i_rec_start_date#39979, i_rec_end_date#39980, i_item_desc#3998..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q3"
  }, {
    "errorMsg" : "cannot resolve '`c_last_review_date`' given input columns: [spark_catalog.tpcds_sf1_iceberg.customer.c_birth_country, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_day, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_month, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_year, spark_catalog.tpcds_sf1_iceberg.customer.c_current_addr_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_current_cdemo_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_current_hdemo_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_customer_id, spark_catalog.tpcds_sf1_iceberg.customer.c_customer_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_email_address, spark_catalog.tpcds_sf1_iceberg.customer.c_first_name, spark_catalog.tpcds_sf1_iceberg.customer.c_first_sales_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_first_shipto_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_last_name, spark_catalog.tpcds_sf1_iceberg.customer.c_last_review_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_login, spark_catalog.tpcds_sf1_iceberg.customer.c_preferred_cust_flag, spark_catalog.tpcds_sf1_iceberg.customer.c_salutation, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_address_id, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_address_sk, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_city, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_country, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_county, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_gmt_offset, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_location_type, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_state, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_name, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_number, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_type, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_suite_number, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_zip, ctr1.ctr_customer_sk, ctr1.ctr_state, ctr1.ctr_total_return]; line 16 pos 8;\n'GlobalLimit 100\n+- 'LocalLimit 100\n   +- 'Sort ['c_customer_id ASC NULLS FIRST, 'c_salutation ASC NULLS FIRST, 'c_first_name ASC NULLS FIRST, 'c_last_name ASC NULLS FIRST, 'c_preferred_cust_flag ASC NULLS FIRST, 'c_birth_day ASC NULLS FIRST, 'c_birth_month ASC NULLS FIRST, 'c_birth_year ASC NULLS FIRST, 'c_birth_country ASC NULLS FIRST, 'c_login ASC NULLS FIRST, 'c_email_address ASC NULLS FIRST, 'c_last_review_date ASC NULLS FIRST, 'ctr_total_return ASC NULLS FIRST], true\n      +- 'Project [c_customer_id#40097, c_salutation#40103, c_first_name#40104, c_last_name#40105, c_preferred_cust_flag#40106, c_birth_day#40107, c_birth_month#40108, c_birth_year#40109, c_birth_country#40110, c_login#40111, c_email_address#40112, 'c_last_review_date, ctr_total_return#40017]\n         +- Filter (((cast(ctr_total_return#40017 as decimal(24,7)) > cast(scalar-subquery#40014 [ctr_state#40016] as decimal(24,7))) AND (ca_address_sk#40083 = c_current_addr_sk#40100)) AND ((ca_state#40091 = MI) AND (ctr_customer_sk#40015 = c_customer_sk#40096)))\n            :  +- Aggregate [CheckOverflow((promote_precision(cast(avg(ctr_total_return#40017) as decimal(21,6))) * promote_precision(cast(1.2 as decimal(21,6)))), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#40182]\n            :     +- Filter (outer(ctr_state#40016) = ctr_state#40016)\n            :        +- SubqueryAlias ctr2\n            :           +- SubqueryAlias customer_total_return\n            :              +- Aggregate [wr_returning_customer_sk#40122, ca_state#40175], [wr_returning_customer_sk#40122 AS ctr_customer_sk#40015, ca_state#40175 AS ctr_state#40016, sum(wr_return_amt#40130) AS ctr_total_return#40017]\n            :                 +- Filter (((wr_returned_date_sk#40115 = d_date_sk#40139) AND (d_year#40145 = 2001)) AND (wr_returning_addr_sk#40125 = ca_address_sk#40167))\n            :                    +- Join Inner\n            :                       :- Join Inner\n            :                       :  :- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.web_returns\n            :                       :  :  +- HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#40115, wr_returned_time_sk#40116, wr_item_sk#40117, wr_refunded_customer_sk#..., Partition Cols: []]\n            :                       :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.date_dim\n            :                       :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#40139, d_date_id#40140, d_date#40141, d_month_seq#40142, d_week_seq#40143, d_quarter_s..., Partition Cols: []]\n            :                       +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n            :                          +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#40167, ca_address_id#40168, ca_street_number#40169, ca_street_name#40170, ca_stree..., Partition Cols: []]\n            +- Join Inner\n               :- Join Inner\n               :  :- SubqueryAlias ctr1\n               :  :  +- SubqueryAlias customer_total_return\n               :  :     +- Aggregate [wr_returning_customer_sk#40025, ca_state#40078], [wr_returning_customer_sk#40025 AS ctr_customer_sk#40015, ca_state#40078 AS ctr_state#40016, sum(wr_return_amt#40033) AS ctr_total_return#40017]\n               :  :        +- Filter (((wr_returned_date_sk#40018 = d_date_sk#40042) AND (d_year#40048 = 2001)) AND (wr_returning_addr_sk#40028 = ca_address_sk#40070))\n               :  :           +- Join Inner\n               :  :              :- Join Inner\n               :  :              :  :- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.web_returns\n               :  :              :  :  +- HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#40018, wr_returned_time_sk#40019, wr_item_sk#40020, wr_refunded_customer_sk#..., Partition Cols: []]\n               :  :              :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.date_dim\n               :  :              :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#40042, d_date_id#40043, d_date#40044, d_month_seq#40045, d_week_seq#40046, d_quarter_s..., Partition Cols: []]\n               :  :              +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n               :  :                 +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#40070, ca_address_id#40071, ca_street_number#40072, ca_street_name#40073, ca_stree..., Partition Cols: []]\n               :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n               :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#40083, ca_address_id#40084, ca_street_number#40085, ca_street_name#40086, ca_stree..., Partition Cols: []]\n               +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer\n                  +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#40096, c_customer_id#40097, c_current_cdemo_sk#40098, c_current_hdemo_sk#40099, c_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q30"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(store_q1_q2_increase#40184 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#56444]\n+- *(35) Project [ca_county#40247, d_year#40218, CheckOverflow((promote_precision(web_sales#40614) / promote_precision(web_sales#40188)), DecimalType(37,20), true) AS web_q1_q2_increase#40183, CheckOverflow((promote_precision(store_sales#40612) / promote_precision(store_sales#40187)), DecimalType(37,20), true) AS store_q1_q2_increase#40184, CheckOverflow((promote_precision(web_sales#40615) / promote_precision(web_sales#40614)), DecimalType(37,20), true) AS web_q2_q3_increase#40185, CheckOverflow((promote_precision(store_sales#40613) / promote_precision(store_sales#40612)), DecimalType(37,20), true) AS store_q2_q3_increase#40186]\n   +- *(35) SortMergeJoin [ca_county#40450], [ca_county#40600], Inner, (CASE WHEN (web_sales#40614 > 0.00) THEN CheckOverflow((promote_precision(web_sales#40615) / promote_precision(web_sales#40614)), DecimalType(37,20), true) ELSE null END > CASE WHEN (store_sales#40612 > 0.00) THEN CheckOverflow((promote_precision(store_sales#40613) / promote_precision(store_sales#40612)), DecimalType(37,20), true) ELSE null END)\n      :- *(29) Project [ca_county#40247, d_year#40218, store_sales#40187, store_sales#40612, store_sales#40613, ca_county#40450, web_sales#40188, web_sales#40614]\n      :  +- *(29) SortMergeJoin [ca_county#40450], [ca_county#40525], Inner, (CASE WHEN (web_sales#40188 > 0.00) THEN CheckOverflow((promote_precision(web_sales#40614) / promote_precision(web_sales#40188)), DecimalType(37,20), true) ELSE null END > CASE WHEN (store_sales#40187 > 0.00) THEN CheckOverflow((promote_precision(store_sales#40612) / promote_precision(store_sales#40187)), DecimalType(37,20), true) ELSE null END)\n      :     :- *(23) SortMergeJoin [ca_county#40247], [ca_county#40450], Inner\n      :     :  :- *(17) Project [ca_county#40247, d_year#40218, store_sales#40187, store_sales#40612, store_sales#40613]\n      :     :  :  +- *(17) SortMergeJoin [ca_county#40311], [ca_county#40375], Inner\n      :     :  :     :- *(11) SortMergeJoin [ca_county#40247], [ca_county#40311], Inner\n      :     :  :     :  :- *(5) Sort [ca_county#40247 ASC NULLS FIRST], false, 0\n      :     :  :     :  :  +- Exchange hashpartitioning(ca_county#40247, 200), ENSURE_REQUIREMENTS, [id=#55963]\n      :     :  :     :  :     +- *(4) HashAggregate(keys=[ca_county#40247, d_qoy#40222, d_year#40218], functions=[sum(UnscaledValue(ss_ext_sales_price#40204))], output=[ca_county#40247, d_year#40218, store_sales#40187])\n      :     :  :     :  :        +- Exchange hashpartitioning(ca_county#40247, d_qoy#40222, d_year#40218, 200), ENSURE_REQUIREMENTS, [id=#55959]\n      :     :  :     :  :           +- *(3) HashAggregate(keys=[ca_county#40247, d_qoy#40222, d_year#40218], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#40204))], output=[ca_county#40247, d_qoy#40222, d_year#40218, sum#40623L])\n      :     :  :     :  :              +- *(3) Project [ss_ext_sales_price#40204, d_year#40218, d_qoy#40222, ca_county#40247]\n      :     :  :     :  :                 +- *(3) BroadcastHashJoin [ss_addr_sk#40195], [ca_address_sk#40240], Inner, BuildRight, false\n      :     :  :     :  :                    :- *(3) Project [ss_addr_sk#40195, ss_ext_sales_price#40204, d_year#40218, d_qoy#40222]\n      :     :  :     :  :                    :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#40189], [d_date_sk#40212], Inner, BuildRight, false\n      :     :  :     :  :                    :     :- *(3) Filter (isnotnull(ss_sold_date_sk#40189) AND isnotnull(ss_addr_sk#40195))\n      :     :  :     :  :                    :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#40189, ss_addr_sk#40195, ss_ext_sales_price#40204], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#40189, ss_sold_time_sk#40190, ss_item_sk#40191, ss_customer_sk#40192, ss_cdemo_s..., Partition Cols: []]\n      :     :  :     :  :                    :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55946]\n      :     :  :     :  :                    :        +- *(1) Filter ((((isnotnull(d_qoy#40222) AND isnotnull(d_year#40218)) AND (d_qoy#40222 = 1)) AND (d_year#40218 = 2000)) AND isnotnull(d_date_sk#40212))\n      :     :  :     :  :                    :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#40212, d_year#40218, d_qoy#40222], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#40212, d_date_id#40213, d_date#40214, d_month_seq#40215, d_week_seq#40216, d_quarter_s..., Partition Cols: []]\n      :     :  :     :  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55953]\n      :     :  :     :  :                       +- *(2) Filter (isnotnull(ca_address_sk#40240) AND isnotnull(ca_county#40247))\n      :     :  :     :  :                          +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#40240, ca_county#40247], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#40240, ca_address_id#40241, ca_street_number#40242, ca_street_name#40243, ca_stree..., Partition Cols: []]\n      :     :  :     :  +- *(10) Sort [ca_county#40311 ASC NULLS FIRST], false, 0\n      :     :  :     :     +- Exchange hashpartitioning(ca_county#40311, 200), ENSURE_REQUIREMENTS, [id=#56196]\n      :     :  :     :        +- *(9) HashAggregate(keys=[ca_county#40311, d_qoy#40286, d_year#40282], functions=[sum(UnscaledValue(ss_ext_sales_price#40268))], output=[ca_county#40311, store_sales#40612])\n      :     :  :     :           +- Exchange hashpartitioning(ca_county#40311, d_qoy#40286, d_year#40282, 200), ENSURE_REQUIREMENTS, [id=#56154]\n      :     :  :     :              +- *(8) HashAggregate(keys=[ca_county#40311, d_qoy#40286, d_year#40282], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#40268))], output=[ca_county#40311, d_qoy#40286, d_year#40282, sum#40625L])\n      :     :  :     :                 +- *(8) Project [ss_ext_sales_price#40268, d_year#40282, d_qoy#40286, ca_county#40311]\n      :     :  :     :                    +- *(8) BroadcastHashJoin [ss_addr_sk#40259], [ca_address_sk#40304], Inner, BuildRight, false\n      :     :  :     :                       :- *(8) Project [ss_addr_sk#40259, ss_ext_sales_price#40268, d_year#40282, d_qoy#40286]\n      :     :  :     :                       :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#40253], [d_date_sk#40276], Inner, BuildRight, false\n      :     :  :     :                       :     :- *(8) Filter (isnotnull(ss_sold_date_sk#40253) AND isnotnull(ss_addr_sk#40259))\n      :     :  :     :                       :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#40253, ss_addr_sk#40259, ss_ext_sales_price#40268], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#40253, ss_sold_time_sk#40254, ss_item_sk#40255, ss_customer_sk#40256, ss_cdemo_s..., Partition Cols: []]\n      :     :  :     :                       :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55973]\n      :     :  :     :                       :        +- *(6) Filter ((((isnotnull(d_qoy#40286) AND isnotnull(d_year#40282)) AND (d_qoy#40286 = 2)) AND (d_year#40282 = 2000)) AND isnotnull(d_date_sk#40276))\n      :     :  :     :                       :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#40276, d_year#40282, d_qoy#40286], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#40276, d_date_id#40277, d_date#40278, d_month_seq#40279, d_week_seq#40280, d_quarter_s..., Partition Cols: []]\n      :     :  :     :                       +- ReusedExchange [ca_address_sk#40304, ca_county#40311], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55953]\n      :     :  :     +- *(16) Sort [ca_county#40375 ASC NULLS FIRST], false, 0\n      :     :  :        +- Exchange hashpartitioning(ca_county#40375, 200), ENSURE_REQUIREMENTS, [id=#56245]\n      :     :  :           +- *(15) HashAggregate(keys=[ca_county#40375, d_qoy#40350, d_year#40346], functions=[sum(UnscaledValue(ss_ext_sales_price#40332))], output=[ca_county#40375, store_sales#40613])\n      :     :  :              +- Exchange hashpartitioning(ca_county#40375, d_qoy#40350, d_year#40346, 200), ENSURE_REQUIREMENTS, [id=#56222]\n      :     :  :                 +- *(14) HashAggregate(keys=[ca_county#40375, d_qoy#40350, d_year#40346], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#40332))], output=[ca_county#40375, d_qoy#40350, d_year#40346, sum#40627L])\n      :     :  :                    +- *(14) Project [ss_ext_sales_price#40332, d_year#40346, d_qoy#40350, ca_county#40375]\n      :     :  :                       +- *(14) BroadcastHashJoin [ss_addr_sk#40323], [ca_address_sk#40368], Inner, BuildRight, false\n      :     :  :                          :- *(14) Project [ss_addr_sk#40323, ss_ext_sales_price#40332, d_year#40346, d_qoy#40350]\n      :     :  :                          :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#40317], [d_date_sk#40340], Inner, BuildRight, false\n      :     :  :                          :     :- *(14) Filter (isnotnull(ss_sold_date_sk#40317) AND isnotnull(ss_addr_sk#40323))\n      :     :  :                          :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#40317, ss_addr_sk#40323, ss_ext_sales_price#40332], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#40317, ss_sold_time_sk#40318, ss_item_sk#40319, ss_customer_sk#40320, ss_cdemo_s..., Partition Cols: []]\n      :     :  :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56003]\n      :     :  :                          :        +- *(12) Filter ((((isnotnull(d_qoy#40350) AND isnotnull(d_year#40346)) AND (d_qoy#40350 = 3)) AND (d_year#40346 = 2000)) AND isnotnull(d_date_sk#40340))\n      :     :  :                          :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#40340, d_year#40346, d_qoy#40350], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#40340, d_date_id#40341, d_date#40342, d_month_seq#40343, d_week_seq#40344, d_quarter_s..., Partition Cols: []]\n      :     :  :                          +- ReusedExchange [ca_address_sk#40368, ca_county#40375], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55953]\n      :     :  +- *(22) Sort [ca_county#40450 ASC NULLS FIRST], false, 0\n      :     :     +- Exchange hashpartitioning(ca_county#40450, 200), ENSURE_REQUIREMENTS, [id=#56311]\n      :     :        +- *(21) HashAggregate(keys=[ca_county#40450, d_qoy#40425, d_year#40421], functions=[sum(UnscaledValue(ws_ext_sales_price#40404))], output=[ca_county#40450, web_sales#40188])\n      :     :           +- Exchange hashpartitioning(ca_county#40450, d_qoy#40425, d_year#40421, 200), ENSURE_REQUIREMENTS, [id=#56288]\n      :     :              +- *(20) HashAggregate(keys=[ca_county#40450, d_qoy#40425, d_year#40421], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#40404))], output=[ca_county#40450, d_qoy#40425, d_year#40421, sum#40629L])\n      :     :                 +- *(20) Project [ws_ext_sales_price#40404, d_year#40421, d_qoy#40425, ca_county#40450]\n      :     :                    +- *(20) BroadcastHashJoin [ws_bill_addr_sk#40388], [ca_address_sk#40443], Inner, BuildRight, false\n      :     :                       :- *(20) Project [ws_bill_addr_sk#40388, ws_ext_sales_price#40404, d_year#40421, d_qoy#40425]\n      :     :                       :  +- *(20) BroadcastHashJoin [ws_sold_date_sk#40381], [d_date_sk#40415], Inner, BuildRight, false\n      :     :                       :     :- *(20) Filter (isnotnull(ws_sold_date_sk#40381) AND isnotnull(ws_bill_addr_sk#40388))\n      :     :                       :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#40381, ws_bill_addr_sk#40388, ws_ext_sales_price#40404], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#40381, ws_sold_time_sk#40382, ws_ship_date_sk#40383, ws_item_sk#40384, ws_bill_c..., Partition Cols: []]\n      :     :                       :     +- ReusedExchange [d_date_sk#40415, d_year#40421, d_qoy#40425], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55946]\n      :     :                       +- ReusedExchange [ca_address_sk#40443, ca_county#40450], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55953]\n      :     +- *(28) Sort [ca_county#40525 ASC NULLS FIRST], false, 0\n      :        +- Exchange hashpartitioning(ca_county#40525, 200), ENSURE_REQUIREMENTS, [id=#56364]\n      :           +- *(27) HashAggregate(keys=[ca_county#40525, d_qoy#40500, d_year#40496], functions=[sum(UnscaledValue(ws_ext_sales_price#40479))], output=[ca_county#40525, web_sales#40614])\n      :              +- Exchange hashpartitioning(ca_county#40525, d_qoy#40500, d_year#40496, 200), ENSURE_REQUIREMENTS, [id=#56341]\n      :                 +- *(26) HashAggregate(keys=[ca_county#40525, d_qoy#40500, d_year#40496], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#40479))], output=[ca_county#40525, d_qoy#40500, d_year#40496, sum#40631L])\n      :                    +- *(26) Project [ws_ext_sales_price#40479, d_year#40496, d_qoy#40500, ca_county#40525]\n      :                       +- *(26) BroadcastHashJoin [ws_bill_addr_sk#40463], [ca_address_sk#40518], Inner, BuildRight, false\n      :                          :- *(26) Project [ws_bill_addr_sk#40463, ws_ext_sales_price#40479, d_year#40496, d_qoy#40500]\n      :                          :  +- *(26) BroadcastHashJoin [ws_sold_date_sk#40456], [d_date_sk#40490], Inner, BuildRight, false\n      :                          :     :- *(26) Filter (isnotnull(ws_sold_date_sk#40456) AND isnotnull(ws_bill_addr_sk#40463))\n      :                          :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#40456, ws_bill_addr_sk#40463, ws_ext_sales_price#40479], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#40456, ws_sold_time_sk#40457, ws_ship_date_sk#40458, ws_item_sk#40459, ws_bill_c..., Partition Cols: []]\n      :                          :     +- ReusedExchange [d_date_sk#40490, d_year#40496, d_qoy#40500], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55973]\n      :                          +- ReusedExchange [ca_address_sk#40518, ca_county#40525], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55953]\n      +- *(34) Sort [ca_county#40600 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(ca_county#40600, 200), ENSURE_REQUIREMENTS, [id=#56430]\n            +- *(33) HashAggregate(keys=[ca_county#40600, d_qoy#40575, d_year#40571], functions=[sum(UnscaledValue(ws_ext_sales_price#40554))], output=[ca_county#40600, web_sales#40615])\n               +- Exchange hashpartitioning(ca_county#40600, d_qoy#40575, d_year#40571, 200), ENSURE_REQUIREMENTS, [id=#56407]\n                  +- *(32) HashAggregate(keys=[ca_county#40600, d_qoy#40575, d_year#40571], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#40554))], output=[ca_county#40600, d_qoy#40575, d_year#40571, sum#40633L])\n                     +- *(32) Project [ws_ext_sales_price#40554, d_year#40571, d_qoy#40575, ca_county#40600]\n                        +- *(32) BroadcastHashJoin [ws_bill_addr_sk#40538], [ca_address_sk#40593], Inner, BuildRight, false\n                           :- *(32) Project [ws_bill_addr_sk#40538, ws_ext_sales_price#40554, d_year#40571, d_qoy#40575]\n                           :  +- *(32) BroadcastHashJoin [ws_sold_date_sk#40531], [d_date_sk#40565], Inner, BuildRight, false\n                           :     :- *(32) Filter (isnotnull(ws_sold_date_sk#40531) AND isnotnull(ws_bill_addr_sk#40538))\n                           :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#40531, ws_bill_addr_sk#40538, ws_ext_sales_price#40554], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#40531, ws_sold_time_sk#40532, ws_ship_date_sk#40533, ws_item_sk#40534, ws_bill_c..., Partition Cols: []]\n                           :     +- ReusedExchange [d_date_sk#40565, d_year#40571, d_qoy#40575], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56003]\n                           +- ReusedExchange [ca_address_sk#40593, ca_county#40600], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#55953]\n",
    "iteration" : 2,
    "name" : "q31"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#56632]\n+- *(8) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(cs_ext_discount_amt#40681))], output=[sum#40810L])\n   +- *(8) Project [cs_ext_discount_amt#40681]\n      +- *(8) BroadcastHashJoin [cs_sold_date_sk#40659], [d_date_sk#40715], Inner, BuildRight, false\n         :- *(8) Project [cs_sold_date_sk#40659, cs_ext_discount_amt#40681]\n         :  +- *(8) SortMergeJoin [i_item_sk#40693], [cs_item_sk#40758], Inner, (cast(cs_ext_discount_amt#40681 as decimal(14,7)) > (CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#40806)\n         :     :- *(3) Sort [i_item_sk#40693 ASC NULLS FIRST], false, 0\n         :     :  +- Exchange hashpartitioning(i_item_sk#40693, 200), ENSURE_REQUIREMENTS, [id=#56570]\n         :     :     +- *(2) Project [cs_sold_date_sk#40659, cs_ext_discount_amt#40681, i_item_sk#40693]\n         :     :        +- *(2) BroadcastHashJoin [cs_item_sk#40674], [i_item_sk#40693], Inner, BuildRight, false\n         :     :           :- *(2) Filter ((isnotnull(cs_item_sk#40674) AND isnotnull(cs_ext_discount_amt#40681)) AND isnotnull(cs_sold_date_sk#40659))\n         :     :           :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#40659, cs_item_sk#40674, cs_ext_discount_amt#40681], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#40659, cs_sold_time_sk#40660, cs_ship_date_sk#40661, cs_bill_customer_sk#40662, ..., Partition Cols: []]\n         :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56565]\n         :     :              +- *(1) Project [i_item_sk#40693]\n         :     :                 +- *(1) Filter ((isnotnull(i_manufact_id#40706) AND (i_manufact_id#40706 = 490)) AND isnotnull(i_item_sk#40693))\n         :     :                    +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#40693, i_manufact_id#40706], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#40693, i_item_id#40694, i_rec_start_date#40695, i_rec_end_date#40696, i_item_desc#4069..., Partition Cols: []]\n         :     +- *(6) Sort [cs_item_sk#40758 ASC NULLS FIRST], false, 0\n         :        +- *(6) Filter isnotnull((CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#40806)\n         :           +- *(6) HashAggregate(keys=[cs_item_sk#40758], functions=[avg(UnscaledValue(cs_ext_discount_amt#40765))], output=[(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#40806, cs_item_sk#40758])\n         :              +- Exchange hashpartitioning(cs_item_sk#40758, 200), ENSURE_REQUIREMENTS, [id=#56587]\n         :                 +- *(5) HashAggregate(keys=[cs_item_sk#40758], functions=[partial_avg(UnscaledValue(cs_ext_discount_amt#40765))], output=[cs_item_sk#40758, sum#40813, count#40814L])\n         :                    +- *(5) Project [cs_item_sk#40758, cs_ext_discount_amt#40765]\n         :                       +- *(5) BroadcastHashJoin [cs_sold_date_sk#40743], [d_date_sk#40777], Inner, BuildRight, false\n         :                          :- *(5) Filter (isnotnull(cs_sold_date_sk#40743) AND isnotnull(cs_item_sk#40758))\n         :                          :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#40743, cs_item_sk#40758, cs_ext_discount_amt#40765], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#40743, cs_sold_time_sk#40744, cs_ship_date_sk#40745, cs_bill_customer_sk#40746, ..., Partition Cols: []]\n         :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56581]\n         :                             +- *(4) Project [d_date_sk#40777]\n         :                                +- *(4) Filter (((isnotnull(d_date#40779) AND (d_date#40779 >= 10618)) AND (d_date#40779 <= 10708)) AND isnotnull(d_date_sk#40777))\n         :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#40779, d_date_sk#40777], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#40777, d_date_id#40778, d_date#40779, d_month_seq#40780, d_week_seq#40781, d_quarter_s..., Partition Cols: []]\n         +- ReusedExchange [d_date_sk#40715], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56581]\n",
    "iteration" : 2,
    "name" : "q32"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manufact_id#40901, 200), ENSURE_REQUIREMENTS, [id=#57263]\n+- *(19) HashAggregate(keys=[i_manufact_id#40901], functions=[partial_sum(total_sales#40819)], output=[i_manufact_id#40901, sum#41179, isEmpty#41180])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_manufact_id#40901], functions=[sum(UnscaledValue(ss_ext_sales_price#40839))], output=[i_manufact_id#40901, total_sales#40819])\n      :  +- Exchange hashpartitioning(i_manufact_id#40901, 200), ENSURE_REQUIREMENTS, [id=#56953]\n      :     +- *(5) HashAggregate(keys=[i_manufact_id#40901], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#40839))], output=[i_manufact_id#40901, sum#41182L])\n      :        +- *(5) Project [ss_ext_sales_price#40839, i_manufact_id#40901]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#40826], [i_item_sk#40888], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#40826, ss_ext_sales_price#40839]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#40830], [ca_address_sk#40875], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#40826, ss_addr_sk#40830, ss_ext_sales_price#40839]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#40824], [d_date_sk#40847], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#40824) AND isnotnull(ss_addr_sk#40830)) AND isnotnull(ss_item_sk#40826))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#40824, ss_item_sk#40826, ss_addr_sk#40830, ss_ext_sales_price#40839], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#40824, ss_sold_time_sk#40825, ss_item_sk#40826, ss_customer_sk#40827, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56925]\n      :              :     :        +- *(1) Project [d_date_sk#40847]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#40853) AND isnotnull(d_moy#40855)) AND (d_year#40853 = 2001)) AND (d_moy#40855 = 1)) AND isnotnull(d_date_sk#40847))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#40847, d_moy#40855, d_year#40853], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#40847, d_date_id#40848, d_date#40849, d_month_seq#40850, d_week_seq#40851, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56933]\n      :              :        +- *(2) Project [ca_address_sk#40875]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#40886) AND (ca_gmt_offset#40886 = -6.00)) AND isnotnull(ca_address_sk#40875))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#40875, ca_gmt_offset#40886], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#40875, ca_address_id#40876, ca_street_number#40877, ca_street_name#40878, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56947]\n      :                 +- *(4) BroadcastHashJoin [i_manufact_id#40901], [i_manufact_id#41117], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#40888)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#40888, i_manufact_id#40901], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#40888, i_item_id#40889, i_rec_start_date#40890, i_rec_end_date#40891, i_item_desc#4089..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56943]\n      :                       +- *(3) Project [i_manufact_id#41117]\n      :                          +- *(3) Filter (isnotnull(i_category#41116) AND (i_category#41116 = Electronics))\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_category#41116, i_manufact_id#41117], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#41104, i_item_id#41105, i_rec_start_date#41106, i_rec_end_date#41107, i_item_desc#4110..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_manufact_id#40998], functions=[sum(UnscaledValue(cs_ext_sales_price#40933))], output=[i_manufact_id#40998, total_sales#40821])\n      :  +- Exchange hashpartitioning(i_manufact_id#40998, 200), ENSURE_REQUIREMENTS, [id=#57127]\n      :     +- *(11) HashAggregate(keys=[i_manufact_id#40998], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#40933))], output=[i_manufact_id#40998, sum#41184L])\n      :        +- *(11) Project [cs_ext_sales_price#40933, i_manufact_id#40998]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#40925], [i_item_sk#40985], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#40925, cs_ext_sales_price#40933]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#40916], [ca_address_sk#40972], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#40916, cs_item_sk#40925, cs_ext_sales_price#40933]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#40910], [d_date_sk#40944], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#40910) AND isnotnull(cs_bill_addr_sk#40916)) AND isnotnull(cs_item_sk#40925))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#40910, cs_bill_addr_sk#40916, cs_item_sk#40925, cs_ext_sales_price#40933], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#40910, cs_sold_time_sk#40911, cs_ship_date_sk#40912, cs_bill_customer_sk#40913, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#40944], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56925]\n      :              :     +- ReusedExchange [ca_address_sk#40972], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56933]\n      :              +- ReusedExchange [i_item_sk#40985, i_manufact_id#40998], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56947]\n      +- *(18) HashAggregate(keys=[i_manufact_id#41095], functions=[sum(UnscaledValue(ws_ext_sales_price#41030))], output=[i_manufact_id#41095, total_sales#40823])\n         +- Exchange hashpartitioning(i_manufact_id#41095, 200), ENSURE_REQUIREMENTS, [id=#57231]\n            +- *(17) HashAggregate(keys=[i_manufact_id#41095], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#41030))], output=[i_manufact_id#41095, sum#41186L])\n               +- *(17) Project [ws_ext_sales_price#41030, i_manufact_id#41095]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#41010], [i_item_sk#41082], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#41010, ws_ext_sales_price#41030]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#41014], [ca_address_sk#41069], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#41010, ws_bill_addr_sk#41014, ws_ext_sales_price#41030]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#41007], [d_date_sk#41041], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#41007) AND isnotnull(ws_bill_addr_sk#41014)) AND isnotnull(ws_item_sk#41010))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#41007, ws_item_sk#41010, ws_bill_addr_sk#41014, ws_ext_sales_price#41030], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#41007, ws_sold_time_sk#41008, ws_ship_date_sk#41009, ws_item_sk#41010, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#41041], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56925]\n                     :     +- ReusedExchange [ca_address_sk#41069], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#56933]\n                     +- ReusedExchange [i_item_sk#41082, i_manufact_id#41095], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#56947]\n",
    "iteration" : 2,
    "name" : "q33"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(c_last_name#41289 ASC NULLS FIRST, c_first_name#41288 ASC NULLS FIRST, c_salutation#41287 ASC NULLS FIRST, c_preferred_cust_flag#41290 DESC NULLS LAST, ss_ticket_number#41204L ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#57413]\n+- *(6) Project [c_last_name#41289, c_first_name#41288, c_salutation#41287, c_preferred_cust_flag#41290, ss_ticket_number#41204L, cnt#41193L]\n   +- *(6) BroadcastHashJoin [ss_customer_sk#41198], [c_customer_sk#41280], Inner, BuildRight, false\n      :- *(6) Filter ((cnt#41193L >= 15) AND (cnt#41193L <= 20))\n      :  +- *(6) HashAggregate(keys=[ss_ticket_number#41204L, ss_customer_sk#41198], functions=[count(1)], output=[ss_ticket_number#41204L, ss_customer_sk#41198, cnt#41193L])\n      :     +- Exchange hashpartitioning(ss_ticket_number#41204L, ss_customer_sk#41198, 200), ENSURE_REQUIREMENTS, [id=#57401]\n      :        +- *(4) HashAggregate(keys=[ss_ticket_number#41204L, ss_customer_sk#41198], functions=[partial_count(1)], output=[ss_ticket_number#41204L, ss_customer_sk#41198, count#41305L])\n      :           +- *(4) Project [ss_customer_sk#41198, ss_ticket_number#41204L]\n      :              +- *(4) BroadcastHashJoin [ss_hdemo_sk#41200], [hd_demo_sk#41275], Inner, BuildRight, false\n      :                 :- *(4) Project [ss_customer_sk#41198, ss_hdemo_sk#41200, ss_ticket_number#41204L]\n      :                 :  +- *(4) BroadcastHashJoin [ss_store_sk#41202], [s_store_sk#41246], Inner, BuildRight, false\n      :                 :     :- *(4) Project [ss_customer_sk#41198, ss_hdemo_sk#41200, ss_store_sk#41202, ss_ticket_number#41204L]\n      :                 :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#41195], [d_date_sk#41218], Inner, BuildRight, false\n      :                 :     :     :- *(4) Filter (((isnotnull(ss_sold_date_sk#41195) AND isnotnull(ss_store_sk#41202)) AND isnotnull(ss_hdemo_sk#41200)) AND isnotnull(ss_customer_sk#41198))\n      :                 :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#41195, ss_customer_sk#41198, ss_hdemo_sk#41200, ss_store_sk#41202, ss_ticket_number#41204L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#41195, ss_sold_time_sk#41196, ss_item_sk#41197, ss_customer_sk#41198, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57379]\n      :                 :     :        +- *(1) Project [d_date_sk#41218]\n      :                 :     :           +- *(1) Filter (((((d_dom#41227 >= 1) AND (d_dom#41227 <= 3)) OR ((d_dom#41227 >= 25) AND (d_dom#41227 <= 28))) AND d_year#41224 IN (1999,2000,2001)) AND isnotnull(d_date_sk#41218))\n      :                 :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#41218, d_dom#41227, d_year#41224], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#41218, d_date_id#41219, d_date#41220, d_month_seq#41221, d_week_seq#41222, d_quarter_s..., Partition Cols: []]\n      :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57387]\n      :                 :        +- *(2) Project [s_store_sk#41246]\n      :                 :           +- *(2) Filter (s_county#41269 IN (Nez Perce County,Murray County,Surry County,Calhoun County,Wilkinson County,Brown County,Wallace County,Carter County) AND isnotnull(s_store_sk#41246))\n      :                 :              +- Scan hive tpcds_sf1_iceberg.store [s_county#41269, s_store_sk#41246], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#41246, s_store_id#41247, s_rec_start_date#41248, s_rec_end_date#41249, s_closed_date_..., Partition Cols: []]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57395]\n      :                    +- *(3) Project [hd_demo_sk#41275]\n      :                       +- *(3) Filter ((((isnotnull(hd_vehicle_count#41279) AND ((hd_buy_potential#41277 = 1001-5000) OR (hd_buy_potential#41277 = Unknown))) AND (hd_vehicle_count#41279 > 0)) AND (CASE WHEN (hd_vehicle_count#41279 > 0) THEN (cast(hd_dep_count#41278 as double) / cast(hd_vehicle_count#41279 as double)) ELSE null END > 1.2)) AND isnotnull(hd_demo_sk#41275))\n      :                          +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#41277, hd_demo_sk#41275, hd_dep_count#41278, hd_vehicle_count#41279], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#41275, hd_income_band_sk#41276, hd_buy_potential#41277, hd_dep_count#41278, hd_vehicl..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#57408]\n         +- *(5) Filter isnotnull(c_customer_sk#41280)\n            +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#41280, c_salutation#41287, c_first_name#41288, c_last_name#41289, c_preferred_cust_flag#41290], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#41280, c_customer_id#41281, c_current_cdemo_sk#41282, c_current_hdemo_sk#41283, c_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q34"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_state#41348, cd_gender#41354, cd_marital_status#41355, cd_dep_count#41359, cd_dep_employed_count#41360, cd_dep_college_count#41361, 200), ENSURE_REQUIREMENTS, [id=#57719]\n+- *(14) HashAggregate(keys=[ca_state#41348, cd_gender#41354, cd_marital_status#41355, cd_dep_count#41359, cd_dep_employed_count#41360, cd_dep_college_count#41361], functions=[partial_count(1), partial_stddev_samp(cast(cd_dep_count#41359 as double)), partial_sum(cast(cd_dep_count#41359 as bigint)), partial_min(cd_dep_count#41359), partial_stddev_samp(cast(cd_dep_employed_count#41360 as double)), partial_sum(cast(cd_dep_employed_count#41360 as bigint)), partial_min(cd_dep_employed_count#41360), partial_stddev_samp(cast(cd_dep_college_count#41361 as double)), partial_sum(cast(cd_dep_college_count#41361 as bigint)), partial_min(cd_dep_college_count#41361)], output=[ca_state#41348, cd_gender#41354, cd_marital_status#41355, cd_dep_count#41359, cd_dep_employed_count#41360, cd_dep_college_count#41361, count#41748L, n#41678, avg#41679, m2#41680, sum#41749L, min#41750, n#41686, avg#41687, m2#41688, sum#41751L, min#41752, n#41694, avg#41695, m2#41696, sum#41753L, min#41754])\n   +- *(14) Project [ca_state#41348, cd_gender#41354, cd_marital_status#41355, cd_dep_count#41359, cd_dep_employed_count#41360, cd_dep_college_count#41361]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#41324], [cd_demo_sk#41353], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#41324, ca_state#41348]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#41326], [ca_address_sk#41340], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#41324, c_current_addr_sk#41326]\n         :     :  +- *(14) Filter (exists#41715 OR exists#41716)\n         :     :     +- SortMergeJoin [c_customer_sk#41322], [cs_ship_customer_sk#41482], ExistenceJoin(exists#41716)\n         :     :        :- SortMergeJoin [c_customer_sk#41322], [ws_bill_customer_sk#41417], ExistenceJoin(exists#41715)\n         :     :        :  :- SortMergeJoin [c_customer_sk#41322], [ss_customer_sk#41365], LeftSemi\n         :     :        :  :  :- *(2) Sort [c_customer_sk#41322 ASC NULLS FIRST], false, 0\n         :     :        :  :  :  +- Exchange hashpartitioning(c_customer_sk#41322, 200), ENSURE_REQUIREMENTS, [id=#57590]\n         :     :        :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#41326) AND isnotnull(c_current_cdemo_sk#41324))\n         :     :        :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#41322, c_current_cdemo_sk#41324, c_current_addr_sk#41326], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#41322, c_customer_id#41323, c_current_cdemo_sk#41324, c_current_hdemo_sk#41325, c_..., Partition Cols: []]\n         :     :        :  :  +- *(5) Sort [ss_customer_sk#41365 ASC NULLS FIRST], false, 0\n         :     :        :  :     +- Exchange hashpartitioning(ss_customer_sk#41365, 200), ENSURE_REQUIREMENTS, [id=#57605]\n         :     :        :  :        +- *(4) Project [ss_customer_sk#41365]\n         :     :        :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#41362], [d_date_sk#41385], Inner, BuildRight, false\n         :     :        :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#41362)\n         :     :        :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#41362, ss_customer_sk#41365], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#41362, ss_sold_time_sk#41363, ss_item_sk#41364, ss_customer_sk#41365, ss_cdemo_s..., Partition Cols: []]\n         :     :        :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57600]\n         :     :        :  :                 +- *(3) Project [d_date_sk#41385]\n         :     :        :  :                    +- *(3) Filter ((((isnotnull(d_year#41391) AND isnotnull(d_qoy#41395)) AND (d_year#41391 = 2002)) AND (d_qoy#41395 < 4)) AND isnotnull(d_date_sk#41385))\n         :     :        :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#41385, d_qoy#41395, d_year#41391], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#41385, d_date_id#41386, d_date#41387, d_month_seq#41388, d_week_seq#41389, d_quarter_s..., Partition Cols: []]\n         :     :        :  +- *(8) Sort [ws_bill_customer_sk#41417 ASC NULLS FIRST], false, 0\n         :     :        :     +- Exchange hashpartitioning(ws_bill_customer_sk#41417, 200), ENSURE_REQUIREMENTS, [id=#57687]\n         :     :        :        +- *(7) Project [ws_bill_customer_sk#41417]\n         :     :        :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#41413], [d_date_sk#41447], Inner, BuildRight, false\n         :     :        :              :- *(7) Filter isnotnull(ws_sold_date_sk#41413)\n         :     :        :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#41413, ws_bill_customer_sk#41417], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#41413, ws_sold_time_sk#41414, ws_ship_date_sk#41415, ws_item_sk#41416, ws_bill_c..., Partition Cols: []]\n         :     :        :              +- ReusedExchange [d_date_sk#41447], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57600]\n         :     :        +- *(11) Sort [cs_ship_customer_sk#41482 ASC NULLS FIRST], false, 0\n         :     :           +- Exchange hashpartitioning(cs_ship_customer_sk#41482, 200), ENSURE_REQUIREMENTS, [id=#57705]\n         :     :              +- *(10) Project [cs_ship_customer_sk#41482]\n         :     :                 +- *(10) BroadcastHashJoin [cs_sold_date_sk#41475], [d_date_sk#41509], Inner, BuildRight, false\n         :     :                    :- *(10) Filter isnotnull(cs_sold_date_sk#41475)\n         :     :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#41475, cs_ship_customer_sk#41482], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#41475, cs_sold_time_sk#41476, cs_ship_date_sk#41477, cs_bill_customer_sk#41478, ..., Partition Cols: []]\n         :     :                    +- ReusedExchange [d_date_sk#41509], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57600]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#57648]\n         :        +- *(12) Filter isnotnull(ca_address_sk#41340)\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#41340, ca_state#41348], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#41340, ca_address_id#41341, ca_street_number#41342, ca_street_name#41343, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#57655]\n            +- *(13) Filter isnotnull(cd_demo_sk#41353)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#41353, cd_gender#41354, cd_marital_status#41355, cd_dep_count#41359, cd_dep_employed_count#41360, cd_dep_college_count#41361], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#41353, cd_gender#41354, cd_marital_status#41355, cd_education_status#41356, cd_purcha..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q35"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#41902, _w2#41903, 200), ENSURE_REQUIREMENTS, [id=#57851]\n+- *(5) HashAggregate(keys=[i_category#41888, i_class#41889, spark_grouping_id#41887L], functions=[sum(UnscaledValue(ss_net_profit#41801)), sum(UnscaledValue(ss_ext_sales_price#41794))], output=[gross_margin#41774, i_category#41888, i_class#41889, lochierarchy#41775, _w1#41902, _w2#41903, _w3#41904])\n   +- Exchange hashpartitioning(i_category#41888, i_class#41889, spark_grouping_id#41887L, 200), ENSURE_REQUIREMENTS, [id=#57847]\n      +- *(4) HashAggregate(keys=[i_category#41888, i_class#41889, spark_grouping_id#41887L], functions=[partial_sum(UnscaledValue(ss_net_profit#41801)), partial_sum(UnscaledValue(ss_ext_sales_price#41794))], output=[i_category#41888, i_class#41889, spark_grouping_id#41887L, sum#41921L, sum#41922L])\n         +- *(4) Expand [List(ss_ext_sales_price#41794, ss_net_profit#41801, i_category#41842, i_class#41840, 0), List(ss_ext_sales_price#41794, ss_net_profit#41801, i_category#41842, null, 1), List(ss_ext_sales_price#41794, ss_net_profit#41801, null, null, 3)], [ss_ext_sales_price#41794, ss_net_profit#41801, i_category#41888, i_class#41889, spark_grouping_id#41887L]\n            +- *(4) Project [ss_ext_sales_price#41794, ss_net_profit#41801, i_category#41842, i_class#41840]\n               +- *(4) BroadcastHashJoin [ss_store_sk#41786], [s_store_sk#41852], Inner, BuildRight, false\n                  :- *(4) Project [ss_store_sk#41786, ss_ext_sales_price#41794, ss_net_profit#41801, i_class#41840, i_category#41842]\n                  :  +- *(4) BroadcastHashJoin [ss_item_sk#41781], [i_item_sk#41830], Inner, BuildRight, false\n                  :     :- *(4) Project [ss_item_sk#41781, ss_store_sk#41786, ss_ext_sales_price#41794, ss_net_profit#41801]\n                  :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#41779], [d_date_sk#41802], Inner, BuildRight, false\n                  :     :     :- *(4) Filter ((isnotnull(ss_sold_date_sk#41779) AND isnotnull(ss_item_sk#41781)) AND isnotnull(ss_store_sk#41786))\n                  :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#41779, ss_item_sk#41781, ss_store_sk#41786, ss_ext_sales_price#41794, ss_net_profit#41801], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#41779, ss_sold_time_sk#41780, ss_item_sk#41781, ss_customer_sk#41782, ss_cdemo_s..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57825]\n                  :     :        +- *(1) Project [d_date_sk#41802]\n                  :     :           +- *(1) Filter ((isnotnull(d_year#41808) AND (d_year#41808 = 2000)) AND isnotnull(d_date_sk#41802))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#41802, d_year#41808], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#41802, d_date_id#41803, d_date#41804, d_month_seq#41805, d_week_seq#41806, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#57832]\n                  :        +- *(2) Filter isnotnull(i_item_sk#41830)\n                  :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#41830, i_class#41840, i_category#41842], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#41830, i_item_id#41831, i_rec_start_date#41832, i_rec_end_date#41833, i_item_desc#4183..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57840]\n                     +- *(3) Project [s_store_sk#41852]\n                        +- *(3) Filter (s_state#41876 IN (MN,TX,IN,CA,LA,NM) AND isnotnull(s_store_sk#41852))\n                           +- Scan hive tpcds_sf1_iceberg.store [s_state#41876, s_store_sk#41852], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#41852, s_store_id#41853, s_rec_start_date#41854, s_rec_end_date#41855, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q36"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#41930, i_item_desc#41933, i_current_price#41934, 200), ENSURE_REQUIREMENTS, [id=#57967]\n+- *(4) HashAggregate(keys=[i_item_id#41930, i_item_desc#41933, i_current_price#41934], functions=[], output=[i_item_id#41930, i_item_desc#41933, i_current_price#41934])\n   +- *(4) Project [i_item_id#41930, i_item_desc#41933, i_current_price#41934]\n      +- *(4) BroadcastHashJoin [i_item_sk#41929], [cs_item_sk#41998], Inner, BuildRight, false\n         :- *(4) Project [i_item_sk#41929, i_item_id#41930, i_item_desc#41933, i_current_price#41934]\n         :  +- *(4) BroadcastHashJoin [inv_date_sk#41951], [d_date_sk#41955], Inner, BuildRight, false\n         :     :- *(4) Project [i_item_sk#41929, i_item_id#41930, i_item_desc#41933, i_current_price#41934, inv_date_sk#41951]\n         :     :  +- *(4) BroadcastHashJoin [i_item_sk#41929], [inv_item_sk#41952], Inner, BuildLeft, false\n         :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57943]\n         :     :     :  +- *(1) Project [i_item_sk#41929, i_item_id#41930, i_item_desc#41933, i_current_price#41934]\n         :     :     :     +- *(1) Filter ((((isnotnull(i_current_price#41934) AND (i_current_price#41934 >= 16.00)) AND (i_current_price#41934 <= 46.00)) AND i_manufact_id#41942 IN (841,790,796,739)) AND isnotnull(i_item_sk#41929))\n         :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_current_price#41934, i_item_desc#41933, i_item_id#41930, i_item_sk#41929, i_manufact_id#41942], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#41929, i_item_id#41930, i_rec_start_date#41931, i_rec_end_date#41932, i_item_desc#4193..., Partition Cols: []]\n         :     :     +- *(4) Project [inv_date_sk#41951, inv_item_sk#41952]\n         :     :        +- *(4) Filter ((((isnotnull(inv_quantity_on_hand#41954) AND (inv_quantity_on_hand#41954 >= 100)) AND (inv_quantity_on_hand#41954 <= 500)) AND isnotnull(inv_item_sk#41952)) AND isnotnull(inv_date_sk#41951))\n         :     :           +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#41951, inv_item_sk#41952, inv_quantity_on_hand#41954], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#41951, inv_item_sk#41952, inv_warehouse_sk#41953, inv_quantity_on_hand#41954], Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#57954]\n         :        +- *(2) Project [d_date_sk#41955]\n         :           +- *(2) Filter (((isnotnull(d_date#41957) AND (d_date#41957 >= 11843)) AND (d_date#41957 <= 11903)) AND isnotnull(d_date_sk#41955))\n         :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#41957, d_date_sk#41955], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#41955, d_date_id#41956, d_date#41957, d_month_seq#41958, d_week_seq#41959, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#57961]\n            +- *(3) Filter isnotnull(cs_item_sk#41998)\n               +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#41998], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#41983, cs_sold_time_sk#41984, cs_ship_date_sk#41985, cs_bill_customer_sk#41986, ..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q37"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#58469]\n+- *(16) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#42257L])\n   +- *(16) HashAggregate(keys=[c_last_name#42085, c_first_name#42084, d_date#42050], functions=[], output=[])\n      +- *(16) HashAggregate(keys=[c_last_name#42085, c_first_name#42084, d_date#42050], functions=[], output=[c_last_name#42085, c_first_name#42084, d_date#42050])\n         +- *(16) HashAggregate(keys=[c_last_name#42085, c_first_name#42084, d_date#42050], functions=[], output=[c_last_name#42085, c_first_name#42084, d_date#42050])\n            +- *(16) HashAggregate(keys=[c_last_name#42085, c_first_name#42084, d_date#42050], functions=[], output=[c_last_name#42085, c_first_name#42084, d_date#42050])\n               +- *(16) HashAggregate(keys=[c_last_name#42085, c_first_name#42084, d_date#42050], functions=[], output=[c_last_name#42085, c_first_name#42084, d_date#42050])\n                  +- Exchange hashpartitioning(c_last_name#42085, c_first_name#42084, d_date#42050, 200), ENSURE_REQUIREMENTS, [id=#58421]\n                     +- *(15) HashAggregate(keys=[c_last_name#42085, c_first_name#42084, d_date#42050], functions=[], output=[c_last_name#42085, c_first_name#42084, d_date#42050])\n                        +- SortMergeJoin [coalesce(c_last_name#42085, ), isnull(c_last_name#42085), coalesce(c_first_name#42084, ), isnull(c_first_name#42084), coalesce(d_date#42050, 0), isnull(d_date#42050)], [coalesce(c_last_name#42245, ), isnull(c_last_name#42245), coalesce(c_first_name#42244, ), isnull(c_first_name#42244), coalesce(d_date#42210, 0), isnull(d_date#42210)], LeftSemi\n                           :- SortMergeJoin [coalesce(c_last_name#42085, ), isnull(c_last_name#42085), coalesce(c_first_name#42084, ), isnull(c_first_name#42084), coalesce(d_date#42050, 0), isnull(d_date#42050)], [coalesce(c_last_name#42165, ), isnull(c_last_name#42165), coalesce(c_first_name#42164, ), isnull(c_first_name#42164), coalesce(d_date#42130, 0), isnull(d_date#42130)], LeftSemi\n                           :  :- *(4) Sort [coalesce(c_last_name#42085, ) ASC NULLS FIRST, isnull(c_last_name#42085) ASC NULLS FIRST, coalesce(c_first_name#42084, ) ASC NULLS FIRST, isnull(c_first_name#42084) ASC NULLS FIRST, coalesce(d_date#42050, 0) ASC NULLS FIRST, isnull(d_date#42050) ASC NULLS FIRST], false, 0\n                           :  :  +- Exchange hashpartitioning(coalesce(c_last_name#42085, ), isnull(c_last_name#42085), coalesce(c_first_name#42084, ), isnull(c_first_name#42084), coalesce(d_date#42050, 0), isnull(d_date#42050), 200), ENSURE_REQUIREMENTS, [id=#58212]\n                           :  :     +- *(3) Project [d_date#42050, c_first_name#42084, c_last_name#42085]\n                           :  :        +- *(3) BroadcastHashJoin [ss_customer_sk#42028], [c_customer_sk#42076], Inner, BuildRight, false\n                           :  :           :- *(3) Project [ss_customer_sk#42028, d_date#42050]\n                           :  :           :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#42025], [d_date_sk#42048], Inner, BuildRight, false\n                           :  :           :     :- *(3) Filter (isnotnull(ss_sold_date_sk#42025) AND isnotnull(ss_customer_sk#42028))\n                           :  :           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#42025, ss_customer_sk#42028], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#42025, ss_sold_time_sk#42026, ss_item_sk#42027, ss_customer_sk#42028, ss_cdemo_s..., Partition Cols: []]\n                           :  :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#58200]\n                           :  :           :        +- *(1) Project [d_date_sk#42048, d_date#42050]\n                           :  :           :           +- *(1) Filter (((isnotnull(d_month_seq#42051) AND (d_month_seq#42051 >= 1203)) AND (d_month_seq#42051 <= 1214)) AND isnotnull(d_date_sk#42048))\n                           :  :           :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#42050, d_date_sk#42048, d_month_seq#42051], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#42048, d_date_id#42049, d_date#42050, d_month_seq#42051, d_week_seq#42052, d_quarter_s..., Partition Cols: []]\n                           :  :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58207]\n                           :  :              +- *(2) Filter isnotnull(c_customer_sk#42076)\n                           :  :                 +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#42076, c_first_name#42084, c_last_name#42085], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#42076, c_customer_id#42077, c_current_cdemo_sk#42078, c_current_hdemo_sk#42079, c_..., Partition Cols: []]\n                           :  +- *(9) Sort [coalesce(c_last_name#42165, ) ASC NULLS FIRST, isnull(c_last_name#42165) ASC NULLS FIRST, coalesce(c_first_name#42164, ) ASC NULLS FIRST, isnull(c_first_name#42164) ASC NULLS FIRST, coalesce(d_date#42130, 0) ASC NULLS FIRST, isnull(d_date#42130) ASC NULLS FIRST], false, 0\n                           :     +- Exchange hashpartitioning(coalesce(c_last_name#42165, ), isnull(c_last_name#42165), coalesce(c_first_name#42164, ), isnull(c_first_name#42164), coalesce(d_date#42130, 0), isnull(d_date#42130), 200), ENSURE_REQUIREMENTS, [id=#58330]\n                           :        +- *(8) HashAggregate(keys=[c_last_name#42165, c_first_name#42164, d_date#42130], functions=[], output=[c_last_name#42165, c_first_name#42164, d_date#42130])\n                           :           +- Exchange hashpartitioning(c_last_name#42165, c_first_name#42164, d_date#42130, 200), ENSURE_REQUIREMENTS, [id=#58326]\n                           :              +- *(7) HashAggregate(keys=[c_last_name#42165, c_first_name#42164, d_date#42130], functions=[], output=[c_last_name#42165, c_first_name#42164, d_date#42130])\n                           :                 +- *(7) Project [c_last_name#42165, c_first_name#42164, d_date#42130]\n                           :                    +- *(7) BroadcastHashJoin [cs_bill_customer_sk#42097], [c_customer_sk#42156], Inner, BuildRight, false\n                           :                       :- *(7) Project [cs_bill_customer_sk#42097, d_date#42130]\n                           :                       :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#42094], [d_date_sk#42128], Inner, BuildRight, false\n                           :                       :     :- *(7) Filter (isnotnull(cs_sold_date_sk#42094) AND isnotnull(cs_bill_customer_sk#42097))\n                           :                       :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#42094, cs_bill_customer_sk#42097], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#42094, cs_sold_time_sk#42095, cs_ship_date_sk#42096, cs_bill_customer_sk#42097, ..., Partition Cols: []]\n                           :                       :     +- ReusedExchange [d_date_sk#42128, d_date#42130], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#58200]\n                           :                       +- ReusedExchange [c_customer_sk#42156, c_first_name#42164, c_last_name#42165], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58207]\n                           +- *(14) Sort [coalesce(c_last_name#42245, ) ASC NULLS FIRST, isnull(c_last_name#42245) ASC NULLS FIRST, coalesce(c_first_name#42244, ) ASC NULLS FIRST, isnull(c_first_name#42244) ASC NULLS FIRST, coalesce(d_date#42210, 0) ASC NULLS FIRST, isnull(d_date#42210) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(c_last_name#42245, ), isnull(c_last_name#42245), coalesce(c_first_name#42244, ), isnull(c_first_name#42244), coalesce(d_date#42210, 0), isnull(d_date#42210), 200), ENSURE_REQUIREMENTS, [id=#58407]\n                                 +- *(13) HashAggregate(keys=[c_last_name#42245, c_first_name#42244, d_date#42210], functions=[], output=[c_last_name#42245, c_first_name#42244, d_date#42210])\n                                    +- Exchange hashpartitioning(c_last_name#42245, c_first_name#42244, d_date#42210, 200), ENSURE_REQUIREMENTS, [id=#58384]\n                                       +- *(12) HashAggregate(keys=[c_last_name#42245, c_first_name#42244, d_date#42210], functions=[], output=[c_last_name#42245, c_first_name#42244, d_date#42210])\n                                          +- *(12) Project [c_last_name#42245, c_first_name#42244, d_date#42210]\n                                             +- *(12) BroadcastHashJoin [ws_bill_customer_sk#42178], [c_customer_sk#42236], Inner, BuildRight, false\n                                                :- *(12) Project [ws_bill_customer_sk#42178, d_date#42210]\n                                                :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#42174], [d_date_sk#42208], Inner, BuildRight, false\n                                                :     :- *(12) Filter (isnotnull(ws_sold_date_sk#42174) AND isnotnull(ws_bill_customer_sk#42178))\n                                                :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#42174, ws_bill_customer_sk#42178], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#42174, ws_sold_time_sk#42175, ws_ship_date_sk#42176, ws_item_sk#42177, ws_bill_c..., Partition Cols: []]\n                                                :     +- ReusedExchange [d_date_sk#42208, d_date#42210], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#58200]\n                                                +- ReusedExchange [c_customer_sk#42236, c_first_name#42244, c_last_name#42245], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58207]\n",
    "iteration" : 2,
    "name" : "q38"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(w_warehouse_sk#42289 ASC NULLS FIRST, i_item_sk#42267 ASC NULLS FIRST, d_moy#42311 ASC NULLS FIRST, mean#42261 ASC NULLS FIRST, cov#42262 ASC NULLS FIRST, d_moy#42379 ASC NULLS FIRST, mean#42453 ASC NULLS FIRST, cov#42451 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#58867]\n+- *(13) SortMergeJoin [i_item_sk#42267, w_warehouse_sk#42289], [i_item_sk#42335, w_warehouse_sk#42357], Inner\n   :- *(6) Sort [i_item_sk#42267 ASC NULLS FIRST, w_warehouse_sk#42289 ASC NULLS FIRST], false, 0\n   :  +- Exchange hashpartitioning(i_item_sk#42267, w_warehouse_sk#42289, 200), ENSURE_REQUIREMENTS, [id=#58686]\n   :     +- *(5) Project [w_warehouse_sk#42289, i_item_sk#42267, d_moy#42311, mean#42261, CASE WHEN (mean#42261 = 0.0) THEN null ELSE (stdev#42260 / mean#42261) END AS cov#42262]\n   :        +- *(5) Filter (CASE WHEN (mean#42261 = 0.0) THEN 0.0 ELSE (stdev#42260 / mean#42261) END > 1.0)\n   :           +- *(5) HashAggregate(keys=[w_warehouse_name#42291, w_warehouse_sk#42289, i_item_sk#42267, d_moy#42311], functions=[stddev_samp(cast(inv_quantity_on_hand#42266 as double)), avg(cast(inv_quantity_on_hand#42266 as bigint))], output=[w_warehouse_sk#42289, i_item_sk#42267, d_moy#42311, stdev#42260, mean#42261])\n   :              +- Exchange hashpartitioning(w_warehouse_name#42291, w_warehouse_sk#42289, i_item_sk#42267, d_moy#42311, 200), ENSURE_REQUIREMENTS, [id=#58680]\n   :                 +- *(4) HashAggregate(keys=[w_warehouse_name#42291, w_warehouse_sk#42289, i_item_sk#42267, d_moy#42311], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#42266 as double)), partial_avg(cast(inv_quantity_on_hand#42266 as bigint))], output=[w_warehouse_name#42291, w_warehouse_sk#42289, i_item_sk#42267, d_moy#42311, n#42440, avg#42441, m2#42442, sum#42474, count#42475L])\n   :                    +- *(4) Project [inv_quantity_on_hand#42266, i_item_sk#42267, w_warehouse_sk#42289, w_warehouse_name#42291, d_moy#42311]\n   :                       +- *(4) BroadcastHashJoin [inv_date_sk#42263], [d_date_sk#42303], Inner, BuildRight, false\n   :                          :- *(4) Project [inv_date_sk#42263, inv_quantity_on_hand#42266, i_item_sk#42267, w_warehouse_sk#42289, w_warehouse_name#42291]\n   :                          :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#42265], [w_warehouse_sk#42289], Inner, BuildRight, false\n   :                          :     :- *(4) Project [inv_date_sk#42263, inv_warehouse_sk#42265, inv_quantity_on_hand#42266, i_item_sk#42267]\n   :                          :     :  +- *(4) BroadcastHashJoin [inv_item_sk#42264], [i_item_sk#42267], Inner, BuildRight, false\n   :                          :     :     :- *(4) Filter ((isnotnull(inv_item_sk#42264) AND isnotnull(inv_warehouse_sk#42265)) AND isnotnull(inv_date_sk#42263))\n   :                          :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#42263, inv_item_sk#42264, inv_warehouse_sk#42265, inv_quantity_on_hand#42266], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#42263, inv_item_sk#42264, inv_warehouse_sk#42265, inv_quantity_on_hand#42266], Partition Cols: []]\n   :                          :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58659]\n   :                          :     :        +- *(1) Filter isnotnull(i_item_sk#42267)\n   :                          :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#42267], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#42267, i_item_id#42268, i_rec_start_date#42269, i_rec_end_date#42270, i_item_desc#4227..., Partition Cols: []]\n   :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58666]\n   :                          :        +- *(2) Filter isnotnull(w_warehouse_sk#42289)\n   :                          :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#42289, w_warehouse_name#42291], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#42289, w_warehouse_id#42290, w_warehouse_name#42291, w_warehouse_sq_ft#42292, w_s..., Partition Cols: []]\n   :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#58674]\n   :                             +- *(3) Project [d_date_sk#42303, d_moy#42311]\n   :                                +- *(3) Filter ((((isnotnull(d_year#42309) AND isnotnull(d_moy#42311)) AND (d_year#42309 = 1999)) AND (d_moy#42311 = 3)) AND isnotnull(d_date_sk#42303))\n   :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#42303, d_moy#42311, d_year#42309], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#42303, d_date_id#42304, d_date#42305, d_month_seq#42306, d_week_seq#42307, d_quarter_s..., Partition Cols: []]\n   +- *(12) Sort [i_item_sk#42335 ASC NULLS FIRST, w_warehouse_sk#42357 ASC NULLS FIRST], false, 0\n      +- Exchange hashpartitioning(i_item_sk#42335, w_warehouse_sk#42357, 200), ENSURE_REQUIREMENTS, [id=#58840]\n         +- *(11) Project [w_warehouse_sk#42357, i_item_sk#42335, d_moy#42379, mean#42453, CASE WHEN (mean#42453 = 0.0) THEN null ELSE (stdev#42452 / mean#42453) END AS cov#42451]\n            +- *(11) Filter (CASE WHEN (mean#42453 = 0.0) THEN 0.0 ELSE (stdev#42452 / mean#42453) END > 1.0)\n               +- *(11) HashAggregate(keys=[w_warehouse_name#42359, w_warehouse_sk#42357, i_item_sk#42335, d_moy#42379], functions=[stddev_samp(cast(inv_quantity_on_hand#42334 as double)), avg(cast(inv_quantity_on_hand#42334 as bigint))], output=[w_warehouse_sk#42357, i_item_sk#42335, d_moy#42379, stdev#42452, mean#42453])\n                  +- Exchange hashpartitioning(w_warehouse_name#42359, w_warehouse_sk#42357, i_item_sk#42335, d_moy#42379, 200), ENSURE_REQUIREMENTS, [id=#58786]\n                     +- *(10) HashAggregate(keys=[w_warehouse_name#42359, w_warehouse_sk#42357, i_item_sk#42335, d_moy#42379], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#42334 as double)), partial_avg(cast(inv_quantity_on_hand#42334 as bigint))], output=[w_warehouse_name#42359, w_warehouse_sk#42357, i_item_sk#42335, d_moy#42379, n#42448, avg#42449, m2#42450, sum#42486, count#42487L])\n                        +- *(10) Project [inv_quantity_on_hand#42334, i_item_sk#42335, w_warehouse_sk#42357, w_warehouse_name#42359, d_moy#42379]\n                           +- *(10) BroadcastHashJoin [inv_date_sk#42331], [d_date_sk#42371], Inner, BuildRight, false\n                              :- *(10) Project [inv_date_sk#42331, inv_quantity_on_hand#42334, i_item_sk#42335, w_warehouse_sk#42357, w_warehouse_name#42359]\n                              :  +- *(10) BroadcastHashJoin [inv_warehouse_sk#42333], [w_warehouse_sk#42357], Inner, BuildRight, false\n                              :     :- *(10) Project [inv_date_sk#42331, inv_warehouse_sk#42333, inv_quantity_on_hand#42334, i_item_sk#42335]\n                              :     :  +- *(10) BroadcastHashJoin [inv_item_sk#42332], [i_item_sk#42335], Inner, BuildRight, false\n                              :     :     :- *(10) Filter ((isnotnull(inv_item_sk#42332) AND isnotnull(inv_warehouse_sk#42333)) AND isnotnull(inv_date_sk#42331))\n                              :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#42331, inv_item_sk#42332, inv_warehouse_sk#42333, inv_quantity_on_hand#42334], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#42331, inv_item_sk#42332, inv_warehouse_sk#42333, inv_quantity_on_hand#42334], Partition Cols: []]\n                              :     :     +- ReusedExchange [i_item_sk#42335], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58659]\n                              :     +- ReusedExchange [w_warehouse_sk#42357, w_warehouse_name#42359], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#58666]\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#58711]\n                                 +- *(9) Project [d_date_sk#42371, d_moy#42379]\n                                    +- *(9) Filter ((((isnotnull(d_year#42377) AND isnotnull(d_moy#42379)) AND (d_year#42377 = 1999)) AND (d_moy#42379 = 4)) AND isnotnull(d_date_sk#42371))\n                                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#42371, d_moy#42379, d_year#42377], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#42371, d_date_id#42372, d_date#42373, d_month_seq#42374, d_week_seq#42375, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q39a"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(w_warehouse_sk#42604 ASC NULLS FIRST, i_item_sk#42582 ASC NULLS FIRST, d_moy#42626 ASC NULLS FIRST, mean#42576 ASC NULLS FIRST, cov#42577 ASC NULLS FIRST, d_moy#42694 ASC NULLS FIRST, mean#42768 ASC NULLS FIRST, cov#42766 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#59265]\n+- *(13) SortMergeJoin [i_item_sk#42582, w_warehouse_sk#42604], [i_item_sk#42650, w_warehouse_sk#42672], Inner\n   :- *(6) Sort [i_item_sk#42582 ASC NULLS FIRST, w_warehouse_sk#42604 ASC NULLS FIRST], false, 0\n   :  +- Exchange hashpartitioning(i_item_sk#42582, w_warehouse_sk#42604, 200), ENSURE_REQUIREMENTS, [id=#59084]\n   :     +- *(5) Project [w_warehouse_sk#42604, i_item_sk#42582, d_moy#42626, mean#42576, CASE WHEN (mean#42576 = 0.0) THEN null ELSE (stdev#42575 / mean#42576) END AS cov#42577]\n   :        +- *(5) Filter ((CASE WHEN (mean#42576 = 0.0) THEN 0.0 ELSE (stdev#42575 / mean#42576) END > 1.0) AND (CASE WHEN (mean#42576 = 0.0) THEN null ELSE (stdev#42575 / mean#42576) END > 1.5))\n   :           +- *(5) HashAggregate(keys=[w_warehouse_name#42606, w_warehouse_sk#42604, i_item_sk#42582, d_moy#42626], functions=[stddev_samp(cast(inv_quantity_on_hand#42581 as double)), avg(cast(inv_quantity_on_hand#42581 as bigint))], output=[w_warehouse_sk#42604, i_item_sk#42582, d_moy#42626, stdev#42575, mean#42576])\n   :              +- Exchange hashpartitioning(w_warehouse_name#42606, w_warehouse_sk#42604, i_item_sk#42582, d_moy#42626, 200), ENSURE_REQUIREMENTS, [id=#59078]\n   :                 +- *(4) HashAggregate(keys=[w_warehouse_name#42606, w_warehouse_sk#42604, i_item_sk#42582, d_moy#42626], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#42581 as double)), partial_avg(cast(inv_quantity_on_hand#42581 as bigint))], output=[w_warehouse_name#42606, w_warehouse_sk#42604, i_item_sk#42582, d_moy#42626, n#42755, avg#42756, m2#42757, sum#42789, count#42790L])\n   :                    +- *(4) Project [inv_quantity_on_hand#42581, i_item_sk#42582, w_warehouse_sk#42604, w_warehouse_name#42606, d_moy#42626]\n   :                       +- *(4) BroadcastHashJoin [inv_date_sk#42578], [d_date_sk#42618], Inner, BuildRight, false\n   :                          :- *(4) Project [inv_date_sk#42578, inv_quantity_on_hand#42581, i_item_sk#42582, w_warehouse_sk#42604, w_warehouse_name#42606]\n   :                          :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#42580], [w_warehouse_sk#42604], Inner, BuildRight, false\n   :                          :     :- *(4) Project [inv_date_sk#42578, inv_warehouse_sk#42580, inv_quantity_on_hand#42581, i_item_sk#42582]\n   :                          :     :  +- *(4) BroadcastHashJoin [inv_item_sk#42579], [i_item_sk#42582], Inner, BuildRight, false\n   :                          :     :     :- *(4) Filter ((isnotnull(inv_item_sk#42579) AND isnotnull(inv_warehouse_sk#42580)) AND isnotnull(inv_date_sk#42578))\n   :                          :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#42578, inv_item_sk#42579, inv_warehouse_sk#42580, inv_quantity_on_hand#42581], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#42578, inv_item_sk#42579, inv_warehouse_sk#42580, inv_quantity_on_hand#42581], Partition Cols: []]\n   :                          :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59057]\n   :                          :     :        +- *(1) Filter isnotnull(i_item_sk#42582)\n   :                          :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#42582], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#42582, i_item_id#42583, i_rec_start_date#42584, i_rec_end_date#42585, i_item_desc#4258..., Partition Cols: []]\n   :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59064]\n   :                          :        +- *(2) Filter isnotnull(w_warehouse_sk#42604)\n   :                          :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#42604, w_warehouse_name#42606], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#42604, w_warehouse_id#42605, w_warehouse_name#42606, w_warehouse_sq_ft#42607, w_s..., Partition Cols: []]\n   :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#59072]\n   :                             +- *(3) Project [d_date_sk#42618, d_moy#42626]\n   :                                +- *(3) Filter ((((isnotnull(d_year#42624) AND isnotnull(d_moy#42626)) AND (d_year#42624 = 1999)) AND (d_moy#42626 = 3)) AND isnotnull(d_date_sk#42618))\n   :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#42618, d_moy#42626, d_year#42624], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#42618, d_date_id#42619, d_date#42620, d_month_seq#42621, d_week_seq#42622, d_quarter_s..., Partition Cols: []]\n   +- *(12) Sort [i_item_sk#42650 ASC NULLS FIRST, w_warehouse_sk#42672 ASC NULLS FIRST], false, 0\n      +- Exchange hashpartitioning(i_item_sk#42650, w_warehouse_sk#42672, 200), ENSURE_REQUIREMENTS, [id=#59238]\n         +- *(11) Project [w_warehouse_sk#42672, i_item_sk#42650, d_moy#42694, mean#42768, CASE WHEN (mean#42768 = 0.0) THEN null ELSE (stdev#42767 / mean#42768) END AS cov#42766]\n            +- *(11) Filter (CASE WHEN (mean#42768 = 0.0) THEN 0.0 ELSE (stdev#42767 / mean#42768) END > 1.0)\n               +- *(11) HashAggregate(keys=[w_warehouse_name#42674, w_warehouse_sk#42672, i_item_sk#42650, d_moy#42694], functions=[stddev_samp(cast(inv_quantity_on_hand#42649 as double)), avg(cast(inv_quantity_on_hand#42649 as bigint))], output=[w_warehouse_sk#42672, i_item_sk#42650, d_moy#42694, stdev#42767, mean#42768])\n                  +- Exchange hashpartitioning(w_warehouse_name#42674, w_warehouse_sk#42672, i_item_sk#42650, d_moy#42694, 200), ENSURE_REQUIREMENTS, [id=#59184]\n                     +- *(10) HashAggregate(keys=[w_warehouse_name#42674, w_warehouse_sk#42672, i_item_sk#42650, d_moy#42694], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#42649 as double)), partial_avg(cast(inv_quantity_on_hand#42649 as bigint))], output=[w_warehouse_name#42674, w_warehouse_sk#42672, i_item_sk#42650, d_moy#42694, n#42763, avg#42764, m2#42765, sum#42801, count#42802L])\n                        +- *(10) Project [inv_quantity_on_hand#42649, i_item_sk#42650, w_warehouse_sk#42672, w_warehouse_name#42674, d_moy#42694]\n                           +- *(10) BroadcastHashJoin [inv_date_sk#42646], [d_date_sk#42686], Inner, BuildRight, false\n                              :- *(10) Project [inv_date_sk#42646, inv_quantity_on_hand#42649, i_item_sk#42650, w_warehouse_sk#42672, w_warehouse_name#42674]\n                              :  +- *(10) BroadcastHashJoin [inv_warehouse_sk#42648], [w_warehouse_sk#42672], Inner, BuildRight, false\n                              :     :- *(10) Project [inv_date_sk#42646, inv_warehouse_sk#42648, inv_quantity_on_hand#42649, i_item_sk#42650]\n                              :     :  +- *(10) BroadcastHashJoin [inv_item_sk#42647], [i_item_sk#42650], Inner, BuildRight, false\n                              :     :     :- *(10) Filter ((isnotnull(inv_item_sk#42647) AND isnotnull(inv_warehouse_sk#42648)) AND isnotnull(inv_date_sk#42646))\n                              :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#42646, inv_item_sk#42647, inv_warehouse_sk#42648, inv_quantity_on_hand#42649], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#42646, inv_item_sk#42647, inv_warehouse_sk#42648, inv_quantity_on_hand#42649], Partition Cols: []]\n                              :     :     +- ReusedExchange [i_item_sk#42650], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59057]\n                              :     +- ReusedExchange [w_warehouse_sk#42672, w_warehouse_name#42674], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59064]\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#59109]\n                                 +- *(9) Project [d_date_sk#42686, d_moy#42694]\n                                    +- *(9) Filter ((((isnotnull(d_year#42692) AND isnotnull(d_moy#42694)) AND (d_year#42692 = 1999)) AND (d_moy#42694 = 4)) AND isnotnull(d_date_sk#42686))\n                                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#42686, d_moy#42694, d_year#42692], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#42686, d_date_id#42687, d_date#42688, d_month_seq#42689, d_week_seq#42690, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q39b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#42890, 200), ENSURE_REQUIREMENTS, [id=#59699]\n+- *(4) Filter (isnotnull(year_total#42898) AND (year_total#42898 > 0.000000))\n   +- *(4) HashAggregate(keys=[c_customer_id#42921, c_first_name#42928, c_last_name#42929, c_preferred_cust_flag#42930, c_birth_country#42934, c_login#42935, c_email_address#42936, d_year#42967], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#42955 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#42954 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#42952 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#42953 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#42890, year_total#42898])\n      +- Exchange hashpartitioning(c_customer_id#42921, c_first_name#42928, c_last_name#42929, c_preferred_cust_flag#42930, c_birth_country#42934, c_login#42935, c_email_address#42936, d_year#42967, 200), ENSURE_REQUIREMENTS, [id=#59694]\n         +- *(3) HashAggregate(keys=[c_customer_id#42921, c_first_name#42928, c_last_name#42929, c_preferred_cust_flag#42930, c_birth_country#42934, c_login#42935, c_email_address#42936, d_year#42967], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#42955 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#42954 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#42952 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#42953 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#42921, c_first_name#42928, c_last_name#42929, c_preferred_cust_flag#42930, c_birth_country#42934, c_login#42935, c_email_address#42936, d_year#42967, sum#44368, isEmpty#44369])\n            +- *(3) Project [c_customer_id#42921, c_first_name#42928, c_last_name#42929, c_preferred_cust_flag#42930, c_birth_country#42934, c_login#42935, c_email_address#42936, ss_ext_discount_amt#42952, ss_ext_sales_price#42953, ss_ext_wholesale_cost#42954, ss_ext_list_price#42955, d_year#42967]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#42938], [d_date_sk#42961], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#42921, c_first_name#42928, c_last_name#42929, c_preferred_cust_flag#42930, c_birth_country#42934, c_login#42935, c_email_address#42936, ss_sold_date_sk#42938, ss_ext_discount_amt#42952, ss_ext_sales_price#42953, ss_ext_wholesale_cost#42954, ss_ext_list_price#42955]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#42920], [ss_customer_sk#42941], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59679]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#42920) AND isnotnull(c_customer_id#42921))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#42920, c_customer_id#42921, c_first_name#42928, c_last_name#42929, c_preferred_cust_flag#42930, c_birth_country#42934, c_login#42935, c_email_address#42936], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#42920, c_customer_id#42921, c_current_cdemo_sk#42922, c_current_hdemo_sk#42923, c_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#42941) AND isnotnull(ss_sold_date_sk#42938))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#42938, ss_customer_sk#42941, ss_ext_discount_amt#42952, ss_ext_sales_price#42953, ss_ext_wholesale_cost#42954, ss_ext_list_price#42955], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#42938, ss_sold_time_sk#42939, ss_item_sk#42940, ss_customer_sk#42941, ss_cdemo_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#59688]\n                     +- *(2) Filter ((isnotnull(d_year#42967) AND (d_year#42967 = 1999)) AND isnotnull(d_date_sk#42961))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#42961, d_year#42967], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#42961, d_date_id#42962, d_date#42963, d_month_seq#42964, d_week_seq#42965, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q4"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_state#44496, i_item_id#44501, 200), ENSURE_REQUIREMENTS, [id=#60322]\n+- *(5) HashAggregate(keys=[w_state#44496, i_item_id#44501], functions=[partial_sum(CASE WHEN (d_date#44524 < 10708) THEN CheckOverflow((promote_precision(cast(cs_sales_price#44446 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#44482 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#44524 >= 10708) THEN CheckOverflow((promote_precision(cast(cs_sales_price#44446 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#44482 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)], output=[w_state#44496, i_item_id#44501, sum#44562, isEmpty#44563, sum#44564, isEmpty#44565])\n   +- *(5) Project [cs_sales_price#44446, cr_refunded_cash#44482, w_state#44496, i_item_id#44501, d_date#44524]\n      +- *(5) BroadcastHashJoin [cs_sold_date_sk#44425], [d_date_sk#44522], Inner, BuildRight, false\n         :- *(5) Project [cs_sold_date_sk#44425, cs_sales_price#44446, cr_refunded_cash#44482, w_state#44496, i_item_id#44501]\n         :  +- *(5) BroadcastHashJoin [cs_item_sk#44440], [i_item_sk#44500], Inner, BuildRight, false\n         :     :- *(5) Project [cs_sold_date_sk#44425, cs_item_sk#44440, cs_sales_price#44446, cr_refunded_cash#44482, w_state#44496]\n         :     :  +- *(5) BroadcastHashJoin [cs_warehouse_sk#44439], [w_warehouse_sk#44486], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#44425, cs_warehouse_sk#44439, cs_item_sk#44440, cs_sales_price#44446, cr_refunded_cash#44482]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_order_number#44442L, cs_item_sk#44440], [cr_order_number#44475L, cr_item_sk#44461], LeftOuter, BuildRight, false\n         :     :     :     :- *(5) Filter ((isnotnull(cs_warehouse_sk#44439) AND isnotnull(cs_item_sk#44440)) AND isnotnull(cs_sold_date_sk#44425))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#44425, cs_warehouse_sk#44439, cs_item_sk#44440, cs_order_number#44442L, cs_sales_price#44446], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#44425, cs_sold_time_sk#44426, cs_ship_date_sk#44427, cs_bill_customer_sk#44428, ..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#60294]\n         :     :     :        +- *(1) Filter (isnotnull(cr_order_number#44475L) AND isnotnull(cr_item_sk#44461))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#44461, cr_order_number#44475L, cr_refunded_cash#44482], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#44459, cr_returned_time_sk#44460, cr_item_sk#44461, cr_refunded_customer_sk#..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#60301]\n         :     :        +- *(2) Filter isnotnull(w_warehouse_sk#44486)\n         :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#44486, w_state#44496], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#44486, w_warehouse_id#44487, w_warehouse_name#44488, w_warehouse_sq_ft#44489, w_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60309]\n         :        +- *(3) Project [i_item_sk#44500, i_item_id#44501]\n         :           +- *(3) Filter (((isnotnull(i_current_price#44505) AND (i_current_price#44505 >= 0.99)) AND (i_current_price#44505 <= 1.49)) AND isnotnull(i_item_sk#44500))\n         :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#44505, i_item_id#44501, i_item_sk#44500], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#44500, i_item_id#44501, i_rec_start_date#44502, i_rec_end_date#44503, i_item_desc#4450..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#60316]\n            +- *(4) Filter (((isnotnull(d_date#44524) AND (d_date#44524 >= 10678)) AND (d_date#44524 <= 10738)) AND isnotnull(d_date_sk#44522))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#44522, d_date#44524], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#44522, d_date_id#44523, d_date#44524, d_month_seq#44525, d_week_seq#44526, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q40"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_product_name#44594, 200), ENSURE_REQUIREMENTS, [id=#60408]\n+- *(3) HashAggregate(keys=[i_product_name#44594], functions=[], output=[i_product_name#44594])\n   +- *(3) Project [i_product_name#44594]\n      +- *(3) BroadcastHashJoin [i_manufact#44587], [i_manufact#44610], Inner, BuildRight, false\n         :- *(3) Project [i_manufact#44587, i_product_name#44594]\n         :  +- *(3) Filter (((isnotnull(i_manufact_id#44586) AND (i_manufact_id#44586 >= 841)) AND (i_manufact_id#44586 <= 881)) AND isnotnull(i_manufact#44587))\n         :     +- Scan hive tpcds_sf1_iceberg.item [i_manufact#44587, i_manufact_id#44586, i_product_name#44594], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#44573, i_item_id#44574, i_rec_start_date#44575, i_rec_end_date#44576, i_item_desc#4457..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#60402]\n            +- *(2) Project [i_manufact#44610]\n               +- *(2) Filter (item_cnt#44571L > 0)\n                  +- *(2) HashAggregate(keys=[i_manufact#44610], functions=[count(1)], output=[item_cnt#44571L, i_manufact#44610])\n                     +- Exchange hashpartitioning(i_manufact#44610, 200), ENSURE_REQUIREMENTS, [id=#60396]\n                        +- *(1) HashAggregate(keys=[i_manufact#44610], functions=[partial_count(1)], output=[i_manufact#44610, count#44622L])\n                           +- *(1) Project [i_manufact#44610]\n                              +- *(1) Filter (((((i_category#44608 = Women) AND (((((i_color#44613 = bisque) OR (i_color#44613 = khaki)) AND ((i_units#44614 = Carton) OR (i_units#44614 = Box))) AND ((i_size#44611 = large) OR (i_size#44611 = extra large))) OR ((((i_color#44613 = antique) OR (i_color#44613 = sandy)) AND ((i_units#44614 = Pallet) OR (i_units#44614 = Cup))) AND ((i_size#44611 = petite) OR (i_size#44611 = small))))) OR ((i_category#44608 = Men) AND (((((i_color#44613 = forest) OR (i_color#44613 = brown)) AND ((i_units#44614 = Dram) OR (i_units#44614 = Ton))) AND ((i_size#44611 = economy) OR (i_size#44611 = medium))) OR ((((i_color#44613 = chartreuse) OR (i_color#44613 = light)) AND ((i_units#44614 = Pound) OR (i_units#44614 = Dozen))) AND ((i_size#44611 = large) OR (i_size#44611 = extra large)))))) OR (((i_category#44608 = Women) AND (((((i_color#44613 = turquoise) OR (i_color#44613 = chocolate)) AND ((i_units#44614 = Bundle) OR (i_units#44614 = Unknown))) AND ((i_size#44611 = large) OR (i_size#44611 = extra large))) OR ((((i_color#44613 = maroon) OR (i_color#44613 = pale)) AND ((i_units#44614 = Each) OR (i_units#44614 = Tbl))) AND ((i_size#44611 = petite) OR (i_size#44611 = small))))) OR ((i_category#44608 = Men) AND (((((i_color#44613 = almond) OR (i_color#44613 = floral)) AND ((i_units#44614 = Gross) OR (i_units#44614 = N/A))) AND ((i_size#44611 = economy) OR (i_size#44611 = medium))) OR ((((i_color#44613 = drab) OR (i_color#44613 = plum)) AND ((i_units#44614 = Bunch) OR (i_units#44614 = Case))) AND ((i_size#44611 = large) OR (i_size#44611 = extra large))))))) AND isnotnull(i_manufact#44610))\n                                 +- Scan hive tpcds_sf1_iceberg.item [i_category#44608, i_color#44613, i_manufact#44610, i_size#44611, i_units#44614], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#44596, i_item_id#44597, i_rec_start_date#44598, i_rec_end_date#44599, i_item_desc#4460..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q41"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#44631, i_category_id#44687, i_category#44688, 200), ENSURE_REQUIREMENTS, [id=#60492]\n+- *(3) HashAggregate(keys=[d_year#44631, i_category_id#44687, i_category#44688], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#44668))], output=[d_year#44631, i_category_id#44687, i_category#44688, sum#44710L])\n   +- *(3) Project [d_year#44631, ss_ext_sales_price#44668, i_category_id#44687, i_category#44688]\n      +- *(3) BroadcastHashJoin [ss_item_sk#44655], [i_item_sk#44676], Inner, BuildRight, false\n         :- *(3) Project [d_year#44631, ss_item_sk#44655, ss_ext_sales_price#44668]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#44625], [ss_sold_date_sk#44653], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60476]\n         :     :  +- *(1) Project [d_date_sk#44625, d_year#44631]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#44633) AND isnotnull(d_year#44631)) AND (d_moy#44633 = 11)) AND (d_year#44631 = 2002)) AND isnotnull(d_date_sk#44625))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#44625, d_moy#44633, d_year#44631], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#44625, d_date_id#44626, d_date#44627, d_month_seq#44628, d_week_seq#44629, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#44653) AND isnotnull(ss_item_sk#44655))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#44653, ss_item_sk#44655, ss_ext_sales_price#44668], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#44653, ss_sold_time_sk#44654, ss_item_sk#44655, ss_customer_sk#44656, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60486]\n            +- *(2) Project [i_item_sk#44676, i_category_id#44687, i_category#44688]\n               +- *(2) Filter ((isnotnull(i_manager_id#44696) AND (i_manager_id#44696 = 1)) AND isnotnull(i_item_sk#44676))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_category#44688, i_category_id#44687, i_item_sk#44676, i_manager_id#44696], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#44676, i_item_id#44677, i_rec_start_date#44678, i_rec_end_date#44679, i_item_desc#4468..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q42"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#44779, s_store_id#44775, 200), ENSURE_REQUIREMENTS, [id=#60576]\n+- *(3) HashAggregate(keys=[s_store_name#44779, s_store_id#44775], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#44737 = Sunday) THEN ss_sales_price#44764 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#44737 = Monday) THEN ss_sales_price#44764 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#44737 = Tuesday) THEN ss_sales_price#44764 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#44737 = Wednesday) THEN ss_sales_price#44764 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#44737 = Thursday) THEN ss_sales_price#44764 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#44737 = Friday) THEN ss_sales_price#44764 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#44737 = Saturday) THEN ss_sales_price#44764 ELSE null END))], output=[s_store_name#44779, s_store_id#44775, sum#44835L, sum#44836L, sum#44837L, sum#44838L, sum#44839L, sum#44840L, sum#44841L])\n   +- *(3) Project [d_day_name#44737, ss_sales_price#44764, s_store_id#44775, s_store_name#44779]\n      +- *(3) BroadcastHashJoin [ss_store_sk#44758], [s_store_sk#44774], Inner, BuildRight, false\n         :- *(3) Project [d_day_name#44737, ss_store_sk#44758, ss_sales_price#44764]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#44723], [ss_sold_date_sk#44751], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60560]\n         :     :  +- *(1) Project [d_date_sk#44723, d_day_name#44737]\n         :     :     +- *(1) Filter ((isnotnull(d_year#44729) AND (d_year#44729 = 2002)) AND isnotnull(d_date_sk#44723))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#44723, d_day_name#44737, d_year#44729], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#44723, d_date_id#44724, d_date#44725, d_month_seq#44726, d_week_seq#44727, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#44751) AND isnotnull(ss_store_sk#44758))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#44751, ss_store_sk#44758, ss_sales_price#44764], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#44751, ss_sold_time_sk#44752, ss_item_sk#44753, ss_customer_sk#44754, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#60570]\n            +- *(2) Project [s_store_sk#44774, s_store_id#44775, s_store_name#44779]\n               +- *(2) Filter ((isnotnull(s_gmt_offset#44801) AND (s_gmt_offset#44801 = -5.00)) AND isnotnull(s_store_sk#44774))\n                  +- Scan hive tpcds_sf1_iceberg.store [s_gmt_offset#44801, s_store_id#44775, s_store_name#44779, s_store_sk#44774], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#44774, s_store_id#44775, s_rec_start_date#44776, s_rec_end_date#44777, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q43"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 2,
    "name" : "q44"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_zip#45147, ca_state#45146, 200), ENSURE_REQUIREMENTS, [id=#61139]\n+- *(6) HashAggregate(keys=[ca_zip#45147, ca_state#45146], functions=[partial_sum(UnscaledValue(ws_sales_price#45107))], output=[ca_zip#45147, ca_state#45146, sum#45232L])\n   +- *(6) Project [ws_sales_price#45107, ca_state#45146, ca_zip#45147]\n      +- *(6) Filter (substr(ca_zip#45147, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#45230)\n         +- *(6) BroadcastHashJoin [i_item_id#45180], [i_item_id#45202], ExistenceJoin(exists#45230), BuildRight, false\n            :- *(6) Project [ws_sales_price#45107, ca_state#45146, ca_zip#45147, i_item_id#45180]\n            :  +- *(6) BroadcastHashJoin [ws_item_sk#45089], [i_item_sk#45179], Inner, BuildRight, false\n            :     :- *(6) Project [ws_item_sk#45089, ws_sales_price#45107, ca_state#45146, ca_zip#45147]\n            :     :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#45086], [d_date_sk#45151], Inner, BuildRight, false\n            :     :     :- *(6) Project [ws_sold_date_sk#45086, ws_item_sk#45089, ws_sales_price#45107, ca_state#45146, ca_zip#45147]\n            :     :     :  +- *(6) BroadcastHashJoin [c_current_addr_sk#45124], [ca_address_sk#45138], Inner, BuildRight, false\n            :     :     :     :- *(6) Project [ws_sold_date_sk#45086, ws_item_sk#45089, ws_sales_price#45107, c_current_addr_sk#45124]\n            :     :     :     :  +- *(6) BroadcastHashJoin [ws_bill_customer_sk#45090], [c_customer_sk#45120], Inner, BuildRight, false\n            :     :     :     :     :- *(6) Filter ((isnotnull(ws_bill_customer_sk#45090) AND isnotnull(ws_sold_date_sk#45086)) AND isnotnull(ws_item_sk#45089))\n            :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#45086, ws_item_sk#45089, ws_bill_customer_sk#45090, ws_sales_price#45107], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#45086, ws_sold_time_sk#45087, ws_ship_date_sk#45088, ws_item_sk#45089, ws_bill_c..., Partition Cols: []]\n            :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61102]\n            :     :     :     :        +- *(1) Filter (isnotnull(c_customer_sk#45120) AND isnotnull(c_current_addr_sk#45124))\n            :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#45120, c_current_addr_sk#45124], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#45120, c_customer_id#45121, c_current_cdemo_sk#45122, c_current_hdemo_sk#45123, c_..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61109]\n            :     :     :        +- *(2) Filter isnotnull(ca_address_sk#45138)\n            :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#45138, ca_state#45146, ca_zip#45147], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#45138, ca_address_id#45139, ca_street_number#45140, ca_street_name#45141, ca_stree..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#61117]\n            :     :        +- *(3) Project [d_date_sk#45151]\n            :     :           +- *(3) Filter ((((isnotnull(d_qoy#45161) AND isnotnull(d_year#45157)) AND (d_qoy#45161 = 2)) AND (d_year#45157 = 2002)) AND isnotnull(d_date_sk#45151))\n            :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#45151, d_qoy#45161, d_year#45157], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#45151, d_date_id#45152, d_date#45153, d_month_seq#45154, d_week_seq#45155, d_quarter_s..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61124]\n            :        +- *(4) Filter isnotnull(i_item_sk#45179)\n            :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#45179, i_item_id#45180], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#45179, i_item_id#45180, i_rec_start_date#45181, i_rec_end_date#45182, i_item_desc#4518..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#61132]\n               +- *(5) Project [i_item_id#45202]\n                  +- *(5) Filter i_item_sk#45201 IN (2,3,5,7,11,13,17,19,23,29)\n                     +- Scan hive tpcds_sf1_iceberg.item [i_item_id#45202, i_item_sk#45201], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#45201, i_item_id#45202, i_rec_start_date#45203, i_rec_end_date#45204, i_item_desc#4520..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q45"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 2,
    "name" : "q46"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, rn#45392, 200), ENSURE_REQUIREMENTS, [id=#61699]\n+- *(9) Filter (((((isnotnull(d_year#45452) AND isnotnull(avg_monthly_sales#45391)) AND (d_year#45452 = 2001)) AND (avg_monthly_sales#45391 > 0.000000)) AND (CASE WHEN (avg_monthly_sales#45391 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#45390 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#45391 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#45391 as decimal(22,6)))), DecimalType(38,16), true) ELSE null END > 0.1000000000000000)) AND isnotnull(rn#45392))\n   +- Window [rank(d_year#45452, d_moy#45454) windowspecdefinition(i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452 ASC NULLS FIRST, d_moy#45454 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#45392], [i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491], [d_year#45452 ASC NULLS FIRST, d_moy#45454 ASC NULLS FIRST]\n      +- *(8) Sort [i_category#45413 ASC NULLS FIRST, i_brand#45409 ASC NULLS FIRST, s_store_name#45479 ASC NULLS FIRST, s_company_name#45491 ASC NULLS FIRST, d_year#45452 ASC NULLS FIRST, d_moy#45454 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, 200), ENSURE_REQUIREMENTS, [id=#61691]\n            +- *(7) Project [i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452, d_moy#45454, sum_sales#45390, avg_monthly_sales#45391]\n               +- Window [avg(_w0#45740) windowspecdefinition(i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#45391], [i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452]\n                  +- *(6) Sort [i_category#45413 ASC NULLS FIRST, i_brand#45409 ASC NULLS FIRST, s_store_name#45479 ASC NULLS FIRST, s_company_name#45491 ASC NULLS FIRST, d_year#45452 ASC NULLS FIRST], false, 0\n                     +- Exchange hashpartitioning(i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452, 200), ENSURE_REQUIREMENTS, [id=#61683]\n                        +- *(5) HashAggregate(keys=[i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452, d_moy#45454], functions=[sum(UnscaledValue(ss_sales_price#45436))], output=[i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452, d_moy#45454, sum_sales#45390, _w0#45740])\n                           +- Exchange hashpartitioning(i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452, d_moy#45454, 200), ENSURE_REQUIREMENTS, [id=#61679]\n                              +- *(4) HashAggregate(keys=[i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452, d_moy#45454], functions=[partial_sum(UnscaledValue(ss_sales_price#45436))], output=[i_category#45413, i_brand#45409, s_store_name#45479, s_company_name#45491, d_year#45452, d_moy#45454, sum#45882L])\n                                 +- *(4) Project [i_brand#45409, i_category#45413, ss_sales_price#45436, d_year#45452, d_moy#45454, s_store_name#45479, s_company_name#45491]\n                                    +- *(4) BroadcastHashJoin [ss_store_sk#45430], [s_store_sk#45474], Inner, BuildRight, false\n                                       :- *(4) Project [i_brand#45409, i_category#45413, ss_store_sk#45430, ss_sales_price#45436, d_year#45452, d_moy#45454]\n                                       :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#45423], [d_date_sk#45446], Inner, BuildRight, false\n                                       :     :- *(4) Project [i_brand#45409, i_category#45413, ss_sold_date_sk#45423, ss_store_sk#45430, ss_sales_price#45436]\n                                       :     :  +- *(4) BroadcastHashJoin [i_item_sk#45401], [ss_item_sk#45425], Inner, BuildLeft, false\n                                       :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61657]\n                                       :     :     :  +- *(1) Filter ((isnotnull(i_item_sk#45401) AND isnotnull(i_category#45413)) AND isnotnull(i_brand#45409))\n                                       :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#45401, i_brand#45409, i_category#45413], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#45401, i_item_id#45402, i_rec_start_date#45403, i_rec_end_date#45404, i_item_desc#4540..., Partition Cols: []]\n                                       :     :     +- *(4) Filter ((isnotnull(ss_item_sk#45425) AND isnotnull(ss_sold_date_sk#45423)) AND isnotnull(ss_store_sk#45430))\n                                       :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#45423, ss_item_sk#45425, ss_store_sk#45430, ss_sales_price#45436], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#45423, ss_sold_time_sk#45424, ss_item_sk#45425, ss_customer_sk#45426, ss_cdemo_s..., Partition Cols: []]\n                                       :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61666]\n                                       :        +- *(2) Filter ((((d_year#45452 = 2001) OR ((d_year#45452 = 2000) AND (d_moy#45454 = 12))) OR ((d_year#45452 = 2002) AND (d_moy#45454 = 1))) AND isnotnull(d_date_sk#45446))\n                                       :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#45446, d_year#45452, d_moy#45454], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#45446, d_date_id#45447, d_date#45448, d_month_seq#45449, d_week_seq#45450, d_quarter_s..., Partition Cols: []]\n                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#61673]\n                                          +- *(3) Filter ((isnotnull(s_store_sk#45474) AND isnotnull(s_store_name#45479)) AND isnotnull(s_company_name#45491))\n                                             +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#45474, s_store_name#45479, s_company_name#45491], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#45474, s_store_id#45475, s_rec_start_date#45476, s_rec_end_date#45477, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q47"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#62164]\n+- *(5) HashAggregate(keys=[], functions=[partial_sum(cast(ss_quantity#45931 as bigint))], output=[sum#46027L])\n   +- *(5) Project [ss_quantity#45931]\n      +- *(5) BroadcastHashJoin [ss_sold_date_sk#45921], [d_date_sk#45995], Inner, BuildRight, false\n         :- *(5) Project [ss_sold_date_sk#45921, ss_quantity#45931]\n         :  +- *(5) BroadcastHashJoin [ss_addr_sk#45927], [ca_address_sk#45982], Inner, BuildRight, ((((ca_state#45990 IN (MT,OH,GA) AND (ss_net_profit#45943 >= 0.00)) AND (ss_net_profit#45943 <= 2000.00)) OR ((ca_state#45990 IN (WV,AZ,NM) AND (ss_net_profit#45943 >= 150.00)) AND (ss_net_profit#45943 <= 3000.00))) OR ((ca_state#45990 IN (NY,PA,KY) AND (ss_net_profit#45943 >= 50.00)) AND (ss_net_profit#45943 <= 25000.00))), false\n         :     :- *(5) Project [ss_sold_date_sk#45921, ss_addr_sk#45927, ss_quantity#45931, ss_net_profit#45943]\n         :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#45925], [cd_demo_sk#45973], Inner, BuildRight, ((((((cd_marital_status#45975 = U) AND (cd_education_status#45976 = 2 yr Degree)) AND (ss_sales_price#45934 >= 100.00)) AND (ss_sales_price#45934 <= 150.00)) OR ((((cd_marital_status#45975 = S) AND (cd_education_status#45976 = Primary)) AND (ss_sales_price#45934 >= 50.00)) AND (ss_sales_price#45934 <= 100.00))) OR ((((cd_marital_status#45975 = W) AND (cd_education_status#45976 = 4 yr Degree)) AND (ss_sales_price#45934 >= 150.00)) AND (ss_sales_price#45934 <= 200.00))), false\n         :     :     :- *(5) Project [ss_sold_date_sk#45921, ss_cdemo_sk#45925, ss_addr_sk#45927, ss_quantity#45931, ss_sales_price#45934, ss_net_profit#45943]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_store_sk#45928], [s_store_sk#45944], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((((isnotnull(ss_store_sk#45928) AND isnotnull(ss_cdemo_sk#45925)) AND isnotnull(ss_addr_sk#45927)) AND isnotnull(ss_sold_date_sk#45921)) AND ((((ss_sales_price#45934 >= 100.00) AND (ss_sales_price#45934 <= 150.00)) OR ((ss_sales_price#45934 >= 50.00) AND (ss_sales_price#45934 <= 100.00))) OR ((ss_sales_price#45934 >= 150.00) AND (ss_sales_price#45934 <= 200.00)))) AND ((((ss_net_profit#45943 >= 0.00) AND (ss_net_profit#45943 <= 2000.00)) OR ((ss_net_profit#45943 >= 150.00) AND (ss_net_profit#45943 <= 3000.00))) OR ((ss_net_profit#45943 >= 50.00) AND (ss_net_profit#45943 <= 25000.00))))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#45921, ss_cdemo_sk#45925, ss_addr_sk#45927, ss_store_sk#45928, ss_quantity#45931, ss_sales_price#45934, ss_net_profit#45943], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#45921, ss_sold_time_sk#45922, ss_item_sk#45923, ss_customer_sk#45924, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#62135]\n         :     :     :        +- *(1) Filter isnotnull(s_store_sk#45944)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#45944], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#45944, s_store_id#45945, s_rec_start_date#45946, s_rec_end_date#45947, s_closed_date_..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#62142]\n         :     :        +- *(2) Filter (isnotnull(cd_demo_sk#45973) AND ((((cd_marital_status#45975 = U) AND (cd_education_status#45976 = 2 yr Degree)) OR ((cd_marital_status#45975 = S) AND (cd_education_status#45976 = Primary))) OR ((cd_marital_status#45975 = W) AND (cd_education_status#45976 = 4 yr Degree))))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#45973, cd_marital_status#45975, cd_education_status#45976], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#45973, cd_gender#45974, cd_marital_status#45975, cd_education_status#45976, cd_purcha..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62150]\n         :        +- *(3) Project [ca_address_sk#45982, ca_state#45990]\n         :           +- *(3) Filter (((isnotnull(ca_country#45992) AND (ca_country#45992 = United States)) AND isnotnull(ca_address_sk#45982)) AND ((ca_state#45990 IN (MT,OH,GA) OR ca_state#45990 IN (WV,AZ,NM)) OR ca_state#45990 IN (NY,PA,KY)))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#45982, ca_country#45992, ca_state#45990], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#45982, ca_address_id#45983, ca_street_number#45984, ca_street_name#45985, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62158]\n            +- *(4) Project [d_date_sk#45995]\n               +- *(4) Filter ((isnotnull(d_year#46001) AND (d_year#46001 = 2000)) AND isnotnull(d_date_sk#45995))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#45995, d_year#46001], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#45995, d_date_id#45996, d_date#45997, d_month_seq#45998, d_week_seq#45999, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q48"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#46035, item#46030, return_ratio#46031, return_rank#46033, currency_rank#46034, 200), ENSURE_REQUIREMENTS, [id=#62720]\n+- *(22) HashAggregate(keys=[channel#46035, item#46030, return_ratio#46031, return_rank#46033, currency_rank#46034], functions=[], output=[channel#46035, item#46030, return_ratio#46031, return_rank#46033, currency_rank#46034])\n   +- Union\n      :- *(7) Project [web AS channel#46035, item#46030, return_ratio#46031, return_rank#46033, currency_rank#46034]\n      :  +- *(7) Filter ((return_rank#46033 <= 10) OR (currency_rank#46034 <= 10))\n      :     +- Window [rank(currency_ratio#46032) windowspecdefinition(currency_ratio#46032 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#46034], [currency_ratio#46032 ASC NULLS FIRST]\n      :        +- *(6) Sort [currency_ratio#46032 ASC NULLS FIRST], false, 0\n      :           +- Window [rank(return_ratio#46031) windowspecdefinition(return_ratio#46031 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#46033], [return_ratio#46031 ASC NULLS FIRST]\n      :              +- *(5) Sort [return_ratio#46031 ASC NULLS FIRST], false, 0\n      :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#62454]\n      :                    +- *(4) HashAggregate(keys=[ws_item_sk#46063], functions=[sum(cast(coalesce(wr_return_quantity#46108, 0) as bigint)), sum(cast(coalesce(ws_quantity#46078, 0) as bigint)), sum(coalesce(cast(wr_return_amt#46109 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#46089 as decimal(12,2)), 0.00))], output=[item#46030, return_ratio#46031, currency_ratio#46032])\n      :                       +- Exchange hashpartitioning(ws_item_sk#46063, 200), ENSURE_REQUIREMENTS, [id=#62450]\n      :                          +- *(3) HashAggregate(keys=[ws_item_sk#46063], functions=[partial_sum(cast(coalesce(wr_return_quantity#46108, 0) as bigint)), partial_sum(cast(coalesce(ws_quantity#46078, 0) as bigint)), partial_sum(coalesce(cast(wr_return_amt#46109 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#46089 as decimal(12,2)), 0.00))], output=[ws_item_sk#46063, sum#46383L, sum#46384L, sum#46385, isEmpty#46386, sum#46387, isEmpty#46388])\n      :                             +- *(3) Project [ws_item_sk#46063, ws_quantity#46078, ws_net_paid#46089, wr_return_quantity#46108, wr_return_amt#46109]\n      :                                +- *(3) BroadcastHashJoin [ws_sold_date_sk#46060], [d_date_sk#46118], Inner, BuildRight, false\n      :                                   :- *(3) Project [ws_sold_date_sk#46060, ws_item_sk#46063, ws_quantity#46078, ws_net_paid#46089, wr_return_quantity#46108, wr_return_amt#46109]\n      :                                   :  +- *(3) BroadcastHashJoin [ws_order_number#46077L, ws_item_sk#46063], [wr_order_number#46107L, wr_item_sk#46096], Inner, BuildRight, false\n      :                                   :     :- *(3) Project [ws_sold_date_sk#46060, ws_item_sk#46063, ws_order_number#46077L, ws_quantity#46078, ws_net_paid#46089]\n      :                                   :     :  +- *(3) Filter ((((((((isnotnull(ws_net_profit#46093) AND isnotnull(ws_net_paid#46089)) AND isnotnull(ws_quantity#46078)) AND (ws_net_profit#46093 > 1.00)) AND (ws_net_paid#46089 > 0.00)) AND (ws_quantity#46078 > 0)) AND isnotnull(ws_order_number#46077L)) AND isnotnull(ws_item_sk#46063)) AND isnotnull(ws_sold_date_sk#46060))\n      :                                   :     :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_item_sk#46063, ws_net_paid#46089, ws_net_profit#46093, ws_order_number#46077L, ws_quantity#46078, ws_sold_date_sk#46060], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#46060, ws_sold_time_sk#46061, ws_ship_date_sk#46062, ws_item_sk#46063, ws_bill_c..., Partition Cols: []]\n      :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#62436]\n      :                                   :        +- *(1) Filter (((isnotnull(wr_return_amt#46109) AND (wr_return_amt#46109 > 10000.00)) AND isnotnull(wr_order_number#46107L)) AND isnotnull(wr_item_sk#46096))\n      :                                   :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#46096, wr_order_number#46107L, wr_return_quantity#46108, wr_return_amt#46109], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#46094, wr_returned_time_sk#46095, wr_item_sk#46096, wr_refunded_customer_sk#..., Partition Cols: []]\n      :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62444]\n      :                                      +- *(2) Project [d_date_sk#46118]\n      :                                         +- *(2) Filter ((((isnotnull(d_year#46124) AND isnotnull(d_moy#46126)) AND (d_year#46124 = 1999)) AND (d_moy#46126 = 11)) AND isnotnull(d_date_sk#46118))\n      :                                            +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#46118, d_moy#46126, d_year#46124], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#46118, d_date_id#46119, d_date#46120, d_month_seq#46121, d_week_seq#46122, d_quarter_s..., Partition Cols: []]\n      :- *(14) Project [catalog AS channel#46041, item#46036, return_ratio#46037, return_rank#46039, currency_rank#46040]\n      :  +- *(14) Filter ((return_rank#46039 <= 10) OR (currency_rank#46040 <= 10))\n      :     +- Window [rank(currency_ratio#46038) windowspecdefinition(currency_ratio#46038 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#46040], [currency_ratio#46038 ASC NULLS FIRST]\n      :        +- *(13) Sort [currency_ratio#46038 ASC NULLS FIRST], false, 0\n      :           +- Window [rank(return_ratio#46037) windowspecdefinition(return_ratio#46037 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#46039], [return_ratio#46037 ASC NULLS FIRST]\n      :              +- *(12) Sort [return_ratio#46037 ASC NULLS FIRST], false, 0\n      :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#62576]\n      :                    +- *(11) HashAggregate(keys=[cs_item_sk#46161], functions=[sum(cast(coalesce(cr_return_quantity#46197, 0) as bigint)), sum(cast(coalesce(cs_quantity#46164, 0) as bigint)), sum(coalesce(cast(cr_return_amount#46198 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#46175 as decimal(12,2)), 0.00))], output=[item#46036, return_ratio#46037, currency_ratio#46038])\n      :                       +- Exchange hashpartitioning(cs_item_sk#46161, 200), ENSURE_REQUIREMENTS, [id=#62572]\n      :                          +- *(10) HashAggregate(keys=[cs_item_sk#46161], functions=[partial_sum(cast(coalesce(cr_return_quantity#46197, 0) as bigint)), partial_sum(cast(coalesce(cs_quantity#46164, 0) as bigint)), partial_sum(coalesce(cast(cr_return_amount#46198 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#46175 as decimal(12,2)), 0.00))], output=[cs_item_sk#46161, sum#46395L, sum#46396L, sum#46397, isEmpty#46398, sum#46399, isEmpty#46400])\n      :                             +- *(10) Project [cs_item_sk#46161, cs_quantity#46164, cs_net_paid#46175, cr_return_quantity#46197, cr_return_amount#46198]\n      :                                +- *(10) BroadcastHashJoin [cs_sold_date_sk#46146], [d_date_sk#46207], Inner, BuildRight, false\n      :                                   :- *(10) Project [cs_sold_date_sk#46146, cs_item_sk#46161, cs_quantity#46164, cs_net_paid#46175, cr_return_quantity#46197, cr_return_amount#46198]\n      :                                   :  +- *(10) BroadcastHashJoin [cs_order_number#46163L, cs_item_sk#46161], [cr_order_number#46196L, cr_item_sk#46182], Inner, BuildRight, false\n      :                                   :     :- *(10) Project [cs_sold_date_sk#46146, cs_item_sk#46161, cs_order_number#46163L, cs_quantity#46164, cs_net_paid#46175]\n      :                                   :     :  +- *(10) Filter ((((((((isnotnull(cs_net_profit#46179) AND isnotnull(cs_net_paid#46175)) AND isnotnull(cs_quantity#46164)) AND (cs_net_profit#46179 > 1.00)) AND (cs_net_paid#46175 > 0.00)) AND (cs_quantity#46164 > 0)) AND isnotnull(cs_order_number#46163L)) AND isnotnull(cs_item_sk#46161)) AND isnotnull(cs_sold_date_sk#46146))\n      :                                   :     :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#46161, cs_net_paid#46175, cs_net_profit#46179, cs_order_number#46163L, cs_quantity#46164, cs_sold_date_sk#46146], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#46146, cs_sold_time_sk#46147, cs_ship_date_sk#46148, cs_bill_customer_sk#46149, ..., Partition Cols: []]\n      :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#62473]\n      :                                   :        +- *(8) Filter (((isnotnull(cr_return_amount#46198) AND (cr_return_amount#46198 > 10000.00)) AND isnotnull(cr_order_number#46196L)) AND isnotnull(cr_item_sk#46182))\n      :                                   :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#46182, cr_order_number#46196L, cr_return_quantity#46197, cr_return_amount#46198], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#46180, cr_returned_time_sk#46181, cr_item_sk#46182, cr_refunded_customer_sk#..., Partition Cols: []]\n      :                                   +- ReusedExchange [d_date_sk#46207], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62444]\n      +- *(21) Project [store AS channel#46047, item#46042, return_ratio#46043, return_rank#46045, currency_rank#46046]\n         +- *(21) Filter ((return_rank#46045 <= 10) OR (currency_rank#46046 <= 10))\n            +- Window [rank(currency_ratio#46044) windowspecdefinition(currency_ratio#46044 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#46046], [currency_ratio#46044 ASC NULLS FIRST]\n               +- *(20) Sort [currency_ratio#46044 ASC NULLS FIRST], false, 0\n                  +- Window [rank(return_ratio#46043) windowspecdefinition(return_ratio#46043 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#46045], [return_ratio#46043 ASC NULLS FIRST]\n                     +- *(19) Sort [return_ratio#46043 ASC NULLS FIRST], false, 0\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#62671]\n                           +- *(18) HashAggregate(keys=[ss_item_sk#46237], functions=[sum(cast(coalesce(sr_return_quantity#46268, 0) as bigint)), sum(cast(coalesce(ss_quantity#46245, 0) as bigint)), sum(coalesce(cast(sr_return_amt#46269 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#46255 as decimal(12,2)), 0.00))], output=[item#46042, return_ratio#46043, currency_ratio#46044])\n                              +- Exchange hashpartitioning(ss_item_sk#46237, 200), ENSURE_REQUIREMENTS, [id=#62667]\n                                 +- *(17) HashAggregate(keys=[ss_item_sk#46237], functions=[partial_sum(cast(coalesce(sr_return_quantity#46268, 0) as bigint)), partial_sum(cast(coalesce(ss_quantity#46245, 0) as bigint)), partial_sum(coalesce(cast(sr_return_amt#46269 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#46255 as decimal(12,2)), 0.00))], output=[ss_item_sk#46237, sum#46407L, sum#46408L, sum#46409, isEmpty#46410, sum#46411, isEmpty#46412])\n                                    +- *(17) Project [ss_item_sk#46237, ss_quantity#46245, ss_net_paid#46255, sr_return_quantity#46268, sr_return_amt#46269]\n                                       +- *(17) BroadcastHashJoin [ss_sold_date_sk#46235], [d_date_sk#46278], Inner, BuildRight, false\n                                          :- *(17) Project [ss_sold_date_sk#46235, ss_item_sk#46237, ss_quantity#46245, ss_net_paid#46255, sr_return_quantity#46268, sr_return_amt#46269]\n                                          :  +- *(17) BroadcastHashJoin [ss_ticket_number#46244L, ss_item_sk#46237], [sr_ticket_number#46267L, sr_item_sk#46260], Inner, BuildRight, false\n                                          :     :- *(17) Project [ss_sold_date_sk#46235, ss_item_sk#46237, ss_ticket_number#46244L, ss_quantity#46245, ss_net_paid#46255]\n                                          :     :  +- *(17) Filter ((((((((isnotnull(ss_net_profit#46257) AND isnotnull(ss_net_paid#46255)) AND isnotnull(ss_quantity#46245)) AND (ss_net_profit#46257 > 1.00)) AND (ss_net_paid#46255 > 0.00)) AND (ss_quantity#46245 > 0)) AND isnotnull(ss_ticket_number#46244L)) AND isnotnull(ss_item_sk#46237)) AND isnotnull(ss_sold_date_sk#46235))\n                                          :     :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#46237, ss_net_paid#46255, ss_net_profit#46257, ss_quantity#46245, ss_sold_date_sk#46235, ss_ticket_number#46244L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#46235, ss_sold_time_sk#46236, ss_item_sk#46237, ss_customer_sk#46238, ss_cdemo_s..., Partition Cols: []]\n                                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#62510]\n                                          :        +- *(15) Filter (((isnotnull(sr_return_amt#46269) AND (sr_return_amt#46269 > 10000.00)) AND isnotnull(sr_ticket_number#46267L)) AND isnotnull(sr_item_sk#46260))\n                                          :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#46260, sr_ticket_number#46267L, sr_return_quantity#46268, sr_return_amt#46269], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#46258, sr_return_time_sk#46259, sr_item_sk#46260, sr_customer_sk#46261, sr_c..., Partition Cols: []]\n                                          +- ReusedExchange [d_date_sk#46278], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62444]\n",
    "iteration" : 2,
    "name" : "q49"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#46895, id#46896, spark_grouping_id#46894L, 200), ENSURE_REQUIREMENTS, [id=#63132]\n+- *(20) HashAggregate(keys=[channel#46895, id#46896, spark_grouping_id#46894L], functions=[partial_sum(sales#46497), partial_sum(returns#46499), partial_sum(profit#46475)], output=[channel#46895, id#46896, spark_grouping_id#46894L, sum#46914, isEmpty#46915, sum#46916, isEmpty#46917, sum#46918, isEmpty#46919])\n   +- *(20) Expand [List(sales#46497, returns#46499, profit#46475, channel#46892, id#46893, 0), List(sales#46497, returns#46499, profit#46475, channel#46892, null, 1), List(sales#46497, returns#46499, profit#46475, null, null, 3)], [sales#46497, returns#46499, profit#46475, channel#46895, id#46896, spark_grouping_id#46894L]\n      +- Union\n         :- *(6) HashAggregate(keys=[s_store_id#46605], functions=[sum(UnscaledValue(sales_price#46487)), sum(UnscaledValue(return_amt#46489)), sum(UnscaledValue(profit#46488)), sum(UnscaledValue(net_loss#46490))], output=[sales#46497, returns#46499, profit#46475, channel#46892, id#46893])\n         :  +- Exchange hashpartitioning(s_store_id#46605, 200), ENSURE_REQUIREMENTS, [id=#62997]\n         :     +- *(5) HashAggregate(keys=[s_store_id#46605], functions=[partial_sum(UnscaledValue(sales_price#46487)), partial_sum(UnscaledValue(return_amt#46489)), partial_sum(UnscaledValue(profit#46488)), partial_sum(UnscaledValue(net_loss#46490))], output=[s_store_id#46605, sum#46924L, sum#46925L, sum#46926L, sum#46927L])\n         :        +- *(5) Project [sales_price#46487, profit#46488, return_amt#46489, net_loss#46490, s_store_id#46605]\n         :           +- *(5) BroadcastHashJoin [store_sk#46485], [s_store_sk#46604], Inner, BuildRight, false\n         :              :- *(5) Project [store_sk#46485, sales_price#46487, profit#46488, return_amt#46489, net_loss#46490]\n         :              :  +- *(5) BroadcastHashJoin [date_sk#46486], [d_date_sk#46576], Inner, BuildRight, false\n         :              :     :- Union\n         :              :     :  :- *(1) Project [ss_store_sk#46540 AS store_sk#46485, ss_sold_date_sk#46533 AS date_sk#46486, ss_ext_sales_price#46548 AS sales_price#46487, ss_net_profit#46555 AS profit#46488, 0.00 AS return_amt#46489, 0.00 AS net_loss#46490]\n         :              :     :  :  +- *(1) Filter (isnotnull(ss_sold_date_sk#46533) AND isnotnull(ss_store_sk#46540))\n         :              :     :  :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_ext_sales_price#46548, ss_net_profit#46555, ss_sold_date_sk#46533, ss_store_sk#46540], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#46533, ss_sold_time_sk#46534, ss_item_sk#46535, ss_customer_sk#46536, ss_cdemo_s..., Partition Cols: []]\n         :              :     :  +- *(2) Project [sr_store_sk#46563 AS store_sk#46491, sr_returned_date_sk#46556 AS date_sk#46492, 0.00 AS sales_price#46493, 0.00 AS profit#46494, sr_return_amt#46567 AS return_amt#46495, sr_net_loss#46575 AS net_loss#46496]\n         :              :     :     +- *(2) Filter (isnotnull(sr_returned_date_sk#46556) AND isnotnull(sr_store_sk#46563))\n         :              :     :        +- Scan hive tpcds_sf1_iceberg.store_returns [sr_net_loss#46575, sr_return_amt#46567, sr_returned_date_sk#46556, sr_store_sk#46563], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#46556, sr_return_time_sk#46557, sr_item_sk#46558, sr_customer_sk#46559, sr_c..., Partition Cols: []]\n         :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62984]\n         :              :        +- *(3) Project [d_date_sk#46576]\n         :              :           +- *(3) Filter (((isnotnull(d_date#46578) AND (d_date#46578 >= 11188)) AND (d_date#46578 <= 11202)) AND isnotnull(d_date_sk#46576))\n         :              :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#46578, d_date_sk#46576], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#46576, d_date_id#46577, d_date#46578, d_month_seq#46579, d_week_seq#46580, d_quarter_s..., Partition Cols: []]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#62991]\n         :                 +- *(4) Filter isnotnull(s_store_sk#46604)\n         :                    +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#46604, s_store_id#46605], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#46604, s_store_id#46605, s_rec_start_date#46606, s_rec_end_date#46607, s_closed_date_..., Partition Cols: []]\n         :- *(12) HashAggregate(keys=[cp_catalog_page_id#46723], functions=[sum(UnscaledValue(sales_price#46503)), sum(UnscaledValue(return_amt#46505)), sum(UnscaledValue(profit#46504)), sum(UnscaledValue(net_loss#46506))], output=[sales#46513, returns#46515, profit#46478, channel#46904, id#46905])\n         :  +- Exchange hashpartitioning(cp_catalog_page_id#46723, 200), ENSURE_REQUIREMENTS, [id=#63103]\n         :     +- *(11) HashAggregate(keys=[cp_catalog_page_id#46723], functions=[partial_sum(UnscaledValue(sales_price#46503)), partial_sum(UnscaledValue(return_amt#46505)), partial_sum(UnscaledValue(profit#46504)), partial_sum(UnscaledValue(net_loss#46506))], output=[cp_catalog_page_id#46723, sum#46932L, sum#46933L, sum#46934L, sum#46935L])\n         :        +- *(11) Project [sales_price#46503, profit#46504, return_amt#46505, net_loss#46506, cp_catalog_page_id#46723]\n         :           +- *(11) BroadcastHashJoin [page_sk#46501], [cp_catalog_page_sk#46722], Inner, BuildRight, false\n         :              :- *(11) Project [page_sk#46501, sales_price#46503, profit#46504, return_amt#46505, net_loss#46506]\n         :              :  +- *(11) BroadcastHashJoin [date_sk#46502], [d_date_sk#46694], Inner, BuildRight, false\n         :              :     :- Union\n         :              :     :  :- *(7) Project [cs_catalog_page_sk#46645 AS page_sk#46501, cs_sold_date_sk#46633 AS date_sk#46502, cs_ext_sales_price#46656 AS sales_price#46503, cs_net_profit#46666 AS profit#46504, 0.00 AS return_amt#46505, 0.00 AS net_loss#46506]\n         :              :     :  :  +- *(7) Filter (isnotnull(cs_sold_date_sk#46633) AND isnotnull(cs_catalog_page_sk#46645))\n         :              :     :  :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_catalog_page_sk#46645, cs_ext_sales_price#46656, cs_net_profit#46666, cs_sold_date_sk#46633], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#46633, cs_sold_time_sk#46634, cs_ship_date_sk#46635, cs_bill_customer_sk#46636, ..., Partition Cols: []]\n         :              :     :  +- *(8) Project [cr_catalog_page_sk#46679 AS page_sk#46507, cr_returned_date_sk#46667 AS date_sk#46508, 0.00 AS sales_price#46509, 0.00 AS profit#46510, cr_return_amount#46685 AS return_amt#46511, cr_net_loss#46693 AS net_loss#46512]\n         :              :     :     +- *(8) Filter (isnotnull(cr_returned_date_sk#46667) AND isnotnull(cr_catalog_page_sk#46679))\n         :              :     :        +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_catalog_page_sk#46679, cr_net_loss#46693, cr_return_amount#46685, cr_returned_date_sk#46667], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#46667, cr_returned_time_sk#46668, cr_item_sk#46669, cr_refunded_customer_sk#..., Partition Cols: []]\n         :              :     +- ReusedExchange [d_date_sk#46694], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62984]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63022]\n         :                 +- *(10) Filter isnotnull(cp_catalog_page_sk#46722)\n         :                    +- Scan hive tpcds_sf1_iceberg.catalog_page [cp_catalog_page_sk#46722, cp_catalog_page_id#46723], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cp_catalog_page_sk#46722, cp_catalog_page_id#46723, cp_start_date_sk#46724, cp_end_date_sk#46725..., Partition Cols: []]\n         +- *(19) HashAggregate(keys=[web_site_id#46852], functions=[sum(UnscaledValue(sales_price#46519)), sum(UnscaledValue(return_amt#46521)), sum(UnscaledValue(profit#46520)), sum(UnscaledValue(net_loss#46522))], output=[sales#46529, returns#46531, profit#46481, channel#46906, id#46907])\n            +- Exchange hashpartitioning(web_site_id#46852, 200), ENSURE_REQUIREMENTS, [id=#63123]\n               +- *(18) HashAggregate(keys=[web_site_id#46852], functions=[partial_sum(UnscaledValue(sales_price#46519)), partial_sum(UnscaledValue(return_amt#46521)), partial_sum(UnscaledValue(profit#46520)), partial_sum(UnscaledValue(net_loss#46522))], output=[web_site_id#46852, sum#46940L, sum#46941L, sum#46942L, sum#46943L])\n                  +- *(18) Project [sales_price#46519, profit#46520, return_amt#46521, net_loss#46522, web_site_id#46852]\n                     +- *(18) BroadcastHashJoin [wsr_web_site_sk#46517], [web_site_sk#46851], Inner, BuildRight, false\n                        :- *(18) Project [wsr_web_site_sk#46517, sales_price#46519, profit#46520, return_amt#46521, net_loss#46522]\n                        :  +- *(18) BroadcastHashJoin [date_sk#46518], [d_date_sk#46823], Inner, BuildRight, false\n                        :     :- Union\n                        :     :  :- *(13) Project [ws_web_site_sk#46744 AS wsr_web_site_sk#46517, ws_sold_date_sk#46731 AS date_sk#46518, ws_ext_sales_price#46754 AS sales_price#46519, ws_net_profit#46764 AS profit#46520, 0.00 AS return_amt#46521, 0.00 AS net_loss#46522]\n                        :     :  :  +- *(13) Filter (isnotnull(ws_sold_date_sk#46731) AND isnotnull(ws_web_site_sk#46744))\n                        :     :  :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#46754, ws_net_profit#46764, ws_sold_date_sk#46731, ws_web_site_sk#46744], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#46731, ws_sold_time_sk#46732, ws_ship_date_sk#46733, ws_item_sk#46734, ws_bill_c..., Partition Cols: []]\n                        :     :  +- *(15) Project [ws_web_site_sk#46802 AS wsr_web_site_sk#46523, wr_returned_date_sk#46765 AS date_sk#46524, 0.00 AS sales_price#46525, 0.00 AS profit#46526, wr_return_amt#46780 AS return_amt#46527, wr_net_loss#46788 AS net_loss#46528]\n                        :     :     +- *(15) BroadcastHashJoin [wr_item_sk#46767, wr_order_number#46778L], [ws_item_sk#46792, ws_order_number#46806L], Inner, BuildLeft, false\n                        :     :        :- BroadcastExchange HashedRelationBroadcastMode(List(input[1, int, true], input[2, bigint, true]),false), [id=#63039]\n                        :     :        :  +- *(14) Filter isnotnull(wr_returned_date_sk#46765)\n                        :     :        :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_returned_date_sk#46765, wr_item_sk#46767, wr_order_number#46778L, wr_return_amt#46780, wr_net_loss#46788], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#46765, wr_returned_time_sk#46766, wr_item_sk#46767, wr_refunded_customer_sk#..., Partition Cols: []]\n                        :     :        +- *(15) Filter ((isnotnull(ws_item_sk#46792) AND isnotnull(ws_order_number#46806L)) AND isnotnull(ws_web_site_sk#46802))\n                        :     :           +- Scan hive tpcds_sf1_iceberg.web_sales [ws_item_sk#46792, ws_web_site_sk#46802, ws_order_number#46806L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#46789, ws_sold_time_sk#46790, ws_ship_date_sk#46791, ws_item_sk#46792, ws_bill_c..., Partition Cols: []]\n                        :     +- ReusedExchange [d_date_sk#46823], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#62984]\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63059]\n                           +- *(17) Filter isnotnull(web_site_sk#46851)\n                              +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#46851, web_site_id#46852], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#46851, web_site_id#46852, web_rec_start_date#46853, web_rec_end_date#46854, web_name..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q5"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#47003, s_company_id#47014, s_street_number#47016, s_street_name#47017, s_street_type#47018, s_suite_number#47019, s_city#47020, s_county#47021, s_state#47022, s_zip#47023, 200), ENSURE_REQUIREMENTS, [id=#63263]\n+- *(5) HashAggregate(keys=[s_store_name#47003, s_company_id#47014, s_street_number#47016, s_street_name#47017, s_street_type#47018, s_suite_number#47019, s_city#47020, s_county#47021, s_state#47022, s_zip#47023], functions=[partial_sum(cast(CASE WHEN ((sr_returned_date_sk#46978 - ss_sold_date_sk#46955) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#46978 - ss_sold_date_sk#46955) > 30) AND ((sr_returned_date_sk#46978 - ss_sold_date_sk#46955) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#46978 - ss_sold_date_sk#46955) > 60) AND ((sr_returned_date_sk#46978 - ss_sold_date_sk#46955) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#46978 - ss_sold_date_sk#46955) > 90) AND ((sr_returned_date_sk#46978 - ss_sold_date_sk#46955) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((sr_returned_date_sk#46978 - ss_sold_date_sk#46955) > 120) THEN 1 ELSE 0 END as bigint))], output=[s_store_name#47003, s_company_id#47014, s_street_number#47016, s_street_name#47017, s_street_type#47018, s_suite_number#47019, s_city#47020, s_county#47021, s_state#47022, s_zip#47023, sum#47118L, sum#47119L, sum#47120L, sum#47121L, sum#47122L])\n   +- *(5) Project [ss_sold_date_sk#46955, sr_returned_date_sk#46978, s_store_name#47003, s_company_id#47014, s_street_number#47016, s_street_name#47017, s_street_type#47018, s_suite_number#47019, s_city#47020, s_county#47021, s_state#47022, s_zip#47023]\n      +- *(5) BroadcastHashJoin [sr_returned_date_sk#46978], [d_date_sk#47055], Inner, BuildRight, false\n         :- *(5) Project [ss_sold_date_sk#46955, sr_returned_date_sk#46978, s_store_name#47003, s_company_id#47014, s_street_number#47016, s_street_name#47017, s_street_type#47018, s_suite_number#47019, s_city#47020, s_county#47021, s_state#47022, s_zip#47023]\n         :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#46955], [d_date_sk#47027], Inner, BuildRight, false\n         :     :- *(5) Project [ss_sold_date_sk#46955, sr_returned_date_sk#46978, s_store_name#47003, s_company_id#47014, s_street_number#47016, s_street_name#47017, s_street_type#47018, s_suite_number#47019, s_city#47020, s_county#47021, s_state#47022, s_zip#47023]\n         :     :  +- *(5) BroadcastHashJoin [ss_store_sk#46962], [s_store_sk#46998], Inner, BuildRight, false\n         :     :     :- *(5) Project [ss_sold_date_sk#46955, ss_store_sk#46962, sr_returned_date_sk#46978]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_ticket_number#46964L, ss_item_sk#46957, ss_customer_sk#46958], [sr_ticket_number#46987L, sr_item_sk#46980, sr_customer_sk#46981], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter ((((isnotnull(ss_ticket_number#46964L) AND isnotnull(ss_item_sk#46957)) AND isnotnull(ss_customer_sk#46958)) AND isnotnull(ss_store_sk#46962)) AND isnotnull(ss_sold_date_sk#46955))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#46955, ss_item_sk#46957, ss_customer_sk#46958, ss_store_sk#46962, ss_ticket_number#46964L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#46955, ss_sold_time_sk#46956, ss_item_sk#46957, ss_customer_sk#46958, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, bigint, false], input[1, int, false], input[2, int, false]),false), [id=#63235]\n         :     :     :        +- *(1) Filter (((isnotnull(sr_ticket_number#46987L) AND isnotnull(sr_item_sk#46980)) AND isnotnull(sr_customer_sk#46981)) AND isnotnull(sr_returned_date_sk#46978))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#46978, sr_item_sk#46980, sr_customer_sk#46981, sr_ticket_number#46987L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#46978, sr_return_time_sk#46979, sr_item_sk#46980, sr_customer_sk#46981, sr_c..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63242]\n         :     :        +- *(2) Filter isnotnull(s_store_sk#46998)\n         :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#46998, s_store_name#47003, s_company_id#47014, s_street_number#47016, s_street_name#47017, s_street_type#47018, s_suite_number#47019, s_city#47020, s_county#47021, s_state#47022, s_zip#47023], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#46998, s_store_id#46999, s_rec_start_date#47000, s_rec_end_date#47001, s_closed_date_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63249]\n         :        +- *(3) Filter isnotnull(d_date_sk#47027)\n         :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#47027], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47027, d_date_id#47028, d_date#47029, d_month_seq#47030, d_week_seq#47031, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#63257]\n            +- *(4) Project [d_date_sk#47055]\n               +- *(4) Filter ((((isnotnull(d_year#47061) AND isnotnull(d_moy#47063)) AND (d_year#47061 = 2000)) AND (d_moy#47063 = 9)) AND isnotnull(d_date_sk#47055))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#47055, d_moy#47063, d_year#47061], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47055, d_date_id#47056, d_date#47057, d_month_seq#47058, d_week_seq#47059, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q50"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(item_sk#47139, 200), ENSURE_REQUIREMENTS, [id=#63573]\n+- *(13) Project [CASE WHEN isnotnull(item_sk#47145) THEN item_sk#47145 ELSE item_sk#47147 END AS item_sk#47139, CASE WHEN isnotnull(d_date#47185) THEN d_date#47185 ELSE d_date#47236 END AS d_date#47140, cume_sales#47146 AS web_sales#47141, cume_sales#47148 AS store_sales#47142]\n   +- SortMergeJoin [item_sk#47145, d_date#47185], [item_sk#47147, d_date#47236], FullOuter\n      :- *(6) Sort [item_sk#47145 ASC NULLS FIRST, d_date#47185 ASC NULLS FIRST], false, 0\n      :  +- Exchange hashpartitioning(item_sk#47145, d_date#47185, 200), ENSURE_REQUIREMENTS, [id=#63422]\n      :     +- *(5) Project [item_sk#47145, d_date#47185, cume_sales#47146]\n      :        +- Window [sum(_w0#47266) windowspecdefinition(ws_item_sk#47152, d_date#47185 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#47146], [ws_item_sk#47152], [d_date#47185 ASC NULLS FIRST]\n      :           +- *(4) Sort [ws_item_sk#47152 ASC NULLS FIRST, d_date#47185 ASC NULLS FIRST], false, 0\n      :              +- Exchange hashpartitioning(ws_item_sk#47152, 200), ENSURE_REQUIREMENTS, [id=#63414]\n      :                 +- *(3) HashAggregate(keys=[ws_item_sk#47152, d_date#47185], functions=[sum(UnscaledValue(ws_sales_price#47170))], output=[item_sk#47145, d_date#47185, _w0#47266, ws_item_sk#47152])\n      :                    +- Exchange hashpartitioning(ws_item_sk#47152, d_date#47185, 200), ENSURE_REQUIREMENTS, [id=#63410]\n      :                       +- *(2) HashAggregate(keys=[ws_item_sk#47152, d_date#47185], functions=[partial_sum(UnscaledValue(ws_sales_price#47170))], output=[ws_item_sk#47152, d_date#47185, sum#47277L])\n      :                          +- *(2) Project [ws_item_sk#47152, ws_sales_price#47170, d_date#47185]\n      :                             +- *(2) BroadcastHashJoin [ws_sold_date_sk#47149], [d_date_sk#47183], Inner, BuildRight, false\n      :                                :- *(2) Filter (isnotnull(ws_item_sk#47152) AND isnotnull(ws_sold_date_sk#47149))\n      :                                :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#47149, ws_item_sk#47152, ws_sales_price#47170], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#47149, ws_sold_time_sk#47150, ws_ship_date_sk#47151, ws_item_sk#47152, ws_bill_c..., Partition Cols: []]\n      :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#63404]\n      :                                   +- *(1) Project [d_date_sk#47183, d_date#47185]\n      :                                      +- *(1) Filter (((isnotnull(d_month_seq#47186) AND (d_month_seq#47186 >= 1177)) AND (d_month_seq#47186 <= 1188)) AND isnotnull(d_date_sk#47183))\n      :                                         +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#47185, d_date_sk#47183, d_month_seq#47186], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47183, d_date_id#47184, d_date#47185, d_month_seq#47186, d_week_seq#47187, d_quarter_s..., Partition Cols: []]\n      +- *(12) Sort [item_sk#47147 ASC NULLS FIRST, d_date#47236 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(item_sk#47147, d_date#47236, 200), ENSURE_REQUIREMENTS, [id=#63501]\n            +- *(11) Project [item_sk#47147, d_date#47236, cume_sales#47148]\n               +- Window [sum(_w0#47267) windowspecdefinition(ss_item_sk#47213, d_date#47236 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#47148], [ss_item_sk#47213], [d_date#47236 ASC NULLS FIRST]\n                  +- *(10) Sort [ss_item_sk#47213 ASC NULLS FIRST, d_date#47236 ASC NULLS FIRST], false, 0\n                     +- Exchange hashpartitioning(ss_item_sk#47213, 200), ENSURE_REQUIREMENTS, [id=#63493]\n                        +- *(9) HashAggregate(keys=[ss_item_sk#47213, d_date#47236], functions=[sum(UnscaledValue(ss_sales_price#47224))], output=[item_sk#47147, d_date#47236, _w0#47267, ss_item_sk#47213])\n                           +- Exchange hashpartitioning(ss_item_sk#47213, d_date#47236, 200), ENSURE_REQUIREMENTS, [id=#63489]\n                              +- *(8) HashAggregate(keys=[ss_item_sk#47213, d_date#47236], functions=[partial_sum(UnscaledValue(ss_sales_price#47224))], output=[ss_item_sk#47213, d_date#47236, sum#47279L])\n                                 +- *(8) Project [ss_item_sk#47213, ss_sales_price#47224, d_date#47236]\n                                    +- *(8) BroadcastHashJoin [ss_sold_date_sk#47211], [d_date_sk#47234], Inner, BuildRight, false\n                                       :- *(8) Filter (isnotnull(ss_item_sk#47213) AND isnotnull(ss_sold_date_sk#47211))\n                                       :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#47211, ss_item_sk#47213, ss_sales_price#47224], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#47211, ss_sold_time_sk#47212, ss_item_sk#47213, ss_customer_sk#47214, ss_cdemo_s..., Partition Cols: []]\n                                       +- ReusedExchange [d_date_sk#47234, d_date#47236], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#63404]\n",
    "iteration" : 2,
    "name" : "q51"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#47302, i_brand#47355, i_brand_id#47354, 200), ENSURE_REQUIREMENTS, [id=#63661]\n+- *(3) HashAggregate(keys=[d_year#47302, i_brand#47355, i_brand_id#47354], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#47339))], output=[d_year#47302, i_brand#47355, i_brand_id#47354, sum#47378L])\n   +- *(3) Project [d_year#47302, ss_ext_sales_price#47339, i_brand_id#47354, i_brand#47355]\n      +- *(3) BroadcastHashJoin [ss_item_sk#47326], [i_item_sk#47347], Inner, BuildRight, false\n         :- *(3) Project [d_year#47302, ss_item_sk#47326, ss_ext_sales_price#47339]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#47296], [ss_sold_date_sk#47324], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#63645]\n         :     :  +- *(1) Project [d_date_sk#47296, d_year#47302]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#47304) AND isnotnull(d_year#47302)) AND (d_moy#47304 = 12)) AND (d_year#47302 = 2001)) AND isnotnull(d_date_sk#47296))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#47296, d_moy#47304, d_year#47302], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47296, d_date_id#47297, d_date#47298, d_month_seq#47299, d_week_seq#47300, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#47324) AND isnotnull(ss_item_sk#47326))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#47324, ss_item_sk#47326, ss_ext_sales_price#47339], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#47324, ss_sold_time_sk#47325, ss_item_sk#47326, ss_customer_sk#47327, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#63655]\n            +- *(2) Project [i_item_sk#47347, i_brand_id#47354, i_brand#47355]\n               +- *(2) Filter ((isnotnull(i_manager_id#47367) AND (i_manager_id#47367 = 1)) AND isnotnull(i_item_sk#47347))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#47355, i_brand_id#47354, i_item_sk#47347, i_manager_id#47367], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#47347, i_item_id#47348, i_rec_start_date#47349, i_rec_end_date#47350, i_item_desc#4735..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q52"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manufact_id#47399, 200), ENSURE_REQUIREMENTS, [id=#63792]\n+- *(5) HashAggregate(keys=[i_manufact_id#47399, d_qoy#47441], functions=[sum(UnscaledValue(ss_sales_price#47421))], output=[i_manufact_id#47399, sum_sales#47384, _w0#47491])\n   +- Exchange hashpartitioning(i_manufact_id#47399, d_qoy#47441, 200), ENSURE_REQUIREMENTS, [id=#63788]\n      +- *(4) HashAggregate(keys=[i_manufact_id#47399, d_qoy#47441], functions=[partial_sum(UnscaledValue(ss_sales_price#47421))], output=[i_manufact_id#47399, d_qoy#47441, sum#47496L])\n         +- *(4) Project [i_manufact_id#47399, ss_sales_price#47421, d_qoy#47441]\n            +- *(4) BroadcastHashJoin [ss_store_sk#47415], [s_store_sk#47459], Inner, BuildRight, false\n               :- *(4) Project [i_manufact_id#47399, ss_store_sk#47415, ss_sales_price#47421, d_qoy#47441]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#47408], [d_date_sk#47431], Inner, BuildRight, false\n               :     :- *(4) Project [i_manufact_id#47399, ss_sold_date_sk#47408, ss_store_sk#47415, ss_sales_price#47421]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#47386], [ss_item_sk#47410], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#63765]\n               :     :     :  +- *(1) Project [i_item_sk#47386, i_manufact_id#47399]\n               :     :     :     +- *(1) Filter ((((i_category#47398 IN (Books,Children,Electronics) AND i_class#47396 IN (personal,portable,reference,self-help)) AND i_brand#47394 IN (scholaramalgamalg #14,scholaramalgamalg #7,exportiunivamalg #9,scholaramalgamalg #9)) OR ((i_category#47398 IN (Women,Music,Men) AND i_class#47396 IN (accessories,classical,fragrances,pants)) AND i_brand#47394 IN (amalgimporto #1,edu packscholar #1,exportiimporto #1,importoamalg #1))) AND isnotnull(i_item_sk#47386))\n               :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#47394, i_category#47398, i_class#47396, i_item_sk#47386, i_manufact_id#47399], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#47386, i_item_id#47387, i_rec_start_date#47388, i_rec_end_date#47389, i_item_desc#4739..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#47410) AND isnotnull(ss_sold_date_sk#47408)) AND isnotnull(ss_store_sk#47415))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#47408, ss_item_sk#47410, ss_store_sk#47415, ss_sales_price#47421], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#47408, ss_sold_time_sk#47409, ss_item_sk#47410, ss_customer_sk#47411, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#63775]\n               :        +- *(2) Project [d_date_sk#47431, d_qoy#47441]\n               :           +- *(2) Filter (d_month_seq#47434 INSET (1190,1196,1191,1199,1195,1192,1194,1198,1188,1189,1193,1197) AND isnotnull(d_date_sk#47431))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#47431, d_month_seq#47434, d_qoy#47441], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47431, d_date_id#47432, d_date#47433, d_month_seq#47434, d_week_seq#47435, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#63782]\n                  +- *(3) Filter isnotnull(s_store_sk#47459)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#47459], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#47459, s_store_id#47460, s_rec_start_date#47461, s_rec_end_date#47462, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q53"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(segment#47512, 200), ENSURE_REQUIREMENTS, [id=#64122]\n+- *(14) HashAggregate(keys=[segment#47512], functions=[partial_count(1)], output=[segment#47512, count#47806L])\n   +- *(14) HashAggregate(keys=[c_customer_sk#47632], functions=[sum(UnscaledValue(ss_ext_sales_price#47665))], output=[segment#47512])\n      +- *(14) HashAggregate(keys=[c_customer_sk#47632], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#47665))], output=[c_customer_sk#47632, sum#47808L])\n         +- *(14) Project [c_customer_sk#47632, ss_ext_sales_price#47665]\n            +- *(14) BroadcastHashJoin [ss_sold_date_sk#47650], [d_date_sk#47715], Inner, BuildRight, false\n               :- *(14) Project [c_customer_sk#47632, ss_sold_date_sk#47650, ss_ext_sales_price#47665]\n               :  +- *(14) BroadcastHashJoin [ca_county#47680, ca_state#47681], [s_county#47709, s_state#47710], Inner, BuildRight, false\n               :     :- *(14) Project [c_customer_sk#47632, ss_sold_date_sk#47650, ss_ext_sales_price#47665, ca_county#47680, ca_state#47681]\n               :     :  +- *(14) BroadcastHashJoin [c_current_addr_sk#47636], [ca_address_sk#47673], Inner, BuildRight, false\n               :     :     :- *(14) Project [c_customer_sk#47632, c_current_addr_sk#47636, ss_sold_date_sk#47650, ss_ext_sales_price#47665]\n               :     :     :  +- *(14) SortMergeJoin [c_customer_sk#47632], [ss_customer_sk#47653], Inner\n               :     :     :     :- *(8) Sort [c_customer_sk#47632 ASC NULLS FIRST], false, 0\n               :     :     :     :  +- Exchange hashpartitioning(c_customer_sk#47632, 200), ENSURE_REQUIREMENTS, [id=#64081]\n               :     :     :     :     +- *(7) HashAggregate(keys=[c_customer_sk#47632, c_current_addr_sk#47636], functions=[], output=[c_customer_sk#47632, c_current_addr_sk#47636])\n               :     :     :     :        +- Exchange hashpartitioning(c_customer_sk#47632, c_current_addr_sk#47636, 200), ENSURE_REQUIREMENTS, [id=#64077]\n               :     :     :     :           +- *(6) HashAggregate(keys=[c_customer_sk#47632, c_current_addr_sk#47636], functions=[], output=[c_customer_sk#47632, c_current_addr_sk#47636])\n               :     :     :     :              +- *(6) Project [c_customer_sk#47632, c_current_addr_sk#47636]\n               :     :     :     :                 +- *(6) BroadcastHashJoin [customer_sk#47504], [c_customer_sk#47632], Inner, BuildRight, false\n               :     :     :     :                    :- *(6) Project [customer_sk#47504]\n               :     :     :     :                    :  +- *(6) BroadcastHashJoin [sold_date_sk#47503], [d_date_sk#47604], Inner, BuildRight, false\n               :     :     :     :                    :     :- *(6) Project [sold_date_sk#47503, customer_sk#47504]\n               :     :     :     :                    :     :  +- *(6) BroadcastHashJoin [item_sk#47505], [i_item_sk#47582], Inner, BuildRight, false\n               :     :     :     :                    :     :     :- Union\n               :     :     :     :                    :     :     :  :- *(1) Project [cs_sold_date_sk#47514 AS sold_date_sk#47503, cs_bill_customer_sk#47517 AS customer_sk#47504, cs_item_sk#47529 AS item_sk#47505]\n               :     :     :     :                    :     :     :  :  +- *(1) Filter ((isnotnull(cs_item_sk#47529) AND isnotnull(cs_sold_date_sk#47514)) AND isnotnull(cs_bill_customer_sk#47517))\n               :     :     :     :                    :     :     :  :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_bill_customer_sk#47517, cs_item_sk#47529, cs_sold_date_sk#47514], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#47514, cs_sold_time_sk#47515, cs_ship_date_sk#47516, cs_bill_customer_sk#47517, ..., Partition Cols: []]\n               :     :     :     :                    :     :     :  +- *(2) Project [ws_sold_date_sk#47548 AS sold_date_sk#47506, ws_bill_customer_sk#47552 AS customer_sk#47507, ws_item_sk#47551 AS item_sk#47508]\n               :     :     :     :                    :     :     :     +- *(2) Filter ((isnotnull(ws_item_sk#47551) AND isnotnull(ws_sold_date_sk#47548)) AND isnotnull(ws_bill_customer_sk#47552))\n               :     :     :     :                    :     :     :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_bill_customer_sk#47552, ws_item_sk#47551, ws_sold_date_sk#47548], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#47548, ws_sold_time_sk#47549, ws_ship_date_sk#47550, ws_item_sk#47551, ws_bill_c..., Partition Cols: []]\n               :     :     :     :                    :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64056]\n               :     :     :     :                    :     :        +- *(3) Project [i_item_sk#47582]\n               :     :     :     :                    :     :           +- *(3) Filter ((((isnotnull(i_category#47594) AND isnotnull(i_class#47592)) AND (i_category#47594 = Men)) AND (i_class#47592 = pants)) AND isnotnull(i_item_sk#47582))\n               :     :     :     :                    :     :              +- Scan hive tpcds_sf1_iceberg.item [i_category#47594, i_class#47592, i_item_sk#47582], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#47582, i_item_id#47583, i_rec_start_date#47584, i_rec_end_date#47585, i_item_desc#4758..., Partition Cols: []]\n               :     :     :     :                    :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64064]\n               :     :     :     :                    :        +- *(4) Project [d_date_sk#47604]\n               :     :     :     :                    :           +- *(4) Filter ((((isnotnull(d_moy#47612) AND isnotnull(d_year#47610)) AND (d_moy#47612 = 5)) AND (d_year#47610 = 2002)) AND isnotnull(d_date_sk#47604))\n               :     :     :     :                    :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#47604, d_moy#47612, d_year#47610], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47604, d_date_id#47605, d_date#47606, d_month_seq#47607, d_week_seq#47608, d_quarter_s..., Partition Cols: []]\n               :     :     :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#64071]\n               :     :     :     :                       +- *(5) Filter (isnotnull(c_customer_sk#47632) AND isnotnull(c_current_addr_sk#47636))\n               :     :     :     :                          +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#47632, c_current_addr_sk#47636], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#47632, c_customer_id#47633, c_current_cdemo_sk#47634, c_current_hdemo_sk#47635, c_..., Partition Cols: []]\n               :     :     :     +- *(10) Sort [ss_customer_sk#47653 ASC NULLS FIRST], false, 0\n               :     :     :        +- Exchange hashpartitioning(ss_customer_sk#47653, 200), ENSURE_REQUIREMENTS, [id=#64089]\n               :     :     :           +- *(9) Filter (isnotnull(ss_customer_sk#47653) AND isnotnull(ss_sold_date_sk#47650))\n               :     :     :              +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#47650, ss_customer_sk#47653, ss_ext_sales_price#47665], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#47650, ss_sold_time_sk#47651, ss_item_sk#47652, ss_customer_sk#47653, ss_cdemo_s..., Partition Cols: []]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#64099]\n               :     :        +- *(11) Filter ((isnotnull(ca_address_sk#47673) AND isnotnull(ca_county#47680)) AND isnotnull(ca_state#47681))\n               :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#47673, ca_county#47680, ca_state#47681], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#47673, ca_address_id#47674, ca_street_number#47675, ca_street_name#47676, ca_stree..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [id=#64106]\n               :        +- *(12) Filter (isnotnull(s_county#47709) AND isnotnull(s_state#47710))\n               :           +- Scan hive tpcds_sf1_iceberg.store [s_county#47709, s_state#47710], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#47686, s_store_id#47687, s_rec_start_date#47688, s_rec_end_date#47689, s_closed_date_..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64114]\n                  +- *(13) Project [d_date_sk#47715]\n                     +- *(13) Filter (((isnotnull(d_month_seq#47718) AND (d_month_seq#47718 >= Subquery scalar-subquery#47509, [id=#63969])) AND (d_month_seq#47718 <= Subquery scalar-subquery#47510, [id=#63990])) AND isnotnull(d_date_sk#47715))\n                        :  :- Subquery scalar-subquery#47509, [id=#63969]\n                        :  :  +- *(2) HashAggregate(keys=[(d_month_seq + 1)#47771], functions=[], output=[(d_month_seq + 1)#47771])\n                        :  :     +- Exchange hashpartitioning((d_month_seq + 1)#47771, 200), ENSURE_REQUIREMENTS, [id=#63965]\n                        :  :        +- *(1) HashAggregate(keys=[(d_month_seq + 1)#47771], functions=[], output=[(d_month_seq + 1)#47771])\n                        :  :           +- *(1) Project [(d_month_seq#47746 + 1) AS (d_month_seq + 1)#47771]\n                        :  :              +- *(1) Filter (((isnotnull(d_year#47749) AND isnotnull(d_moy#47751)) AND (d_year#47749 = 2002)) AND (d_moy#47751 = 5))\n                        :  :                 +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#47746, d_moy#47751, d_year#47749], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47743, d_date_id#47744, d_date#47745, d_month_seq#47746, d_week_seq#47747, d_quarter_s..., Partition Cols: []]\n                        :  +- Subquery scalar-subquery#47510, [id=#63990]\n                        :     +- *(2) HashAggregate(keys=[(d_month_seq + 3)#47800], functions=[], output=[(d_month_seq + 3)#47800])\n                        :        +- Exchange hashpartitioning((d_month_seq + 3)#47800, 200), ENSURE_REQUIREMENTS, [id=#63986]\n                        :           +- *(1) HashAggregate(keys=[(d_month_seq + 3)#47800], functions=[], output=[(d_month_seq + 3)#47800])\n                        :              +- *(1) Project [(d_month_seq#47775 + 3) AS (d_month_seq + 3)#47800]\n                        :                 +- *(1) Filter (((isnotnull(d_year#47778) AND isnotnull(d_moy#47780)) AND (d_year#47778 = 2002)) AND (d_moy#47780 = 5))\n                        :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#47775, d_moy#47780, d_year#47778], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47772, d_date_id#47773, d_date#47774, d_month_seq#47775, d_week_seq#47776, d_quarter_s..., Partition Cols: []]\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#47715, d_month_seq#47718], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47715, d_date_id#47716, d_date#47717, d_month_seq#47718, d_week_seq#47719, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q54"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand#47875, i_brand_id#47874, 200), ENSURE_REQUIREMENTS, [id=#64278]\n+- *(3) HashAggregate(keys=[i_brand#47875, i_brand_id#47874], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#47859))], output=[i_brand#47875, i_brand_id#47874, sum#47897L])\n   +- *(3) Project [ss_ext_sales_price#47859, i_brand_id#47874, i_brand#47875]\n      +- *(3) BroadcastHashJoin [ss_item_sk#47846], [i_item_sk#47867], Inner, BuildRight, false\n         :- *(3) Project [ss_item_sk#47846, ss_ext_sales_price#47859]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#47816], [ss_sold_date_sk#47844], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64262]\n         :     :  +- *(1) Project [d_date_sk#47816]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#47824) AND isnotnull(d_year#47822)) AND (d_moy#47824 = 11)) AND (d_year#47822 = 2001)) AND isnotnull(d_date_sk#47816))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#47816, d_moy#47824, d_year#47822], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47816, d_date_id#47817, d_date#47818, d_month_seq#47819, d_week_seq#47820, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#47844) AND isnotnull(ss_item_sk#47846))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#47844, ss_item_sk#47846, ss_ext_sales_price#47859], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#47844, ss_sold_time_sk#47845, ss_item_sk#47846, ss_customer_sk#47847, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64272]\n            +- *(2) Project [i_item_sk#47867, i_brand_id#47874, i_brand#47875]\n               +- *(2) Filter ((isnotnull(i_manager_id#47887) AND (i_manager_id#47887 = 67)) AND isnotnull(i_item_sk#47867))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#47875, i_brand_id#47874, i_item_sk#47867, i_manager_id#47887], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#47867, i_item_id#47868, i_rec_start_date#47869, i_rec_end_date#47870, i_item_desc#4787..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q55"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#47974, 200), ENSURE_REQUIREMENTS, [id=#64910]\n+- *(19) HashAggregate(keys=[i_item_id#47974], functions=[partial_sum(total_sales#47904)], output=[i_item_id#47974, sum#48265, isEmpty#48266])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_item_id#47974], functions=[sum(UnscaledValue(ss_ext_sales_price#47924))], output=[i_item_id#47974, total_sales#47904])\n      :  +- Exchange hashpartitioning(i_item_id#47974, 200), ENSURE_REQUIREMENTS, [id=#64600]\n      :     +- *(5) HashAggregate(keys=[i_item_id#47974], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#47924))], output=[i_item_id#47974, sum#48268L])\n      :        +- *(5) Project [ss_ext_sales_price#47924, i_item_id#47974]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#47911], [i_item_sk#47973], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#47911, ss_ext_sales_price#47924]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#47915], [ca_address_sk#47960], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#47911, ss_addr_sk#47915, ss_ext_sales_price#47924]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#47909], [d_date_sk#47932], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#47909) AND isnotnull(ss_addr_sk#47915)) AND isnotnull(ss_item_sk#47911))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#47909, ss_item_sk#47911, ss_addr_sk#47915, ss_ext_sales_price#47924], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#47909, ss_sold_time_sk#47910, ss_item_sk#47911, ss_customer_sk#47912, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64572]\n      :              :     :        +- *(1) Project [d_date_sk#47932]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#47938) AND isnotnull(d_moy#47940)) AND (d_year#47938 = 1999)) AND (d_moy#47940 = 6)) AND isnotnull(d_date_sk#47932))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#47932, d_moy#47940, d_year#47938], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#47932, d_date_id#47933, d_date#47934, d_month_seq#47935, d_week_seq#47936, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64580]\n      :              :        +- *(2) Project [ca_address_sk#47960]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#47971) AND (ca_gmt_offset#47971 = -7.00)) AND isnotnull(ca_address_sk#47960))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#47960, ca_gmt_offset#47971], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#47960, ca_address_id#47961, ca_street_number#47962, ca_street_name#47963, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#64594]\n      :                 +- *(4) BroadcastHashJoin [i_item_id#47974], [i_item_id#48190], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#47973)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#47973, i_item_id#47974], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#47973, i_item_id#47974, i_rec_start_date#47975, i_rec_end_date#47976, i_item_desc#4797..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#64590]\n      :                       +- *(3) Project [i_item_id#48190]\n      :                          +- *(3) Filter i_color#48206 IN (blanched,spring,seashell)\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_color#48206, i_item_id#48190], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#48189, i_item_id#48190, i_rec_start_date#48191, i_rec_end_date#48192, i_item_desc#4819..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_item_id#48071], functions=[sum(UnscaledValue(cs_ext_sales_price#48018))], output=[i_item_id#48071, total_sales#47906])\n      :  +- Exchange hashpartitioning(i_item_id#48071, 200), ENSURE_REQUIREMENTS, [id=#64774]\n      :     +- *(11) HashAggregate(keys=[i_item_id#48071], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#48018))], output=[i_item_id#48071, sum#48270L])\n      :        +- *(11) Project [cs_ext_sales_price#48018, i_item_id#48071]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#48010], [i_item_sk#48070], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#48010, cs_ext_sales_price#48018]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#48001], [ca_address_sk#48057], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#48001, cs_item_sk#48010, cs_ext_sales_price#48018]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#47995], [d_date_sk#48029], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#47995) AND isnotnull(cs_bill_addr_sk#48001)) AND isnotnull(cs_item_sk#48010))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#47995, cs_bill_addr_sk#48001, cs_item_sk#48010, cs_ext_sales_price#48018], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#47995, cs_sold_time_sk#47996, cs_ship_date_sk#47997, cs_bill_customer_sk#47998, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#48029], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64572]\n      :              :     +- ReusedExchange [ca_address_sk#48057], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64580]\n      :              +- ReusedExchange [i_item_sk#48070, i_item_id#48071], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#64594]\n      +- *(18) HashAggregate(keys=[i_item_id#48168], functions=[sum(UnscaledValue(ws_ext_sales_price#48115))], output=[i_item_id#48168, total_sales#47908])\n         +- Exchange hashpartitioning(i_item_id#48168, 200), ENSURE_REQUIREMENTS, [id=#64878]\n            +- *(17) HashAggregate(keys=[i_item_id#48168], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#48115))], output=[i_item_id#48168, sum#48272L])\n               +- *(17) Project [ws_ext_sales_price#48115, i_item_id#48168]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#48095], [i_item_sk#48167], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#48095, ws_ext_sales_price#48115]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#48099], [ca_address_sk#48154], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#48095, ws_bill_addr_sk#48099, ws_ext_sales_price#48115]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#48092], [d_date_sk#48126], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#48092) AND isnotnull(ws_bill_addr_sk#48099)) AND isnotnull(ws_item_sk#48095))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#48092, ws_item_sk#48095, ws_bill_addr_sk#48099, ws_ext_sales_price#48115], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#48092, ws_sold_time_sk#48093, ws_ship_date_sk#48094, ws_item_sk#48095, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#48126], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64572]\n                     :     +- ReusedExchange [ca_address_sk#48154], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#64580]\n                     +- ReusedExchange [i_item_sk#48167, i_item_id#48168], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#64594]\n",
    "iteration" : 2,
    "name" : "q56"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#48302, i_brand#48298, cc_name#48380, rn#48281, 200), ENSURE_REQUIREMENTS, [id=#65271]\n+- *(9) Project [i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, sum_sales#48279, avg_monthly_sales#48280, rn#48281]\n   +- *(9) Filter (((((isnotnull(d_year#48352) AND isnotnull(avg_monthly_sales#48280)) AND (d_year#48352 = 2000)) AND (avg_monthly_sales#48280 > 0.000000)) AND (CASE WHEN (avg_monthly_sales#48280 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#48279 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#48280 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#48280 as decimal(22,6)))), DecimalType(38,16), true) ELSE null END > 0.1000000000000000)) AND isnotnull(rn#48281))\n      +- Window [rank(d_year#48352, d_moy#48354) windowspecdefinition(i_category#48302, i_brand#48298, cc_name#48380, d_year#48352 ASC NULLS FIRST, d_moy#48354 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#48281], [i_category#48302, i_brand#48298, cc_name#48380], [d_year#48352 ASC NULLS FIRST, d_moy#48354 ASC NULLS FIRST]\n         +- *(8) Sort [i_category#48302 ASC NULLS FIRST, i_brand#48298 ASC NULLS FIRST, cc_name#48380 ASC NULLS FIRST, d_year#48352 ASC NULLS FIRST, d_moy#48354 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(i_category#48302, i_brand#48298, cc_name#48380, 200), ENSURE_REQUIREMENTS, [id=#65262]\n               +- *(7) Project [i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, d_moy#48354, sum_sales#48279, avg_monthly_sales#48280]\n                  +- Window [avg(_w0#48668) windowspecdefinition(i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#48280], [i_category#48302, i_brand#48298, cc_name#48380, d_year#48352]\n                     +- *(6) Sort [i_category#48302 ASC NULLS FIRST, i_brand#48298 ASC NULLS FIRST, cc_name#48380 ASC NULLS FIRST, d_year#48352 ASC NULLS FIRST], false, 0\n                        +- Exchange hashpartitioning(i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, 200), ENSURE_REQUIREMENTS, [id=#65254]\n                           +- *(5) HashAggregate(keys=[i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, d_moy#48354], functions=[sum(UnscaledValue(cs_sales_price#48333))], output=[i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, d_moy#48354, sum_sales#48279, _w0#48668])\n                              +- Exchange hashpartitioning(i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, d_moy#48354, 200), ENSURE_REQUIREMENTS, [id=#65250]\n                                 +- *(4) HashAggregate(keys=[i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, d_moy#48354], functions=[partial_sum(UnscaledValue(cs_sales_price#48333))], output=[i_category#48302, i_brand#48298, cc_name#48380, d_year#48352, d_moy#48354, sum#48807L])\n                                    +- *(4) Project [i_brand#48298, i_category#48302, cs_sales_price#48333, d_year#48352, d_moy#48354, cc_name#48380]\n                                       +- *(4) BroadcastHashJoin [cs_call_center_sk#48323], [cc_call_center_sk#48374], Inner, BuildRight, false\n                                          :- *(4) Project [i_brand#48298, i_category#48302, cs_call_center_sk#48323, cs_sales_price#48333, d_year#48352, d_moy#48354]\n                                          :  +- *(4) BroadcastHashJoin [cs_sold_date_sk#48312], [d_date_sk#48346], Inner, BuildRight, false\n                                          :     :- *(4) Project [i_brand#48298, i_category#48302, cs_sold_date_sk#48312, cs_call_center_sk#48323, cs_sales_price#48333]\n                                          :     :  +- *(4) BroadcastHashJoin [i_item_sk#48290], [cs_item_sk#48327], Inner, BuildLeft, false\n                                          :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#65228]\n                                          :     :     :  +- *(1) Filter ((isnotnull(i_item_sk#48290) AND isnotnull(i_category#48302)) AND isnotnull(i_brand#48298))\n                                          :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#48290, i_brand#48298, i_category#48302], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#48290, i_item_id#48291, i_rec_start_date#48292, i_rec_end_date#48293, i_item_desc#4829..., Partition Cols: []]\n                                          :     :     +- *(4) Filter ((isnotnull(cs_item_sk#48327) AND isnotnull(cs_sold_date_sk#48312)) AND isnotnull(cs_call_center_sk#48323))\n                                          :     :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#48312, cs_call_center_sk#48323, cs_item_sk#48327, cs_sales_price#48333], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#48312, cs_sold_time_sk#48313, cs_ship_date_sk#48314, cs_bill_customer_sk#48315, ..., Partition Cols: []]\n                                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#65237]\n                                          :        +- *(2) Filter ((((d_year#48352 = 2000) OR ((d_year#48352 = 1999) AND (d_moy#48354 = 12))) OR ((d_year#48352 = 2001) AND (d_moy#48354 = 1))) AND isnotnull(d_date_sk#48346))\n                                          :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#48346, d_year#48352, d_moy#48354], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#48346, d_date_id#48347, d_date#48348, d_month_seq#48349, d_week_seq#48350, d_quarter_s..., Partition Cols: []]\n                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#65244]\n                                             +- *(3) Filter (isnotnull(cc_call_center_sk#48374) AND isnotnull(cc_name#48380))\n                                                +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#48374, cc_name#48380], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#48374, cc_call_center_id#48375, cc_rec_start_date#48376, cc_rec_end_date#48377..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q57"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#48883, 200), ENSURE_REQUIREMENTS, [id=#65954]\n+- *(4) HashAggregate(keys=[i_item_id#48883], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#48874))], output=[i_item_id#48883, sum#49280L])\n   +- *(4) Project [ss_ext_sales_price#48874, i_item_id#48883]\n      +- *(4) BroadcastHashJoin [ss_sold_date_sk#48859], [d_date_sk#48904], Inner, BuildRight, false\n         :- *(4) Project [ss_sold_date_sk#48859, ss_ext_sales_price#48874, i_item_id#48883]\n         :  +- *(4) BroadcastHashJoin [ss_item_sk#48861], [i_item_sk#48882], Inner, BuildRight, false\n         :     :- *(4) Filter (isnotnull(ss_item_sk#48861) AND isnotnull(ss_sold_date_sk#48859))\n         :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#48859, ss_item_sk#48861, ss_ext_sales_price#48874], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#48859, ss_sold_time_sk#48860, ss_item_sk#48861, ss_customer_sk#48862, ss_cdemo_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#65933]\n         :        +- *(1) Filter (isnotnull(i_item_sk#48882) AND isnotnull(i_item_id#48883))\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#48882, i_item_id#48883], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#48882, i_item_id#48883, i_rec_start_date#48884, i_rec_end_date#48885, i_item_desc#4888..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#65948]\n            +- *(3) Project [d_date_sk#48904]\n               +- *(3) BroadcastHashJoin [d_date#48906], [d_date#49102], LeftSemi, BuildRight, false\n                  :- *(3) Filter isnotnull(d_date_sk#48904)\n                  :  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#48904, d_date#48906], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#48904, d_date_id#48905, d_date#48906, d_month_seq#48907, d_week_seq#48908, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#65943]\n                     +- *(2) Project [d_date#49102]\n                        +- *(2) Filter (isnotnull(d_week_seq#49104) AND (d_week_seq#49104 = Subquery scalar-subquery#48847, [id=#65820]))\n                           :  +- Subquery scalar-subquery#48847, [id=#65820]\n                           :     +- *(1) Project [d_week_seq#49132]\n                           :        +- *(1) Filter (isnotnull(d_date#49130) AND (d_date#49130 = 11101))\n                           :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#49130, d_week_seq#49132], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#49128, d_date_id#49129, d_date#49130, d_month_seq#49131, d_week_seq#49132, d_quarter_s..., Partition Cols: []]\n                           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#49102, d_week_seq#49104], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#49100, d_date_id#49101, d_date#49102, d_month_seq#49103, d_week_seq#49104, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q58"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_id1#49299, d_week_seq1#49298, 200), ENSURE_REQUIREMENTS, [id=#66474]\n+- *(5) Project [s_store_name#49380 AS s_store_name1#49297, d_week_seq#49351 AS d_week_seq1#49298, s_store_id#49376 AS s_store_id1#49299, sun_sales#49317 AS sun_sales1#49300, mon_sales#49318 AS mon_sales1#49301, tue_sales#49319 AS tue_sales1#49302, wed_sales#49320 AS wed_sales1#49303, thu_sales#49321 AS thu_sales1#49304, fri_sales#49322 AS fri_sales1#49305, sat_sales#49323 AS sat_sales1#49306]\n   +- *(5) BroadcastHashJoin [d_week_seq#49351], [d_week_seq#49408], Inner, BuildRight, false\n      :- *(5) Project [d_week_seq#49351, sun_sales#49317, mon_sales#49318, tue_sales#49319, wed_sales#49320, thu_sales#49321, fri_sales#49322, sat_sales#49323, s_store_id#49376, s_store_name#49380]\n      :  +- *(5) BroadcastHashJoin [ss_store_sk#49331], [s_store_sk#49375], Inner, BuildRight, false\n      :     :- *(5) HashAggregate(keys=[d_week_seq#49351, ss_store_sk#49331], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Sunday) THEN ss_sales_price#49337 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Monday) THEN ss_sales_price#49337 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Tuesday) THEN ss_sales_price#49337 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Wednesday) THEN ss_sales_price#49337 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Thursday) THEN ss_sales_price#49337 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Friday) THEN ss_sales_price#49337 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Saturday) THEN ss_sales_price#49337 ELSE null END))], output=[d_week_seq#49351, ss_store_sk#49331, sun_sales#49317, mon_sales#49318, tue_sales#49319, wed_sales#49320, thu_sales#49321, fri_sales#49322, sat_sales#49323])\n      :     :  +- Exchange hashpartitioning(d_week_seq#49351, ss_store_sk#49331, 200), ENSURE_REQUIREMENTS, [id=#66455]\n      :     :     +- *(2) HashAggregate(keys=[d_week_seq#49351, ss_store_sk#49331], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Sunday) THEN ss_sales_price#49337 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Monday) THEN ss_sales_price#49337 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Tuesday) THEN ss_sales_price#49337 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Wednesday) THEN ss_sales_price#49337 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Thursday) THEN ss_sales_price#49337 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Friday) THEN ss_sales_price#49337 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#49361 = Saturday) THEN ss_sales_price#49337 ELSE null END))], output=[d_week_seq#49351, ss_store_sk#49331, sum#49578L, sum#49579L, sum#49580L, sum#49581L, sum#49582L, sum#49583L, sum#49584L])\n      :     :        +- *(2) Project [ss_store_sk#49331, ss_sales_price#49337, d_week_seq#49351, d_day_name#49361]\n      :     :           +- *(2) BroadcastHashJoin [ss_sold_date_sk#49324], [d_date_sk#49347], Inner, BuildRight, false\n      :     :              :- *(2) Filter (isnotnull(ss_sold_date_sk#49324) AND isnotnull(ss_store_sk#49331))\n      :     :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#49324, ss_store_sk#49331, ss_sales_price#49337], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#49324, ss_sold_time_sk#49325, ss_item_sk#49326, ss_customer_sk#49327, ss_cdemo_s..., Partition Cols: []]\n      :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#66449]\n      :     :                 +- *(1) Filter (isnotnull(d_date_sk#49347) AND isnotnull(d_week_seq#49351))\n      :     :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#49347, d_week_seq#49351, d_day_name#49361], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#49347, d_date_id#49348, d_date#49349, d_month_seq#49350, d_week_seq#49351, d_quarter_s..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#66461]\n      :        +- *(3) Filter (isnotnull(s_store_sk#49375) AND isnotnull(s_store_id#49376))\n      :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#49375, s_store_id#49376, s_store_name#49380], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#49375, s_store_id#49376, s_rec_start_date#49377, s_rec_end_date#49378, s_closed_date_..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#66469]\n         +- *(4) Project [d_week_seq#49408]\n            +- *(4) Filter (((isnotnull(d_month_seq#49407) AND (d_month_seq#49407 >= 1197)) AND (d_month_seq#49407 <= 1208)) AND isnotnull(d_week_seq#49408))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#49407, d_week_seq#49408], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#49404, d_date_id#49405, d_date#49406, d_month_seq#49407, d_week_seq#49408, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q59"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_state#49638, 200), ENSURE_REQUIREMENTS, [id=#66837]\n+- *(13) HashAggregate(keys=[ca_state#49638], functions=[partial_count(1)], output=[ca_state#49638, count#49793L])\n   +- *(13) Project [ca_state#49638]\n      +- *(13) SortMergeJoin [ss_item_sk#49663], [i_item_sk#49712], Inner\n         :- *(8) Sort [ss_item_sk#49663 ASC NULLS FIRST], false, 0\n         :  +- Exchange hashpartitioning(ss_item_sk#49663, 200), ENSURE_REQUIREMENTS, [id=#66807]\n         :     +- *(7) Project [ca_state#49638, ss_item_sk#49663]\n         :        +- *(7) BroadcastHashJoin [ss_sold_date_sk#49661], [d_date_sk#49684], Inner, BuildRight, false\n         :           :- *(7) Project [ca_state#49638, ss_sold_date_sk#49661, ss_item_sk#49663]\n         :           :  +- *(7) SortMergeJoin [c_customer_sk#49643], [ss_customer_sk#49664], Inner\n         :           :     :- *(3) Sort [c_customer_sk#49643 ASC NULLS FIRST], false, 0\n         :           :     :  +- Exchange hashpartitioning(c_customer_sk#49643, 200), ENSURE_REQUIREMENTS, [id=#66783]\n         :           :     :     +- *(2) Project [ca_state#49638, c_customer_sk#49643]\n         :           :     :        +- *(2) BroadcastHashJoin [ca_address_sk#49630], [c_current_addr_sk#49647], Inner, BuildLeft, false\n         :           :     :           :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#66776]\n         :           :     :           :  +- *(1) Filter isnotnull(ca_address_sk#49630)\n         :           :     :           :     +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#49630, ca_state#49638], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#49630, ca_address_id#49631, ca_street_number#49632, ca_street_name#49633, ca_stree..., Partition Cols: []]\n         :           :     :           +- *(2) Filter (isnotnull(c_current_addr_sk#49647) AND isnotnull(c_customer_sk#49643))\n         :           :     :              +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#49643, c_current_addr_sk#49647], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#49643, c_customer_id#49644, c_current_cdemo_sk#49645, c_current_hdemo_sk#49646, c_..., Partition Cols: []]\n         :           :     +- *(5) Sort [ss_customer_sk#49664 ASC NULLS FIRST], false, 0\n         :           :        +- Exchange hashpartitioning(ss_customer_sk#49664, 200), ENSURE_REQUIREMENTS, [id=#66791]\n         :           :           +- *(4) Filter ((isnotnull(ss_customer_sk#49664) AND isnotnull(ss_sold_date_sk#49661)) AND isnotnull(ss_item_sk#49663))\n         :           :              +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#49661, ss_item_sk#49663, ss_customer_sk#49664], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#49661, ss_sold_time_sk#49662, ss_item_sk#49663, ss_customer_sk#49664, ss_cdemo_s..., Partition Cols: []]\n         :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#66802]\n         :              +- *(6) Project [d_date_sk#49684]\n         :                 +- *(6) Filter ((isnotnull(d_month_seq#49687) AND (d_month_seq#49687 = Subquery scalar-subquery#49624, [id=#66724])) AND isnotnull(d_date_sk#49684))\n         :                    :  +- Subquery scalar-subquery#49624, [id=#66724]\n         :                    :     +- *(2) HashAggregate(keys=[d_month_seq#49737], functions=[], output=[d_month_seq#49737])\n         :                    :        +- Exchange hashpartitioning(d_month_seq#49737, 200), ENSURE_REQUIREMENTS, [id=#66720]\n         :                    :           +- *(1) HashAggregate(keys=[d_month_seq#49737], functions=[], output=[d_month_seq#49737])\n         :                    :              +- *(1) Project [d_month_seq#49737]\n         :                    :                 +- *(1) Filter (((isnotnull(d_year#49740) AND isnotnull(d_moy#49742)) AND (d_year#49740 = 2002)) AND (d_moy#49742 = 3))\n         :                    :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#49737, d_moy#49742, d_year#49740], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#49734, d_date_id#49735, d_date#49736, d_month_seq#49737, d_week_seq#49738, d_quarter_s..., Partition Cols: []]\n         :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#49684, d_month_seq#49687], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#49684, d_date_id#49685, d_date#49686, d_month_seq#49687, d_week_seq#49688, d_quarter_s..., Partition Cols: []]\n         +- *(12) Sort [i_item_sk#49712 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(i_item_sk#49712, 200), ENSURE_REQUIREMENTS, [id=#66828]\n               +- *(11) Project [i_item_sk#49712]\n                  +- *(11) Filter (cast(i_current_price#49717 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#49785)), DecimalType(14,7), true))\n                     +- *(11) BroadcastHashJoin [i_category#49724], [i_category#49774], LeftOuter, BuildRight, false\n                        :- *(11) Filter (isnotnull(i_current_price#49717) AND isnotnull(i_item_sk#49712))\n                        :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#49712, i_current_price#49717, i_category#49724], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#49712, i_item_id#49713, i_rec_start_date#49714, i_rec_end_date#49715, i_item_desc#4971..., Partition Cols: []]\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#66822]\n                           +- *(10) HashAggregate(keys=[i_category#49774], functions=[avg(UnscaledValue(i_current_price#49767))], output=[avg(i_current_price)#49785, i_category#49774])\n                              +- Exchange hashpartitioning(i_category#49774, 200), ENSURE_REQUIREMENTS, [id=#66818]\n                                 +- *(9) HashAggregate(keys=[i_category#49774], functions=[partial_avg(UnscaledValue(i_current_price#49767))], output=[i_category#49774, sum#49796, count#49797L])\n                                    +- *(9) Filter isnotnull(i_category#49774)\n                                       +- Scan hive tpcds_sf1_iceberg.item [i_current_price#49767, i_category#49774], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#49762, i_item_id#49763, i_rec_start_date#49764, i_rec_end_date#49765, i_item_desc#4976..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q6"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#49873, 200), ENSURE_REQUIREMENTS, [id=#67471]\n+- *(19) HashAggregate(keys=[i_item_id#49873], functions=[partial_sum(total_sales#49803)], output=[i_item_id#49873, sum#50164, isEmpty#50165])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_item_id#49873], functions=[sum(UnscaledValue(ss_ext_sales_price#49823))], output=[i_item_id#49873, total_sales#49803])\n      :  +- Exchange hashpartitioning(i_item_id#49873, 200), ENSURE_REQUIREMENTS, [id=#67161]\n      :     +- *(5) HashAggregate(keys=[i_item_id#49873], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#49823))], output=[i_item_id#49873, sum#50167L])\n      :        +- *(5) Project [ss_ext_sales_price#49823, i_item_id#49873]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#49810], [i_item_sk#49872], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#49810, ss_ext_sales_price#49823]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#49814], [ca_address_sk#49859], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#49810, ss_addr_sk#49814, ss_ext_sales_price#49823]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#49808], [d_date_sk#49831], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#49808) AND isnotnull(ss_addr_sk#49814)) AND isnotnull(ss_item_sk#49810))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#49808, ss_item_sk#49810, ss_addr_sk#49814, ss_ext_sales_price#49823], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#49808, ss_sold_time_sk#49809, ss_item_sk#49810, ss_customer_sk#49811, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67133]\n      :              :     :        +- *(1) Project [d_date_sk#49831]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#49837) AND isnotnull(d_moy#49839)) AND (d_year#49837 = 1998)) AND (d_moy#49839 = 10)) AND isnotnull(d_date_sk#49831))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#49831, d_moy#49839, d_year#49837], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#49831, d_date_id#49832, d_date#49833, d_month_seq#49834, d_week_seq#49835, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67141]\n      :              :        +- *(2) Project [ca_address_sk#49859]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#49870) AND (ca_gmt_offset#49870 = -5.00)) AND isnotnull(ca_address_sk#49859))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#49859, ca_gmt_offset#49870], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#49859, ca_address_id#49860, ca_street_number#49861, ca_street_name#49862, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#67155]\n      :                 +- *(4) BroadcastHashJoin [i_item_id#49873], [i_item_id#50089], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#49872)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#49872, i_item_id#49873], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#49872, i_item_id#49873, i_rec_start_date#49874, i_rec_end_date#49875, i_item_desc#4987..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#67151]\n      :                       +- *(3) Project [i_item_id#50089]\n      :                          +- *(3) Filter (isnotnull(i_category#50100) AND (i_category#50100 = Shoes))\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_category#50100, i_item_id#50089], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#50088, i_item_id#50089, i_rec_start_date#50090, i_rec_end_date#50091, i_item_desc#5009..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_item_id#49970], functions=[sum(UnscaledValue(cs_ext_sales_price#49917))], output=[i_item_id#49970, total_sales#49805])\n      :  +- Exchange hashpartitioning(i_item_id#49970, 200), ENSURE_REQUIREMENTS, [id=#67335]\n      :     +- *(11) HashAggregate(keys=[i_item_id#49970], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#49917))], output=[i_item_id#49970, sum#50169L])\n      :        +- *(11) Project [cs_ext_sales_price#49917, i_item_id#49970]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#49909], [i_item_sk#49969], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#49909, cs_ext_sales_price#49917]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#49900], [ca_address_sk#49956], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#49900, cs_item_sk#49909, cs_ext_sales_price#49917]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#49894], [d_date_sk#49928], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#49894) AND isnotnull(cs_bill_addr_sk#49900)) AND isnotnull(cs_item_sk#49909))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#49894, cs_bill_addr_sk#49900, cs_item_sk#49909, cs_ext_sales_price#49917], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#49894, cs_sold_time_sk#49895, cs_ship_date_sk#49896, cs_bill_customer_sk#49897, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#49928], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67133]\n      :              :     +- ReusedExchange [ca_address_sk#49956], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67141]\n      :              +- ReusedExchange [i_item_sk#49969, i_item_id#49970], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#67155]\n      +- *(18) HashAggregate(keys=[i_item_id#50067], functions=[sum(UnscaledValue(ws_ext_sales_price#50014))], output=[i_item_id#50067, total_sales#49807])\n         +- Exchange hashpartitioning(i_item_id#50067, 200), ENSURE_REQUIREMENTS, [id=#67439]\n            +- *(17) HashAggregate(keys=[i_item_id#50067], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#50014))], output=[i_item_id#50067, sum#50171L])\n               +- *(17) Project [ws_ext_sales_price#50014, i_item_id#50067]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#49994], [i_item_sk#50066], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#49994, ws_ext_sales_price#50014]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#49998], [ca_address_sk#50053], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#49994, ws_bill_addr_sk#49998, ws_ext_sales_price#50014]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#49991], [d_date_sk#50025], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#49991) AND isnotnull(ws_bill_addr_sk#49998)) AND isnotnull(ws_item_sk#49994))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#49991, ws_item_sk#49994, ws_bill_addr_sk#49998, ws_ext_sales_price#50014], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#49991, ws_sold_time_sk#49992, ws_ship_date_sk#49993, ws_item_sk#49994, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#50025], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67133]\n                     :     +- ReusedExchange [ca_address_sk#50053], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67141]\n                     +- ReusedExchange [i_item_sk#50066, i_item_id#50067], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#67155]\n",
    "iteration" : 2,
    "name" : "q60"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#67945]\n+- *(14) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#50347))], output=[sum#50474L])\n   +- *(14) Project [ss_ext_sales_price#50347]\n      +- *(14) BroadcastHashJoin [ss_item_sk#50334], [i_item_sk#50443], Inner, BuildRight, false\n         :- *(14) Project [ss_item_sk#50334, ss_ext_sales_price#50347]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#50416], [ca_address_sk#50430], Inner, BuildRight, false\n         :     :- *(14) Project [ss_item_sk#50334, ss_ext_sales_price#50347, c_current_addr_sk#50416]\n         :     :  +- *(14) BroadcastHashJoin [ss_customer_sk#50335], [c_customer_sk#50412], Inner, BuildRight, false\n         :     :     :- *(14) Project [ss_item_sk#50334, ss_customer_sk#50335, ss_ext_sales_price#50347]\n         :     :     :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#50332], [d_date_sk#50384], Inner, BuildRight, false\n         :     :     :     :- *(14) Project [ss_sold_date_sk#50332, ss_item_sk#50334, ss_customer_sk#50335, ss_ext_sales_price#50347]\n         :     :     :     :  +- *(14) BroadcastHashJoin [ss_store_sk#50339], [s_store_sk#50355], Inner, BuildRight, false\n         :     :     :     :     :- *(14) Filter (((isnotnull(ss_store_sk#50339) AND isnotnull(ss_sold_date_sk#50332)) AND isnotnull(ss_customer_sk#50335)) AND isnotnull(ss_item_sk#50334))\n         :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#50332, ss_item_sk#50334, ss_customer_sk#50335, ss_store_sk#50339, ss_ext_sales_price#50347], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#50332, ss_sold_time_sk#50333, ss_item_sk#50334, ss_customer_sk#50335, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     +- ReusedExchange [s_store_sk#50355], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67745]\n         :     :     :     +- ReusedExchange [d_date_sk#50384], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67761]\n         :     :     +- ReusedExchange [c_customer_sk#50412, c_current_addr_sk#50416], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#67768]\n         :     +- ReusedExchange [ca_address_sk#50430], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67776]\n         +- ReusedExchange [i_item_sk#50443], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#67784]\n",
    "iteration" : 2,
    "name" : "q61"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(substr(w_warehouse_name#50522, 1, 20)#50611, sm_type#50536, web_name#50544, 200), ENSURE_REQUIREMENTS, [id=#68160]\n+- *(5) HashAggregate(keys=[substr(w_warehouse_name#50522, 1, 20) AS substr(w_warehouse_name#50522, 1, 20)#50611, sm_type#50536, web_name#50544], functions=[partial_sum(cast(CASE WHEN ((ws_ship_date_sk#50488 - ws_sold_date_sk#50486) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#50488 - ws_sold_date_sk#50486) > 30) AND ((ws_ship_date_sk#50488 - ws_sold_date_sk#50486) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#50488 - ws_sold_date_sk#50486) > 60) AND ((ws_ship_date_sk#50488 - ws_sold_date_sk#50486) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#50488 - ws_sold_date_sk#50486) > 90) AND ((ws_ship_date_sk#50488 - ws_sold_date_sk#50486) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((ws_ship_date_sk#50488 - ws_sold_date_sk#50486) > 120) THEN 1 ELSE 0 END as bigint))], output=[substr(w_warehouse_name#50522, 1, 20)#50611, sm_type#50536, web_name#50544, sum#50617L, sum#50618L, sum#50619L, sum#50620L, sum#50621L])\n   +- *(5) Project [ws_sold_date_sk#50486, ws_ship_date_sk#50488, w_warehouse_name#50522, sm_type#50536, web_name#50544]\n      +- *(5) BroadcastHashJoin [ws_ship_date_sk#50488], [d_date_sk#50566], Inner, BuildRight, false\n         :- *(5) Project [ws_sold_date_sk#50486, ws_ship_date_sk#50488, w_warehouse_name#50522, sm_type#50536, web_name#50544]\n         :  +- *(5) BroadcastHashJoin [ws_web_site_sk#50499], [web_site_sk#50540], Inner, BuildRight, false\n         :     :- *(5) Project [ws_sold_date_sk#50486, ws_ship_date_sk#50488, ws_web_site_sk#50499, w_warehouse_name#50522, sm_type#50536]\n         :     :  +- *(5) BroadcastHashJoin [ws_ship_mode_sk#50500], [sm_ship_mode_sk#50534], Inner, BuildRight, false\n         :     :     :- *(5) Project [ws_sold_date_sk#50486, ws_ship_date_sk#50488, ws_web_site_sk#50499, ws_ship_mode_sk#50500, w_warehouse_name#50522]\n         :     :     :  +- *(5) BroadcastHashJoin [ws_warehouse_sk#50501], [w_warehouse_sk#50520], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(ws_warehouse_sk#50501) AND isnotnull(ws_ship_mode_sk#50500)) AND isnotnull(ws_web_site_sk#50499)) AND isnotnull(ws_ship_date_sk#50488))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#50486, ws_ship_date_sk#50488, ws_web_site_sk#50499, ws_ship_mode_sk#50500, ws_warehouse_sk#50501], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#50486, ws_sold_time_sk#50487, ws_ship_date_sk#50488, ws_item_sk#50489, ws_bill_c..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#68132]\n         :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#50520)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#50520, w_warehouse_name#50522], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#50520, w_warehouse_id#50521, w_warehouse_name#50522, w_warehouse_sq_ft#50523, w_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#68139]\n         :     :        +- *(2) Filter isnotnull(sm_ship_mode_sk#50534)\n         :     :           +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_ship_mode_sk#50534, sm_type#50536], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#50534, sm_ship_mode_id#50535, sm_type#50536, sm_code#50537, sm_carrier#50538, sm..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#68146]\n         :        +- *(3) Filter isnotnull(web_site_sk#50540)\n         :           +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#50540, web_name#50544], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#50540, web_site_id#50541, web_rec_start_date#50542, web_rec_end_date#50543, web_name..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#68154]\n            +- *(4) Project [d_date_sk#50566]\n               +- *(4) Filter (((isnotnull(d_month_seq#50569) AND (d_month_seq#50569 >= 1194)) AND (d_month_seq#50569 <= 1205)) AND isnotnull(d_date_sk#50566))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#50566, d_month_seq#50569], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#50566, d_date_id#50567, d_date#50568, d_month_seq#50569, d_week_seq#50570, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q62"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manager_id#50653, 200), ENSURE_REQUIREMENTS, [id=#68291]\n+- *(5) HashAggregate(keys=[i_manager_id#50653, d_moy#50686], functions=[sum(UnscaledValue(ss_sales_price#50668))], output=[i_manager_id#50653, sum_sales#50631, _w0#50738])\n   +- Exchange hashpartitioning(i_manager_id#50653, d_moy#50686, 200), ENSURE_REQUIREMENTS, [id=#68287]\n      +- *(4) HashAggregate(keys=[i_manager_id#50653, d_moy#50686], functions=[partial_sum(UnscaledValue(ss_sales_price#50668))], output=[i_manager_id#50653, d_moy#50686, sum#50743L])\n         +- *(4) Project [i_manager_id#50653, ss_sales_price#50668, d_moy#50686]\n            +- *(4) BroadcastHashJoin [ss_store_sk#50662], [s_store_sk#50706], Inner, BuildRight, false\n               :- *(4) Project [i_manager_id#50653, ss_store_sk#50662, ss_sales_price#50668, d_moy#50686]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#50655], [d_date_sk#50678], Inner, BuildRight, false\n               :     :- *(4) Project [i_manager_id#50653, ss_sold_date_sk#50655, ss_store_sk#50662, ss_sales_price#50668]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#50633], [ss_item_sk#50657], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#68264]\n               :     :     :  +- *(1) Project [i_item_sk#50633, i_manager_id#50653]\n               :     :     :     +- *(1) Filter ((((i_category#50645 IN (Books,Children,Electronics) AND i_class#50643 IN (personal,portable,reference,self-help)) AND i_brand#50641 IN (scholaramalgamalg #14,scholaramalgamalg #7,exportiunivamalg #9,scholaramalgamalg #9)) OR ((i_category#50645 IN (Women,Music,Men) AND i_class#50643 IN (accessories,classical,fragrances,pants)) AND i_brand#50641 IN (amalgimporto #1,edu packscholar #1,exportiimporto #1,importoamalg #1))) AND isnotnull(i_item_sk#50633))\n               :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#50641, i_category#50645, i_class#50643, i_item_sk#50633, i_manager_id#50653], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#50633, i_item_id#50634, i_rec_start_date#50635, i_rec_end_date#50636, i_item_desc#5063..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#50657) AND isnotnull(ss_sold_date_sk#50655)) AND isnotnull(ss_store_sk#50662))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#50655, ss_item_sk#50657, ss_store_sk#50662, ss_sales_price#50668], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#50655, ss_sold_time_sk#50656, ss_item_sk#50657, ss_customer_sk#50658, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#68274]\n               :        +- *(2) Project [d_date_sk#50678, d_moy#50686]\n               :           +- *(2) Filter (d_month_seq#50681 INSET (1233,1222,1228,1232,1223,1227,1231,1226,1224,1225,1230,1229) AND isnotnull(d_date_sk#50678))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#50678, d_month_seq#50681, d_moy#50686], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#50678, d_date_id#50679, d_date#50680, d_month_seq#50681, d_week_seq#50682, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#68281]\n                  +- *(3) Filter isnotnull(s_store_sk#50706)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#50706], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#50706, s_store_id#50707, s_rec_start_date#50708, s_rec_end_date#50709, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q63"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(product_name#50756 ASC NULLS FIRST, store_name#50758 ASC NULLS FIRST, cnt#51490L ASC NULLS FIRST, s1#50772 ASC NULLS FIRST, s1#51491 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#69759]\n+- *(47) Project [product_name#50756, store_name#50758, store_zip#50759, b_street_number#50760, b_street_name#50761, b_city#50762, b_zip#50763, c_street_number#50764, c_street_name#50765, c_city#50766, c_zip#50767, syear#50768, cnt#50771L, s1#50772 AS s11#50748, s2#50773 AS s21#50749, s3#50774 AS s31#50750, s1#51491 AS s12#50751, s2#51492 AS s22#50752, s3#51493 AS s32#50753, syear#51487, cnt#51490L, s1#50772, s1#51491]\n   +- *(47) SortMergeJoin [item_sk#50757, store_name#50758, store_zip#50759], [item_sk#51476, store_name#51477, store_zip#51478], Inner, (cnt#51490L <= cnt#50771L)\n      :- *(23) Sort [item_sk#50757 ASC NULLS FIRST, store_name#50758 ASC NULLS FIRST, store_zip#50759 ASC NULLS FIRST], false, 0\n      :  +- Exchange hashpartitioning(item_sk#50757, store_name#50758, store_zip#50759, 200), ENSURE_REQUIREMENTS, [id=#69457]\n      :     +- *(22) HashAggregate(keys=[i_product_name#51112, i_item_sk#51091, s_store_name#50970, s_zip#50990, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068, ca_street_number#51074, ca_street_name#51075, ca_city#51078, ca_zip#51081, d_year#50887, d_year#50915, d_year#50943], functions=[count(1), sum(UnscaledValue(ss_wholesale_cost#50788)), sum(UnscaledValue(ss_list_price#50789)), sum(UnscaledValue(ss_coupon_amt#50796))], output=[product_name#50756, item_sk#50757, store_name#50758, store_zip#50759, b_street_number#50760, b_street_name#50761, b_city#50762, b_zip#50763, c_street_number#50764, c_street_name#50765, c_city#50766, c_zip#50767, syear#50768, cnt#50771L, s1#50772, s2#50773, s3#50774])\n      :        +- *(22) HashAggregate(keys=[i_product_name#51112, i_item_sk#51091, s_store_name#50970, s_zip#50990, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068, ca_street_number#51074, ca_street_name#51075, ca_city#51078, ca_zip#51081, d_year#50887, d_year#50915, d_year#50943], functions=[partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#50788)), partial_sum(UnscaledValue(ss_list_price#50789)), partial_sum(UnscaledValue(ss_coupon_amt#50796))], output=[i_product_name#51112, i_item_sk#51091, s_store_name#50970, s_zip#50990, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068, ca_street_number#51074, ca_street_name#51075, ca_city#51078, ca_zip#51081, d_year#50887, d_year#50915, d_year#50943, count#51523L, sum#51524L, sum#51525L, sum#51526L])\n      :           +- *(22) Project [ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, d_year#50915, d_year#50943, s_store_name#50970, s_zip#50990, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068, ca_street_number#51074, ca_street_name#51075, ca_city#51078, ca_zip#51081, i_item_sk#51091, i_product_name#51112]\n      :              +- *(22) BroadcastHashJoin [ss_item_sk#50779], [i_item_sk#51091], Inner, BuildRight, false\n      :                 :- *(22) Project [ss_item_sk#50779, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, d_year#50915, d_year#50943, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068, ca_street_number#51074, ca_street_name#51075, ca_city#51078, ca_zip#51081]\n      :                 :  +- *(22) BroadcastHashJoin [hd_income_band_sk#51055], [ib_income_band_sk#51088], Inner, BuildRight, false\n      :                 :     :- *(22) Project [ss_item_sk#50779, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, d_year#50915, d_year#50943, hd_income_band_sk#51055, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068, ca_street_number#51074, ca_street_name#51075, ca_city#51078, ca_zip#51081]\n      :                 :     :  +- *(22) BroadcastHashJoin [hd_income_band_sk#51050], [ib_income_band_sk#51085], Inner, BuildRight, false\n      :                 :     :     :- *(22) Project [ss_item_sk#50779, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, d_year#50915, d_year#50943, hd_income_band_sk#51050, hd_income_band_sk#51055, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068, ca_street_number#51074, ca_street_name#51075, ca_city#51078, ca_zip#51081]\n      :                 :     :     :  +- *(22) BroadcastHashJoin [c_current_addr_sk#50998], [ca_address_sk#51072], Inner, BuildRight, false\n      :                 :     :     :     :- *(22) Project [ss_item_sk#50779, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_addr_sk#50998, d_year#50915, d_year#50943, hd_income_band_sk#51050, hd_income_band_sk#51055, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068]\n      :                 :     :     :     :  +- *(22) BroadcastHashJoin [ss_addr_sk#50783], [ca_address_sk#51059], Inner, BuildRight, false\n      :                 :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_addr_sk#50783, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_addr_sk#50998, d_year#50915, d_year#50943, hd_income_band_sk#51050, hd_income_band_sk#51055]\n      :                 :     :     :     :     :  +- *(22) BroadcastHashJoin [c_current_hdemo_sk#50997], [hd_demo_sk#51054], Inner, BuildRight, false\n      :                 :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_addr_sk#50783, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_hdemo_sk#50997, c_current_addr_sk#50998, d_year#50915, d_year#50943, hd_income_band_sk#51050]\n      :                 :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_hdemo_sk#50782], [hd_demo_sk#51049], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_hdemo_sk#50997, c_current_addr_sk#50998, d_year#50915, d_year#50943]\n      :                 :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_promo_sk#50785], [p_promo_sk#51030], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_hdemo_sk#50997, c_current_addr_sk#50998, d_year#50915, d_year#50943]\n      :                 :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_current_cdemo_sk#50996], [cd_demo_sk#51021], Inner, BuildRight, NOT (cd_marital_status#51014 = cd_marital_status#51023), false\n      :                 :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_cdemo_sk#50996, c_current_hdemo_sk#50997, c_current_addr_sk#50998, d_year#50915, d_year#50943, cd_marital_status#51014]\n      :                 :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_cdemo_sk#50781], [cd_demo_sk#51012], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_cdemo_sk#50781, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_cdemo_sk#50996, c_current_hdemo_sk#50997, c_current_addr_sk#50998, d_year#50915, d_year#50943]\n      :                 :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_first_shipto_date_sk#50999], [d_date_sk#50937], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_cdemo_sk#50781, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_cdemo_sk#50996, c_current_hdemo_sk#50997, c_current_addr_sk#50998, c_first_shipto_date_sk#50999, d_year#50915]\n      :                 :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_first_sales_date_sk#51000], [d_date_sk#50909], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_cdemo_sk#50781, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990, c_current_cdemo_sk#50996, c_current_hdemo_sk#50997, c_current_addr_sk#50998, c_first_shipto_date_sk#50999, c_first_sales_date_sk#51000]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_customer_sk#50780], [c_customer_sk#50994], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_customer_sk#50780, ss_cdemo_sk#50781, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887, s_store_name#50970, s_zip#50990]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_store_sk#50784], [s_store_sk#50965], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#50779, ss_customer_sk#50780, ss_cdemo_sk#50781, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_store_sk#50784, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796, d_year#50887]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_sold_date_sk#50777], [d_date_sk#50881], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_sold_date_sk#50777, ss_item_sk#50779, ss_customer_sk#50780, ss_cdemo_sk#50781, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_store_sk#50784, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) SortMergeJoin [ss_item_sk#50779], [cs_item_sk#50835], Inner\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(3) Sort [ss_item_sk#50779 ASC NULLS FIRST], false, 0\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- Exchange hashpartitioning(ss_item_sk#50779, 200), ENSURE_REQUIREMENTS, [id=#69064]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#50777, ss_item_sk#50779, ss_customer_sk#50780, ss_cdemo_sk#50781, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_store_sk#50784, ss_promo_sk#50785, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_item_sk#50779, ss_ticket_number#50786L], [sr_item_sk#50802, sr_ticket_number#50809L], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           :- *(2) Filter ((((((((isnotnull(ss_item_sk#50779) AND isnotnull(ss_ticket_number#50786L)) AND isnotnull(ss_sold_date_sk#50777)) AND isnotnull(ss_store_sk#50784)) AND isnotnull(ss_customer_sk#50780)) AND isnotnull(ss_cdemo_sk#50781)) AND isnotnull(ss_promo_sk#50785)) AND isnotnull(ss_hdemo_sk#50782)) AND isnotnull(ss_addr_sk#50783))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#50777, ss_item_sk#50779, ss_customer_sk#50780, ss_cdemo_sk#50781, ss_hdemo_sk#50782, ss_addr_sk#50783, ss_store_sk#50784, ss_promo_sk#50785, ss_ticket_number#50786L, ss_wholesale_cost#50788, ss_list_price#50789, ss_coupon_amt#50796], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#50777, ss_sold_time_sk#50778, ss_item_sk#50779, ss_customer_sk#50780, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#69059]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(1) Filter (isnotnull(sr_item_sk#50802) AND isnotnull(sr_ticket_number#50809L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#50802, sr_ticket_number#50809L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#50800, sr_return_time_sk#50801, sr_item_sk#50802, sr_customer_sk#50803, sr_c..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(6) Sort [cs_item_sk#50835 ASC NULLS FIRST], false, 0\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(6) Project [cs_item_sk#50835]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- *(6) Filter (isnotnull(sum(cs_ext_list_price#50845)#51456) AND (cast(sum(cs_ext_list_price#50845)#51456 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#50877 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#50878 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#50879 as decimal(9,2)))), DecimalType(9,2), true))#51457)), DecimalType(21,2), true)))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(6) HashAggregate(keys=[cs_item_sk#50835], functions=[sum(UnscaledValue(cs_ext_list_price#50845)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#50877 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#50878 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#50879 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#50835, sum(cs_ext_list_price#50845)#51456, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#50877 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#50878 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#50879 as decimal(9,2)))), DecimalType(9,2), true))#51457])\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- Exchange hashpartitioning(cs_item_sk#50835, 200), ENSURE_REQUIREMENTS, [id=#69080]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                    +- *(5) HashAggregate(keys=[cs_item_sk#50835], functions=[partial_sum(UnscaledValue(cs_ext_list_price#50845)), partial_sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#50877 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#50878 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#50879 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#50835, sum#51530L, sum#51531, isEmpty#51532])\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                       +- *(5) Project [cs_item_sk#50835, cs_ext_list_price#50845, cr_refunded_cash#50877, cr_reversed_charge#50878, cr_store_credit#50879]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                          +- *(5) BroadcastHashJoin [cs_item_sk#50835, cs_order_number#50837L], [cr_item_sk#50856, cr_order_number#50870L], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :- *(5) Filter (isnotnull(cs_item_sk#50835) AND isnotnull(cs_order_number#50837L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#50835, cs_order_number#50837L, cs_ext_list_price#50845], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#50820, cs_sold_time_sk#50821, cs_ship_date_sk#50822, cs_bill_customer_sk#50823, ..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#69074]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                +- *(4) Filter (isnotnull(cr_item_sk#50856) AND isnotnull(cr_order_number#50870L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                   +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#50856, cr_order_number#50870L, cr_refunded_cash#50877, cr_reversed_charge#50878, cr_store_credit#50879], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#50854, cr_returned_time_sk#50855, cr_item_sk#50856, cr_refunded_customer_sk#..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69093]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(7) Filter ((isnotnull(d_year#50887) AND (d_year#50887 = 2001)) AND isnotnull(d_date_sk#50881))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#50881, d_year#50887], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#50881, d_date_id#50882, d_date#50883, d_month_seq#50884, d_week_seq#50885, d_quarter_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69100]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(8) Filter ((isnotnull(s_store_sk#50965) AND isnotnull(s_store_name#50970)) AND isnotnull(s_zip#50990))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#50965, s_store_name#50970, s_zip#50990], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#50965, s_store_id#50966, s_rec_start_date#50967, s_rec_end_date#50968, s_closed_date_..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69107]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :        +- *(9) Filter (((((isnotnull(c_customer_sk#50994) AND isnotnull(c_first_sales_date_sk#51000)) AND isnotnull(c_first_shipto_date_sk#50999)) AND isnotnull(c_current_cdemo_sk#50996)) AND isnotnull(c_current_hdemo_sk#50997)) AND isnotnull(c_current_addr_sk#50998))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#50994, c_current_cdemo_sk#50996, c_current_hdemo_sk#50997, c_current_addr_sk#50998, c_first_shipto_date_sk#50999, c_first_sales_date_sk#51000], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#50994, c_customer_id#50995, c_current_cdemo_sk#50996, c_current_hdemo_sk#50997, c_..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69114]\n      :                 :     :     :     :     :     :     :     :     :     :     :        +- *(10) Filter isnotnull(d_date_sk#50909)\n      :                 :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#50909, d_year#50915], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#50909, d_date_id#50910, d_date#50911, d_month_seq#50912, d_week_seq#50913, d_quarter_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#50937, d_year#50943], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69114]\n      :                 :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69128]\n      :                 :     :     :     :     :     :     :     :     :        +- *(12) Filter (isnotnull(cd_demo_sk#51012) AND isnotnull(cd_marital_status#51014))\n      :                 :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#51012, cd_marital_status#51014], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#51012, cd_gender#51013, cd_marital_status#51014, cd_education_status#51015, cd_purcha..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#51021, cd_marital_status#51023], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69128]\n      :                 :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69142]\n      :                 :     :     :     :     :     :     :        +- *(14) Filter isnotnull(p_promo_sk#51030)\n      :                 :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.promotion [p_promo_sk#51030], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#51030, p_promo_id#51031, p_start_date_sk#51032, p_end_date_sk#51033, p_item_sk#51034,..., Partition Cols: []]\n      :                 :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69149]\n      :                 :     :     :     :     :     :        +- *(15) Filter (isnotnull(hd_demo_sk#51049) AND isnotnull(hd_income_band_sk#51050))\n      :                 :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#51049, hd_income_band_sk#51050], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#51049, hd_income_band_sk#51050, hd_buy_potential#51051, hd_dep_count#51052, hd_vehicl..., Partition Cols: []]\n      :                 :     :     :     :     :     +- ReusedExchange [hd_demo_sk#51054, hd_income_band_sk#51055], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69149]\n      :                 :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69163]\n      :                 :     :     :     :        +- *(17) Filter isnotnull(ca_address_sk#51059)\n      :                 :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#51059, ca_street_number#51061, ca_street_name#51062, ca_city#51065, ca_zip#51068], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#51059, ca_address_id#51060, ca_street_number#51061, ca_street_name#51062, ca_stree..., Partition Cols: []]\n      :                 :     :     :     +- ReusedExchange [ca_address_sk#51072, ca_street_number#51074, ca_street_name#51075, ca_city#51078, ca_zip#51081], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69163]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69177]\n      :                 :     :        +- *(19) Filter isnotnull(ib_income_band_sk#51085)\n      :                 :     :           +- Scan hive tpcds_sf1_iceberg.income_band [ib_income_band_sk#51085], HiveTableRelation [`tpcds_sf1_iceberg`.`income_band`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ib_income_band_sk#51085, ib_lower_bound#51086, ib_upper_bound#51087], Partition Cols: []]\n      :                 :     +- ReusedExchange [ib_income_band_sk#51088], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69177]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69192]\n      :                    +- *(21) Project [i_item_sk#51091, i_product_name#51112]\n      :                       +- *(21) Filter ((((((isnotnull(i_current_price#51096) AND i_color#51108 IN (ivory,purple,almond,bisque,lawn,azure)) AND (i_current_price#51096 >= 60.00)) AND (i_current_price#51096 <= 70.00)) AND (i_current_price#51096 >= 61.00)) AND (i_current_price#51096 <= 75.00)) AND isnotnull(i_item_sk#51091))\n      :                          +- Scan hive tpcds_sf1_iceberg.item [i_color#51108, i_current_price#51096, i_item_sk#51091, i_product_name#51112], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#51091, i_item_id#51092, i_rec_start_date#51093, i_rec_end_date#51094, i_item_desc#5109..., Partition Cols: []]\n      +- *(46) Sort [item_sk#51476 ASC NULLS FIRST, store_name#51477 ASC NULLS FIRST, store_zip#51478 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(item_sk#51476, store_name#51477, store_zip#51478, 200), ENSURE_REQUIREMENTS, [id=#69751]\n            +- *(45) HashAggregate(keys=[i_product_name#51448, i_item_sk#51427, s_store_name#51306, s_zip#51326, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404, ca_street_number#51410, ca_street_name#51411, ca_city#51414, ca_zip#51417, d_year#51223, d_year#51251, d_year#51279], functions=[count(1), sum(UnscaledValue(ss_wholesale_cost#51124)), sum(UnscaledValue(ss_list_price#51125)), sum(UnscaledValue(ss_coupon_amt#51132))], output=[item_sk#51476, store_name#51477, store_zip#51478, syear#51487, cnt#51490L, s1#51491, s2#51492, s3#51493])\n               +- *(45) HashAggregate(keys=[i_product_name#51448, i_item_sk#51427, s_store_name#51306, s_zip#51326, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404, ca_street_number#51410, ca_street_name#51411, ca_city#51414, ca_zip#51417, d_year#51223, d_year#51251, d_year#51279], functions=[partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#51124)), partial_sum(UnscaledValue(ss_list_price#51125)), partial_sum(UnscaledValue(ss_coupon_amt#51132))], output=[i_product_name#51448, i_item_sk#51427, s_store_name#51306, s_zip#51326, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404, ca_street_number#51410, ca_street_name#51411, ca_city#51414, ca_zip#51417, d_year#51223, d_year#51251, d_year#51279, count#51537L, sum#51538L, sum#51539L, sum#51540L])\n                  +- *(45) Project [ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, d_year#51251, d_year#51279, s_store_name#51306, s_zip#51326, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404, ca_street_number#51410, ca_street_name#51411, ca_city#51414, ca_zip#51417, i_item_sk#51427, i_product_name#51448]\n                     +- *(45) BroadcastHashJoin [ss_item_sk#51115], [i_item_sk#51427], Inner, BuildRight, false\n                        :- *(45) Project [ss_item_sk#51115, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, d_year#51251, d_year#51279, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404, ca_street_number#51410, ca_street_name#51411, ca_city#51414, ca_zip#51417]\n                        :  +- *(45) BroadcastHashJoin [hd_income_band_sk#51391], [ib_income_band_sk#51424], Inner, BuildRight, false\n                        :     :- *(45) Project [ss_item_sk#51115, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, d_year#51251, d_year#51279, hd_income_band_sk#51391, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404, ca_street_number#51410, ca_street_name#51411, ca_city#51414, ca_zip#51417]\n                        :     :  +- *(45) BroadcastHashJoin [hd_income_band_sk#51386], [ib_income_band_sk#51421], Inner, BuildRight, false\n                        :     :     :- *(45) Project [ss_item_sk#51115, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, d_year#51251, d_year#51279, hd_income_band_sk#51386, hd_income_band_sk#51391, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404, ca_street_number#51410, ca_street_name#51411, ca_city#51414, ca_zip#51417]\n                        :     :     :  +- *(45) BroadcastHashJoin [c_current_addr_sk#51334], [ca_address_sk#51408], Inner, BuildRight, false\n                        :     :     :     :- *(45) Project [ss_item_sk#51115, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_addr_sk#51334, d_year#51251, d_year#51279, hd_income_band_sk#51386, hd_income_band_sk#51391, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404]\n                        :     :     :     :  +- *(45) BroadcastHashJoin [ss_addr_sk#51119], [ca_address_sk#51395], Inner, BuildRight, false\n                        :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_addr_sk#51119, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_addr_sk#51334, d_year#51251, d_year#51279, hd_income_band_sk#51386, hd_income_band_sk#51391]\n                        :     :     :     :     :  +- *(45) BroadcastHashJoin [c_current_hdemo_sk#51333], [hd_demo_sk#51390], Inner, BuildRight, false\n                        :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_addr_sk#51119, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_hdemo_sk#51333, c_current_addr_sk#51334, d_year#51251, d_year#51279, hd_income_band_sk#51386]\n                        :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_hdemo_sk#51118], [hd_demo_sk#51385], Inner, BuildRight, false\n                        :     :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_hdemo_sk#51333, c_current_addr_sk#51334, d_year#51251, d_year#51279]\n                        :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_promo_sk#51121], [p_promo_sk#51366], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_hdemo_sk#51333, c_current_addr_sk#51334, d_year#51251, d_year#51279]\n                        :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_current_cdemo_sk#51332], [cd_demo_sk#51357], Inner, BuildRight, NOT (cd_marital_status#51350 = cd_marital_status#51359), false\n                        :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_cdemo_sk#51332, c_current_hdemo_sk#51333, c_current_addr_sk#51334, d_year#51251, d_year#51279, cd_marital_status#51350]\n                        :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_cdemo_sk#51117], [cd_demo_sk#51348], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_cdemo_sk#51117, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_cdemo_sk#51332, c_current_hdemo_sk#51333, c_current_addr_sk#51334, d_year#51251, d_year#51279]\n                        :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_first_shipto_date_sk#51335], [d_date_sk#51273], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_cdemo_sk#51117, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_cdemo_sk#51332, c_current_hdemo_sk#51333, c_current_addr_sk#51334, c_first_shipto_date_sk#51335, d_year#51251]\n                        :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_first_sales_date_sk#51336], [d_date_sk#51245], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_cdemo_sk#51117, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326, c_current_cdemo_sk#51332, c_current_hdemo_sk#51333, c_current_addr_sk#51334, c_first_shipto_date_sk#51335, c_first_sales_date_sk#51336]\n                        :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_customer_sk#51116], [c_customer_sk#51330], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_customer_sk#51116, ss_cdemo_sk#51117, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223, s_store_name#51306, s_zip#51326]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_store_sk#51120], [s_store_sk#51301], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#51115, ss_customer_sk#51116, ss_cdemo_sk#51117, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_store_sk#51120, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132, d_year#51223]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_sold_date_sk#51113], [d_date_sk#51217], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_sold_date_sk#51113, ss_item_sk#51115, ss_customer_sk#51116, ss_cdemo_sk#51117, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_store_sk#51120, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) SortMergeJoin [ss_item_sk#51115], [cs_item_sk#51171], Inner\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(26) Sort [ss_item_sk#51115 ASC NULLS FIRST], false, 0\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- ReusedExchange [ss_sold_date_sk#51113, ss_item_sk#51115, ss_customer_sk#51116, ss_cdemo_sk#51117, ss_hdemo_sk#51118, ss_addr_sk#51119, ss_store_sk#51120, ss_promo_sk#51121, ss_wholesale_cost#51124, ss_list_price#51125, ss_coupon_amt#51132], Exchange hashpartitioning(ss_item_sk#50779, 200), ENSURE_REQUIREMENTS, [id=#69064]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(29) Sort [cs_item_sk#51171 ASC NULLS FIRST], false, 0\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(29) Project [cs_item_sk#51171]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- *(29) Filter (isnotnull(sum(cs_ext_list_price#51181)#51461) AND (cast(sum(cs_ext_list_price#51181)#51461 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#51213 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#51214 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#51215 as decimal(9,2)))), DecimalType(9,2), true))#51462)), DecimalType(21,2), true)))\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(29) HashAggregate(keys=[cs_item_sk#51171], functions=[sum(UnscaledValue(cs_ext_list_price#51181)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#51213 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#51214 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#51215 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#51171, sum(cs_ext_list_price#51181)#51461, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#51213 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#51214 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#51215 as decimal(9,2)))), DecimalType(9,2), true))#51462])\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- ReusedExchange [cs_item_sk#51171, sum#51544L, sum#51545, isEmpty#51546], Exchange hashpartitioning(cs_item_sk#50835, 200), ENSURE_REQUIREMENTS, [id=#69080]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69243]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(30) Filter ((isnotnull(d_year#51223) AND (d_year#51223 = 2002)) AND isnotnull(d_date_sk#51217))\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#51217, d_year#51223], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#51217, d_date_id#51218, d_date#51219, d_month_seq#51220, d_week_seq#51221, d_quarter_s..., Partition Cols: []]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [s_store_sk#51301, s_store_name#51306, s_zip#51326], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69100]\n                        :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [c_customer_sk#51330, c_current_cdemo_sk#51332, c_current_hdemo_sk#51333, c_current_addr_sk#51334, c_first_shipto_date_sk#51335, c_first_sales_date_sk#51336], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69107]\n                        :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#51245, d_year#51251], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69114]\n                        :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#51273, d_year#51279], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69114]\n                        :     :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#51348, cd_marital_status#51350], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69128]\n                        :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#51357, cd_marital_status#51359], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69128]\n                        :     :     :     :     :     :     :     +- ReusedExchange [p_promo_sk#51366], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69142]\n                        :     :     :     :     :     :     +- ReusedExchange [hd_demo_sk#51385, hd_income_band_sk#51386], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69149]\n                        :     :     :     :     :     +- ReusedExchange [hd_demo_sk#51390, hd_income_band_sk#51391], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69149]\n                        :     :     :     :     +- ReusedExchange [ca_address_sk#51395, ca_street_number#51397, ca_street_name#51398, ca_city#51401, ca_zip#51404], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69163]\n                        :     :     :     +- ReusedExchange [ca_address_sk#51408, ca_street_number#51410, ca_street_name#51411, ca_city#51414, ca_zip#51417], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69163]\n                        :     :     +- ReusedExchange [ib_income_band_sk#51421], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69177]\n                        :     +- ReusedExchange [ib_income_band_sk#51424], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69177]\n                        +- ReusedExchange [i_item_sk#51427, i_product_name#51448], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69192]\n",
    "iteration" : 2,
    "name" : "q64"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ss_store_sk#51687, 200), ENSURE_REQUIREMENTS, [id=#69937]\n+- *(5) Project [s_store_name#51583, ss_store_sk#51687, revenue#51577, i_item_desc#51611, i_current_price#51612, i_wholesale_cost#51613, i_brand#51615]\n   +- *(5) BroadcastHashJoin [ss_item_sk#51682], [i_item_sk#51607], Inner, BuildRight, false\n      :- *(5) Project [s_store_name#51583, ss_store_sk#51687, ss_item_sk#51682, revenue#51577]\n      :  +- *(5) BroadcastHashJoin [s_store_sk#51578], [ss_store_sk#51687], Inner, BuildLeft, false\n      :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69909]\n      :     :  +- *(1) Filter isnotnull(s_store_sk#51578)\n      :     :     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#51578, s_store_name#51583], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#51578, s_store_id#51579, s_rec_start_date#51580, s_rec_end_date#51581, s_closed_date_..., Partition Cols: []]\n      :     +- *(5) Filter isnotnull(revenue#51577)\n      :        +- *(5) HashAggregate(keys=[ss_store_sk#51687, ss_item_sk#51682], functions=[sum(UnscaledValue(ss_sales_price#51693))], output=[ss_store_sk#51687, ss_item_sk#51682, revenue#51577])\n      :           +- Exchange hashpartitioning(ss_store_sk#51687, ss_item_sk#51682, 200), ENSURE_REQUIREMENTS, [id=#69923]\n      :              +- *(3) HashAggregate(keys=[ss_store_sk#51687, ss_item_sk#51682], functions=[partial_sum(UnscaledValue(ss_sales_price#51693))], output=[ss_store_sk#51687, ss_item_sk#51682, sum#51741L])\n      :                 +- *(3) Project [ss_item_sk#51682, ss_store_sk#51687, ss_sales_price#51693]\n      :                    +- *(3) BroadcastHashJoin [ss_sold_date_sk#51680], [d_date_sk#51703], Inner, BuildRight, false\n      :                       :- *(3) Filter ((isnotnull(ss_sold_date_sk#51680) AND isnotnull(ss_store_sk#51687)) AND isnotnull(ss_item_sk#51682))\n      :                       :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#51680, ss_item_sk#51682, ss_store_sk#51687, ss_sales_price#51693], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#51680, ss_sold_time_sk#51681, ss_item_sk#51682, ss_customer_sk#51683, ss_cdemo_s..., Partition Cols: []]\n      :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#69917]\n      :                          +- *(2) Project [d_date_sk#51703]\n      :                             +- *(2) Filter (((isnotnull(d_month_seq#51706) AND (d_month_seq#51706 >= 1185)) AND (d_month_seq#51706 <= 1196)) AND isnotnull(d_date_sk#51703))\n      :                                +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#51703, d_month_seq#51706], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#51703, d_date_id#51704, d_date#51705, d_month_seq#51706, d_week_seq#51707, d_quarter_s..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#69932]\n         +- *(4) Filter isnotnull(i_item_sk#51607)\n            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#51607, i_item_desc#51611, i_current_price#51612, i_wholesale_cost#51613, i_brand#51615], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#51607, i_item_id#51608, i_rec_start_date#51609, i_rec_end_date#51610, i_item_desc#5161..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q65"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, ship_carriers#51757, year#51758, 200), ENSURE_REQUIREMENTS, [id=#70462]\n+- *(13) HashAggregate(keys=[w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, ship_carriers#51757, year#51758], functions=[partial_sum(jan_sales#51759), partial_sum(feb_sales#51760), partial_sum(mar_sales#51761), partial_sum(apr_sales#51762), partial_sum(may_sales#51763), partial_sum(jun_sales#51764), partial_sum(jul_sales#51765), partial_sum(aug_sales#51766), partial_sum(sep_sales#51767), partial_sum(oct_sales#51768), partial_sum(nov_sales#51769), partial_sum(dec_sales#51770), partial_sum(CheckOverflow((promote_precision(jan_sales#51759) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(feb_sales#51760) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(mar_sales#51761) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(apr_sales#51762) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(may_sales#51763) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(jun_sales#51764) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(jul_sales#51765) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(aug_sales#51766) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(sep_sales#51767) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(oct_sales#51768) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(nov_sales#51769) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(dec_sales#51770) / promote_precision(cast(cast(w_warehouse_sq_ft#51882 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), ... 12 more fields], output=[w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, ship_carriers#51757, year#51758, sum#52230, isEmpty#52231, sum#52232, isEmpty#52233, sum#52234, isEmpty#52235, sum#52236, isEmpty#52237, sum#52238, isEmpty#52239, sum#52240, isEmpty#52241, sum#52242, isEmpty#52243, sum#52244, isEmpty#52245, ... 56 more fields])\n   +- Union\n      :- *(6) HashAggregate(keys=[w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, d_year#51899], functions=[sum(CASE WHEN (d_moy#51901 = 1) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 2) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 3) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 4) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 5) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 6) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 7) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 8) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 9) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 10) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 11) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 12) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 1) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 2) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 3) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 4) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 5) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 6) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 7) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 8) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 9) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 10) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 11) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51901 = 12) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, ship_carriers#51757, year#51758, jan_sales#51759, feb_sales#51760, mar_sales#51761, apr_sales#51762, may_sales#51763, jun_sales#51764, jul_sales#51765, aug_sales#51766, sep_sales#51767, oct_sales#51768, nov_sales#51769, dec_sales#51770, jan_net#51771, feb_net#51772, mar_net#51773, apr_net#51774, ... 8 more fields])\n      :  +- Exchange hashpartitioning(w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, d_year#51899, 200), ENSURE_REQUIREMENTS, [id=#70271]\n      :     +- *(5) HashAggregate(keys=[w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, d_year#51899], functions=[partial_sum(CASE WHEN (d_moy#51901 = 1) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 2) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 3) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 4) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 5) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 6) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 7) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 8) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 9) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 10) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 11) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 12) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#51870 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 1) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 2) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 3) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 4) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 5) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 6) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 7) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 8) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 9) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 10) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 11) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51901 = 12) THEN CheckOverflow((promote_precision(cast(ws_net_profit#51878 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#51863 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, d_year#51899, sum#52350, isEmpty#52351, sum#52352, isEmpty#52353, sum#52354, isEmpty#52355, sum#52356, isEmpty#52357, sum#52358, isEmpty#52359, sum#52360, isEmpty#52361, sum#52362, isEmpty#52363, sum#52364, isEmpty#52365, sum#52366, ... 31 more fields])\n      :        +- *(5) Project [ws_quantity#51863, ws_ext_list_price#51870, ws_net_profit#51878, w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, d_year#51899, d_moy#51901]\n      :           +- *(5) BroadcastHashJoin [ws_ship_mode_sk#51859], [sm_ship_mode_sk#51931], Inner, BuildRight, false\n      :              :- *(5) Project [ws_ship_mode_sk#51859, ws_quantity#51863, ws_ext_list_price#51870, ws_net_profit#51878, w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, d_year#51899, d_moy#51901]\n      :              :  +- *(5) BroadcastHashJoin [ws_sold_time_sk#51846], [t_time_sk#51921], Inner, BuildRight, false\n      :              :     :- *(5) Project [ws_sold_time_sk#51846, ws_ship_mode_sk#51859, ws_quantity#51863, ws_ext_list_price#51870, ws_net_profit#51878, w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891, d_year#51899, d_moy#51901]\n      :              :     :  +- *(5) BroadcastHashJoin [ws_sold_date_sk#51845], [d_date_sk#51893], Inner, BuildRight, false\n      :              :     :     :- *(5) Project [ws_sold_date_sk#51845, ws_sold_time_sk#51846, ws_ship_mode_sk#51859, ws_quantity#51863, ws_ext_list_price#51870, ws_net_profit#51878, w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891]\n      :              :     :     :  +- *(5) BroadcastHashJoin [ws_warehouse_sk#51860], [w_warehouse_sk#51879], Inner, BuildRight, false\n      :              :     :     :     :- *(5) Filter (((isnotnull(ws_warehouse_sk#51860) AND isnotnull(ws_sold_date_sk#51845)) AND isnotnull(ws_sold_time_sk#51846)) AND isnotnull(ws_ship_mode_sk#51859))\n      :              :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#51845, ws_sold_time_sk#51846, ws_ship_mode_sk#51859, ws_warehouse_sk#51860, ws_quantity#51863, ws_ext_list_price#51870, ws_net_profit#51878], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#51845, ws_sold_time_sk#51846, ws_ship_date_sk#51847, ws_item_sk#51848, ws_bill_c..., Partition Cols: []]\n      :              :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70242]\n      :              :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#51879)\n      :              :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#51879, w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_city#51887, w_county#51888, w_state#51889, w_country#51891], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#51879, w_warehouse_id#51880, w_warehouse_name#51881, w_warehouse_sq_ft#51882, w_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70249]\n      :              :     :        +- *(2) Filter ((isnotnull(d_year#51899) AND (d_year#51899 = 2002)) AND isnotnull(d_date_sk#51893))\n      :              :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#51893, d_year#51899, d_moy#51901], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#51893, d_date_id#51894, d_date#51895, d_month_seq#51896, d_week_seq#51897, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70257]\n      :              :        +- *(3) Project [t_time_sk#51921]\n      :              :           +- *(3) Filter (((isnotnull(t_time#51923) AND (t_time#51923 >= 2662)) AND (t_time#51923 <= 31462)) AND isnotnull(t_time_sk#51921))\n      :              :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_time#51923, t_time_sk#51921], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#51921, t_time_id#51922, t_time#51923, t_hour#51924, t_minute#51925, t_second#51926, t_..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70265]\n      :                 +- *(4) Project [sm_ship_mode_sk#51931]\n      :                    +- *(4) Filter (sm_carrier#51935 IN (FEDEX,MSC) AND isnotnull(sm_ship_mode_sk#51931))\n      :                       +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_carrier#51935, sm_ship_mode_sk#51931], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#51931, sm_ship_mode_id#51932, sm_type#51933, sm_code#51934, sm_carrier#51935, sm..., Partition Cols: []]\n      +- *(12) HashAggregate(keys=[w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983, d_year#51991], functions=[sum(CASE WHEN (d_moy#51993 = 1) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 2) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 3) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 4) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 5) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 6) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 7) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 8) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 9) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 10) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 11) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 12) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 1) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 2) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 3) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 4) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 5) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 6) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 7) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 8) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 9) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 10) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 11) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#51993 = 12) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983, ship_carriers#51783, year#51784, jan_sales#51785, feb_sales#51786, mar_sales#51787, apr_sales#51788, may_sales#51789, jun_sales#51790, jul_sales#51791, aug_sales#51792, sep_sales#51793, oct_sales#51794, nov_sales#51795, dec_sales#51796, jan_net#51797, feb_net#51798, mar_net#51799, apr_net#51800, ... 8 more fields])\n         +- Exchange hashpartitioning(w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983, d_year#51991, 200), ENSURE_REQUIREMENTS, [id=#70396]\n            +- *(11) HashAggregate(keys=[w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983, d_year#51991], functions=[partial_sum(CASE WHEN (d_moy#51993 = 1) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 2) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 3) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 4) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 5) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 6) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 7) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 8) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 9) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 10) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 11) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 12) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#51962 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 1) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 2) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 3) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 4) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 5) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 6) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 7) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 8) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 9) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 10) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 11) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#51993 = 12) THEN CheckOverflow((promote_precision(cast(cs_net_profit#51970 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#51955 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983, d_year#51991, sum#52446, isEmpty#52447, sum#52448, isEmpty#52449, sum#52450, isEmpty#52451, sum#52452, isEmpty#52453, sum#52454, isEmpty#52455, sum#52456, isEmpty#52457, sum#52458, isEmpty#52459, sum#52460, isEmpty#52461, sum#52462, ... 31 more fields])\n               +- *(11) Project [cs_quantity#51955, cs_ext_list_price#51962, cs_net_profit#51970, w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983, d_year#51991, d_moy#51993]\n                  +- *(11) BroadcastHashJoin [cs_ship_mode_sk#51950], [sm_ship_mode_sk#52023], Inner, BuildRight, false\n                     :- *(11) Project [cs_ship_mode_sk#51950, cs_quantity#51955, cs_ext_list_price#51962, cs_net_profit#51970, w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983, d_year#51991, d_moy#51993]\n                     :  +- *(11) BroadcastHashJoin [cs_sold_time_sk#51938], [t_time_sk#52013], Inner, BuildRight, false\n                     :     :- *(11) Project [cs_sold_time_sk#51938, cs_ship_mode_sk#51950, cs_quantity#51955, cs_ext_list_price#51962, cs_net_profit#51970, w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983, d_year#51991, d_moy#51993]\n                     :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#51937], [d_date_sk#51985], Inner, BuildRight, false\n                     :     :     :- *(11) Project [cs_sold_date_sk#51937, cs_sold_time_sk#51938, cs_ship_mode_sk#51950, cs_quantity#51955, cs_ext_list_price#51962, cs_net_profit#51970, w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983]\n                     :     :     :  +- *(11) BroadcastHashJoin [cs_warehouse_sk#51951], [w_warehouse_sk#51971], Inner, BuildRight, false\n                     :     :     :     :- *(11) Filter (((isnotnull(cs_warehouse_sk#51951) AND isnotnull(cs_sold_date_sk#51937)) AND isnotnull(cs_sold_time_sk#51938)) AND isnotnull(cs_ship_mode_sk#51950))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#51937, cs_sold_time_sk#51938, cs_ship_mode_sk#51950, cs_warehouse_sk#51951, cs_quantity#51955, cs_ext_list_price#51962, cs_net_profit#51970], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#51937, cs_sold_time_sk#51938, cs_ship_date_sk#51939, cs_bill_customer_sk#51940, ..., Partition Cols: []]\n                     :     :     :     +- ReusedExchange [w_warehouse_sk#51971, w_warehouse_name#51973, w_warehouse_sq_ft#51974, w_city#51979, w_county#51980, w_state#51981, w_country#51983], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70242]\n                     :     :     +- ReusedExchange [d_date_sk#51985, d_year#51991, d_moy#51993], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70249]\n                     :     +- ReusedExchange [t_time_sk#52013], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70257]\n                     +- ReusedExchange [sm_ship_mode_sk#52023], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70265]\n",
    "iteration" : 2,
    "name" : "q66"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#52751, 200), ENSURE_REQUIREMENTS, [id=#70591]\n+- *(5) HashAggregate(keys=[i_category#52751, i_class#52752, i_brand#52753, i_product_name#52754, d_year#52755, d_qoy#52756, d_moy#52757, s_store_id#52758, spark_grouping_id#52750L], functions=[sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#52652 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#52649 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))], output=[i_category#52751, i_class#52752, i_brand#52753, i_product_name#52754, d_year#52755, d_qoy#52756, d_moy#52757, s_store_id#52758, sumsales#52635])\n   +- Exchange hashpartitioning(i_category#52751, i_class#52752, i_brand#52753, i_product_name#52754, d_year#52755, d_qoy#52756, d_moy#52757, s_store_id#52758, spark_grouping_id#52750L, 200), ENSURE_REQUIREMENTS, [id=#70587]\n      +- *(4) HashAggregate(keys=[i_category#52751, i_class#52752, i_brand#52753, i_product_name#52754, d_year#52755, d_qoy#52756, d_moy#52757, s_store_id#52758, spark_grouping_id#52750L], functions=[partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#52652 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#52649 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))], output=[i_category#52751, i_class#52752, i_brand#52753, i_product_name#52754, d_year#52755, d_qoy#52756, d_moy#52757, s_store_id#52758, spark_grouping_id#52750L, sum#52780, isEmpty#52781])\n         +- *(4) Expand [List(ss_quantity#52649, ss_sales_price#52652, i_category#52731, i_class#52729, i_brand#52727, i_product_name#52740, d_year#52668, d_qoy#52672, d_moy#52670, s_store_id#52691, 0), List(ss_quantity#52649, ss_sales_price#52652, i_category#52731, i_class#52729, i_brand#52727, i_product_name#52740, d_year#52668, d_qoy#52672, d_moy#52670, null, 1), List(ss_quantity#52649, ss_sales_price#52652, i_category#52731, i_class#52729, i_brand#52727, i_product_name#52740, d_year#52668, d_qoy#52672, null, null, 3), List(ss_quantity#52649, ss_sales_price#52652, i_category#52731, i_class#52729, i_brand#52727, i_product_name#52740, d_year#52668, null, null, null, 7), List(ss_quantity#52649, ss_sales_price#52652, i_category#52731, i_class#52729, i_brand#52727, i_product_name#52740, null, null, null, null, 15), List(ss_quantity#52649, ss_sales_price#52652, i_category#52731, i_class#52729, i_brand#52727, null, null, null, null, null, 31), List(ss_quantity#52649, ss_sales_price#52652, i_category#52731, i_class#52729, null, null, null, null, null, null, 63), List(ss_quantity#52649, ss_sales_price#52652, i_category#52731, null, null, null, null, null, null, null, 127), List(ss_quantity#52649, ss_sales_price#52652, null, null, null, null, null, null, null, null, 255)], [ss_quantity#52649, ss_sales_price#52652, i_category#52751, i_class#52752, i_brand#52753, i_product_name#52754, d_year#52755, d_qoy#52756, d_moy#52757, s_store_id#52758, spark_grouping_id#52750L]\n            +- *(4) Project [ss_quantity#52649, ss_sales_price#52652, i_category#52731, i_class#52729, i_brand#52727, i_product_name#52740, d_year#52668, d_qoy#52672, d_moy#52670, s_store_id#52691]\n               +- *(4) BroadcastHashJoin [ss_item_sk#52641], [i_item_sk#52719], Inner, BuildRight, false\n                  :- *(4) Project [ss_item_sk#52641, ss_quantity#52649, ss_sales_price#52652, d_year#52668, d_moy#52670, d_qoy#52672, s_store_id#52691]\n                  :  +- *(4) BroadcastHashJoin [ss_store_sk#52646], [s_store_sk#52690], Inner, BuildRight, false\n                  :     :- *(4) Project [ss_item_sk#52641, ss_store_sk#52646, ss_quantity#52649, ss_sales_price#52652, d_year#52668, d_moy#52670, d_qoy#52672]\n                  :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#52639], [d_date_sk#52662], Inner, BuildRight, false\n                  :     :     :- *(4) Filter ((isnotnull(ss_sold_date_sk#52639) AND isnotnull(ss_store_sk#52646)) AND isnotnull(ss_item_sk#52641))\n                  :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#52639, ss_item_sk#52641, ss_store_sk#52646, ss_quantity#52649, ss_sales_price#52652], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#52639, ss_sold_time_sk#52640, ss_item_sk#52641, ss_customer_sk#52642, ss_cdemo_s..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70566]\n                  :     :        +- *(1) Project [d_date_sk#52662, d_year#52668, d_moy#52670, d_qoy#52672]\n                  :     :           +- *(1) Filter (((isnotnull(d_month_seq#52665) AND (d_month_seq#52665 >= 1177)) AND (d_month_seq#52665 <= 1188)) AND isnotnull(d_date_sk#52662))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#52662, d_month_seq#52665, d_moy#52670, d_qoy#52672, d_year#52668], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#52662, d_date_id#52663, d_date#52664, d_month_seq#52665, d_week_seq#52666, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70573]\n                  :        +- *(2) Filter isnotnull(s_store_sk#52690)\n                  :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#52690, s_store_id#52691], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#52690, s_store_id#52691, s_rec_start_date#52692, s_rec_end_date#52693, s_closed_date_..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#70580]\n                     +- *(3) Filter isnotnull(i_item_sk#52719)\n                        +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#52719, i_brand#52727, i_class#52729, i_category#52731, i_product_name#52740], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#52719, i_item_id#52720, i_rec_start_date#52721, i_rec_end_date#52722, i_item_desc#5272..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q67"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 2,
    "name" : "q68"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(cd_gender#52993, cd_marital_status#52994, cd_education_status#52995, cd_purchase_estimate#52996, cd_credit_rating#52997, 200), ENSURE_REQUIREMENTS, [id=#71103]\n+- *(14) HashAggregate(keys=[cd_gender#52993, cd_marital_status#52994, cd_education_status#52995, cd_purchase_estimate#52996, cd_credit_rating#52997], functions=[partial_count(1)], output=[cd_gender#52993, cd_marital_status#52994, cd_education_status#52995, cd_purchase_estimate#52996, cd_credit_rating#52997, count#53185L])\n   +- *(14) Project [cd_gender#52993, cd_marital_status#52994, cd_education_status#52995, cd_purchase_estimate#52996, cd_credit_rating#52997]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#52963], [cd_demo_sk#52992], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#52963]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#52965], [ca_address_sk#52979], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#52963, c_current_addr_sk#52965]\n         :     :  +- SortMergeJoin [c_customer_sk#52961], [cs_ship_customer_sk#53121], LeftAnti\n         :     :     :- SortMergeJoin [c_customer_sk#52961], [ws_bill_customer_sk#53056], LeftAnti\n         :     :     :  :- SortMergeJoin [c_customer_sk#52961], [ss_customer_sk#53004], LeftSemi\n         :     :     :  :  :- *(2) Sort [c_customer_sk#52961 ASC NULLS FIRST], false, 0\n         :     :     :  :  :  +- Exchange hashpartitioning(c_customer_sk#52961, 200), ENSURE_REQUIREMENTS, [id=#70975]\n         :     :     :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#52965) AND isnotnull(c_current_cdemo_sk#52963))\n         :     :     :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#52961, c_current_cdemo_sk#52963, c_current_addr_sk#52965], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#52961, c_customer_id#52962, c_current_cdemo_sk#52963, c_current_hdemo_sk#52964, c_..., Partition Cols: []]\n         :     :     :  :  +- *(5) Sort [ss_customer_sk#53004 ASC NULLS FIRST], false, 0\n         :     :     :  :     +- Exchange hashpartitioning(ss_customer_sk#53004, 200), ENSURE_REQUIREMENTS, [id=#70990]\n         :     :     :  :        +- *(4) Project [ss_customer_sk#53004]\n         :     :     :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#53001], [d_date_sk#53024], Inner, BuildRight, false\n         :     :     :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#53001)\n         :     :     :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#53001, ss_customer_sk#53004], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#53001, ss_sold_time_sk#53002, ss_item_sk#53003, ss_customer_sk#53004, ss_cdemo_s..., Partition Cols: []]\n         :     :     :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70985]\n         :     :     :  :                 +- *(3) Project [d_date_sk#53024]\n         :     :     :  :                    +- *(3) Filter (((((isnotnull(d_year#53030) AND isnotnull(d_moy#53032)) AND (d_year#53030 = 1999)) AND (d_moy#53032 >= 1)) AND (d_moy#53032 <= 3)) AND isnotnull(d_date_sk#53024))\n         :     :     :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#53024, d_moy#53032, d_year#53030], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#53024, d_date_id#53025, d_date#53026, d_month_seq#53027, d_week_seq#53028, d_quarter_s..., Partition Cols: []]\n         :     :     :  +- *(8) Sort [ws_bill_customer_sk#53056 ASC NULLS FIRST], false, 0\n         :     :     :     +- Exchange hashpartitioning(ws_bill_customer_sk#53056, 200), ENSURE_REQUIREMENTS, [id=#71072]\n         :     :     :        +- *(7) Project [ws_bill_customer_sk#53056]\n         :     :     :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#53052], [d_date_sk#53086], Inner, BuildRight, false\n         :     :     :              :- *(7) Filter isnotnull(ws_sold_date_sk#53052)\n         :     :     :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#53052, ws_bill_customer_sk#53056], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#53052, ws_sold_time_sk#53053, ws_ship_date_sk#53054, ws_item_sk#53055, ws_bill_c..., Partition Cols: []]\n         :     :     :              +- ReusedExchange [d_date_sk#53086], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70985]\n         :     :     +- *(11) Sort [cs_ship_customer_sk#53121 ASC NULLS FIRST], false, 0\n         :     :        +- Exchange hashpartitioning(cs_ship_customer_sk#53121, 200), ENSURE_REQUIREMENTS, [id=#71090]\n         :     :           +- *(10) Project [cs_ship_customer_sk#53121]\n         :     :              +- *(10) BroadcastHashJoin [cs_sold_date_sk#53114], [d_date_sk#53148], Inner, BuildRight, false\n         :     :                 :- *(10) Filter isnotnull(cs_sold_date_sk#53114)\n         :     :                 :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#53114, cs_ship_customer_sk#53121], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#53114, cs_sold_time_sk#53115, cs_ship_date_sk#53116, cs_bill_customer_sk#53117, ..., Partition Cols: []]\n         :     :                 +- ReusedExchange [d_date_sk#53148], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#70985]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71033]\n         :        +- *(12) Project [ca_address_sk#52979]\n         :           +- *(12) Filter (ca_state#52987 IN (IL,FL,SD) AND isnotnull(ca_address_sk#52979))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#52979, ca_state#52987], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#52979, ca_address_id#52980, ca_street_number#52981, ca_street_name#52982, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#71040]\n            +- *(13) Filter isnotnull(cd_demo_sk#52992)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#52992, cd_gender#52993, cd_marital_status#52994, cd_education_status#52995, cd_purchase_estimate#52996, cd_credit_rating#52997], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#52992, cd_gender#52993, cd_marital_status#52994, cd_education_status#52995, cd_purcha..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q69"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#53260, 200), ENSURE_REQUIREMENTS, [id=#71240]\n+- *(5) HashAggregate(keys=[i_item_id#53260], functions=[partial_avg(cast(ss_quantity#53209 as bigint)), partial_avg(UnscaledValue(ss_list_price#53211)), partial_avg(UnscaledValue(ss_coupon_amt#53218)), partial_avg(UnscaledValue(ss_sales_price#53212))], output=[i_item_id#53260, sum#53318, count#53319L, sum#53320, count#53321L, sum#53322, count#53323L, sum#53324, count#53325L])\n   +- *(5) Project [ss_quantity#53209, ss_list_price#53211, ss_sales_price#53212, ss_coupon_amt#53218, i_item_id#53260]\n      +- *(5) BroadcastHashJoin [ss_promo_sk#53207], [p_promo_sk#53281], Inner, BuildRight, false\n         :- *(5) Project [ss_promo_sk#53207, ss_quantity#53209, ss_list_price#53211, ss_sales_price#53212, ss_coupon_amt#53218, i_item_id#53260]\n         :  +- *(5) BroadcastHashJoin [ss_item_sk#53201], [i_item_sk#53259], Inner, BuildRight, false\n         :     :- *(5) Project [ss_item_sk#53201, ss_promo_sk#53207, ss_quantity#53209, ss_list_price#53211, ss_sales_price#53212, ss_coupon_amt#53218]\n         :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#53199], [d_date_sk#53231], Inner, BuildRight, false\n         :     :     :- *(5) Project [ss_sold_date_sk#53199, ss_item_sk#53201, ss_promo_sk#53207, ss_quantity#53209, ss_list_price#53211, ss_sales_price#53212, ss_coupon_amt#53218]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#53203], [cd_demo_sk#53222], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(ss_cdemo_sk#53203) AND isnotnull(ss_sold_date_sk#53199)) AND isnotnull(ss_item_sk#53201)) AND isnotnull(ss_promo_sk#53207))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#53199, ss_item_sk#53201, ss_cdemo_sk#53203, ss_promo_sk#53207, ss_quantity#53209, ss_list_price#53211, ss_sales_price#53212, ss_coupon_amt#53218], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#53199, ss_sold_time_sk#53200, ss_item_sk#53201, ss_customer_sk#53202, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71211]\n         :     :     :        +- *(1) Project [cd_demo_sk#53222]\n         :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#53223) AND isnotnull(cd_marital_status#53224)) AND isnotnull(cd_education_status#53225)) AND (cd_gender#53223 = F)) AND (cd_marital_status#53224 = W)) AND (cd_education_status#53225 = College)) AND isnotnull(cd_demo_sk#53222))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#53222, cd_education_status#53225, cd_gender#53223, cd_marital_status#53224], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#53222, cd_gender#53223, cd_marital_status#53224, cd_education_status#53225, cd_purcha..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71219]\n         :     :        +- *(2) Project [d_date_sk#53231]\n         :     :           +- *(2) Filter ((isnotnull(d_year#53237) AND (d_year#53237 = 2001)) AND isnotnull(d_date_sk#53231))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#53231, d_year#53237], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#53231, d_date_id#53232, d_date#53233, d_month_seq#53234, d_week_seq#53235, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#71226]\n         :        +- *(3) Filter isnotnull(i_item_sk#53259)\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#53259, i_item_id#53260], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#53259, i_item_id#53260, i_rec_start_date#53261, i_rec_end_date#53262, i_item_desc#5326..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71234]\n            +- *(4) Project [p_promo_sk#53281]\n               +- *(4) Filter (((p_channel_email#53290 = N) OR (p_channel_event#53295 = N)) AND isnotnull(p_promo_sk#53281))\n                  +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_email#53290, p_channel_event#53295, p_promo_sk#53281], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#53281, p_promo_id#53282, p_start_date_sk#53283, p_end_date_sk#53284, p_item_sk#53285,..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q7"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#53536, _w2#53537, 200), ENSURE_REQUIREMENTS, [id=#71591]\n+- *(12) HashAggregate(keys=[s_state#53522, s_county#53523, spark_grouping_id#53521L], functions=[sum(UnscaledValue(ss_net_profit#53362))], output=[total_sum#53335, s_state#53522, s_county#53523, lochierarchy#53336, _w1#53536, _w2#53537, _w3#53538])\n   +- Exchange hashpartitioning(s_state#53522, s_county#53523, spark_grouping_id#53521L, 200), ENSURE_REQUIREMENTS, [id=#71587]\n      +- *(11) HashAggregate(keys=[s_state#53522, s_county#53523, spark_grouping_id#53521L], functions=[partial_sum(UnscaledValue(ss_net_profit#53362))], output=[s_state#53522, s_county#53523, spark_grouping_id#53521L, sum#53560L])\n         +- *(11) Expand [List(ss_net_profit#53362, s_state#53415, s_county#53414, 0), List(ss_net_profit#53362, s_state#53415, null, 1), List(ss_net_profit#53362, null, null, 3)], [ss_net_profit#53362, s_state#53522, s_county#53523, spark_grouping_id#53521L]\n            +- *(11) Project [ss_net_profit#53362, s_state#53415, s_county#53414]\n               +- *(11) BroadcastHashJoin [ss_store_sk#53347], [s_store_sk#53391], Inner, BuildRight, false\n                  :- *(11) Project [ss_store_sk#53347, ss_net_profit#53362]\n                  :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#53340], [d_date_sk#53363], Inner, BuildRight, false\n                  :     :- *(11) Filter (isnotnull(ss_sold_date_sk#53340) AND isnotnull(ss_store_sk#53347))\n                  :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#53340, ss_store_sk#53347, ss_net_profit#53362], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#53340, ss_sold_time_sk#53341, ss_item_sk#53342, ss_customer_sk#53343, ss_cdemo_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71409]\n                  :        +- *(1) Project [d_date_sk#53363]\n                  :           +- *(1) Filter (((isnotnull(d_month_seq#53366) AND (d_month_seq#53366 >= 1206)) AND (d_month_seq#53366 <= 1217)) AND isnotnull(d_date_sk#53363))\n                  :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#53363, d_month_seq#53366], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#53363, d_date_id#53364, d_date#53365, d_month_seq#53366, d_week_seq#53367, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#71517]\n                     +- SortMergeJoin [s_state#53415], [s_state#53332], LeftSemi\n                        :- *(3) Sort [s_state#53415 ASC NULLS FIRST], false, 0\n                        :  +- Exchange hashpartitioning(s_state#53415, 200), ENSURE_REQUIREMENTS, [id=#71416]\n                        :     +- *(2) Filter isnotnull(s_store_sk#53391)\n                        :        +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#53391, s_county#53414, s_state#53415], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#53391, s_store_id#53392, s_rec_start_date#53393, s_rec_end_date#53394, s_closed_date_..., Partition Cols: []]\n                        +- *(10) Sort [s_state#53332 ASC NULLS FIRST], false, 0\n                           +- Exchange hashpartitioning(s_state#53332, 200), ENSURE_REQUIREMENTS, [id=#71512]\n                              +- *(9) Project [s_state#53332]\n                                 +- *(9) Filter (isnotnull(ranking#53333) AND (ranking#53333 <= 5))\n                                    +- Window [rank(_w2#53510) windowspecdefinition(s_state#53469, _w2#53510 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#53333], [s_state#53469], [_w2#53510 DESC NULLS LAST]\n                                       +- *(8) Sort [s_state#53469 ASC NULLS FIRST, _w2#53510 DESC NULLS LAST], false, 0\n                                          +- Exchange hashpartitioning(s_state#53469, 200), ENSURE_REQUIREMENTS, [id=#71503]\n                                             +- *(7) HashAggregate(keys=[s_state#53469], functions=[sum(UnscaledValue(ss_net_profit#53444))], output=[s_state#53332, s_state#53469, _w2#53510])\n                                                +- Exchange hashpartitioning(s_state#53469, 200), ENSURE_REQUIREMENTS, [id=#71499]\n                                                   +- *(6) HashAggregate(keys=[s_state#53469], functions=[partial_sum(UnscaledValue(ss_net_profit#53444))], output=[s_state#53469, sum#53562L])\n                                                      +- *(6) Project [ss_net_profit#53444, s_state#53469]\n                                                         +- *(6) BroadcastHashJoin [ss_sold_date_sk#53422], [d_date_sk#53474], Inner, BuildRight, false\n                                                            :- *(6) Project [ss_sold_date_sk#53422, ss_net_profit#53444, s_state#53469]\n                                                            :  +- *(6) BroadcastHashJoin [ss_store_sk#53429], [s_store_sk#53445], Inner, BuildRight, false\n                                                            :     :- *(6) Filter (isnotnull(ss_store_sk#53429) AND isnotnull(ss_sold_date_sk#53422))\n                                                            :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#53422, ss_store_sk#53429, ss_net_profit#53444], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#53422, ss_sold_time_sk#53423, ss_item_sk#53424, ss_customer_sk#53425, ss_cdemo_s..., Partition Cols: []]\n                                                            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#71425]\n                                                            :        +- *(4) Filter isnotnull(s_store_sk#53445)\n                                                            :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#53445, s_state#53469], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#53445, s_store_id#53446, s_rec_start_date#53447, s_rec_end_date#53448, s_closed_date_..., Partition Cols: []]\n                                                            +- ReusedExchange [d_date_sk#53474], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71409]\n",
    "iteration" : 2,
    "name" : "q70"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(ext_price#53592 DESC NULLS LAST, brand_id#53590 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#71844]\n+- *(10) HashAggregate(keys=[i_brand#53601, i_brand_id#53600, t_hour#53793, t_minute#53794], functions=[sum(UnscaledValue(ext_price#53578))], output=[brand_id#53590, brand#53591, t_hour#53793, t_minute#53794, ext_price#53592])\n   +- Exchange hashpartitioning(i_brand#53601, i_brand_id#53600, t_hour#53793, t_minute#53794, 200), ENSURE_REQUIREMENTS, [id=#71840]\n      +- *(9) HashAggregate(keys=[i_brand#53601, i_brand_id#53600, t_hour#53793, t_minute#53794], functions=[partial_sum(UnscaledValue(ext_price#53578))], output=[i_brand#53601, i_brand_id#53600, t_hour#53793, t_minute#53794, sum#53810L])\n         +- *(9) Project [i_brand_id#53600, i_brand#53601, ext_price#53578, t_hour#53793, t_minute#53794]\n            +- *(9) BroadcastHashJoin [time_sk#53581], [t_time_sk#53790], Inner, BuildRight, false\n               :- *(9) Project [i_brand_id#53600, i_brand#53601, ext_price#53578, time_sk#53581]\n               :  +- *(9) BroadcastHashJoin [i_item_sk#53593], [sold_item_sk#53580], Inner, BuildLeft, false\n               :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71741]\n               :     :  +- *(1) Project [i_item_sk#53593, i_brand_id#53600, i_brand#53601]\n               :     :     +- *(1) Filter ((isnotnull(i_manager_id#53613) AND (i_manager_id#53613 = 1)) AND isnotnull(i_item_sk#53593))\n               :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#53601, i_brand_id#53600, i_item_sk#53593, i_manager_id#53613], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#53593, i_item_id#53594, i_rec_start_date#53595, i_rec_end_date#53596, i_item_desc#5359..., Partition Cols: []]\n               :     +- Union\n               :        :- *(3) Project [ws_ext_sales_price#53638 AS ext_price#53578, ws_item_sk#53618 AS sold_item_sk#53580, ws_sold_time_sk#53616 AS time_sk#53581]\n               :        :  +- *(3) BroadcastHashJoin [ws_sold_date_sk#53615], [d_date_sk#53649], Inner, BuildRight, false\n               :        :     :- *(3) Filter ((isnotnull(ws_sold_date_sk#53615) AND isnotnull(ws_item_sk#53618)) AND isnotnull(ws_sold_time_sk#53616))\n               :        :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#53615, ws_sold_time_sk#53616, ws_item_sk#53618, ws_ext_sales_price#53638], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#53615, ws_sold_time_sk#53616, ws_ship_date_sk#53617, ws_item_sk#53618, ws_bill_c..., Partition Cols: []]\n               :        :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71749]\n               :        :        +- *(2) Project [d_date_sk#53649]\n               :        :           +- *(2) Filter ((((isnotnull(d_moy#53657) AND isnotnull(d_year#53655)) AND (d_moy#53657 = 11)) AND (d_year#53655 = 1999)) AND isnotnull(d_date_sk#53649))\n               :        :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#53649, d_moy#53657, d_year#53655], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#53649, d_date_id#53650, d_date#53651, d_month_seq#53652, d_week_seq#53653, d_quarter_s..., Partition Cols: []]\n               :        :- *(5) Project [cs_ext_sales_price#53700 AS ext_price#53582, cs_item_sk#53692 AS sold_item_sk#53584, cs_sold_time_sk#53678 AS time_sk#53585]\n               :        :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#53677], [d_date_sk#53711], Inner, BuildRight, false\n               :        :     :- *(5) Filter ((isnotnull(cs_sold_date_sk#53677) AND isnotnull(cs_item_sk#53692)) AND isnotnull(cs_sold_time_sk#53678))\n               :        :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#53677, cs_sold_time_sk#53678, cs_item_sk#53692, cs_ext_sales_price#53700], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#53677, cs_sold_time_sk#53678, cs_ship_date_sk#53679, cs_bill_customer_sk#53680, ..., Partition Cols: []]\n               :        :     +- ReusedExchange [d_date_sk#53711], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71749]\n               :        +- *(7) Project [ss_ext_sales_price#53754 AS ext_price#53586, ss_item_sk#53741 AS sold_item_sk#53588, ss_sold_time_sk#53740 AS time_sk#53589]\n               :           +- *(7) BroadcastHashJoin [ss_sold_date_sk#53739], [d_date_sk#53762], Inner, BuildRight, false\n               :              :- *(7) Filter ((isnotnull(ss_sold_date_sk#53739) AND isnotnull(ss_item_sk#53741)) AND isnotnull(ss_sold_time_sk#53740))\n               :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#53739, ss_sold_time_sk#53740, ss_item_sk#53741, ss_ext_sales_price#53754], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#53739, ss_sold_time_sk#53740, ss_item_sk#53741, ss_customer_sk#53742, ss_cdemo_s..., Partition Cols: []]\n               :              +- ReusedExchange [d_date_sk#53762], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71749]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#71784]\n                  +- *(8) Project [t_time_sk#53790, t_hour#53793, t_minute#53794]\n                     +- *(8) Filter (((t_meal_time#53799 = breakfast) OR (t_meal_time#53799 = dinner)) AND isnotnull(t_time_sk#53790))\n                        +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#53793, t_meal_time#53799, t_minute#53794, t_time_sk#53790], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#53790, t_time_id#53791, t_time#53792, t_hour#53793, t_minute#53794, t_second#53795, t_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q71"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_desc#53877, w_warehouse_name#53861, d_week_seq#53913, 200), ENSURE_REQUIREMENTS, [id=#72143]\n+- *(14) HashAggregate(keys=[i_item_desc#53877, w_warehouse_name#53861, d_week_seq#53913], functions=[partial_sum(cast(CASE WHEN isnull(p_promo_sk#53993) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN isnotnull(p_promo_sk#53993) THEN 1 ELSE 0 END as bigint)), partial_count(1)], output=[i_item_desc#53877, w_warehouse_name#53861, d_week_seq#53913, sum#54054L, sum#54055L, count#54056L])\n   +- *(14) Project [w_warehouse_name#53861, i_item_desc#53877, d_week_seq#53913, p_promo_sk#53993]\n      +- *(14) BroadcastHashJoin [cs_item_sk#53836, cs_order_number#53838L], [cr_item_sk#54014, cr_order_number#54028L], LeftOuter, BuildRight, false\n         :- *(14) Project [cs_item_sk#53836, cs_order_number#53838L, w_warehouse_name#53861, i_item_desc#53877, d_week_seq#53913, p_promo_sk#53993]\n         :  +- *(14) BroadcastHashJoin [cs_promo_sk#53837], [p_promo_sk#53993], LeftOuter, BuildRight, false\n         :     :- *(14) Project [cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, w_warehouse_name#53861, i_item_desc#53877, d_week_seq#53913]\n         :     :  +- *(14) BroadcastHashJoin [cs_ship_date_sk#53823], [d_date_sk#53965], Inner, BuildRight, (d_date#53967 > d_date#53911 + 5 days), false\n         :     :     :- *(14) Project [cs_ship_date_sk#53823, cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, w_warehouse_name#53861, i_item_desc#53877, d_date#53911, d_week_seq#53913]\n         :     :     :  +- *(14) BroadcastHashJoin [d_week_seq#53913, inv_date_sk#53855], [d_week_seq#53941, d_date_sk#53937], Inner, BuildRight, false\n         :     :     :     :- *(14) Project [cs_ship_date_sk#53823, cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, inv_date_sk#53855, w_warehouse_name#53861, i_item_desc#53877, d_date#53911, d_week_seq#53913]\n         :     :     :     :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#53821], [d_date_sk#53909], Inner, BuildRight, false\n         :     :     :     :     :- *(14) Project [cs_sold_date_sk#53821, cs_ship_date_sk#53823, cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, inv_date_sk#53855, w_warehouse_name#53861, i_item_desc#53877]\n         :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_bill_hdemo_sk#53826], [hd_demo_sk#53904], Inner, BuildRight, false\n         :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#53821, cs_ship_date_sk#53823, cs_bill_hdemo_sk#53826, cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, inv_date_sk#53855, w_warehouse_name#53861, i_item_desc#53877]\n         :     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_bill_cdemo_sk#53825], [cd_demo_sk#53895], Inner, BuildRight, false\n         :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#53821, cs_ship_date_sk#53823, cs_bill_cdemo_sk#53825, cs_bill_hdemo_sk#53826, cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, inv_date_sk#53855, w_warehouse_name#53861, i_item_desc#53877]\n         :     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_item_sk#53836], [i_item_sk#53873], Inner, BuildRight, false\n         :     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#53821, cs_ship_date_sk#53823, cs_bill_cdemo_sk#53825, cs_bill_hdemo_sk#53826, cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, inv_date_sk#53855, w_warehouse_name#53861]\n         :     :     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [inv_warehouse_sk#53857], [w_warehouse_sk#53859], Inner, BuildRight, false\n         :     :     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#53821, cs_ship_date_sk#53823, cs_bill_cdemo_sk#53825, cs_bill_hdemo_sk#53826, cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, inv_date_sk#53855, inv_warehouse_sk#53857]\n         :     :     :     :     :     :     :     :     :  +- *(14) SortMergeJoin [cs_item_sk#53836], [inv_item_sk#53856], Inner, (inv_quantity_on_hand#53858 < cs_quantity#53839)\n         :     :     :     :     :     :     :     :     :     :- *(2) Sort [cs_item_sk#53836 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :     :     :     :     :  +- Exchange hashpartitioning(cs_item_sk#53836, 200), ENSURE_REQUIREMENTS, [id=#72060]\n         :     :     :     :     :     :     :     :     :     :     +- *(1) Filter (((((isnotnull(cs_quantity#53839) AND isnotnull(cs_item_sk#53836)) AND isnotnull(cs_bill_cdemo_sk#53825)) AND isnotnull(cs_bill_hdemo_sk#53826)) AND isnotnull(cs_sold_date_sk#53821)) AND isnotnull(cs_ship_date_sk#53823))\n         :     :     :     :     :     :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#53821, cs_ship_date_sk#53823, cs_bill_cdemo_sk#53825, cs_bill_hdemo_sk#53826, cs_item_sk#53836, cs_promo_sk#53837, cs_order_number#53838L, cs_quantity#53839], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#53821, cs_sold_time_sk#53822, cs_ship_date_sk#53823, cs_bill_customer_sk#53824, ..., Partition Cols: []]\n         :     :     :     :     :     :     :     :     :     +- *(4) Sort [inv_item_sk#53856 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :     :     :     :        +- Exchange hashpartitioning(inv_item_sk#53856, 200), ENSURE_REQUIREMENTS, [id=#72068]\n         :     :     :     :     :     :     :     :     :           +- *(3) Filter (((isnotnull(inv_quantity_on_hand#53858) AND isnotnull(inv_item_sk#53856)) AND isnotnull(inv_warehouse_sk#53857)) AND isnotnull(inv_date_sk#53855))\n         :     :     :     :     :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#53855, inv_item_sk#53856, inv_warehouse_sk#53857, inv_quantity_on_hand#53858], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#53855, inv_item_sk#53856, inv_warehouse_sk#53857, inv_quantity_on_hand#53858], Partition Cols: []]\n         :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72078]\n         :     :     :     :     :     :     :     :        +- *(5) Filter isnotnull(w_warehouse_sk#53859)\n         :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#53859, w_warehouse_name#53861], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#53859, w_warehouse_id#53860, w_warehouse_name#53861, w_warehouse_sq_ft#53862, w_s..., Partition Cols: []]\n         :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72085]\n         :     :     :     :     :     :     :        +- *(6) Filter isnotnull(i_item_sk#53873)\n         :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#53873, i_item_desc#53877], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#53873, i_item_id#53874, i_rec_start_date#53875, i_rec_end_date#53876, i_item_desc#5387..., Partition Cols: []]\n         :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72093]\n         :     :     :     :     :     :        +- *(7) Project [cd_demo_sk#53895]\n         :     :     :     :     :     :           +- *(7) Filter ((isnotnull(cd_marital_status#53897) AND (cd_marital_status#53897 = S)) AND isnotnull(cd_demo_sk#53895))\n         :     :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#53895, cd_marital_status#53897], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#53895, cd_gender#53896, cd_marital_status#53897, cd_education_status#53898, cd_purcha..., Partition Cols: []]\n         :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72101]\n         :     :     :     :     :        +- *(8) Project [hd_demo_sk#53904]\n         :     :     :     :     :           +- *(8) Filter ((isnotnull(hd_buy_potential#53906) AND (hd_buy_potential#53906 = 1001-5000)) AND isnotnull(hd_demo_sk#53904))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#53906, hd_demo_sk#53904], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#53904, hd_income_band_sk#53905, hd_buy_potential#53906, hd_dep_count#53907, hd_vehicl..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72109]\n         :     :     :     :        +- *(9) Project [d_date_sk#53909, d_date#53911, d_week_seq#53913]\n         :     :     :     :           +- *(9) Filter ((((isnotnull(d_year#53915) AND (d_year#53915 = 2000)) AND isnotnull(d_date_sk#53909)) AND isnotnull(d_week_seq#53913)) AND isnotnull(d_date#53911))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#53911, d_date_sk#53909, d_week_seq#53913, d_year#53915], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#53909, d_date_id#53910, d_date#53911, d_month_seq#53912, d_week_seq#53913, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [id=#72116]\n         :     :     :        +- *(10) Filter (isnotnull(d_week_seq#53941) AND isnotnull(d_date_sk#53937))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#53937, d_week_seq#53941], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#53937, d_date_id#53938, d_date#53939, d_month_seq#53940, d_week_seq#53941, d_quarter_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72123]\n         :     :        +- *(11) Filter (isnotnull(d_date#53967) AND isnotnull(d_date_sk#53965))\n         :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#53965, d_date#53967], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#53965, d_date_id#53966, d_date#53967, d_month_seq#53968, d_week_seq#53969, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72130]\n         :        +- *(12) Filter isnotnull(p_promo_sk#53993)\n         :           +- Scan hive tpcds_sf1_iceberg.promotion [p_promo_sk#53993], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#53993, p_promo_id#53994, p_start_date_sk#53995, p_end_date_sk#53996, p_item_sk#53997,..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#72137]\n            +- *(13) Filter (isnotnull(cr_item_sk#54014) AND isnotnull(cr_order_number#54028L))\n               +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#54014, cr_order_number#54028L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#54012, cr_returned_time_sk#54013, cr_item_sk#54014, cr_refunded_customer_sk#..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q72"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(cnt#54064L DESC NULLS LAST, c_last_name#54160 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#72293]\n+- *(6) Project [c_last_name#54160, c_first_name#54159, c_salutation#54158, c_preferred_cust_flag#54161, ss_ticket_number#54075L, cnt#54064L]\n   +- *(6) BroadcastHashJoin [ss_customer_sk#54069], [c_customer_sk#54151], Inner, BuildRight, false\n      :- *(6) Filter ((cnt#54064L >= 1) AND (cnt#54064L <= 5))\n      :  +- *(6) HashAggregate(keys=[ss_ticket_number#54075L, ss_customer_sk#54069], functions=[count(1)], output=[ss_ticket_number#54075L, ss_customer_sk#54069, cnt#54064L])\n      :     +- Exchange hashpartitioning(ss_ticket_number#54075L, ss_customer_sk#54069, 200), ENSURE_REQUIREMENTS, [id=#72281]\n      :        +- *(4) HashAggregate(keys=[ss_ticket_number#54075L, ss_customer_sk#54069], functions=[partial_count(1)], output=[ss_ticket_number#54075L, ss_customer_sk#54069, count#54176L])\n      :           +- *(4) Project [ss_customer_sk#54069, ss_ticket_number#54075L]\n      :              +- *(4) BroadcastHashJoin [ss_hdemo_sk#54071], [hd_demo_sk#54146], Inner, BuildRight, false\n      :                 :- *(4) Project [ss_customer_sk#54069, ss_hdemo_sk#54071, ss_ticket_number#54075L]\n      :                 :  +- *(4) BroadcastHashJoin [ss_store_sk#54073], [s_store_sk#54117], Inner, BuildRight, false\n      :                 :     :- *(4) Project [ss_customer_sk#54069, ss_hdemo_sk#54071, ss_store_sk#54073, ss_ticket_number#54075L]\n      :                 :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#54066], [d_date_sk#54089], Inner, BuildRight, false\n      :                 :     :     :- *(4) Filter (((isnotnull(ss_sold_date_sk#54066) AND isnotnull(ss_store_sk#54073)) AND isnotnull(ss_hdemo_sk#54071)) AND isnotnull(ss_customer_sk#54069))\n      :                 :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#54066, ss_customer_sk#54069, ss_hdemo_sk#54071, ss_store_sk#54073, ss_ticket_number#54075L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#54066, ss_sold_time_sk#54067, ss_item_sk#54068, ss_customer_sk#54069, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72259]\n      :                 :     :        +- *(1) Project [d_date_sk#54089]\n      :                 :     :           +- *(1) Filter ((((isnotnull(d_dom#54098) AND (d_dom#54098 >= 1)) AND (d_dom#54098 <= 2)) AND d_year#54095 IN (1999,2000,2001)) AND isnotnull(d_date_sk#54089))\n      :                 :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#54089, d_dom#54098, d_year#54095], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#54089, d_date_id#54090, d_date#54091, d_month_seq#54092, d_week_seq#54093, d_quarter_s..., Partition Cols: []]\n      :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72267]\n      :                 :        +- *(2) Project [s_store_sk#54117]\n      :                 :           +- *(2) Filter (s_county#54140 IN (Humboldt County,Hickman County,Galax city,Abbeville County) AND isnotnull(s_store_sk#54117))\n      :                 :              +- Scan hive tpcds_sf1_iceberg.store [s_county#54140, s_store_sk#54117], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#54117, s_store_id#54118, s_rec_start_date#54119, s_rec_end_date#54120, s_closed_date_..., Partition Cols: []]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#72275]\n      :                    +- *(3) Project [hd_demo_sk#54146]\n      :                       +- *(3) Filter ((((isnotnull(hd_vehicle_count#54150) AND ((hd_buy_potential#54148 = 1001-5000) OR (hd_buy_potential#54148 = Unknown))) AND (hd_vehicle_count#54150 > 0)) AND (CASE WHEN (hd_vehicle_count#54150 > 0) THEN (cast(hd_dep_count#54149 as double) / cast(hd_vehicle_count#54150 as double)) ELSE null END > 1.0)) AND isnotnull(hd_demo_sk#54146))\n      :                          +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#54148, hd_demo_sk#54146, hd_dep_count#54149, hd_vehicle_count#54150], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#54146, hd_income_band_sk#54147, hd_buy_potential#54148, hd_dep_count#54149, hd_vehicl..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72288]\n         +- *(5) Filter isnotnull(c_customer_sk#54151)\n            +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#54151, c_salutation#54158, c_first_name#54159, c_last_name#54160, c_preferred_cust_flag#54161], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#54151, c_customer_id#54152, c_current_cdemo_sk#54153, c_current_hdemo_sk#54154, c_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q73"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#54184, 200), ENSURE_REQUIREMENTS, [id=#72585]\n+- *(4) Filter (isnotnull(year_total#54188) AND (year_total#54188 > 0.00))\n   +- *(4) HashAggregate(keys=[c_customer_id#54197, c_first_name#54204, c_last_name#54205, d_year#54243], functions=[max(ss_net_paid#54234)], output=[customer_id#54184, year_total#54188])\n      +- Exchange hashpartitioning(c_customer_id#54197, c_first_name#54204, c_last_name#54205, d_year#54243, 200), ENSURE_REQUIREMENTS, [id=#72580]\n         +- *(3) HashAggregate(keys=[c_customer_id#54197, c_first_name#54204, c_last_name#54205, d_year#54243], functions=[partial_max(ss_net_paid#54234)], output=[c_customer_id#54197, c_first_name#54204, c_last_name#54205, d_year#54243, max#54822])\n            +- *(3) Project [c_customer_id#54197, c_first_name#54204, c_last_name#54205, ss_net_paid#54234, d_year#54243]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#54214], [d_date_sk#54237], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#54197, c_first_name#54204, c_last_name#54205, ss_sold_date_sk#54214, ss_net_paid#54234]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#54196], [ss_customer_sk#54217], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72565]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#54196) AND isnotnull(c_customer_id#54197))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#54196, c_customer_id#54197, c_first_name#54204, c_last_name#54205], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#54196, c_customer_id#54197, c_current_cdemo_sk#54198, c_current_hdemo_sk#54199, c_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#54217) AND isnotnull(ss_sold_date_sk#54214))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#54214, ss_customer_sk#54217, ss_net_paid#54234], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#54214, ss_sold_time_sk#54215, ss_item_sk#54216, ss_customer_sk#54217, ss_cdemo_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#72574]\n                     +- *(2) Filter (((isnotnull(d_year#54243) AND (d_year#54243 = 2001)) AND d_year#54243 IN (2001,2002)) AND isnotnull(d_date_sk#54237))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#54237, d_year#54243], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#54237, d_date_id#54238, d_date#54239, d_month_seq#54240, d_week_seq#54241, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q74"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, 200), ENSURE_REQUIREMENTS, [id=#73598]\n+- *(15) HashAggregate(keys=[d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902], functions=[sum(cast(sales_cnt#54847 as bigint)), sum(UnscaledValue(sales_amt#54848))], output=[d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, sales_cnt#54853L, sales_amt#54854])\n   +- Exchange hashpartitioning(d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, 200), ENSURE_REQUIREMENTS, [id=#73594]\n      +- *(14) HashAggregate(keys=[d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902], functions=[partial_sum(cast(sales_cnt#54847 as bigint)), partial_sum(UnscaledValue(sales_amt#54848))], output=[d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, sum#55497L, sum#55498L])\n         +- *(14) HashAggregate(keys=[d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, sales_cnt#54847, sales_amt#54848], functions=[], output=[d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, sales_cnt#54847, sales_amt#54848])\n            +- Exchange hashpartitioning(d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, sales_cnt#54847, sales_amt#54848, 200), ENSURE_REQUIREMENTS, [id=#73589]\n               +- *(13) HashAggregate(keys=[d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, sales_cnt#54847, sales_amt#54848], functions=[], output=[d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, sales_cnt#54847, sales_amt#54848])\n                  +- Union\n                     :- *(4) Project [d_year#54917, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, (cs_quantity#54873 - coalesce(cr_return_quantity#54956, 0)) AS sales_cnt#54847, CheckOverflow((promote_precision(cast(cs_ext_sales_price#54878 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#54957, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#54848]\n                     :  +- *(4) BroadcastHashJoin [cs_order_number#54872L, cs_item_sk#54870], [cr_order_number#54955L, cr_item_sk#54941], LeftOuter, BuildRight, false\n                     :     :- *(4) Project [cs_item_sk#54870, cs_order_number#54872L, cs_quantity#54873, cs_ext_sales_price#54878, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902, d_year#54917]\n                     :     :  +- *(4) BroadcastHashJoin [cs_sold_date_sk#54855], [d_date_sk#54911], Inner, BuildRight, false\n                     :     :     :- *(4) Project [cs_sold_date_sk#54855, cs_item_sk#54870, cs_order_number#54872L, cs_quantity#54873, cs_ext_sales_price#54878, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902]\n                     :     :     :  +- *(4) BroadcastHashJoin [cs_item_sk#54870], [i_item_sk#54889], Inner, BuildRight, false\n                     :     :     :     :- *(4) Filter (isnotnull(cs_item_sk#54870) AND isnotnull(cs_sold_date_sk#54855))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#54855, cs_item_sk#54870, cs_order_number#54872L, cs_quantity#54873, cs_ext_sales_price#54878], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#54855, cs_sold_time_sk#54856, cs_ship_date_sk#54857, cs_bill_customer_sk#54858, ..., Partition Cols: []]\n                     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#73337]\n                     :     :     :        +- *(1) Project [i_item_sk#54889, i_brand_id#54896, i_class_id#54898, i_category_id#54900, i_manufact_id#54902]\n                     :     :     :           +- *(1) Filter ((((((isnotnull(i_category#54901) AND (i_category#54901 = Books)) AND isnotnull(i_item_sk#54889)) AND isnotnull(i_brand_id#54896)) AND isnotnull(i_class_id#54898)) AND isnotnull(i_category_id#54900)) AND isnotnull(i_manufact_id#54902))\n                     :     :     :              +- Scan hive tpcds_sf1_iceberg.item [i_brand_id#54896, i_category#54901, i_category_id#54900, i_class_id#54898, i_item_sk#54889, i_manufact_id#54902], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#54889, i_item_id#54890, i_rec_start_date#54891, i_rec_end_date#54892, i_item_desc#5489..., Partition Cols: []]\n                     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73344]\n                     :     :        +- *(2) Filter ((isnotnull(d_year#54917) AND (d_year#54917 = 2001)) AND isnotnull(d_date_sk#54911))\n                     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#54911, d_year#54917], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#54911, d_date_id#54912, d_date#54913, d_month_seq#54914, d_week_seq#54915, d_quarter_s..., Partition Cols: []]\n                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#73351]\n                     :        +- *(3) Filter (isnotnull(cr_order_number#54955L) AND isnotnull(cr_item_sk#54941))\n                     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#54941, cr_order_number#54955L, cr_return_quantity#54956, cr_return_amount#54957], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#54939, cr_returned_time_sk#54940, cr_item_sk#54941, cr_refunded_customer_sk#..., Partition Cols: []]\n                     :- *(8) Project [d_year#55017, i_brand_id#54996, i_class_id#54998, i_category_id#55000, i_manufact_id#55002, (ss_quantity#54976 - coalesce(sr_return_quantity#55049, 0)) AS sales_cnt#54849, CheckOverflow((promote_precision(cast(ss_ext_sales_price#54981 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#55050, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#54850]\n                     :  +- *(8) BroadcastHashJoin [ss_ticket_number#54975L, ss_item_sk#54968], [sr_ticket_number#55048L, sr_item_sk#55041], LeftOuter, BuildRight, false\n                     :     :- *(8) Project [ss_item_sk#54968, ss_ticket_number#54975L, ss_quantity#54976, ss_ext_sales_price#54981, i_brand_id#54996, i_class_id#54998, i_category_id#55000, i_manufact_id#55002, d_year#55017]\n                     :     :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#54966], [d_date_sk#55011], Inner, BuildRight, false\n                     :     :     :- *(8) Project [ss_sold_date_sk#54966, ss_item_sk#54968, ss_ticket_number#54975L, ss_quantity#54976, ss_ext_sales_price#54981, i_brand_id#54996, i_class_id#54998, i_category_id#55000, i_manufact_id#55002]\n                     :     :     :  +- *(8) BroadcastHashJoin [ss_item_sk#54968], [i_item_sk#54989], Inner, BuildRight, false\n                     :     :     :     :- *(8) Filter (isnotnull(ss_item_sk#54968) AND isnotnull(ss_sold_date_sk#54966))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#54966, ss_item_sk#54968, ss_ticket_number#54975L, ss_quantity#54976, ss_ext_sales_price#54981], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#54966, ss_sold_time_sk#54967, ss_item_sk#54968, ss_customer_sk#54969, ss_cdemo_s..., Partition Cols: []]\n                     :     :     :     +- ReusedExchange [i_item_sk#54989, i_brand_id#54996, i_class_id#54998, i_category_id#55000, i_manufact_id#55002], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#73337]\n                     :     :     +- ReusedExchange [d_date_sk#55011, d_year#55017], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73344]\n                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#73376]\n                     :        +- *(7) Filter (isnotnull(sr_ticket_number#55048L) AND isnotnull(sr_item_sk#55041))\n                     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#55041, sr_ticket_number#55048L, sr_return_quantity#55049, sr_return_amt#55050], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#55039, sr_return_time_sk#55040, sr_item_sk#55041, sr_customer_sk#55042, sr_c..., Partition Cols: []]\n                     +- *(12) Project [d_year#55121, i_brand_id#55100, i_class_id#55102, i_category_id#55104, i_manufact_id#55106, (ws_quantity#55077 - coalesce(wr_return_quantity#55157, 0)) AS sales_cnt#54851, CheckOverflow((promote_precision(cast(ws_ext_sales_price#55082 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#55158, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#54852]\n                        +- *(12) BroadcastHashJoin [ws_order_number#55076L, ws_item_sk#55062], [wr_order_number#55156L, wr_item_sk#55145], LeftOuter, BuildRight, false\n                           :- *(12) Project [ws_item_sk#55062, ws_order_number#55076L, ws_quantity#55077, ws_ext_sales_price#55082, i_brand_id#55100, i_class_id#55102, i_category_id#55104, i_manufact_id#55106, d_year#55121]\n                           :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#55059], [d_date_sk#55115], Inner, BuildRight, false\n                           :     :- *(12) Project [ws_sold_date_sk#55059, ws_item_sk#55062, ws_order_number#55076L, ws_quantity#55077, ws_ext_sales_price#55082, i_brand_id#55100, i_class_id#55102, i_category_id#55104, i_manufact_id#55106]\n                           :     :  +- *(12) BroadcastHashJoin [ws_item_sk#55062], [i_item_sk#55093], Inner, BuildRight, false\n                           :     :     :- *(12) Filter (isnotnull(ws_item_sk#55062) AND isnotnull(ws_sold_date_sk#55059))\n                           :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#55059, ws_item_sk#55062, ws_order_number#55076L, ws_quantity#55077, ws_ext_sales_price#55082], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#55059, ws_sold_time_sk#55060, ws_ship_date_sk#55061, ws_item_sk#55062, ws_bill_c..., Partition Cols: []]\n                           :     :     +- ReusedExchange [i_item_sk#55093, i_brand_id#55100, i_class_id#55102, i_category_id#55104, i_manufact_id#55106], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#73337]\n                           :     +- ReusedExchange [d_date_sk#55115, d_year#55121], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#73344]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#73401]\n                              +- *(11) Filter (isnotnull(wr_order_number#55156L) AND isnotnull(wr_item_sk#55145))\n                                 +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#55145, wr_order_number#55156L, wr_return_quantity#55157, wr_return_amt#55158], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#55143, wr_returned_time_sk#55144, wr_item_sk#55145, wr_refunded_customer_sk#..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q75"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#55526, col_name#55527, d_year#55589, d_qoy#55593, i_category#55573, 200), ENSURE_REQUIREMENTS, [id=#74171]\n+- *(10) HashAggregate(keys=[channel#55526, col_name#55527, d_year#55589, d_qoy#55593, i_category#55573], functions=[partial_count(1), partial_sum(UnscaledValue(ext_sales_price#55528))], output=[channel#55526, col_name#55527, d_year#55589, d_qoy#55593, i_category#55573, count#55794L, sum#55795L])\n   +- Union\n      :- *(3) Project [store AS channel#55526, ss_promo_sk AS col_name#55527, d_year#55589, d_qoy#55593, i_category#55573, ss_ext_sales_price#55553 AS ext_sales_price#55528]\n      :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#55538], [d_date_sk#55583], Inner, BuildRight, false\n      :     :- *(3) Project [ss_sold_date_sk#55538, ss_ext_sales_price#55553, i_category#55573]\n      :     :  +- *(3) BroadcastHashJoin [ss_item_sk#55540], [i_item_sk#55561], Inner, BuildRight, false\n      :     :     :- *(3) Project [ss_sold_date_sk#55538, ss_item_sk#55540, ss_ext_sales_price#55553]\n      :     :     :  +- *(3) Filter ((isnull(ss_promo_sk#55546) AND isnotnull(ss_item_sk#55540)) AND isnotnull(ss_sold_date_sk#55538))\n      :     :     :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_ext_sales_price#55553, ss_item_sk#55540, ss_promo_sk#55546, ss_sold_date_sk#55538], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#55538, ss_sold_time_sk#55539, ss_item_sk#55540, ss_customer_sk#55541, ss_cdemo_s..., Partition Cols: []]\n      :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74056]\n      :     :        +- *(1) Filter isnotnull(i_item_sk#55561)\n      :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#55561, i_category#55573], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#55561, i_item_id#55562, i_rec_start_date#55563, i_rec_end_date#55564, i_item_desc#5556..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74063]\n      :        +- *(2) Filter isnotnull(d_date_sk#55583)\n      :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#55583, d_year#55589, d_qoy#55593], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#55583, d_date_id#55584, d_date#55585, d_month_seq#55586, d_week_seq#55587, d_quarter_s..., Partition Cols: []]\n      :- *(6) Project [web AS channel#55529, ws_ship_addr_sk AS col_name#55530, d_year#55673, d_qoy#55677, i_category#55657, ws_ext_sales_price#55634 AS ext_sales_price#55531]\n      :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#55611], [d_date_sk#55667], Inner, BuildRight, false\n      :     :- *(6) Project [ws_sold_date_sk#55611, ws_ext_sales_price#55634, i_category#55657]\n      :     :  +- *(6) BroadcastHashJoin [ws_item_sk#55614], [i_item_sk#55645], Inner, BuildRight, false\n      :     :     :- *(6) Project [ws_sold_date_sk#55611, ws_item_sk#55614, ws_ext_sales_price#55634]\n      :     :     :  +- *(6) Filter ((isnull(ws_ship_addr_sk#55622) AND isnotnull(ws_item_sk#55614)) AND isnotnull(ws_sold_date_sk#55611))\n      :     :     :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#55634, ws_item_sk#55614, ws_ship_addr_sk#55622, ws_sold_date_sk#55611], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#55611, ws_sold_time_sk#55612, ws_ship_date_sk#55613, ws_item_sk#55614, ws_bill_c..., Partition Cols: []]\n      :     :     +- ReusedExchange [i_item_sk#55645, i_category#55657], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74056]\n      :     +- ReusedExchange [d_date_sk#55667, d_year#55673, d_qoy#55677], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74063]\n      +- *(9) Project [catalog AS channel#55532, cs_ship_customer_sk AS col_name#55533, d_year#55757, d_qoy#55761, i_category#55741, cs_ext_sales_price#55718 AS ext_sales_price#55534]\n         +- *(9) BroadcastHashJoin [cs_sold_date_sk#55695], [d_date_sk#55751], Inner, BuildRight, false\n            :- *(9) Project [cs_sold_date_sk#55695, cs_ext_sales_price#55718, i_category#55741]\n            :  +- *(9) BroadcastHashJoin [cs_item_sk#55710], [i_item_sk#55729], Inner, BuildRight, false\n            :     :- *(9) Project [cs_sold_date_sk#55695, cs_item_sk#55710, cs_ext_sales_price#55718]\n            :     :  +- *(9) Filter ((isnull(cs_ship_customer_sk#55702) AND isnotnull(cs_item_sk#55710)) AND isnotnull(cs_sold_date_sk#55695))\n            :     :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ext_sales_price#55718, cs_item_sk#55710, cs_ship_customer_sk#55702, cs_sold_date_sk#55695], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#55695, cs_sold_time_sk#55696, cs_ship_date_sk#55697, cs_bill_customer_sk#55698, ..., Partition Cols: []]\n            :     +- ReusedExchange [i_item_sk#55729, i_category#55741], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74056]\n            +- ReusedExchange [d_date_sk#55751, d_year#55757, d_qoy#55761], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74063]\n",
    "iteration" : 2,
    "name" : "q76"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#56266, id#56267, spark_grouping_id#56265L, 200), ENSURE_REQUIREMENTS, [id=#74904]\n+- *(26) HashAggregate(keys=[channel#56266, id#56267, spark_grouping_id#56265L], functions=[partial_sum(sales#55818), partial_sum(returns#55806), partial_sum(profit#56258)], output=[channel#56266, id#56267, spark_grouping_id#56265L, sum#56283, isEmpty#56284, sum#56285, isEmpty#56286, sum#56287, isEmpty#56288])\n   +- *(26) Expand [List(sales#55818, returns#55806, profit#56258, channel#55804, id#55805, 0), List(sales#55818, returns#55806, profit#56258, channel#55804, null, 1), List(sales#55818, returns#55806, profit#56258, null, null, 3)], [sales#55818, returns#55806, profit#56258, channel#56266, id#56267, spark_grouping_id#56265L]\n      +- Union\n         :- *(9) Project [sales#55818, coalesce(returns#55820, 0.00) AS returns#55806, CheckOverflow((promote_precision(cast(profit#55819 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#55821, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#56258, store channel AS channel#55804, s_store_sk#55881 AS id#55805]\n         :  +- SortMergeJoin [s_store_sk#55881], [s_store_sk#55958], LeftOuter\n         :     :- *(4) Sort [s_store_sk#55881 ASC NULLS FIRST], false, 0\n         :     :  +- *(4) HashAggregate(keys=[s_store_sk#55881], functions=[sum(UnscaledValue(ss_ext_sales_price#55845)), sum(UnscaledValue(ss_net_profit#55852))], output=[s_store_sk#55881, sales#55818, profit#55819])\n         :     :     +- Exchange hashpartitioning(s_store_sk#55881, 200), ENSURE_REQUIREMENTS, [id=#74545]\n         :     :        +- *(3) HashAggregate(keys=[s_store_sk#55881], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#55845)), partial_sum(UnscaledValue(ss_net_profit#55852))], output=[s_store_sk#55881, sum#56291L, sum#56292L])\n         :     :           +- *(3) Project [ss_ext_sales_price#55845, ss_net_profit#55852, s_store_sk#55881]\n         :     :              +- *(3) BroadcastHashJoin [ss_store_sk#55837], [s_store_sk#55881], Inner, BuildRight, false\n         :     :                 :- *(3) Project [ss_store_sk#55837, ss_ext_sales_price#55845, ss_net_profit#55852]\n         :     :                 :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#55830], [d_date_sk#55853], Inner, BuildRight, false\n         :     :                 :     :- *(3) Filter (isnotnull(ss_sold_date_sk#55830) AND isnotnull(ss_store_sk#55837))\n         :     :                 :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#55830, ss_store_sk#55837, ss_ext_sales_price#55845, ss_net_profit#55852], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#55830, ss_sold_time_sk#55831, ss_item_sk#55832, ss_customer_sk#55833, ss_cdemo_s..., Partition Cols: []]\n         :     :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74532]\n         :     :                 :        +- *(1) Project [d_date_sk#55853]\n         :     :                 :           +- *(1) Filter (((isnotnull(d_date#55855) AND (d_date#55855 >= 11550)) AND (d_date#55855 <= 11580)) AND isnotnull(d_date_sk#55853))\n         :     :                 :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#55855, d_date_sk#55853], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#55853, d_date_id#55854, d_date#55855, d_month_seq#55856, d_week_seq#55857, d_quarter_s..., Partition Cols: []]\n         :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74539]\n         :     :                    +- *(2) Filter isnotnull(s_store_sk#55881)\n         :     :                       +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#55881], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#55881, s_store_id#55882, s_rec_start_date#55883, s_rec_end_date#55884, s_closed_date_..., Partition Cols: []]\n         :     +- *(8) Sort [s_store_sk#55958 ASC NULLS FIRST], false, 0\n         :        +- *(8) HashAggregate(keys=[s_store_sk#55958], functions=[sum(UnscaledValue(sr_return_amt#55921)), sum(UnscaledValue(sr_net_loss#55929))], output=[s_store_sk#55958, returns#55820, profit_loss#55821])\n         :           +- Exchange hashpartitioning(s_store_sk#55958, 200), ENSURE_REQUIREMENTS, [id=#74714]\n         :              +- *(7) HashAggregate(keys=[s_store_sk#55958], functions=[partial_sum(UnscaledValue(sr_return_amt#55921)), partial_sum(UnscaledValue(sr_net_loss#55929))], output=[s_store_sk#55958, sum#56295L, sum#56296L])\n         :                 +- *(7) Project [sr_return_amt#55921, sr_net_loss#55929, s_store_sk#55958]\n         :                    +- *(7) BroadcastHashJoin [sr_store_sk#55917], [s_store_sk#55958], Inner, BuildRight, false\n         :                       :- *(7) Project [sr_store_sk#55917, sr_return_amt#55921, sr_net_loss#55929]\n         :                       :  +- *(7) BroadcastHashJoin [sr_returned_date_sk#55910], [d_date_sk#55930], Inner, BuildRight, false\n         :                       :     :- *(7) Filter (isnotnull(sr_returned_date_sk#55910) AND isnotnull(sr_store_sk#55917))\n         :                       :     :  +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#55910, sr_store_sk#55917, sr_return_amt#55921, sr_net_loss#55929], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#55910, sr_return_time_sk#55911, sr_item_sk#55912, sr_customer_sk#55913, sr_c..., Partition Cols: []]\n         :                       :     +- ReusedExchange [d_date_sk#55930], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74532]\n         :                       +- ReusedExchange [s_store_sk#55958], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74539]\n         :- *(16) Project [sales#55822, returns#55824, CheckOverflow((promote_precision(cast(profit#55823 as decimal(18,2))) - promote_precision(cast(profit_loss#55825 as decimal(18,2)))), DecimalType(18,2), true) AS profit#55810, catalog channel AS channel#55808, cs_call_center_sk#55998 AS id#55809]\n         :  +- CartesianProduct\n         :     :- *(12) HashAggregate(keys=[cs_call_center_sk#55998], functions=[sum(UnscaledValue(cs_ext_sales_price#56010)), sum(UnscaledValue(cs_net_profit#56020))], output=[cs_call_center_sk#55998, sales#55822, profit#55823])\n         :     :  +- Exchange hashpartitioning(cs_call_center_sk#55998, 200), ENSURE_REQUIREMENTS, [id=#74775]\n         :     :     +- *(11) HashAggregate(keys=[cs_call_center_sk#55998], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#56010)), partial_sum(UnscaledValue(cs_net_profit#56020))], output=[cs_call_center_sk#55998, sum#56299L, sum#56300L])\n         :     :        +- *(11) Project [cs_call_center_sk#55998, cs_ext_sales_price#56010, cs_net_profit#56020]\n         :     :           +- *(11) BroadcastHashJoin [cs_sold_date_sk#55987], [d_date_sk#56021], Inner, BuildRight, false\n         :     :              :- *(11) Filter isnotnull(cs_sold_date_sk#55987)\n         :     :              :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#55987, cs_call_center_sk#55998, cs_ext_sales_price#56010, cs_net_profit#56020], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#55987, cs_sold_time_sk#55988, cs_ship_date_sk#55989, cs_bill_customer_sk#55990, ..., Partition Cols: []]\n         :     :              +- ReusedExchange [d_date_sk#56021], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74532]\n         :     +- *(15) HashAggregate(keys=[cr_call_center_sk#56060], functions=[sum(UnscaledValue(cr_return_amount#56067)), sum(UnscaledValue(cr_net_loss#56075))], output=[returns#55824, profit_loss#55825])\n         :        +- Exchange hashpartitioning(cr_call_center_sk#56060, 200), ENSURE_REQUIREMENTS, [id=#74793]\n         :           +- *(14) HashAggregate(keys=[cr_call_center_sk#56060], functions=[partial_sum(UnscaledValue(cr_return_amount#56067)), partial_sum(UnscaledValue(cr_net_loss#56075))], output=[cr_call_center_sk#56060, sum#56303L, sum#56304L])\n         :              +- *(14) Project [cr_call_center_sk#56060, cr_return_amount#56067, cr_net_loss#56075]\n         :                 +- *(14) BroadcastHashJoin [cr_returned_date_sk#56049], [d_date_sk#56076], Inner, BuildRight, false\n         :                    :- *(14) Filter isnotnull(cr_returned_date_sk#56049)\n         :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_returned_date_sk#56049, cr_call_center_sk#56060, cr_return_amount#56067, cr_net_loss#56075], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#56049, cr_returned_time_sk#56050, cr_item_sk#56051, cr_refunded_customer_sk#..., Partition Cols: []]\n         :                    +- ReusedExchange [d_date_sk#56076], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74532]\n         +- *(25) Project [sales#55826, coalesce(returns#55828, 0.00) AS returns#55813, CheckOverflow((promote_precision(cast(profit#55827 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#55829, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#56259, web channel AS channel#56275, wp_web_page_sk#56166 AS id#56276]\n            +- SortMergeJoin [wp_web_page_sk#56166], [wp_web_page_sk#56232], LeftOuter\n               :- *(20) Sort [wp_web_page_sk#56166 ASC NULLS FIRST], false, 0\n               :  +- *(20) HashAggregate(keys=[wp_web_page_sk#56166], functions=[sum(UnscaledValue(ws_ext_sales_price#56127)), sum(UnscaledValue(ws_net_profit#56137))], output=[wp_web_page_sk#56166, sales#55826, profit#55827])\n               :     +- Exchange hashpartitioning(wp_web_page_sk#56166, 200), ENSURE_REQUIREMENTS, [id=#74817]\n               :        +- *(19) HashAggregate(keys=[wp_web_page_sk#56166], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#56127)), partial_sum(UnscaledValue(ws_net_profit#56137))], output=[wp_web_page_sk#56166, sum#56307L, sum#56308L])\n               :           +- *(19) Project [ws_ext_sales_price#56127, ws_net_profit#56137, wp_web_page_sk#56166]\n               :              +- *(19) BroadcastHashJoin [ws_web_page_sk#56116], [wp_web_page_sk#56166], Inner, BuildRight, false\n               :                 :- *(19) Project [ws_web_page_sk#56116, ws_ext_sales_price#56127, ws_net_profit#56137]\n               :                 :  +- *(19) BroadcastHashJoin [ws_sold_date_sk#56104], [d_date_sk#56138], Inner, BuildRight, false\n               :                 :     :- *(19) Filter (isnotnull(ws_sold_date_sk#56104) AND isnotnull(ws_web_page_sk#56116))\n               :                 :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#56104, ws_web_page_sk#56116, ws_ext_sales_price#56127, ws_net_profit#56137], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#56104, ws_sold_time_sk#56105, ws_ship_date_sk#56106, ws_item_sk#56107, ws_bill_c..., Partition Cols: []]\n               :                 :     +- ReusedExchange [d_date_sk#56138], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74532]\n               :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74627]\n               :                    +- *(18) Filter isnotnull(wp_web_page_sk#56166)\n               :                       +- Scan hive tpcds_sf1_iceberg.web_page [wp_web_page_sk#56166], HiveTableRelation [`tpcds_sf1_iceberg`.`web_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wp_web_page_sk#56166, wp_web_page_id#56167, wp_rec_start_date#56168, wp_rec_end_date#56169, wp_c..., Partition Cols: []]\n               +- *(24) Sort [wp_web_page_sk#56232 ASC NULLS FIRST], false, 0\n                  +- *(24) HashAggregate(keys=[wp_web_page_sk#56232], functions=[sum(UnscaledValue(wr_return_amt#56195)), sum(UnscaledValue(wr_net_loss#56203))], output=[wp_web_page_sk#56232, returns#55828, profit_loss#55829])\n                     +- Exchange hashpartitioning(wp_web_page_sk#56232, 200), ENSURE_REQUIREMENTS, [id=#74852]\n                        +- *(23) HashAggregate(keys=[wp_web_page_sk#56232], functions=[partial_sum(UnscaledValue(wr_return_amt#56195)), partial_sum(UnscaledValue(wr_net_loss#56203))], output=[wp_web_page_sk#56232, sum#56311L, sum#56312L])\n                           +- *(23) Project [wr_return_amt#56195, wr_net_loss#56203, wp_web_page_sk#56232]\n                              +- *(23) BroadcastHashJoin [wr_web_page_sk#56191], [wp_web_page_sk#56232], Inner, BuildRight, false\n                                 :- *(23) Project [wr_web_page_sk#56191, wr_return_amt#56195, wr_net_loss#56203]\n                                 :  +- *(23) BroadcastHashJoin [wr_returned_date_sk#56180], [d_date_sk#56204], Inner, BuildRight, false\n                                 :     :- *(23) Filter (isnotnull(wr_returned_date_sk#56180) AND isnotnull(wr_web_page_sk#56191))\n                                 :     :  +- Scan hive tpcds_sf1_iceberg.web_returns [wr_returned_date_sk#56180, wr_web_page_sk#56191, wr_return_amt#56195, wr_net_loss#56203], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#56180, wr_returned_time_sk#56181, wr_item_sk#56182, wr_refunded_customer_sk#..., Partition Cols: []]\n                                 :     +- ReusedExchange [d_date_sk#56204], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#74532]\n                                 +- ReusedExchange [wp_web_page_sk#56232], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#74627]\n",
    "iteration" : 2,
    "name" : "q77"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#56397, ss_item_sk#56350, ss_customer_sk#56351, 200), ENSURE_REQUIREMENTS, [id=#75134]\n+- *(3) HashAggregate(keys=[d_year#56397, ss_item_sk#56350, ss_customer_sk#56351], functions=[partial_sum(cast(ss_quantity#56358 as bigint)), partial_sum(UnscaledValue(ss_wholesale_cost#56359)), partial_sum(UnscaledValue(ss_sales_price#56361))], output=[d_year#56397, ss_item_sk#56350, ss_customer_sk#56351, sum#56614L, sum#56615L, sum#56616L])\n   +- *(3) Project [ss_item_sk#56350, ss_customer_sk#56351, ss_quantity#56358, ss_wholesale_cost#56359, ss_sales_price#56361, d_year#56397]\n      +- *(3) BroadcastHashJoin [ss_sold_date_sk#56348], [d_date_sk#56391], Inner, BuildRight, false\n         :- *(3) Project [ss_sold_date_sk#56348, ss_item_sk#56350, ss_customer_sk#56351, ss_quantity#56358, ss_wholesale_cost#56359, ss_sales_price#56361]\n         :  +- *(3) Filter isnull(sr_ticket_number#56380L)\n         :     +- *(3) BroadcastHashJoin [ss_ticket_number#56357L, ss_item_sk#56350], [sr_ticket_number#56380L, sr_item_sk#56373], LeftOuter, BuildRight, false\n         :        :- *(3) Filter isnotnull(ss_sold_date_sk#56348)\n         :        :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#56348, ss_item_sk#56350, ss_customer_sk#56351, ss_ticket_number#56357L, ss_quantity#56358, ss_wholesale_cost#56359, ss_sales_price#56361], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#56348, ss_sold_time_sk#56349, ss_item_sk#56350, ss_customer_sk#56351, ss_cdemo_s..., Partition Cols: []]\n         :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#75120]\n         :           +- *(1) Filter (isnotnull(sr_ticket_number#56380L) AND isnotnull(sr_item_sk#56373))\n         :              +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#56373, sr_ticket_number#56380L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#56371, sr_return_time_sk#56372, sr_item_sk#56373, sr_customer_sk#56374, sr_c..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#75128]\n            +- *(2) Filter ((isnotnull(d_year#56397) AND (d_year#56397 = 2000)) AND isnotnull(d_date_sk#56391))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#56391, d_year#56397], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#56391, d_date_id#56392, d_date#56393, d_month_seq#56394, d_week_seq#56395, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q78"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 2,
    "name" : "q79"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#56824, 200), ENSURE_REQUIREMENTS, [id=#75593]\n+- *(11) HashAggregate(keys=[s_store_name#56824], functions=[partial_sum(UnscaledValue(ss_net_profit#56790))], output=[s_store_name#56824, sum#56907L])\n   +- *(11) Project [ss_net_profit#56790, s_store_name#56824]\n      +- *(11) BroadcastHashJoin [substr(s_zip#56844, 1, 2)], [substr(ca_zip#56763, 1, 2)], Inner, BuildRight, false\n         :- *(11) Project [ss_net_profit#56790, s_store_name#56824, s_zip#56844]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#56775], [s_store_sk#56819], Inner, BuildRight, false\n         :     :- *(11) Project [ss_store_sk#56775, ss_net_profit#56790]\n         :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#56768], [d_date_sk#56791], Inner, BuildRight, false\n         :     :     :- *(11) Filter (isnotnull(ss_sold_date_sk#56768) AND isnotnull(ss_store_sk#56775))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#56768, ss_store_sk#56775, ss_net_profit#56790], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#56768, ss_sold_time_sk#56769, ss_item_sk#56770, ss_customer_sk#56771, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#75538]\n         :     :        +- *(1) Project [d_date_sk#56791]\n         :     :           +- *(1) Filter ((((isnotnull(d_qoy#56801) AND isnotnull(d_year#56797)) AND (d_qoy#56801 = 2)) AND (d_year#56797 = 1998)) AND isnotnull(d_date_sk#56791))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#56791, d_qoy#56801, d_year#56797], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#56791, d_date_id#56792, d_date#56793, d_month_seq#56794, d_week_seq#56795, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#75545]\n         :        +- *(2) Filter (isnotnull(s_store_sk#56819) AND isnotnull(s_zip#56844))\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#56819, s_store_name#56824, s_zip#56844], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#56819, s_store_id#56820, s_rec_start_date#56821, s_rec_end_date#56822, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [id=#75587]\n            +- *(10) HashAggregate(keys=[ca_zip#56763], functions=[], output=[ca_zip#56763])\n               +- Exchange hashpartitioning(ca_zip#56763, 200), ENSURE_REQUIREMENTS, [id=#75583]\n                  +- *(9) HashAggregate(keys=[ca_zip#56763], functions=[], output=[ca_zip#56763])\n                     +- *(9) Project [substr(ca_zip#56857, 1, 5) AS ca_zip#56763]\n                        +- SortMergeJoin [coalesce(substr(ca_zip#56857, 1, 5), ), isnull(substr(ca_zip#56857, 1, 5))], [coalesce(ca_zip#56764, ), isnull(ca_zip#56764)], LeftSemi\n                           :- *(4) Sort [coalesce(substr(ca_zip#56857, 1, 5), ) ASC NULLS FIRST, isnull(substr(ca_zip#56857, 1, 5)) ASC NULLS FIRST], false, 0\n                           :  +- Exchange hashpartitioning(coalesce(substr(ca_zip#56857, 1, 5), ), isnull(substr(ca_zip#56857, 1, 5)), 200), ENSURE_REQUIREMENTS, [id=#75552]\n                           :     +- *(3) Filter (substr(ca_zip#56857, 1, 5) INSET (69952,33467,27413,19489,63792,52868,56436,11686,18360,99060,73134,36430,84919,73873,32754,12197,98338,86379,56877,86709,91110,45676,53163,17193,11652,98569,20244,49140,75742,57649,92292,94835,71836,27642,40936,92645,12318,15475,59004,47602,50788,25115,83910,84844,89338,41351,63180,14851,17895,25494,96560,25973,54010,20712,51782,21727,99132,69280,41352,27052,83647,73108,83833,37119,51793,31830,17672,56355,68908,35390,19988,13443,72592,85761,98862,59130,83086,27700,32919,28810,30621,20534,14073,45484,21060,58058,30106,77817,23952,95694,21094,61997,38607,73219,73146,43639,95430,65177,47529,63073,52389,45645,18410,25214,27369,70070,60560,41419,81755,18218,14196,11340,71144,65501,19326,82080,18700,38353,68293,59494,36479,25717,81003,71948,75675,49211,56455,59852,88217,46507,70450,64592,19444,70041,21800,30415,58032,90209,16704,10425,14440,31013,49230,51634,55233,45859,28239,97462,16791,43933,50412,39503,16005,13261,25264,50679,33773,46131,74686,15543,58062,98584,20317,50636,40146,95042,13123,24987,33869,10374,92380,34306,13844,60083,67975,66943,17819,48567,68605,15751,43432,91894,96435,95464,56600,46081,24660,81963,32958,81504,54207,24594,34594,19753,41162,27385,26217,49254,71997,89193,88086,54558,82602,34473,27287,81084,13378,18367,48333,83986,18829,51089,14155,92696,45533,35926,67881,94791,24286,21814,66057,60624,16515,83041,57839,68852,98072,80332,39459,54364,28571,17291,36335,49101,25333,51717,63991,28577,47369,44529,94898,37914,34948,32961,71256,57631,20601,79658,24891,67998,31655,29752,90669,41232,88137,39500,18421,71954,41255,15782,18767,63193,49130,16891,24227,51766,73021,84680,60298,68770,59226,81070,33562,12350,97173,47289,62361,51184,61527,47770,51195,93498,45266,18434,15371,31016,43830,52094,24255,48017,34972,33113,16226,14530,98069,16364,18884,15734,78366,32669,57553,65148,75660,21204,58581,18569,82620,38919,84247,48162,26689,42361,14242,90229,70073,68101,79077,55349,13338,41807,78093,58412,14312,58117,50632,62878,80846,19833,56224,52301,35076,68341,51933,13869,85066,61860,83583,69998,11912,21343,11489,15794,25178,27156,59080,53565,17879,40979,58218,53535,37788,28055,36201,23065,11855,63294,21231,68843,54585,22815,35863,61794,29450,29818,57025,12320,13376,22728,60736,77454,75752,13918,72991,11618,58454,27116,68730,29392,59386,22911,49472,62585,59345,10298,41836,17167,71286,13086,41967,33122,48530,35834,39214,33159,29086,81335,98533,32489,86057,41331) AND isnotnull(substr(ca_zip#56857, 1, 5)))\n                           :        +- Scan hive tpcds_sf1_iceberg.customer_address [ca_zip#56857], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#56848, ca_address_id#56849, ca_street_number#56850, ca_street_name#56851, ca_stree..., Partition Cols: []]\n                           +- *(8) Sort [coalesce(ca_zip#56764, ) ASC NULLS FIRST, isnull(ca_zip#56764) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(ca_zip#56764, ), isnull(ca_zip#56764), 200), ENSURE_REQUIREMENTS, [id=#75574]\n                                 +- *(7) Project [ca_zip#56764]\n                                    +- *(7) Filter (count(1)#56893L > 10)\n                                       +- *(7) HashAggregate(keys=[ca_zip#56870], functions=[count(1)], output=[ca_zip#56764, count(1)#56893L])\n                                          +- Exchange hashpartitioning(ca_zip#56870, 200), ENSURE_REQUIREMENTS, [id=#75568]\n                                             +- *(6) HashAggregate(keys=[ca_zip#56870], functions=[partial_count(1)], output=[ca_zip#56870, count#56909L])\n                                                +- *(6) Project [ca_zip#56870]\n                                                   +- *(6) BroadcastHashJoin [ca_address_sk#56861], [c_current_addr_sk#56878], Inner, BuildLeft, false\n                                                      :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#75559]\n                                                      :  +- *(5) Filter isnotnull(ca_address_sk#56861)\n                                                      :     +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#56861, ca_zip#56870], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#56861, ca_address_id#56862, ca_street_number#56863, ca_street_name#56864, ca_stree..., Partition Cols: []]\n                                                      +- *(6) Project [c_current_addr_sk#56878]\n                                                         +- *(6) Filter ((isnotnull(c_preferred_cust_flag#56884) AND (c_preferred_cust_flag#56884 = Y)) AND isnotnull(c_current_addr_sk#56878))\n                                                            +- Scan hive tpcds_sf1_iceberg.customer [c_current_addr_sk#56878, c_preferred_cust_flag#56884], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#56874, c_customer_id#56875, c_current_cdemo_sk#56876, c_current_hdemo_sk#56877, c_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q8"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#57381, id#57382, spark_grouping_id#57380L, 200), ENSURE_REQUIREMENTS, [id=#76285]\n+- *(22) HashAggregate(keys=[channel#57381, id#57382, spark_grouping_id#57380L], functions=[partial_sum(sales#56923), partial_sum(returns#56924), partial_sum(profit#56925)], output=[channel#57381, id#57382, spark_grouping_id#57380L, sum#57400, isEmpty#57401, sum#57402, isEmpty#57403, sum#57404, isEmpty#57405])\n   +- *(22) Expand [List(sales#56923, returns#56924, profit#56925, channel#57378, id#57379, 0), List(sales#56923, returns#56924, profit#56925, channel#57378, null, 1), List(sales#56923, returns#56924, profit#56925, null, null, 3)], [sales#56923, returns#56924, profit#56925, channel#57381, id#57382, spark_grouping_id#57380L]\n      +- Union\n         :- *(7) HashAggregate(keys=[s_store_id#57005], functions=[sum(UnscaledValue(ss_ext_sales_price#56948)), sum(coalesce(cast(sr_return_amt#56967 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#56955 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#56975 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#56923, returns#56924, profit#56925, channel#57378, id#57379])\n         :  +- Exchange hashpartitioning(s_store_id#57005, 200), ENSURE_REQUIREMENTS, [id=#76062]\n         :     +- *(6) HashAggregate(keys=[s_store_id#57005], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#56948)), partial_sum(coalesce(cast(sr_return_amt#56967 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#56955 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#56975 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[s_store_id#57005, sum#57411L, sum#57412, isEmpty#57413, sum#57414, isEmpty#57415])\n         :        +- *(6) Project [ss_ext_sales_price#56948, ss_net_profit#56955, sr_return_amt#56967, sr_net_loss#56975, s_store_id#57005]\n         :           +- *(6) BroadcastHashJoin [ss_promo_sk#56941], [p_promo_sk#57055], Inner, BuildRight, false\n         :              :- *(6) Project [ss_promo_sk#56941, ss_ext_sales_price#56948, ss_net_profit#56955, sr_return_amt#56967, sr_net_loss#56975, s_store_id#57005]\n         :              :  +- *(6) BroadcastHashJoin [ss_item_sk#56935], [i_item_sk#57033], Inner, BuildRight, false\n         :              :     :- *(6) Project [ss_item_sk#56935, ss_promo_sk#56941, ss_ext_sales_price#56948, ss_net_profit#56955, sr_return_amt#56967, sr_net_loss#56975, s_store_id#57005]\n         :              :     :  +- *(6) BroadcastHashJoin [ss_store_sk#56940], [s_store_sk#57004], Inner, BuildRight, false\n         :              :     :     :- *(6) Project [ss_item_sk#56935, ss_store_sk#56940, ss_promo_sk#56941, ss_ext_sales_price#56948, ss_net_profit#56955, sr_return_amt#56967, sr_net_loss#56975]\n         :              :     :     :  +- *(6) BroadcastHashJoin [ss_sold_date_sk#56933], [d_date_sk#56976], Inner, BuildRight, false\n         :              :     :     :     :- *(6) Project [ss_sold_date_sk#56933, ss_item_sk#56935, ss_store_sk#56940, ss_promo_sk#56941, ss_ext_sales_price#56948, ss_net_profit#56955, sr_return_amt#56967, sr_net_loss#56975]\n         :              :     :     :     :  +- *(6) BroadcastHashJoin [ss_item_sk#56935, ss_ticket_number#56942L], [sr_item_sk#56958, sr_ticket_number#56965L], LeftOuter, BuildRight, false\n         :              :     :     :     :     :- *(6) Filter (((isnotnull(ss_sold_date_sk#56933) AND isnotnull(ss_store_sk#56940)) AND isnotnull(ss_item_sk#56935)) AND isnotnull(ss_promo_sk#56941))\n         :              :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#56933, ss_item_sk#56935, ss_store_sk#56940, ss_promo_sk#56941, ss_ticket_number#56942L, ss_ext_sales_price#56948, ss_net_profit#56955], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#56933, ss_sold_time_sk#56934, ss_item_sk#56935, ss_customer_sk#56936, ss_cdemo_s..., Partition Cols: []]\n         :              :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#76025]\n         :              :     :     :     :        +- *(1) Filter (isnotnull(sr_item_sk#56958) AND isnotnull(sr_ticket_number#56965L))\n         :              :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#56958, sr_ticket_number#56965L, sr_return_amt#56967, sr_net_loss#56975], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#56956, sr_return_time_sk#56957, sr_item_sk#56958, sr_customer_sk#56959, sr_c..., Partition Cols: []]\n         :              :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76033]\n         :              :     :     :        +- *(2) Project [d_date_sk#56976]\n         :              :     :     :           +- *(2) Filter (((isnotnull(d_date#56978) AND (d_date#56978 >= 11553)) AND (d_date#56978 <= 11613)) AND isnotnull(d_date_sk#56976))\n         :              :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#56978, d_date_sk#56976], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#56976, d_date_id#56977, d_date#56978, d_month_seq#56979, d_week_seq#56980, d_quarter_s..., Partition Cols: []]\n         :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#76040]\n         :              :     :        +- *(3) Filter isnotnull(s_store_sk#57004)\n         :              :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#57004, s_store_id#57005], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#57004, s_store_id#57005, s_rec_start_date#57006, s_rec_end_date#57007, s_closed_date_..., Partition Cols: []]\n         :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76048]\n         :              :        +- *(4) Project [i_item_sk#57033]\n         :              :           +- *(4) Filter ((isnotnull(i_current_price#57038) AND (i_current_price#57038 > 50.00)) AND isnotnull(i_item_sk#57033))\n         :              :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#57038, i_item_sk#57033], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#57033, i_item_id#57034, i_rec_start_date#57035, i_rec_end_date#57036, i_item_desc#5703..., Partition Cols: []]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76056]\n         :                 +- *(5) Project [p_promo_sk#57055]\n         :                    +- *(5) Filter ((isnotnull(p_channel_tv#57066) AND (p_channel_tv#57066 = N)) AND isnotnull(p_promo_sk#57055))\n         :                       +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_tv#57066, p_promo_sk#57055], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#57055, p_promo_id#57056, p_start_date_sk#57057, p_end_date_sk#57058, p_item_sk#57059,..., Partition Cols: []]\n         :- *(14) HashAggregate(keys=[cp_catalog_page_id#57164], functions=[sum(UnscaledValue(cs_ext_sales_price#57097)), sum(coalesce(cast(cr_return_amount#57126 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#57107 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57134 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#56927, returns#56928, profit#56929, channel#57390, id#57391])\n         :  +- Exchange hashpartitioning(cp_catalog_page_id#57164, 200), ENSURE_REQUIREMENTS, [id=#76232]\n         :     +- *(13) HashAggregate(keys=[cp_catalog_page_id#57164], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#57097)), partial_sum(coalesce(cast(cr_return_amount#57126 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#57107 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#57134 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[cp_catalog_page_id#57164, sum#57421L, sum#57422, isEmpty#57423, sum#57424, isEmpty#57425])\n         :        +- *(13) Project [cs_ext_sales_price#57097, cs_net_profit#57107, cr_return_amount#57126, cr_net_loss#57134, cp_catalog_page_id#57164]\n         :           +- *(13) BroadcastHashJoin [cs_promo_sk#57090], [p_promo_sk#57194], Inner, BuildRight, false\n         :              :- *(13) Project [cs_promo_sk#57090, cs_ext_sales_price#57097, cs_net_profit#57107, cr_return_amount#57126, cr_net_loss#57134, cp_catalog_page_id#57164]\n         :              :  +- *(13) BroadcastHashJoin [cs_item_sk#57089], [i_item_sk#57172], Inner, BuildRight, false\n         :              :     :- *(13) Project [cs_item_sk#57089, cs_promo_sk#57090, cs_ext_sales_price#57097, cs_net_profit#57107, cr_return_amount#57126, cr_net_loss#57134, cp_catalog_page_id#57164]\n         :              :     :  +- *(13) BroadcastHashJoin [cs_catalog_page_sk#57086], [cp_catalog_page_sk#57163], Inner, BuildRight, false\n         :              :     :     :- *(13) Project [cs_catalog_page_sk#57086, cs_item_sk#57089, cs_promo_sk#57090, cs_ext_sales_price#57097, cs_net_profit#57107, cr_return_amount#57126, cr_net_loss#57134]\n         :              :     :     :  +- *(13) BroadcastHashJoin [cs_sold_date_sk#57074], [d_date_sk#57135], Inner, BuildRight, false\n         :              :     :     :     :- *(13) Project [cs_sold_date_sk#57074, cs_catalog_page_sk#57086, cs_item_sk#57089, cs_promo_sk#57090, cs_ext_sales_price#57097, cs_net_profit#57107, cr_return_amount#57126, cr_net_loss#57134]\n         :              :     :     :     :  +- *(13) BroadcastHashJoin [cs_item_sk#57089, cs_order_number#57091L], [cr_item_sk#57110, cr_order_number#57124L], LeftOuter, BuildRight, false\n         :              :     :     :     :     :- *(13) Filter (((isnotnull(cs_sold_date_sk#57074) AND isnotnull(cs_catalog_page_sk#57086)) AND isnotnull(cs_item_sk#57089)) AND isnotnull(cs_promo_sk#57090))\n         :              :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#57074, cs_catalog_page_sk#57086, cs_item_sk#57089, cs_promo_sk#57090, cs_order_number#57091L, cs_ext_sales_price#57097, cs_net_profit#57107], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#57074, cs_sold_time_sk#57075, cs_ship_date_sk#57076, cs_bill_customer_sk#57077, ..., Partition Cols: []]\n         :              :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#76071]\n         :              :     :     :     :        +- *(8) Filter (isnotnull(cr_item_sk#57110) AND isnotnull(cr_order_number#57124L))\n         :              :     :     :     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#57110, cr_order_number#57124L, cr_return_amount#57126, cr_net_loss#57134], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#57108, cr_returned_time_sk#57109, cr_item_sk#57110, cr_refunded_customer_sk#..., Partition Cols: []]\n         :              :     :     :     +- ReusedExchange [d_date_sk#57135], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76033]\n         :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#76086]\n         :              :     :        +- *(10) Filter isnotnull(cp_catalog_page_sk#57163)\n         :              :     :           +- Scan hive tpcds_sf1_iceberg.catalog_page [cp_catalog_page_sk#57163, cp_catalog_page_id#57164], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cp_catalog_page_sk#57163, cp_catalog_page_id#57164, cp_start_date_sk#57165, cp_end_date_sk#57166..., Partition Cols: []]\n         :              :     +- ReusedExchange [i_item_sk#57172], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76048]\n         :              +- ReusedExchange [p_promo_sk#57194], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76056]\n         +- *(21) HashAggregate(keys=[web_site_id#57300], functions=[sum(UnscaledValue(ws_ext_sales_price#57236)), sum(coalesce(cast(wr_return_amt#57262 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#57246 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#57270 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#56930, returns#56931, profit#56932, channel#57392, id#57393])\n            +- Exchange hashpartitioning(web_site_id#57300, 200), ENSURE_REQUIREMENTS, [id=#76276]\n               +- *(20) HashAggregate(keys=[web_site_id#57300], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#57236)), partial_sum(coalesce(cast(wr_return_amt#57262 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#57246 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#57270 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[web_site_id#57300, sum#57431L, sum#57432, isEmpty#57433, sum#57434, isEmpty#57435])\n                  +- *(20) Project [ws_ext_sales_price#57236, ws_net_profit#57246, wr_return_amt#57262, wr_net_loss#57270, web_site_id#57300]\n                     +- *(20) BroadcastHashJoin [ws_promo_sk#57229], [p_promo_sk#57347], Inner, BuildRight, false\n                        :- *(20) Project [ws_promo_sk#57229, ws_ext_sales_price#57236, ws_net_profit#57246, wr_return_amt#57262, wr_net_loss#57270, web_site_id#57300]\n                        :  +- *(20) BroadcastHashJoin [ws_item_sk#57216], [i_item_sk#57325], Inner, BuildRight, false\n                        :     :- *(20) Project [ws_item_sk#57216, ws_promo_sk#57229, ws_ext_sales_price#57236, ws_net_profit#57246, wr_return_amt#57262, wr_net_loss#57270, web_site_id#57300]\n                        :     :  +- *(20) BroadcastHashJoin [ws_web_site_sk#57226], [web_site_sk#57299], Inner, BuildRight, false\n                        :     :     :- *(20) Project [ws_item_sk#57216, ws_web_site_sk#57226, ws_promo_sk#57229, ws_ext_sales_price#57236, ws_net_profit#57246, wr_return_amt#57262, wr_net_loss#57270]\n                        :     :     :  +- *(20) BroadcastHashJoin [ws_sold_date_sk#57213], [d_date_sk#57271], Inner, BuildRight, false\n                        :     :     :     :- *(20) Project [ws_sold_date_sk#57213, ws_item_sk#57216, ws_web_site_sk#57226, ws_promo_sk#57229, ws_ext_sales_price#57236, ws_net_profit#57246, wr_return_amt#57262, wr_net_loss#57270]\n                        :     :     :     :  +- *(20) BroadcastHashJoin [ws_item_sk#57216, ws_order_number#57230L], [wr_item_sk#57249, wr_order_number#57260L], LeftOuter, BuildRight, false\n                        :     :     :     :     :- *(20) Filter (((isnotnull(ws_sold_date_sk#57213) AND isnotnull(ws_web_site_sk#57226)) AND isnotnull(ws_item_sk#57216)) AND isnotnull(ws_promo_sk#57229))\n                        :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#57213, ws_item_sk#57216, ws_web_site_sk#57226, ws_promo_sk#57229, ws_order_number#57230L, ws_ext_sales_price#57236, ws_net_profit#57246], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#57213, ws_sold_time_sk#57214, ws_ship_date_sk#57215, ws_item_sk#57216, ws_bill_c..., Partition Cols: []]\n                        :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#76117]\n                        :     :     :     :        +- *(15) Filter (isnotnull(wr_item_sk#57249) AND isnotnull(wr_order_number#57260L))\n                        :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#57249, wr_order_number#57260L, wr_return_amt#57262, wr_net_loss#57270], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#57247, wr_returned_time_sk#57248, wr_item_sk#57249, wr_refunded_customer_sk#..., Partition Cols: []]\n                        :     :     :     +- ReusedExchange [d_date_sk#57271], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76033]\n                        :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#76132]\n                        :     :        +- *(17) Filter isnotnull(web_site_sk#57299)\n                        :     :           +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#57299, web_site_id#57300], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#57299, web_site_id#57300, web_rec_start_date#57301, web_rec_end_date#57302, web_name..., Partition Cols: []]\n                        :     +- ReusedExchange [i_item_sk#57325], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76048]\n                        +- ReusedExchange [p_promo_sk#57347], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76056]\n",
    "iteration" : 2,
    "name" : "q80"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 2,
    "name" : "q81"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#57662, i_item_desc#57665, i_current_price#57666, 200), ENSURE_REQUIREMENTS, [id=#76767]\n+- *(7) HashAggregate(keys=[i_item_id#57662, i_item_desc#57665, i_current_price#57666], functions=[], output=[i_item_id#57662, i_item_desc#57665, i_current_price#57666])\n   +- *(7) Project [i_item_id#57662, i_item_desc#57665, i_current_price#57666]\n      +- *(7) SortMergeJoin [i_item_sk#57661], [ss_item_sk#57717], Inner\n         :- *(4) Sort [i_item_sk#57661 ASC NULLS FIRST], false, 0\n         :  +- Exchange hashpartitioning(i_item_sk#57661, 200), ENSURE_REQUIREMENTS, [id=#76750]\n         :     +- *(3) Project [i_item_sk#57661, i_item_id#57662, i_item_desc#57665, i_current_price#57666]\n         :        +- *(3) BroadcastHashJoin [inv_date_sk#57683], [d_date_sk#57687], Inner, BuildRight, false\n         :           :- *(3) Project [i_item_sk#57661, i_item_id#57662, i_item_desc#57665, i_current_price#57666, inv_date_sk#57683]\n         :           :  +- *(3) BroadcastHashJoin [i_item_sk#57661], [inv_item_sk#57684], Inner, BuildLeft, false\n         :           :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76734]\n         :           :     :  +- *(1) Project [i_item_sk#57661, i_item_id#57662, i_item_desc#57665, i_current_price#57666]\n         :           :     :     +- *(1) Filter ((((isnotnull(i_current_price#57666) AND (i_current_price#57666 >= 68.00)) AND (i_current_price#57666 <= 98.00)) AND i_manufact_id#57674 IN (562,370,230,182)) AND isnotnull(i_item_sk#57661))\n         :           :     :        +- Scan hive tpcds_sf1_iceberg.item [i_current_price#57666, i_item_desc#57665, i_item_id#57662, i_item_sk#57661, i_manufact_id#57674], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#57661, i_item_id#57662, i_rec_start_date#57663, i_rec_end_date#57664, i_item_desc#5766..., Partition Cols: []]\n         :           :     +- *(3) Project [inv_date_sk#57683, inv_item_sk#57684]\n         :           :        +- *(3) Filter ((((isnotnull(inv_quantity_on_hand#57686) AND (inv_quantity_on_hand#57686 >= 100)) AND (inv_quantity_on_hand#57686 <= 500)) AND isnotnull(inv_item_sk#57684)) AND isnotnull(inv_date_sk#57683))\n         :           :           +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#57683, inv_item_sk#57684, inv_quantity_on_hand#57686], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#57683, inv_item_sk#57684, inv_warehouse_sk#57685, inv_quantity_on_hand#57686], Partition Cols: []]\n         :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#76745]\n         :              +- *(2) Project [d_date_sk#57687]\n         :                 +- *(2) Filter (((isnotnull(d_date#57689) AND (d_date#57689 >= 11815)) AND (d_date#57689 <= 11875)) AND isnotnull(d_date_sk#57687))\n         :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#57689, d_date_sk#57687], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#57687, d_date_id#57688, d_date#57689, d_month_seq#57690, d_week_seq#57691, d_quarter_s..., Partition Cols: []]\n         +- *(6) Sort [ss_item_sk#57717 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(ss_item_sk#57717, 200), ENSURE_REQUIREMENTS, [id=#76758]\n               +- *(5) Filter isnotnull(ss_item_sk#57717)\n                  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#57717], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#57715, ss_sold_time_sk#57716, ss_item_sk#57717, ss_customer_sk#57718, ss_cdemo_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q82"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#57782, 200), ENSURE_REQUIREMENTS, [id=#77130]\n+- *(5) HashAggregate(keys=[i_item_id#57782], functions=[partial_sum(cast(sr_return_quantity#57771 as bigint))], output=[i_item_id#57782, sum#58162L])\n   +- *(5) Project [sr_return_quantity#57771, i_item_id#57782]\n      +- *(5) BroadcastHashJoin [sr_returned_date_sk#57761], [d_date_sk#57803], Inner, BuildRight, false\n         :- *(5) Project [sr_returned_date_sk#57761, sr_return_quantity#57771, i_item_id#57782]\n         :  +- *(5) BroadcastHashJoin [sr_item_sk#57763], [i_item_sk#57781], Inner, BuildRight, false\n         :     :- *(5) Filter (isnotnull(sr_item_sk#57763) AND isnotnull(sr_returned_date_sk#57761))\n         :     :  +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#57761, sr_item_sk#57763, sr_return_quantity#57771], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#57761, sr_return_time_sk#57762, sr_item_sk#57763, sr_customer_sk#57764, sr_c..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77103]\n         :        +- *(1) Filter (isnotnull(i_item_sk#57781) AND isnotnull(i_item_id#57782))\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#57781, i_item_id#57782], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#57781, i_item_id#57782, i_rec_start_date#57783, i_rec_end_date#57784, i_item_desc#5778..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77124]\n            +- *(4) Project [d_date_sk#57803]\n               +- *(4) BroadcastHashJoin [d_date#57805], [d_date#57984], LeftSemi, BuildRight, false\n                  :- *(4) Filter isnotnull(d_date_sk#57803)\n                  :  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#57803, d_date#57805], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#57803, d_date_id#57804, d_date#57805, d_month_seq#57806, d_week_seq#57807, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#77119]\n                     +- *(3) Project [d_date#57984]\n                        +- *(3) BroadcastHashJoin [d_week_seq#57986], [d_week_seq#58014], LeftSemi, BuildRight, false\n                           :- Scan hive tpcds_sf1_iceberg.date_dim [d_date#57984, d_week_seq#57986], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#57982, d_date_id#57983, d_date#57984, d_month_seq#57985, d_week_seq#57986, d_quarter_s..., Partition Cols: []]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77114]\n                              +- *(2) Project [d_week_seq#58014]\n                                 +- *(2) Filter cast(d_date#58012 as string) IN (2000-02-20,2000-10-08,2000-11-04)\n                                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#58012, d_week_seq#58014], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#58010, d_date_id#58011, d_date#58012, d_month_seq#58013, d_week_seq#58014, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q83"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 2,
    "name" : "q84"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(r_reason_desc#58387, 200), ENSURE_REQUIREMENTS, [id=#77790]\n+- *(8) HashAggregate(keys=[r_reason_desc#58387], functions=[partial_avg(cast(ws_quantity#58272 as bigint)), partial_avg(UnscaledValue(wr_refunded_cash#58308)), partial_avg(UnscaledValue(wr_fee#58306))], output=[r_reason_desc#58387, sum#58412, count#58413L, sum#58414, count#58415L, sum#58416, count#58417L])\n   +- *(8) Project [ws_quantity#58272, wr_fee#58306, wr_refunded_cash#58308, r_reason_desc#58387]\n      +- *(8) BroadcastHashJoin [wr_reason_sk#58300], [r_reason_sk#58385], Inner, BuildRight, false\n         :- *(8) Project [ws_quantity#58272, wr_reason_sk#58300, wr_fee#58306, wr_refunded_cash#58308]\n         :  +- *(8) BroadcastHashJoin [ws_sold_date_sk#58254], [d_date_sk#58357], Inner, BuildRight, false\n         :     :- *(8) Project [ws_sold_date_sk#58254, ws_quantity#58272, wr_reason_sk#58300, wr_fee#58306, wr_refunded_cash#58308]\n         :     :  +- *(8) BroadcastHashJoin [wr_refunded_addr_sk#58294], [ca_address_sk#58344], Inner, BuildRight, ((((ca_state#58352 IN (IA,ND,FL) AND (ws_net_profit#58287 >= 100.00)) AND (ws_net_profit#58287 <= 200.00)) OR ((ca_state#58352 IN (OH,MS,VA) AND (ws_net_profit#58287 >= 150.00)) AND (ws_net_profit#58287 <= 300.00))) OR ((ca_state#58352 IN (MN,LA,TX) AND (ws_net_profit#58287 >= 50.00)) AND (ws_net_profit#58287 <= 250.00))), false\n         :     :     :- *(8) Project [ws_sold_date_sk#58254, ws_quantity#58272, ws_net_profit#58287, wr_refunded_addr_sk#58294, wr_reason_sk#58300, wr_fee#58306, wr_refunded_cash#58308]\n         :     :     :  +- *(8) BroadcastHashJoin [wr_returning_cdemo_sk#58296, cd_marital_status#58328, cd_education_status#58329], [cd_demo_sk#58335, cd_marital_status#58337, cd_education_status#58338], Inner, BuildRight, false\n         :     :     :     :- *(8) Project [ws_sold_date_sk#58254, ws_quantity#58272, ws_net_profit#58287, wr_refunded_addr_sk#58294, wr_returning_cdemo_sk#58296, wr_reason_sk#58300, wr_fee#58306, wr_refunded_cash#58308, cd_marital_status#58328, cd_education_status#58329]\n         :     :     :     :  +- *(8) BroadcastHashJoin [wr_refunded_cdemo_sk#58292], [cd_demo_sk#58326], Inner, BuildRight, ((((((cd_marital_status#58328 = D) AND (cd_education_status#58329 = 4 yr Degree)) AND (ws_sales_price#58275 >= 100.00)) AND (ws_sales_price#58275 <= 150.00)) OR ((((cd_marital_status#58328 = M) AND (cd_education_status#58329 = Primary)) AND (ws_sales_price#58275 >= 50.00)) AND (ws_sales_price#58275 <= 100.00))) OR ((((cd_marital_status#58328 = U) AND (cd_education_status#58329 = 2 yr Degree)) AND (ws_sales_price#58275 >= 150.00)) AND (ws_sales_price#58275 <= 200.00))), false\n         :     :     :     :     :- *(8) Project [ws_sold_date_sk#58254, ws_quantity#58272, ws_sales_price#58275, ws_net_profit#58287, wr_refunded_cdemo_sk#58292, wr_refunded_addr_sk#58294, wr_returning_cdemo_sk#58296, wr_reason_sk#58300, wr_fee#58306, wr_refunded_cash#58308]\n         :     :     :     :     :  +- *(8) BroadcastHashJoin [ws_web_page_sk#58266], [wp_web_page_sk#58312], Inner, BuildRight, false\n         :     :     :     :     :     :- *(8) Project [ws_sold_date_sk#58254, ws_web_page_sk#58266, ws_quantity#58272, ws_sales_price#58275, ws_net_profit#58287, wr_refunded_cdemo_sk#58292, wr_refunded_addr_sk#58294, wr_returning_cdemo_sk#58296, wr_reason_sk#58300, wr_fee#58306, wr_refunded_cash#58308]\n         :     :     :     :     :     :  +- *(8) BroadcastHashJoin [ws_item_sk#58257, ws_order_number#58271L], [wr_item_sk#58290, wr_order_number#58301L], Inner, BuildRight, false\n         :     :     :     :     :     :     :- *(8) Filter (((((isnotnull(ws_item_sk#58257) AND isnotnull(ws_order_number#58271L)) AND isnotnull(ws_web_page_sk#58266)) AND isnotnull(ws_sold_date_sk#58254)) AND ((((ws_sales_price#58275 >= 100.00) AND (ws_sales_price#58275 <= 150.00)) OR ((ws_sales_price#58275 >= 50.00) AND (ws_sales_price#58275 <= 100.00))) OR ((ws_sales_price#58275 >= 150.00) AND (ws_sales_price#58275 <= 200.00)))) AND ((((ws_net_profit#58287 >= 100.00) AND (ws_net_profit#58287 <= 200.00)) OR ((ws_net_profit#58287 >= 150.00) AND (ws_net_profit#58287 <= 300.00))) OR ((ws_net_profit#58287 >= 50.00) AND (ws_net_profit#58287 <= 250.00))))\n         :     :     :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#58254, ws_item_sk#58257, ws_web_page_sk#58266, ws_order_number#58271L, ws_quantity#58272, ws_sales_price#58275, ws_net_profit#58287], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#58254, ws_sold_time_sk#58255, ws_ship_date_sk#58256, ws_item_sk#58257, ws_bill_c..., Partition Cols: []]\n         :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[5, bigint, false]),false), [id=#77740]\n         :     :     :     :     :     :        +- *(1) Filter (((((isnotnull(wr_item_sk#58290) AND isnotnull(wr_order_number#58301L)) AND isnotnull(wr_refunded_cdemo_sk#58292)) AND isnotnull(wr_returning_cdemo_sk#58296)) AND isnotnull(wr_refunded_addr_sk#58294)) AND isnotnull(wr_reason_sk#58300))\n         :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#58290, wr_refunded_cdemo_sk#58292, wr_refunded_addr_sk#58294, wr_returning_cdemo_sk#58296, wr_reason_sk#58300, wr_order_number#58301L, wr_fee#58306, wr_refunded_cash#58308], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#58288, wr_returned_time_sk#58289, wr_item_sk#58290, wr_refunded_customer_sk#..., Partition Cols: []]\n         :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77747]\n         :     :     :     :     :        +- *(2) Filter isnotnull(wp_web_page_sk#58312)\n         :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_page [wp_web_page_sk#58312], HiveTableRelation [`tpcds_sf1_iceberg`.`web_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wp_web_page_sk#58312, wp_web_page_id#58313, wp_rec_start_date#58314, wp_rec_end_date#58315, wp_c..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77754]\n         :     :     :     :        +- *(3) Filter (((isnotnull(cd_demo_sk#58326) AND isnotnull(cd_marital_status#58328)) AND isnotnull(cd_education_status#58329)) AND ((((cd_marital_status#58328 = D) AND (cd_education_status#58329 = 4 yr Degree)) OR ((cd_marital_status#58328 = M) AND (cd_education_status#58329 = Primary))) OR ((cd_marital_status#58328 = U) AND (cd_education_status#58329 = 2 yr Degree))))\n         :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#58326, cd_marital_status#58328, cd_education_status#58329], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#58326, cd_gender#58327, cd_marital_status#58328, cd_education_status#58329, cd_purcha..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, string, false], input[2, string, false]),false), [id=#77761]\n         :     :     :        +- *(4) Filter ((isnotnull(cd_demo_sk#58335) AND isnotnull(cd_marital_status#58337)) AND isnotnull(cd_education_status#58338))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#58335, cd_marital_status#58337, cd_education_status#58338], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#58335, cd_gender#58336, cd_marital_status#58337, cd_education_status#58338, cd_purcha..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77769]\n         :     :        +- *(5) Project [ca_address_sk#58344, ca_state#58352]\n         :     :           +- *(5) Filter (((isnotnull(ca_country#58354) AND (ca_country#58354 = United States)) AND isnotnull(ca_address_sk#58344)) AND ((ca_state#58352 IN (IA,ND,FL) OR ca_state#58352 IN (OH,MS,VA)) OR ca_state#58352 IN (MN,LA,TX)))\n         :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#58344, ca_country#58354, ca_state#58352], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#58344, ca_address_id#58345, ca_street_number#58346, ca_street_name#58347, ca_stree..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77777]\n         :        +- *(6) Project [d_date_sk#58357]\n         :           +- *(6) Filter ((isnotnull(d_year#58363) AND (d_year#58363 = 2001)) AND isnotnull(d_date_sk#58357))\n         :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#58357, d_year#58363], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#58357, d_date_id#58358, d_date#58359, d_month_seq#58360, d_week_seq#58361, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77784]\n            +- *(7) Filter isnotnull(r_reason_sk#58385)\n               +- Scan hive tpcds_sf1_iceberg.reason [r_reason_sk#58385, r_reason_desc#58387], HiveTableRelation [`tpcds_sf1_iceberg`.`reason`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [r_reason_sk#58385, r_reason_id#58386, r_reason_desc#58387], Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q85"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#58531, _w2#58532, 200), ENSURE_REQUIREMENTS, [id=#77906]\n+- *(4) HashAggregate(keys=[i_category#58517, i_class#58518, spark_grouping_id#58516L], functions=[sum(UnscaledValue(ws_net_paid#58457))], output=[total_sum#58423, i_category#58517, i_class#58518, lochierarchy#58424, _w1#58531, _w2#58532, _w3#58533])\n   +- Exchange hashpartitioning(i_category#58517, i_class#58518, spark_grouping_id#58516L, 200), ENSURE_REQUIREMENTS, [id=#77902]\n      +- *(3) HashAggregate(keys=[i_category#58517, i_class#58518, spark_grouping_id#58516L], functions=[partial_sum(UnscaledValue(ws_net_paid#58457))], output=[i_category#58517, i_class#58518, spark_grouping_id#58516L, sum#58549L])\n         +- *(3) Expand [List(ws_net_paid#58457, i_category#58502, i_class#58500, 0), List(ws_net_paid#58457, i_category#58502, null, 1), List(ws_net_paid#58457, null, null, 3)], [ws_net_paid#58457, i_category#58517, i_class#58518, spark_grouping_id#58516L]\n            +- *(3) Project [ws_net_paid#58457, i_category#58502, i_class#58500]\n               +- *(3) BroadcastHashJoin [ws_item_sk#58431], [i_item_sk#58490], Inner, BuildRight, false\n                  :- *(3) Project [ws_item_sk#58431, ws_net_paid#58457]\n                  :  +- *(3) BroadcastHashJoin [ws_sold_date_sk#58428], [d_date_sk#58462], Inner, BuildRight, false\n                  :     :- *(3) Filter (isnotnull(ws_sold_date_sk#58428) AND isnotnull(ws_item_sk#58431))\n                  :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#58428, ws_item_sk#58431, ws_net_paid#58457], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#58428, ws_sold_time_sk#58429, ws_ship_date_sk#58430, ws_item_sk#58431, ws_bill_c..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#77888]\n                  :        +- *(1) Project [d_date_sk#58462]\n                  :           +- *(1) Filter (((isnotnull(d_month_seq#58465) AND (d_month_seq#58465 >= 1217)) AND (d_month_seq#58465 <= 1228)) AND isnotnull(d_date_sk#58462))\n                  :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#58462, d_month_seq#58465], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#58462, d_date_id#58463, d_date#58464, d_month_seq#58465, d_week_seq#58466, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#77895]\n                     +- *(2) Filter isnotnull(i_item_sk#58490)\n                        +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#58490, i_class#58500, i_category#58502], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#58490, i_item_id#58491, i_rec_start_date#58492, i_rec_end_date#58493, i_item_desc#5849..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q86"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#78412]\n+- *(16) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#58789L])\n   +- *(16) HashAggregate(keys=[c_last_name#58617, c_first_name#58616, d_date#58582], functions=[], output=[])\n      +- *(16) HashAggregate(keys=[c_last_name#58617, c_first_name#58616, d_date#58582], functions=[], output=[c_last_name#58617, c_first_name#58616, d_date#58582])\n         +- *(16) HashAggregate(keys=[c_last_name#58617, c_first_name#58616, d_date#58582], functions=[], output=[c_last_name#58617, c_first_name#58616, d_date#58582])\n            +- *(16) HashAggregate(keys=[c_last_name#58617, c_first_name#58616, d_date#58582], functions=[], output=[c_last_name#58617, c_first_name#58616, d_date#58582])\n               +- *(16) HashAggregate(keys=[c_last_name#58617, c_first_name#58616, d_date#58582], functions=[], output=[c_last_name#58617, c_first_name#58616, d_date#58582])\n                  +- Exchange hashpartitioning(c_last_name#58617, c_first_name#58616, d_date#58582, 200), ENSURE_REQUIREMENTS, [id=#78364]\n                     +- *(15) HashAggregate(keys=[c_last_name#58617, c_first_name#58616, d_date#58582], functions=[], output=[c_last_name#58617, c_first_name#58616, d_date#58582])\n                        +- SortMergeJoin [coalesce(c_last_name#58617, ), isnull(c_last_name#58617), coalesce(c_first_name#58616, ), isnull(c_first_name#58616), coalesce(d_date#58582, 0), isnull(d_date#58582)], [coalesce(c_last_name#58777, ), isnull(c_last_name#58777), coalesce(c_first_name#58776, ), isnull(c_first_name#58776), coalesce(d_date#58742, 0), isnull(d_date#58742)], LeftAnti\n                           :- SortMergeJoin [coalesce(c_last_name#58617, ), isnull(c_last_name#58617), coalesce(c_first_name#58616, ), isnull(c_first_name#58616), coalesce(d_date#58582, 0), isnull(d_date#58582)], [coalesce(c_last_name#58697, ), isnull(c_last_name#58697), coalesce(c_first_name#58696, ), isnull(c_first_name#58696), coalesce(d_date#58662, 0), isnull(d_date#58662)], LeftAnti\n                           :  :- *(4) Sort [coalesce(c_last_name#58617, ) ASC NULLS FIRST, isnull(c_last_name#58617) ASC NULLS FIRST, coalesce(c_first_name#58616, ) ASC NULLS FIRST, isnull(c_first_name#58616) ASC NULLS FIRST, coalesce(d_date#58582, 0) ASC NULLS FIRST, isnull(d_date#58582) ASC NULLS FIRST], false, 0\n                           :  :  +- Exchange hashpartitioning(coalesce(c_last_name#58617, ), isnull(c_last_name#58617), coalesce(c_first_name#58616, ), isnull(c_first_name#58616), coalesce(d_date#58582, 0), isnull(d_date#58582), 200), ENSURE_REQUIREMENTS, [id=#78155]\n                           :  :     +- *(3) Project [d_date#58582, c_first_name#58616, c_last_name#58617]\n                           :  :        +- *(3) BroadcastHashJoin [ss_customer_sk#58560], [c_customer_sk#58608], Inner, BuildRight, false\n                           :  :           :- *(3) Project [ss_customer_sk#58560, d_date#58582]\n                           :  :           :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#58557], [d_date_sk#58580], Inner, BuildRight, false\n                           :  :           :     :- *(3) Filter (isnotnull(ss_sold_date_sk#58557) AND isnotnull(ss_customer_sk#58560))\n                           :  :           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#58557, ss_customer_sk#58560], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#58557, ss_sold_time_sk#58558, ss_item_sk#58559, ss_customer_sk#58560, ss_cdemo_s..., Partition Cols: []]\n                           :  :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#78143]\n                           :  :           :        +- *(1) Project [d_date_sk#58580, d_date#58582]\n                           :  :           :           +- *(1) Filter (((isnotnull(d_month_seq#58583) AND (d_month_seq#58583 >= 1224)) AND (d_month_seq#58583 <= 1235)) AND isnotnull(d_date_sk#58580))\n                           :  :           :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#58582, d_date_sk#58580, d_month_seq#58583], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#58580, d_date_id#58581, d_date#58582, d_month_seq#58583, d_week_seq#58584, d_quarter_s..., Partition Cols: []]\n                           :  :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#78150]\n                           :  :              +- *(2) Filter isnotnull(c_customer_sk#58608)\n                           :  :                 +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#58608, c_first_name#58616, c_last_name#58617], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#58608, c_customer_id#58609, c_current_cdemo_sk#58610, c_current_hdemo_sk#58611, c_..., Partition Cols: []]\n                           :  +- *(9) Sort [coalesce(c_last_name#58697, ) ASC NULLS FIRST, isnull(c_last_name#58697) ASC NULLS FIRST, coalesce(c_first_name#58696, ) ASC NULLS FIRST, isnull(c_first_name#58696) ASC NULLS FIRST, coalesce(d_date#58662, 0) ASC NULLS FIRST, isnull(d_date#58662) ASC NULLS FIRST], false, 0\n                           :     +- Exchange hashpartitioning(coalesce(c_last_name#58697, ), isnull(c_last_name#58697), coalesce(c_first_name#58696, ), isnull(c_first_name#58696), coalesce(d_date#58662, 0), isnull(d_date#58662), 200), ENSURE_REQUIREMENTS, [id=#78273]\n                           :        +- *(8) HashAggregate(keys=[c_last_name#58697, c_first_name#58696, d_date#58662], functions=[], output=[c_last_name#58697, c_first_name#58696, d_date#58662])\n                           :           +- Exchange hashpartitioning(c_last_name#58697, c_first_name#58696, d_date#58662, 200), ENSURE_REQUIREMENTS, [id=#78269]\n                           :              +- *(7) HashAggregate(keys=[c_last_name#58697, c_first_name#58696, d_date#58662], functions=[], output=[c_last_name#58697, c_first_name#58696, d_date#58662])\n                           :                 +- *(7) Project [c_last_name#58697, c_first_name#58696, d_date#58662]\n                           :                    +- *(7) BroadcastHashJoin [cs_bill_customer_sk#58629], [c_customer_sk#58688], Inner, BuildRight, false\n                           :                       :- *(7) Project [cs_bill_customer_sk#58629, d_date#58662]\n                           :                       :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#58626], [d_date_sk#58660], Inner, BuildRight, false\n                           :                       :     :- *(7) Filter (isnotnull(cs_sold_date_sk#58626) AND isnotnull(cs_bill_customer_sk#58629))\n                           :                       :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#58626, cs_bill_customer_sk#58629], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#58626, cs_sold_time_sk#58627, cs_ship_date_sk#58628, cs_bill_customer_sk#58629, ..., Partition Cols: []]\n                           :                       :     +- ReusedExchange [d_date_sk#58660, d_date#58662], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#78143]\n                           :                       +- ReusedExchange [c_customer_sk#58688, c_first_name#58696, c_last_name#58697], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#78150]\n                           +- *(14) Sort [coalesce(c_last_name#58777, ) ASC NULLS FIRST, isnull(c_last_name#58777) ASC NULLS FIRST, coalesce(c_first_name#58776, ) ASC NULLS FIRST, isnull(c_first_name#58776) ASC NULLS FIRST, coalesce(d_date#58742, 0) ASC NULLS FIRST, isnull(d_date#58742) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(c_last_name#58777, ), isnull(c_last_name#58777), coalesce(c_first_name#58776, ), isnull(c_first_name#58776), coalesce(d_date#58742, 0), isnull(d_date#58742), 200), ENSURE_REQUIREMENTS, [id=#78350]\n                                 +- *(13) HashAggregate(keys=[c_last_name#58777, c_first_name#58776, d_date#58742], functions=[], output=[c_last_name#58777, c_first_name#58776, d_date#58742])\n                                    +- Exchange hashpartitioning(c_last_name#58777, c_first_name#58776, d_date#58742, 200), ENSURE_REQUIREMENTS, [id=#78327]\n                                       +- *(12) HashAggregate(keys=[c_last_name#58777, c_first_name#58776, d_date#58742], functions=[], output=[c_last_name#58777, c_first_name#58776, d_date#58742])\n                                          +- *(12) Project [c_last_name#58777, c_first_name#58776, d_date#58742]\n                                             +- *(12) BroadcastHashJoin [ws_bill_customer_sk#58710], [c_customer_sk#58768], Inner, BuildRight, false\n                                                :- *(12) Project [ws_bill_customer_sk#58710, d_date#58742]\n                                                :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#58706], [d_date_sk#58740], Inner, BuildRight, false\n                                                :     :- *(12) Filter (isnotnull(ws_sold_date_sk#58706) AND isnotnull(ws_bill_customer_sk#58710))\n                                                :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#58706, ws_bill_customer_sk#58710], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#58706, ws_sold_time_sk#58707, ws_ship_date_sk#58708, ws_item_sk#58709, ws_bill_c..., Partition Cols: []]\n                                                :     +- ReusedExchange [d_date_sk#58740, d_date#58742], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#78143]\n                                                +- ReusedExchange [c_customer_sk#58768, c_first_name#58776, c_last_name#58777], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#78150]\n",
    "iteration" : 2,
    "name" : "q87"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#79808]\n+- *(39) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#59367L])\n   +- *(39) Project\n      +- *(39) BroadcastHashJoin [ss_store_sk#59284], [s_store_sk#59315], Inner, BuildRight, false\n         :- *(39) Project [ss_store_sk#59284]\n         :  +- *(39) BroadcastHashJoin [ss_sold_time_sk#59278], [t_time_sk#59305], Inner, BuildRight, false\n         :     :- *(39) Project [ss_sold_time_sk#59278, ss_store_sk#59284]\n         :     :  +- *(39) BroadcastHashJoin [ss_hdemo_sk#59282], [hd_demo_sk#59300], Inner, BuildRight, false\n         :     :     :- *(39) Filter ((isnotnull(ss_hdemo_sk#59282) AND isnotnull(ss_sold_time_sk#59278)) AND isnotnull(ss_store_sk#59284))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_time_sk#59278, ss_hdemo_sk#59282, ss_store_sk#59284], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#59277, ss_sold_time_sk#59278, ss_item_sk#59279, ss_customer_sk#59280, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- ReusedExchange [hd_demo_sk#59300], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#79078]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#79322]\n         :        +- *(37) Project [t_time_sk#59305]\n         :           +- *(37) Filter ((((isnotnull(t_hour#59308) AND isnotnull(t_minute#59309)) AND (t_hour#59308 = 12)) AND (t_minute#59309 < 30)) AND isnotnull(t_time_sk#59305))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#59308, t_minute#59309, t_time_sk#59305], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#59305, t_time_id#59306, t_time#59307, t_hour#59308, t_minute#59309, t_second#59310, t_..., Partition Cols: []]\n         +- ReusedExchange [s_store_sk#59315], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#79094]\n",
    "iteration" : 2,
    "name" : "q88"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#59391, i_brand#59387, s_store_name#59457, s_company_name#59469, 200), ENSURE_REQUIREMENTS, [id=#79959]\n+- *(5) HashAggregate(keys=[i_category#59391, i_class#59389, i_brand#59387, s_store_name#59457, s_company_name#59469, d_moy#59432], functions=[sum(UnscaledValue(ss_sales_price#59414))], output=[i_category#59391, i_class#59389, i_brand#59387, s_store_name#59457, s_company_name#59469, d_moy#59432, sum_sales#59377, _w0#59484])\n   +- Exchange hashpartitioning(i_category#59391, i_class#59389, i_brand#59387, s_store_name#59457, s_company_name#59469, d_moy#59432, 200), ENSURE_REQUIREMENTS, [id=#79955]\n      +- *(4) HashAggregate(keys=[i_category#59391, i_class#59389, i_brand#59387, s_store_name#59457, s_company_name#59469, d_moy#59432], functions=[partial_sum(UnscaledValue(ss_sales_price#59414))], output=[i_category#59391, i_class#59389, i_brand#59387, s_store_name#59457, s_company_name#59469, d_moy#59432, sum#59494L])\n         +- *(4) Project [i_brand#59387, i_class#59389, i_category#59391, ss_sales_price#59414, d_moy#59432, s_store_name#59457, s_company_name#59469]\n            +- *(4) BroadcastHashJoin [ss_store_sk#59408], [s_store_sk#59452], Inner, BuildRight, false\n               :- *(4) Project [i_brand#59387, i_class#59389, i_category#59391, ss_store_sk#59408, ss_sales_price#59414, d_moy#59432]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#59401], [d_date_sk#59424], Inner, BuildRight, false\n               :     :- *(4) Project [i_brand#59387, i_class#59389, i_category#59391, ss_sold_date_sk#59401, ss_store_sk#59408, ss_sales_price#59414]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#59379], [ss_item_sk#59403], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#79932]\n               :     :     :  +- *(1) Filter (((i_category#59391 IN (Children,Home,Women) AND i_class#59389 IN (toddlers,flatware,fragrances)) OR (i_category#59391 IN (Music,Electronics,Shoes) AND i_class#59389 IN (country,dvd/vcr players,mens))) AND isnotnull(i_item_sk#59379))\n               :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#59379, i_brand#59387, i_class#59389, i_category#59391], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#59379, i_item_id#59380, i_rec_start_date#59381, i_rec_end_date#59382, i_item_desc#5938..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#59403) AND isnotnull(ss_sold_date_sk#59401)) AND isnotnull(ss_store_sk#59408))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#59401, ss_item_sk#59403, ss_store_sk#59408, ss_sales_price#59414], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#59401, ss_sold_time_sk#59402, ss_item_sk#59403, ss_customer_sk#59404, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#79942]\n               :        +- *(2) Project [d_date_sk#59424, d_moy#59432]\n               :           +- *(2) Filter ((isnotnull(d_year#59430) AND (d_year#59430 = 2001)) AND isnotnull(d_date_sk#59424))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#59424, d_moy#59432, d_year#59430], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#59424, d_date_id#59425, d_date#59426, d_month_seq#59427, d_week_seq#59428, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#79949]\n                  +- *(3) Filter isnotnull(s_store_sk#59452)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#59452, s_store_name#59457, s_company_name#59469], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#59452, s_store_id#59453, s_rec_start_date#59454, s_rec_end_date#59455, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q89"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 2,
    "name" : "q9"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#80813]\n+- *(9) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#60158L])\n   +- *(9) Project\n      +- *(9) BroadcastHashJoin [ws_web_page_sk#60103], [wp_web_page_sk#60140], Inner, BuildRight, false\n         :- *(9) Project [ws_web_page_sk#60103]\n         :  +- *(9) BroadcastHashJoin [ws_sold_time_sk#60092], [t_time_sk#60130], Inner, BuildRight, false\n         :     :- *(9) Project [ws_sold_time_sk#60092, ws_web_page_sk#60103]\n         :     :  +- *(9) BroadcastHashJoin [ws_ship_hdemo_sk#60101], [hd_demo_sk#60125], Inner, BuildRight, false\n         :     :     :- *(9) Filter ((isnotnull(ws_ship_hdemo_sk#60101) AND isnotnull(ws_sold_time_sk#60092)) AND isnotnull(ws_web_page_sk#60103))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_time_sk#60092, ws_ship_hdemo_sk#60101, ws_web_page_sk#60103], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60091, ws_sold_time_sk#60092, ws_ship_date_sk#60093, ws_item_sk#60094, ws_bill_c..., Partition Cols: []]\n         :     :     +- ReusedExchange [hd_demo_sk#60125], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#80689]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#80729]\n         :        +- *(7) Project [t_time_sk#60130]\n         :           +- *(7) Filter (((isnotnull(t_hour#60133) AND (t_hour#60133 >= 20)) AND (t_hour#60133 <= 21)) AND isnotnull(t_time_sk#60130))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#60133, t_time_sk#60130], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#60130, t_time_id#60131, t_time#60132, t_hour#60133, t_minute#60134, t_second#60135, t_..., Partition Cols: []]\n         +- ReusedExchange [wp_web_page_sk#60140], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#80705]\n",
    "iteration" : 2,
    "name" : "q90"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(Returns_Loss#60164 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [id=#81056]\n+- *(8) HashAggregate(keys=[cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cd_marital_status#60284, cd_education_status#60285], functions=[sum(UnscaledValue(cr_net_loss#60222))], output=[Call_Center#60161, Call_Center_Name#60162, Manager#60163, Returns_Loss#60164])\n   +- Exchange hashpartitioning(cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cd_marital_status#60284, cd_education_status#60285, 200), ENSURE_REQUIREMENTS, [id=#81052]\n      +- *(7) HashAggregate(keys=[cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cd_marital_status#60284, cd_education_status#60285], functions=[partial_sum(UnscaledValue(cr_net_loss#60222))], output=[cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cd_marital_status#60284, cd_education_status#60285, sum#60304L])\n         +- *(7) Project [cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cr_net_loss#60222, cd_marital_status#60284, cd_education_status#60285]\n            +- *(7) BroadcastHashJoin [c_current_hdemo_sk#60254], [hd_demo_sk#60291], Inner, BuildRight, false\n               :- *(7) Project [cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cr_net_loss#60222, c_current_hdemo_sk#60254, cd_marital_status#60284, cd_education_status#60285]\n               :  +- *(7) BroadcastHashJoin [c_current_cdemo_sk#60253], [cd_demo_sk#60282], Inner, BuildRight, false\n               :     :- *(7) Project [cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cr_net_loss#60222, c_current_cdemo_sk#60253, c_current_hdemo_sk#60254]\n               :     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#60255], [ca_address_sk#60269], Inner, BuildRight, false\n               :     :     :- *(7) Project [cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cr_net_loss#60222, c_current_cdemo_sk#60253, c_current_hdemo_sk#60254, c_current_addr_sk#60255]\n               :     :     :  +- *(7) BroadcastHashJoin [cr_returning_customer_sk#60203], [c_customer_sk#60251], Inner, BuildRight, false\n               :     :     :     :- *(7) Project [cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cr_returning_customer_sk#60203, cr_net_loss#60222]\n               :     :     :     :  +- *(7) BroadcastHashJoin [cr_returned_date_sk#60196], [d_date_sk#60223], Inner, BuildRight, false\n               :     :     :     :     :- *(7) Project [cc_call_center_id#60166, cc_name#60171, cc_manager#60176, cr_returned_date_sk#60196, cr_returning_customer_sk#60203, cr_net_loss#60222]\n               :     :     :     :     :  +- *(7) BroadcastHashJoin [cc_call_center_sk#60165], [cr_call_center_sk#60207], Inner, BuildLeft, false\n               :     :     :     :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#81006]\n               :     :     :     :     :     :  +- *(1) Filter isnotnull(cc_call_center_sk#60165)\n               :     :     :     :     :     :     +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#60165, cc_call_center_id#60166, cc_name#60171, cc_manager#60176], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#60165, cc_call_center_id#60166, cc_rec_start_date#60167, cc_rec_end_date#60168..., Partition Cols: []]\n               :     :     :     :     :     +- *(7) Filter ((isnotnull(cr_call_center_sk#60207) AND isnotnull(cr_returned_date_sk#60196)) AND isnotnull(cr_returning_customer_sk#60203))\n               :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_returned_date_sk#60196, cr_returning_customer_sk#60203, cr_call_center_sk#60207, cr_net_loss#60222], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#60196, cr_returned_time_sk#60197, cr_item_sk#60198, cr_refunded_customer_sk#..., Partition Cols: []]\n               :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81016]\n               :     :     :     :        +- *(2) Project [d_date_sk#60223]\n               :     :     :     :           +- *(2) Filter ((((isnotnull(d_year#60229) AND isnotnull(d_moy#60231)) AND (d_year#60229 = 1998)) AND (d_moy#60231 = 12)) AND isnotnull(d_date_sk#60223))\n               :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#60223, d_moy#60231, d_year#60229], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#60223, d_date_id#60224, d_date#60225, d_month_seq#60226, d_week_seq#60227, d_quarter_s..., Partition Cols: []]\n               :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#81023]\n               :     :     :        +- *(3) Filter (((isnotnull(c_customer_sk#60251) AND isnotnull(c_current_addr_sk#60255)) AND isnotnull(c_current_cdemo_sk#60253)) AND isnotnull(c_current_hdemo_sk#60254))\n               :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#60251, c_current_cdemo_sk#60253, c_current_hdemo_sk#60254, c_current_addr_sk#60255], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#60251, c_customer_id#60252, c_current_cdemo_sk#60253, c_current_hdemo_sk#60254, c_..., Partition Cols: []]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81031]\n               :     :        +- *(4) Project [ca_address_sk#60269]\n               :     :           +- *(4) Filter ((isnotnull(ca_gmt_offset#60280) AND (ca_gmt_offset#60280 = -6.00)) AND isnotnull(ca_address_sk#60269))\n               :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#60269, ca_gmt_offset#60280], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#60269, ca_address_id#60270, ca_street_number#60271, ca_street_name#60272, ca_stree..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#81038]\n               :        +- *(5) Filter ((((cd_marital_status#60284 = M) AND (cd_education_status#60285 = Unknown)) OR ((cd_marital_status#60284 = W) AND (cd_education_status#60285 = Advanced Degree))) AND isnotnull(cd_demo_sk#60282))\n               :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#60282, cd_marital_status#60284, cd_education_status#60285], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#60282, cd_gender#60283, cd_marital_status#60284, cd_education_status#60285, cd_purcha..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81046]\n                  +- *(6) Project [hd_demo_sk#60291]\n                     +- *(6) Filter ((isnotnull(hd_buy_potential#60293) AND StartsWith(hd_buy_potential#60293, Unknown)) AND isnotnull(hd_demo_sk#60291))\n                        +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#60293, hd_demo_sk#60291], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#60291, hd_income_band_sk#60292, hd_buy_potential#60293, hd_dep_count#60294, hd_vehicl..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q91"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#81250]\n+- *(8) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ws_ext_discount_amt#60334))], output=[sum#60465L])\n   +- *(8) Project [ws_ext_discount_amt#60334]\n      +- *(8) BroadcastHashJoin [ws_sold_date_sk#60312], [d_date_sk#60368], Inner, BuildRight, false\n         :- *(8) Project [ws_sold_date_sk#60312, ws_ext_discount_amt#60334]\n         :  +- *(8) SortMergeJoin [i_item_sk#60346], [ws_item_sk#60399], Inner, (cast(ws_ext_discount_amt#60334 as decimal(14,7)) > (CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#60459)\n         :     :- *(3) Sort [i_item_sk#60346 ASC NULLS FIRST], false, 0\n         :     :  +- Exchange hashpartitioning(i_item_sk#60346, 200), ENSURE_REQUIREMENTS, [id=#81187]\n         :     :     +- *(2) Project [ws_sold_date_sk#60312, ws_ext_discount_amt#60334, i_item_sk#60346]\n         :     :        +- *(2) BroadcastHashJoin [ws_item_sk#60315], [i_item_sk#60346], Inner, BuildRight, false\n         :     :           :- *(2) Filter ((isnotnull(ws_item_sk#60315) AND isnotnull(ws_ext_discount_amt#60334)) AND isnotnull(ws_sold_date_sk#60312))\n         :     :           :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#60312, ws_item_sk#60315, ws_ext_discount_amt#60334], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60312, ws_sold_time_sk#60313, ws_ship_date_sk#60314, ws_item_sk#60315, ws_bill_c..., Partition Cols: []]\n         :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81182]\n         :     :              +- *(1) Project [i_item_sk#60346]\n         :     :                 +- *(1) Filter ((isnotnull(i_manufact_id#60359) AND (i_manufact_id#60359 = 172)) AND isnotnull(i_item_sk#60346))\n         :     :                    +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#60346, i_manufact_id#60359], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#60346, i_item_id#60347, i_rec_start_date#60348, i_rec_end_date#60349, i_item_desc#6035..., Partition Cols: []]\n         :     +- *(6) Sort [ws_item_sk#60399 ASC NULLS FIRST], false, 0\n         :        +- *(6) Filter isnotnull((CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#60459)\n         :           +- *(6) HashAggregate(keys=[ws_item_sk#60399], functions=[avg(UnscaledValue(ws_ext_discount_amt#60418))], output=[(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#60459, ws_item_sk#60399])\n         :              +- Exchange hashpartitioning(ws_item_sk#60399, 200), ENSURE_REQUIREMENTS, [id=#81204]\n         :                 +- *(5) HashAggregate(keys=[ws_item_sk#60399], functions=[partial_avg(UnscaledValue(ws_ext_discount_amt#60418))], output=[ws_item_sk#60399, sum#60468, count#60469L])\n         :                    +- *(5) Project [ws_item_sk#60399, ws_ext_discount_amt#60418]\n         :                       +- *(5) BroadcastHashJoin [ws_sold_date_sk#60396], [d_date_sk#60430], Inner, BuildRight, false\n         :                          :- *(5) Filter (isnotnull(ws_sold_date_sk#60396) AND isnotnull(ws_item_sk#60399))\n         :                          :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#60396, ws_item_sk#60399, ws_ext_discount_amt#60418], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60396, ws_sold_time_sk#60397, ws_ship_date_sk#60398, ws_item_sk#60399, ws_bill_c..., Partition Cols: []]\n         :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81198]\n         :                             +- *(4) Project [d_date_sk#60430]\n         :                                +- *(4) Filter (((isnotnull(d_date#60432) AND (d_date#60432 >= 10603)) AND (d_date#60432 <= 10693)) AND isnotnull(d_date_sk#60430))\n         :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#60432, d_date_sk#60430], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#60430, d_date_id#60431, d_date#60432, d_month_seq#60433, d_week_seq#60434, d_quarter_s..., Partition Cols: []]\n         +- ReusedExchange [d_date_sk#60368], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81198]\n",
    "iteration" : 2,
    "name" : "q92"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ss_customer_sk#60477, 200), ENSURE_REQUIREMENTS, [id=#81328]\n+- *(3) HashAggregate(keys=[ss_customer_sk#60477], functions=[partial_sum(act_sales#60472)], output=[ss_customer_sk#60477, sum#60527, isEmpty#60528])\n   +- *(3) Project [ss_customer_sk#60477, CASE WHEN isnotnull(sr_return_quantity#60507) THEN CheckOverflow((promote_precision(cast(cast((ss_quantity#60484 - sr_return_quantity#60507) as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#60487 as decimal(12,2)))), DecimalType(18,2), true) ELSE CheckOverflow((promote_precision(cast(cast(ss_quantity#60484 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#60487 as decimal(12,2)))), DecimalType(18,2), true) END AS act_sales#60472]\n      +- *(3) BroadcastHashJoin [sr_reason_sk#60505], [r_reason_sk#60517], Inner, BuildRight, false\n         :- *(3) Project [ss_customer_sk#60477, ss_quantity#60484, ss_sales_price#60487, sr_reason_sk#60505, sr_return_quantity#60507]\n         :  +- *(3) BroadcastHashJoin [ss_item_sk#60476, ss_ticket_number#60483L], [sr_item_sk#60499, sr_ticket_number#60506L], Inner, BuildRight, false\n         :     :- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#60476, ss_customer_sk#60477, ss_ticket_number#60483L, ss_quantity#60484, ss_sales_price#60487], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#60474, ss_sold_time_sk#60475, ss_item_sk#60476, ss_customer_sk#60477, ss_cdemo_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[2, bigint, false]),false), [id=#81314]\n         :        +- *(1) Filter ((isnotnull(sr_item_sk#60499) AND isnotnull(sr_ticket_number#60506L)) AND isnotnull(sr_reason_sk#60505))\n         :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#60499, sr_reason_sk#60505, sr_ticket_number#60506L, sr_return_quantity#60507], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#60497, sr_return_time_sk#60498, sr_item_sk#60499, sr_customer_sk#60500, sr_c..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81322]\n            +- *(2) Project [r_reason_sk#60517]\n               +- *(2) Filter ((isnotnull(r_reason_desc#60519) AND (r_reason_desc#60519 = reason 58)) AND isnotnull(r_reason_sk#60517))\n                  +- Scan hive tpcds_sf1_iceberg.reason [r_reason_desc#60519, r_reason_sk#60517], HiveTableRelation [`tpcds_sf1_iceberg`.`reason`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [r_reason_sk#60517, r_reason_id#60518, r_reason_desc#60519], Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q93"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#81488]\n+- *(5) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#60565)), merge_sum(UnscaledValue(ws_net_profit#60570)), partial_count(distinct ws_order_number#60554L)], output=[sum#60705L, sum#60707L, count#60710L])\n   +- *(5) HashAggregate(keys=[ws_order_number#60554L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#60565)), merge_sum(UnscaledValue(ws_net_profit#60570))], output=[ws_order_number#60554L, sum#60705L, sum#60707L])\n      +- Exchange hashpartitioning(ws_order_number#60554L, 200), ENSURE_REQUIREMENTS, [id=#81483]\n         +- *(4) HashAggregate(keys=[ws_order_number#60554L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#60565)), partial_sum(UnscaledValue(ws_net_profit#60570))], output=[ws_order_number#60554L, sum#60705L, sum#60707L])\n            +- *(4) Project [ws_order_number#60554L, ws_ext_ship_cost#60565, ws_net_profit#60570]\n               +- *(4) BroadcastHashJoin [ws_web_site_sk#60550], [web_site_sk#60612], Inner, BuildRight, false\n                  :- *(4) Project [ws_web_site_sk#60550, ws_order_number#60554L, ws_ext_ship_cost#60565, ws_net_profit#60570]\n                  :  +- *(4) BroadcastHashJoin [ws_ship_addr_sk#60548], [ca_address_sk#60599], Inner, BuildRight, false\n                  :     :- *(4) Project [ws_ship_addr_sk#60548, ws_web_site_sk#60550, ws_order_number#60554L, ws_ext_ship_cost#60565, ws_net_profit#60570]\n                  :     :  +- *(4) BroadcastHashJoin [ws_ship_date_sk#60539], [d_date_sk#60571], Inner, BuildRight, false\n                  :     :     :- *(4) BroadcastHashJoin [ws_order_number#60554L], [wr_order_number#60685L], LeftAnti, BuildRight, false\n                  :     :     :  :- *(4) Project [ws_ship_date_sk#60539, ws_ship_addr_sk#60548, ws_web_site_sk#60550, ws_order_number#60554L, ws_ext_ship_cost#60565, ws_net_profit#60570]\n                  :     :     :  :  +- *(4) BroadcastHashJoin [ws_order_number#60554L], [ws_order_number#60655L], LeftSemi, BuildRight, NOT (ws_warehouse_sk#60552 = ws_warehouse_sk#60653), false\n                  :     :     :  :     :- *(4) Filter ((isnotnull(ws_ship_date_sk#60539) AND isnotnull(ws_ship_addr_sk#60548)) AND isnotnull(ws_web_site_sk#60550))\n                  :     :     :  :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ship_date_sk#60539, ws_ship_addr_sk#60548, ws_web_site_sk#60550, ws_warehouse_sk#60552, ws_order_number#60554L, ws_ext_ship_cost#60565, ws_net_profit#60570], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60537, ws_sold_time_sk#60538, ws_ship_date_sk#60539, ws_item_sk#60540, ws_bill_c..., Partition Cols: []]\n                  :     :     :  :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#81423]\n                  :     :     :  :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#60653, ws_order_number#60655L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60638, ws_sold_time_sk#60639, ws_ship_date_sk#60640, ws_item_sk#60641, ws_bill_c..., Partition Cols: []]\n                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#81427]\n                  :     :     :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_order_number#60685L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#60672, wr_returned_time_sk#60673, wr_item_sk#60674, wr_refunded_customer_sk#..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81461]\n                  :     :        +- *(1) Project [d_date_sk#60571]\n                  :     :           +- *(1) Filter (((isnotnull(d_date#60573) AND (d_date#60573 >= 11747)) AND (d_date#60573 <= 11807)) AND isnotnull(d_date_sk#60571))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#60573, d_date_sk#60571], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#60571, d_date_id#60572, d_date#60573, d_month_seq#60574, d_week_seq#60575, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81469]\n                  :        +- *(2) Project [ca_address_sk#60599]\n                  :           +- *(2) Filter ((isnotnull(ca_state#60607) AND (ca_state#60607 = GA)) AND isnotnull(ca_address_sk#60599))\n                  :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#60599, ca_state#60607], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#60599, ca_address_id#60600, ca_street_number#60601, ca_street_name#60602, ca_stree..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81477]\n                     +- *(3) Project [web_site_sk#60612]\n                        +- *(3) Filter ((isnotnull(web_company_name#60626) AND (web_company_name#60626 = pri)) AND isnotnull(web_site_sk#60612))\n                           +- Scan hive tpcds_sf1_iceberg.web_site [web_company_name#60626, web_site_sk#60612], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#60612, web_site_id#60613, web_rec_start_date#60614, web_rec_end_date#60615, web_name..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q94"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#81779]\n+- *(13) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#60751)), merge_sum(UnscaledValue(ws_net_profit#60756)), partial_count(distinct ws_order_number#60740L)], output=[sum#60993L, sum#60995L, count#60998L])\n   +- *(13) HashAggregate(keys=[ws_order_number#60740L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#60751)), merge_sum(UnscaledValue(ws_net_profit#60756))], output=[ws_order_number#60740L, sum#60993L, sum#60995L])\n      +- *(13) HashAggregate(keys=[ws_order_number#60740L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#60751)), partial_sum(UnscaledValue(ws_net_profit#60756))], output=[ws_order_number#60740L, sum#60993L, sum#60995L])\n         +- *(13) Project [ws_order_number#60740L, ws_ext_ship_cost#60751, ws_net_profit#60756]\n            +- *(13) BroadcastHashJoin [ws_web_site_sk#60736], [web_site_sk#60798], Inner, BuildRight, false\n               :- *(13) Project [ws_web_site_sk#60736, ws_order_number#60740L, ws_ext_ship_cost#60751, ws_net_profit#60756]\n               :  +- *(13) BroadcastHashJoin [ws_ship_addr_sk#60734], [ca_address_sk#60785], Inner, BuildRight, false\n               :     :- *(13) Project [ws_ship_addr_sk#60734, ws_web_site_sk#60736, ws_order_number#60740L, ws_ext_ship_cost#60751, ws_net_profit#60756]\n               :     :  +- *(13) BroadcastHashJoin [ws_ship_date_sk#60725], [d_date_sk#60757], Inner, BuildRight, false\n               :     :     :- SortMergeJoin [ws_order_number#60740L], [wr_order_number#60905L], LeftSemi\n               :     :     :  :- SortMergeJoin [ws_order_number#60740L], [ws_order_number#60841L], LeftSemi\n               :     :     :  :  :- *(2) Sort [ws_order_number#60740L ASC NULLS FIRST], false, 0\n               :     :     :  :  :  +- Exchange hashpartitioning(ws_order_number#60740L, 200), ENSURE_REQUIREMENTS, [id=#81669]\n               :     :     :  :  :     +- *(1) Filter ((isnotnull(ws_ship_date_sk#60725) AND isnotnull(ws_ship_addr_sk#60734)) AND isnotnull(ws_web_site_sk#60736))\n               :     :     :  :  :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ship_date_sk#60725, ws_ship_addr_sk#60734, ws_web_site_sk#60736, ws_order_number#60740L, ws_ext_ship_cost#60751, ws_net_profit#60756], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60723, ws_sold_time_sk#60724, ws_ship_date_sk#60725, ws_item_sk#60726, ws_bill_c..., Partition Cols: []]\n               :     :     :  :  +- *(5) Sort [ws_order_number#60841L ASC NULLS FIRST], false, 0\n               :     :     :  :     +- Exchange hashpartitioning(ws_order_number#60841L, 200), ENSURE_REQUIREMENTS, [id=#81683]\n               :     :     :  :        +- *(4) Project [ws_order_number#60841L]\n               :     :     :  :           +- *(4) BroadcastHashJoin [ws_order_number#60841L], [ws_order_number#60875L], Inner, BuildRight, NOT (ws_warehouse_sk#60839 = ws_warehouse_sk#60873), false\n               :     :     :  :              :- *(4) Filter (isnotnull(ws_order_number#60841L) AND isnotnull(ws_warehouse_sk#60839))\n               :     :     :  :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#60839, ws_order_number#60841L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60824, ws_sold_time_sk#60825, ws_ship_date_sk#60826, ws_item_sk#60827, ws_bill_c..., Partition Cols: []]\n               :     :     :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false]),false), [id=#81678]\n               :     :     :  :                 +- *(3) Filter (isnotnull(ws_order_number#60875L) AND isnotnull(ws_warehouse_sk#60873))\n               :     :     :  :                    +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#60873, ws_order_number#60875L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60858, ws_sold_time_sk#60859, ws_ship_date_sk#60860, ws_item_sk#60861, ws_bill_c..., Partition Cols: []]\n               :     :     :  +- *(9) Sort [wr_order_number#60905L ASC NULLS FIRST], false, 0\n               :     :     :     +- Exchange hashpartitioning(wr_order_number#60905L, 200), ENSURE_REQUIREMENTS, [id=#81763]\n               :     :     :        +- *(8) Project [wr_order_number#60905L]\n               :     :     :           +- *(8) BroadcastHashJoin [wr_order_number#60905L], [ws_order_number#60933L], Inner, BuildLeft, false\n               :     :     :              :- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#81691]\n               :     :     :              :  +- *(6) Filter isnotnull(wr_order_number#60905L)\n               :     :     :              :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_order_number#60905L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#60892, wr_returned_time_sk#60893, wr_item_sk#60894, wr_refunded_customer_sk#..., Partition Cols: []]\n               :     :     :              +- *(8) Project [ws_order_number#60933L]\n               :     :     :                 +- *(8) BroadcastHashJoin [ws_order_number#60933L], [ws_order_number#60967L], Inner, BuildRight, NOT (ws_warehouse_sk#60931 = ws_warehouse_sk#60965), false\n               :     :     :                    :- *(8) Filter (isnotnull(ws_order_number#60933L) AND isnotnull(ws_warehouse_sk#60931))\n               :     :     :                    :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#60931, ws_order_number#60933L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#60916, ws_sold_time_sk#60917, ws_ship_date_sk#60918, ws_item_sk#60919, ws_bill_c..., Partition Cols: []]\n               :     :     :                    +- ReusedExchange [ws_warehouse_sk#60965, ws_order_number#60967L], BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false]),false), [id=#81678]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81715]\n               :     :        +- *(10) Project [d_date_sk#60757]\n               :     :           +- *(10) Filter (((isnotnull(d_date#60759) AND (d_date#60759 >= 11382)) AND (d_date#60759 <= 11442)) AND isnotnull(d_date_sk#60757))\n               :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#60759, d_date_sk#60757], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#60757, d_date_id#60758, d_date#60759, d_month_seq#60760, d_week_seq#60761, d_quarter_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81723]\n               :        +- *(11) Project [ca_address_sk#60785]\n               :           +- *(11) Filter ((isnotnull(ca_state#60793) AND (ca_state#60793 = NE)) AND isnotnull(ca_address_sk#60785))\n               :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#60785, ca_state#60793], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#60785, ca_address_id#60786, ca_street_number#60787, ca_street_name#60788, ca_stree..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81731]\n                  +- *(12) Project [web_site_sk#60798]\n                     +- *(12) Filter ((isnotnull(web_company_name#60812) AND (web_company_name#60812 = pri)) AND isnotnull(web_site_sk#60798))\n                        +- Scan hive tpcds_sf1_iceberg.web_site [web_company_name#60812, web_site_sk#60798], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#60798, web_site_id#60799, web_rec_start_date#60800, web_rec_end_date#60801, web_name..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q95"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#81892]\n+- *(4) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#61077L])\n   +- *(4) Project\n      +- *(4) BroadcastHashJoin [ss_store_sk#61013], [s_store_sk#61044], Inner, BuildRight, false\n         :- *(4) Project [ss_store_sk#61013]\n         :  +- *(4) BroadcastHashJoin [ss_sold_time_sk#61007], [t_time_sk#61034], Inner, BuildRight, false\n         :     :- *(4) Project [ss_sold_time_sk#61007, ss_store_sk#61013]\n         :     :  +- *(4) BroadcastHashJoin [ss_hdemo_sk#61011], [hd_demo_sk#61029], Inner, BuildRight, false\n         :     :     :- *(4) Filter ((isnotnull(ss_hdemo_sk#61011) AND isnotnull(ss_sold_time_sk#61007)) AND isnotnull(ss_store_sk#61013))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_time_sk#61007, ss_hdemo_sk#61011, ss_store_sk#61013], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#61006, ss_sold_time_sk#61007, ss_item_sk#61008, ss_customer_sk#61009, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81870]\n         :     :        +- *(1) Project [hd_demo_sk#61029]\n         :     :           +- *(1) Filter ((isnotnull(hd_dep_count#61032) AND (hd_dep_count#61032 = 0)) AND isnotnull(hd_demo_sk#61029))\n         :     :              +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#61029, hd_dep_count#61032], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#61029, hd_income_band_sk#61030, hd_buy_potential#61031, hd_dep_count#61032, hd_vehicl..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81878]\n         :        +- *(2) Project [t_time_sk#61034]\n         :           +- *(2) Filter ((((isnotnull(t_hour#61037) AND isnotnull(t_minute#61038)) AND (t_hour#61037 = 16)) AND (t_minute#61038 >= 30)) AND isnotnull(t_time_sk#61034))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#61037, t_minute#61038, t_time_sk#61034], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#61034, t_time_id#61035, t_time#61036, t_hour#61037, t_minute#61038, t_second#61039, t_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81886]\n            +- *(3) Project [s_store_sk#61044]\n               +- *(3) Filter ((isnotnull(s_store_name#61049) AND (s_store_name#61049 = ese)) AND isnotnull(s_store_sk#61044))\n                  +- Scan hive tpcds_sf1_iceberg.store [s_store_name#61049, s_store_sk#61044], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#61044, s_store_id#61045, s_rec_start_date#61046, s_rec_end_date#61047, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q96"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#82068]\n+- *(7) HashAggregate(keys=[], functions=[partial_sum(cast(CASE WHEN (isnotnull(customer_sk#61083) AND isnull(customer_sk#61085)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (isnull(customer_sk#61083) AND isnotnull(customer_sk#61085)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (isnotnull(customer_sk#61083) AND isnotnull(customer_sk#61085)) THEN 1 ELSE 0 END as bigint))], output=[sum#61209L, sum#61210L, sum#61211L])\n   +- *(7) Project [customer_sk#61083, customer_sk#61085]\n      +- SortMergeJoin [customer_sk#61083, item_sk#61084], [customer_sk#61085, item_sk#61086], FullOuter\n         :- *(3) Sort [customer_sk#61083 ASC NULLS FIRST, item_sk#61084 ASC NULLS FIRST], false, 0\n         :  +- *(3) HashAggregate(keys=[ss_customer_sk#61090, ss_item_sk#61089], functions=[], output=[customer_sk#61083, item_sk#61084])\n         :     +- Exchange hashpartitioning(ss_customer_sk#61090, ss_item_sk#61089, 200), ENSURE_REQUIREMENTS, [id=#82005]\n         :        +- *(2) HashAggregate(keys=[ss_customer_sk#61090, ss_item_sk#61089], functions=[], output=[ss_customer_sk#61090, ss_item_sk#61089])\n         :           +- *(2) Project [ss_item_sk#61089, ss_customer_sk#61090]\n         :              +- *(2) BroadcastHashJoin [ss_sold_date_sk#61087], [d_date_sk#61110], Inner, BuildRight, false\n         :                 :- *(2) Filter isnotnull(ss_sold_date_sk#61087)\n         :                 :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#61087, ss_item_sk#61089, ss_customer_sk#61090], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#61087, ss_sold_time_sk#61088, ss_item_sk#61089, ss_customer_sk#61090, ss_cdemo_s..., Partition Cols: []]\n         :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81999]\n         :                    +- *(1) Project [d_date_sk#61110]\n         :                       +- *(1) Filter (((isnotnull(d_month_seq#61113) AND (d_month_seq#61113 >= 1219)) AND (d_month_seq#61113 <= 1230)) AND isnotnull(d_date_sk#61110))\n         :                          +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#61110, d_month_seq#61113], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#61110, d_date_id#61111, d_date#61112, d_month_seq#61113, d_week_seq#61114, d_quarter_s..., Partition Cols: []]\n         +- *(6) Sort [customer_sk#61085 ASC NULLS FIRST, item_sk#61086 ASC NULLS FIRST], false, 0\n            +- *(6) HashAggregate(keys=[cs_bill_customer_sk#61141, cs_item_sk#61153], functions=[], output=[customer_sk#61085, item_sk#61086])\n               +- Exchange hashpartitioning(cs_bill_customer_sk#61141, cs_item_sk#61153, 200), ENSURE_REQUIREMENTS, [id=#82058]\n                  +- *(5) HashAggregate(keys=[cs_bill_customer_sk#61141, cs_item_sk#61153], functions=[], output=[cs_bill_customer_sk#61141, cs_item_sk#61153])\n                     +- *(5) Project [cs_bill_customer_sk#61141, cs_item_sk#61153]\n                        +- *(5) BroadcastHashJoin [cs_sold_date_sk#61138], [d_date_sk#61172], Inner, BuildRight, false\n                           :- *(5) Filter isnotnull(cs_sold_date_sk#61138)\n                           :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#61138, cs_bill_customer_sk#61141, cs_item_sk#61153], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#61138, cs_sold_time_sk#61139, cs_ship_date_sk#61140, cs_bill_customer_sk#61141, ..., Partition Cols: []]\n                           +- ReusedExchange [d_date_sk#61172], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#81999]\n",
    "iteration" : 2,
    "name" : "q97"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(i_category#61253 ASC NULLS FIRST, i_class#61251 ASC NULLS FIRST, i_item_id#61242 ASC NULLS FIRST, i_item_desc#61245 ASC NULLS FIRST, revenueratio#61217 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#82176]\n+- *(6) Project [i_item_id#61242, i_item_desc#61245, i_category#61253, i_class#61251, i_current_price#61246, itemrevenue#61216, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#61295) * 100.00), DecimalType(21,2), true) as decimal(27,2))) / promote_precision(_we0#61297)), DecimalType(38,17), true) AS revenueratio#61217]\n   +- Window [sum(_w1#61296) windowspecdefinition(i_class#61251, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#61297], [i_class#61251]\n      +- *(5) Sort [i_class#61251 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(i_class#61251, 200), ENSURE_REQUIREMENTS, [id=#82168]\n            +- *(4) HashAggregate(keys=[i_item_id#61242, i_item_desc#61245, i_category#61253, i_class#61251, i_current_price#61246], functions=[sum(UnscaledValue(ss_ext_sales_price#61233))], output=[i_item_id#61242, i_item_desc#61245, i_category#61253, i_class#61251, i_current_price#61246, itemrevenue#61216, _w0#61295, _w1#61296])\n               +- Exchange hashpartitioning(i_item_id#61242, i_item_desc#61245, i_category#61253, i_class#61251, i_current_price#61246, 200), ENSURE_REQUIREMENTS, [id=#82164]\n                  +- *(3) HashAggregate(keys=[i_item_id#61242, i_item_desc#61245, i_category#61253, i_class#61251, i_current_price#61246], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#61233))], output=[i_item_id#61242, i_item_desc#61245, i_category#61253, i_class#61251, i_current_price#61246, sum#61306L])\n                     +- *(3) Project [ss_ext_sales_price#61233, i_item_id#61242, i_item_desc#61245, i_current_price#61246, i_class#61251, i_category#61253]\n                        +- *(3) BroadcastHashJoin [ss_sold_date_sk#61218], [d_date_sk#61263], Inner, BuildRight, false\n                           :- *(3) Project [ss_sold_date_sk#61218, ss_ext_sales_price#61233, i_item_id#61242, i_item_desc#61245, i_current_price#61246, i_class#61251, i_category#61253]\n                           :  +- *(3) BroadcastHashJoin [ss_item_sk#61220], [i_item_sk#61241], Inner, BuildRight, false\n                           :     :- *(3) Filter (isnotnull(ss_item_sk#61220) AND isnotnull(ss_sold_date_sk#61218))\n                           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#61218, ss_item_sk#61220, ss_ext_sales_price#61233], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#61218, ss_sold_time_sk#61219, ss_item_sk#61220, ss_customer_sk#61221, ss_cdemo_s..., Partition Cols: []]\n                           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#82150]\n                           :        +- *(1) Filter (i_category#61253 IN (Books,Children,Sports) AND isnotnull(i_item_sk#61241))\n                           :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#61241, i_item_id#61242, i_item_desc#61245, i_current_price#61246, i_class#61251, i_category#61253], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#61241, i_item_id#61242, i_rec_start_date#61243, i_rec_end_date#61244, i_item_desc#6124..., Partition Cols: []]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82158]\n                              +- *(2) Project [d_date_sk#61263]\n                                 +- *(2) Filter (((isnotnull(d_date#61265) AND (d_date#61265 >= 11391)) AND (d_date#61265 <= 11421)) AND isnotnull(d_date_sk#61263))\n                                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#61265, d_date_sk#61263], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#61263, d_date_id#61264, d_date#61265, d_month_seq#61266, d_week_seq#61267, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q98"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(substr(w_warehouse_name#61356, 1, 20)#61450, sm_type#61370, cc_name#61380, 200), ENSURE_REQUIREMENTS, [id=#82306]\n+- *(5) HashAggregate(keys=[substr(w_warehouse_name#61356, 1, 20) AS substr(w_warehouse_name#61356, 1, 20)#61450, sm_type#61370, cc_name#61380], functions=[partial_sum(cast(CASE WHEN ((cs_ship_date_sk#61322 - cs_sold_date_sk#61320) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#61322 - cs_sold_date_sk#61320) > 30) AND ((cs_ship_date_sk#61322 - cs_sold_date_sk#61320) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#61322 - cs_sold_date_sk#61320) > 60) AND ((cs_ship_date_sk#61322 - cs_sold_date_sk#61320) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#61322 - cs_sold_date_sk#61320) > 90) AND ((cs_ship_date_sk#61322 - cs_sold_date_sk#61320) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((cs_ship_date_sk#61322 - cs_sold_date_sk#61320) > 120) THEN 1 ELSE 0 END as bigint))], output=[substr(w_warehouse_name#61356, 1, 20)#61450, sm_type#61370, cc_name#61380, sum#61456L, sum#61457L, sum#61458L, sum#61459L, sum#61460L])\n   +- *(5) Project [cs_sold_date_sk#61320, cs_ship_date_sk#61322, w_warehouse_name#61356, sm_type#61370, cc_name#61380]\n      +- *(5) BroadcastHashJoin [cs_ship_date_sk#61322], [d_date_sk#61405], Inner, BuildRight, false\n         :- *(5) Project [cs_sold_date_sk#61320, cs_ship_date_sk#61322, w_warehouse_name#61356, sm_type#61370, cc_name#61380]\n         :  +- *(5) BroadcastHashJoin [cs_call_center_sk#61331], [cc_call_center_sk#61374], Inner, BuildRight, false\n         :     :- *(5) Project [cs_sold_date_sk#61320, cs_ship_date_sk#61322, cs_call_center_sk#61331, w_warehouse_name#61356, sm_type#61370]\n         :     :  +- *(5) BroadcastHashJoin [cs_ship_mode_sk#61333], [sm_ship_mode_sk#61368], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#61320, cs_ship_date_sk#61322, cs_call_center_sk#61331, cs_ship_mode_sk#61333, w_warehouse_name#61356]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_warehouse_sk#61334], [w_warehouse_sk#61354], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(cs_warehouse_sk#61334) AND isnotnull(cs_ship_mode_sk#61333)) AND isnotnull(cs_call_center_sk#61331)) AND isnotnull(cs_ship_date_sk#61322))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#61320, cs_ship_date_sk#61322, cs_call_center_sk#61331, cs_ship_mode_sk#61333, cs_warehouse_sk#61334], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#61320, cs_sold_time_sk#61321, cs_ship_date_sk#61322, cs_bill_customer_sk#61323, ..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#82278]\n         :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#61354)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#61354, w_warehouse_name#61356], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#61354, w_warehouse_id#61355, w_warehouse_name#61356, w_warehouse_sq_ft#61357, w_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#82285]\n         :     :        +- *(2) Filter isnotnull(sm_ship_mode_sk#61368)\n         :     :           +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_ship_mode_sk#61368, sm_type#61370], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#61368, sm_ship_mode_id#61369, sm_type#61370, sm_code#61371, sm_carrier#61372, sm..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#82292]\n         :        +- *(3) Filter isnotnull(cc_call_center_sk#61374)\n         :           +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#61374, cc_name#61380], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#61374, cc_call_center_id#61375, cc_rec_start_date#61376, cc_rec_end_date#61377..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82300]\n            +- *(4) Project [d_date_sk#61405]\n               +- *(4) Filter (((isnotnull(d_month_seq#61408) AND (d_month_seq#61408 >= 1205)) AND (d_month_seq#61408 <= 1216)) AND isnotnull(d_date_sk#61405))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#61405, d_month_seq#61408], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#61405, d_date_id#61406, d_date#61407, d_month_seq#61408, d_week_seq#61409, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 2,
    "name" : "q99"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 3,
    "name" : "q1"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(cd_gender#61682, cd_marital_status#61683, cd_education_status#61684, cd_purchase_estimate#61685, cd_credit_rating#61686, cd_dep_count#61687, cd_dep_employed_count#61688, cd_dep_college_count#61689, 200), ENSURE_REQUIREMENTS, [id=#82900]\n+- *(14) HashAggregate(keys=[cd_gender#61682, cd_marital_status#61683, cd_education_status#61684, cd_purchase_estimate#61685, cd_credit_rating#61686, cd_dep_count#61687, cd_dep_employed_count#61688, cd_dep_college_count#61689], functions=[partial_count(1)], output=[cd_gender#61682, cd_marital_status#61683, cd_education_status#61684, cd_purchase_estimate#61685, cd_credit_rating#61686, cd_dep_count#61687, cd_dep_employed_count#61688, cd_dep_college_count#61689, count#61882L])\n   +- *(14) Project [cd_gender#61682, cd_marital_status#61683, cd_education_status#61684, cd_purchase_estimate#61685, cd_credit_rating#61686, cd_dep_count#61687, cd_dep_employed_count#61688, cd_dep_college_count#61689]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#61652], [cd_demo_sk#61681], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#61652]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#61654], [ca_address_sk#61668], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#61652, c_current_addr_sk#61654]\n         :     :  +- *(14) Filter (exists#61879 OR exists#61880)\n         :     :     +- SortMergeJoin [c_customer_sk#61650], [cs_ship_customer_sk#61810], ExistenceJoin(exists#61880)\n         :     :        :- SortMergeJoin [c_customer_sk#61650], [ws_bill_customer_sk#61745], ExistenceJoin(exists#61879)\n         :     :        :  :- SortMergeJoin [c_customer_sk#61650], [ss_customer_sk#61693], LeftSemi\n         :     :        :  :  :- *(2) Sort [c_customer_sk#61650 ASC NULLS FIRST], false, 0\n         :     :        :  :  :  +- Exchange hashpartitioning(c_customer_sk#61650, 200), ENSURE_REQUIREMENTS, [id=#82770]\n         :     :        :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#61654) AND isnotnull(c_current_cdemo_sk#61652))\n         :     :        :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#61650, c_current_cdemo_sk#61652, c_current_addr_sk#61654], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#61650, c_customer_id#61651, c_current_cdemo_sk#61652, c_current_hdemo_sk#61653, c_..., Partition Cols: []]\n         :     :        :  :  +- *(5) Sort [ss_customer_sk#61693 ASC NULLS FIRST], false, 0\n         :     :        :  :     +- Exchange hashpartitioning(ss_customer_sk#61693, 200), ENSURE_REQUIREMENTS, [id=#82785]\n         :     :        :  :        +- *(4) Project [ss_customer_sk#61693]\n         :     :        :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#61690], [d_date_sk#61713], Inner, BuildRight, false\n         :     :        :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#61690)\n         :     :        :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#61690, ss_customer_sk#61693], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#61690, ss_sold_time_sk#61691, ss_item_sk#61692, ss_customer_sk#61693, ss_cdemo_s..., Partition Cols: []]\n         :     :        :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82780]\n         :     :        :  :                 +- *(3) Project [d_date_sk#61713]\n         :     :        :  :                    +- *(3) Filter (((((isnotnull(d_year#61719) AND isnotnull(d_moy#61721)) AND (d_year#61719 = 1999)) AND (d_moy#61721 >= 2)) AND (d_moy#61721 <= 5)) AND isnotnull(d_date_sk#61713))\n         :     :        :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#61713, d_moy#61721, d_year#61719], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#61713, d_date_id#61714, d_date#61715, d_month_seq#61716, d_week_seq#61717, d_quarter_s..., Partition Cols: []]\n         :     :        :  +- *(8) Sort [ws_bill_customer_sk#61745 ASC NULLS FIRST], false, 0\n         :     :        :     +- Exchange hashpartitioning(ws_bill_customer_sk#61745, 200), ENSURE_REQUIREMENTS, [id=#82868]\n         :     :        :        +- *(7) Project [ws_bill_customer_sk#61745]\n         :     :        :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#61741], [d_date_sk#61775], Inner, BuildRight, false\n         :     :        :              :- *(7) Filter isnotnull(ws_sold_date_sk#61741)\n         :     :        :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#61741, ws_bill_customer_sk#61745], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#61741, ws_sold_time_sk#61742, ws_ship_date_sk#61743, ws_item_sk#61744, ws_bill_c..., Partition Cols: []]\n         :     :        :              +- ReusedExchange [d_date_sk#61775], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82780]\n         :     :        +- *(11) Sort [cs_ship_customer_sk#61810 ASC NULLS FIRST], false, 0\n         :     :           +- Exchange hashpartitioning(cs_ship_customer_sk#61810, 200), ENSURE_REQUIREMENTS, [id=#82886]\n         :     :              +- *(10) Project [cs_ship_customer_sk#61810]\n         :     :                 +- *(10) BroadcastHashJoin [cs_sold_date_sk#61803], [d_date_sk#61837], Inner, BuildRight, false\n         :     :                    :- *(10) Filter isnotnull(cs_sold_date_sk#61803)\n         :     :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#61803, cs_ship_customer_sk#61810], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#61803, cs_sold_time_sk#61804, cs_ship_date_sk#61805, cs_bill_customer_sk#61806, ..., Partition Cols: []]\n         :     :                    +- ReusedExchange [d_date_sk#61837], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82780]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#82829]\n         :        +- *(12) Project [ca_address_sk#61668]\n         :           +- *(12) Filter (ca_county#61675 IN (Grady County,Marion County,Decatur County,Lyman County,Beaver County) AND isnotnull(ca_address_sk#61668))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#61668, ca_county#61675], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#61668, ca_address_id#61669, ca_street_number#61670, ca_street_name#61671, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#82836]\n            +- *(13) Filter isnotnull(cd_demo_sk#61681)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#61681, cd_gender#61682, cd_marital_status#61683, cd_education_status#61684, cd_purchase_estimate#61685, cd_credit_rating#61686, cd_dep_count#61687, cd_dep_employed_count#61688, cd_dep_college_count#61689], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#61681, cd_gender#61682, cd_marital_status#61683, cd_education_status#61684, cd_purcha..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q10"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#61898, 200), ENSURE_REQUIREMENTS, [id=#83193]\n+- *(4) Filter (isnotnull(year_total#61906) AND (year_total#61906 > 0.00))\n   +- *(4) HashAggregate(keys=[c_customer_id#61919, c_first_name#61926, c_last_name#61927, c_preferred_cust_flag#61928, c_birth_country#61932, c_login#61933, c_email_address#61934, d_year#61965], functions=[sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#61953 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#61950 as decimal(8,2)))), DecimalType(8,2), true)))], output=[customer_id#61898, year_total#61906])\n      +- Exchange hashpartitioning(c_customer_id#61919, c_first_name#61926, c_last_name#61927, c_preferred_cust_flag#61928, c_birth_country#61932, c_login#61933, c_email_address#61934, d_year#61965, 200), ENSURE_REQUIREMENTS, [id=#83188]\n         +- *(3) HashAggregate(keys=[c_customer_id#61919, c_first_name#61926, c_last_name#61927, c_preferred_cust_flag#61928, c_birth_country#61932, c_login#61933, c_email_address#61934, d_year#61965], functions=[partial_sum(UnscaledValue(CheckOverflow((promote_precision(cast(ss_ext_list_price#61953 as decimal(8,2))) - promote_precision(cast(ss_ext_discount_amt#61950 as decimal(8,2)))), DecimalType(8,2), true)))], output=[c_customer_id#61919, c_first_name#61926, c_last_name#61927, c_preferred_cust_flag#61928, c_birth_country#61932, c_login#61933, c_email_address#61934, d_year#61965, sum#62557L])\n            +- *(3) Project [c_customer_id#61919, c_first_name#61926, c_last_name#61927, c_preferred_cust_flag#61928, c_birth_country#61932, c_login#61933, c_email_address#61934, ss_ext_discount_amt#61950, ss_ext_list_price#61953, d_year#61965]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#61936], [d_date_sk#61959], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#61919, c_first_name#61926, c_last_name#61927, c_preferred_cust_flag#61928, c_birth_country#61932, c_login#61933, c_email_address#61934, ss_sold_date_sk#61936, ss_ext_discount_amt#61950, ss_ext_list_price#61953]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#61918], [ss_customer_sk#61939], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#83173]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#61918) AND isnotnull(c_customer_id#61919))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#61918, c_customer_id#61919, c_first_name#61926, c_last_name#61927, c_preferred_cust_flag#61928, c_birth_country#61932, c_login#61933, c_email_address#61934], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#61918, c_customer_id#61919, c_current_cdemo_sk#61920, c_current_hdemo_sk#61921, c_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#61939) AND isnotnull(ss_sold_date_sk#61936))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#61936, ss_customer_sk#61939, ss_ext_discount_amt#61950, ss_ext_list_price#61953], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#61936, ss_sold_time_sk#61937, ss_item_sk#61938, ss_customer_sk#61939, ss_cdemo_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#83182]\n                     +- *(2) Filter ((isnotnull(d_year#61965) AND (d_year#61965 = 2001)) AND isnotnull(d_date_sk#61959))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#61959, d_year#61965], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#61959, d_date_id#61960, d_date#61961, d_month_seq#61962, d_week_seq#61963, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q11"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_class#62623, 200), ENSURE_REQUIREMENTS, [id=#83593]\n+- *(4) HashAggregate(keys=[i_item_id#62614, i_item_desc#62617, i_category#62625, i_class#62623, i_current_price#62618], functions=[sum(UnscaledValue(ws_ext_sales_price#62602))], output=[i_item_id#62614, i_item_desc#62617, i_category#62625, i_class#62623, i_current_price#62618, itemrevenue#62577, _w0#62667, _w1#62668])\n   +- Exchange hashpartitioning(i_item_id#62614, i_item_desc#62617, i_category#62625, i_class#62623, i_current_price#62618, 200), ENSURE_REQUIREMENTS, [id=#83589]\n      +- *(3) HashAggregate(keys=[i_item_id#62614, i_item_desc#62617, i_category#62625, i_class#62623, i_current_price#62618], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#62602))], output=[i_item_id#62614, i_item_desc#62617, i_category#62625, i_class#62623, i_current_price#62618, sum#62678L])\n         +- *(3) Project [ws_ext_sales_price#62602, i_item_id#62614, i_item_desc#62617, i_current_price#62618, i_class#62623, i_category#62625]\n            +- *(3) BroadcastHashJoin [ws_sold_date_sk#62579], [d_date_sk#62635], Inner, BuildRight, false\n               :- *(3) Project [ws_sold_date_sk#62579, ws_ext_sales_price#62602, i_item_id#62614, i_item_desc#62617, i_current_price#62618, i_class#62623, i_category#62625]\n               :  +- *(3) BroadcastHashJoin [ws_item_sk#62582], [i_item_sk#62613], Inner, BuildRight, false\n               :     :- *(3) Filter (isnotnull(ws_item_sk#62582) AND isnotnull(ws_sold_date_sk#62579))\n               :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#62579, ws_item_sk#62582, ws_ext_sales_price#62602], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#62579, ws_sold_time_sk#62580, ws_ship_date_sk#62581, ws_item_sk#62582, ws_bill_c..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#83575]\n               :        +- *(1) Filter (i_category#62625 IN (Children,Jewelry,Music) AND isnotnull(i_item_sk#62613))\n               :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#62613, i_item_id#62614, i_item_desc#62617, i_current_price#62618, i_class#62623, i_category#62625], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#62613, i_item_id#62614, i_rec_start_date#62615, i_rec_end_date#62616, i_item_desc#6261..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83583]\n                  +- *(2) Project [d_date_sk#62635]\n                     +- *(2) Filter (((isnotnull(d_date#62637) AND (d_date#62637 >= 11453)) AND (d_date#62637 <= 11483)) AND isnotnull(d_date_sk#62635))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#62637, d_date_sk#62635], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#62635, d_date_id#62636, d_date#62637, d_month_seq#62638, d_week_seq#62639, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q12"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#83752]\n+- *(6) HashAggregate(keys=[], functions=[partial_avg(cast(ss_quantity#62697 as bigint)), partial_avg(UnscaledValue(ss_ext_sales_price#62702)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#62703)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#62703))], output=[sum#62813, count#62814L, sum#62815, count#62816L, sum#62817, count#62818L, sum#62819L])\n   +- *(6) Project [ss_quantity#62697, ss_ext_sales_price#62702, ss_ext_wholesale_cost#62703]\n      +- *(6) BroadcastHashJoin [ss_hdemo_sk#62692], [hd_demo_sk#62748], Inner, BuildRight, (((((((cd_marital_status#62741 = M) AND (cd_education_status#62742 = Primary)) AND (ss_sales_price#62700 >= 100.00)) AND (ss_sales_price#62700 <= 150.00)) AND (hd_dep_count#62751 = 3)) OR (((((cd_marital_status#62741 = S) AND (cd_education_status#62742 = 4 yr Degree)) AND (ss_sales_price#62700 >= 50.00)) AND (ss_sales_price#62700 <= 100.00)) AND (hd_dep_count#62751 = 1))) OR (((((cd_marital_status#62741 = W) AND (cd_education_status#62742 = 2 yr Degree)) AND (ss_sales_price#62700 >= 150.00)) AND (ss_sales_price#62700 <= 200.00)) AND (hd_dep_count#62751 = 1))), false\n         :- *(6) Project [ss_hdemo_sk#62692, ss_quantity#62697, ss_sales_price#62700, ss_ext_sales_price#62702, ss_ext_wholesale_cost#62703, cd_marital_status#62741, cd_education_status#62742]\n         :  +- *(6) BroadcastHashJoin [ss_cdemo_sk#62691], [cd_demo_sk#62739], Inner, BuildRight, ((((((cd_marital_status#62741 = M) AND (cd_education_status#62742 = Primary)) AND (ss_sales_price#62700 >= 100.00)) AND (ss_sales_price#62700 <= 150.00)) OR ((((cd_marital_status#62741 = S) AND (cd_education_status#62742 = 4 yr Degree)) AND (ss_sales_price#62700 >= 50.00)) AND (ss_sales_price#62700 <= 100.00))) OR ((((cd_marital_status#62741 = W) AND (cd_education_status#62742 = 2 yr Degree)) AND (ss_sales_price#62700 >= 150.00)) AND (ss_sales_price#62700 <= 200.00))), false\n         :     :- *(6) Project [ss_cdemo_sk#62691, ss_hdemo_sk#62692, ss_quantity#62697, ss_sales_price#62700, ss_ext_sales_price#62702, ss_ext_wholesale_cost#62703]\n         :     :  +- *(6) BroadcastHashJoin [ss_sold_date_sk#62687], [d_date_sk#62766], Inner, BuildRight, false\n         :     :     :- *(6) Project [ss_sold_date_sk#62687, ss_cdemo_sk#62691, ss_hdemo_sk#62692, ss_quantity#62697, ss_sales_price#62700, ss_ext_sales_price#62702, ss_ext_wholesale_cost#62703]\n         :     :     :  +- *(6) BroadcastHashJoin [ss_addr_sk#62693], [ca_address_sk#62753], Inner, BuildRight, ((((ca_state#62761 IN (SC,WY,TX) AND (ss_net_profit#62709 >= 100.00)) AND (ss_net_profit#62709 <= 200.00)) OR ((ca_state#62761 IN (NY,NE,GA) AND (ss_net_profit#62709 >= 150.00)) AND (ss_net_profit#62709 <= 300.00))) OR ((ca_state#62761 IN (AL,AR,MI) AND (ss_net_profit#62709 >= 50.00)) AND (ss_net_profit#62709 <= 250.00))), false\n         :     :     :     :- *(6) Project [ss_sold_date_sk#62687, ss_cdemo_sk#62691, ss_hdemo_sk#62692, ss_addr_sk#62693, ss_quantity#62697, ss_sales_price#62700, ss_ext_sales_price#62702, ss_ext_wholesale_cost#62703, ss_net_profit#62709]\n         :     :     :     :  +- *(6) BroadcastHashJoin [ss_store_sk#62694], [s_store_sk#62710], Inner, BuildRight, false\n         :     :     :     :     :- *(6) Filter ((((((isnotnull(ss_store_sk#62694) AND isnotnull(ss_addr_sk#62693)) AND isnotnull(ss_sold_date_sk#62687)) AND isnotnull(ss_cdemo_sk#62691)) AND isnotnull(ss_hdemo_sk#62692)) AND ((((ss_net_profit#62709 >= 100.00) AND (ss_net_profit#62709 <= 200.00)) OR ((ss_net_profit#62709 >= 150.00) AND (ss_net_profit#62709 <= 300.00))) OR ((ss_net_profit#62709 >= 50.00) AND (ss_net_profit#62709 <= 250.00)))) AND ((((ss_sales_price#62700 >= 100.00) AND (ss_sales_price#62700 <= 150.00)) OR ((ss_sales_price#62700 >= 50.00) AND (ss_sales_price#62700 <= 100.00))) OR ((ss_sales_price#62700 >= 150.00) AND (ss_sales_price#62700 <= 200.00))))\n         :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#62687, ss_cdemo_sk#62691, ss_hdemo_sk#62692, ss_addr_sk#62693, ss_store_sk#62694, ss_quantity#62697, ss_sales_price#62700, ss_ext_sales_price#62702, ss_ext_wholesale_cost#62703, ss_net_profit#62709], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#62687, ss_sold_time_sk#62688, ss_item_sk#62689, ss_customer_sk#62690, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#83716]\n         :     :     :     :        +- *(1) Filter isnotnull(s_store_sk#62710)\n         :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#62710], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#62710, s_store_id#62711, s_rec_start_date#62712, s_rec_end_date#62713, s_closed_date_..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83724]\n         :     :     :        +- *(2) Project [ca_address_sk#62753, ca_state#62761]\n         :     :     :           +- *(2) Filter (((isnotnull(ca_country#62763) AND (ca_country#62763 = United States)) AND isnotnull(ca_address_sk#62753)) AND ((ca_state#62761 IN (SC,WY,TX) OR ca_state#62761 IN (NY,NE,GA)) OR ca_state#62761 IN (AL,AR,MI)))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#62753, ca_country#62763, ca_state#62761], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#62753, ca_address_id#62754, ca_street_number#62755, ca_street_name#62756, ca_stree..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#83732]\n         :     :        +- *(3) Project [d_date_sk#62766]\n         :     :           +- *(3) Filter ((isnotnull(d_year#62772) AND (d_year#62772 = 2001)) AND isnotnull(d_date_sk#62766))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#62766, d_year#62772], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#62766, d_date_id#62767, d_date#62768, d_month_seq#62769, d_week_seq#62770, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#83739]\n         :        +- *(4) Filter (isnotnull(cd_demo_sk#62739) AND ((((cd_marital_status#62741 = M) AND (cd_education_status#62742 = Primary)) OR ((cd_marital_status#62741 = S) AND (cd_education_status#62742 = 4 yr Degree))) OR ((cd_marital_status#62741 = W) AND (cd_education_status#62742 = 2 yr Degree))))\n         :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#62739, cd_marital_status#62741, cd_education_status#62742], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#62739, cd_gender#62740, cd_marital_status#62741, cd_education_status#62742, cd_purcha..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#83746]\n            +- *(5) Filter (isnotnull(hd_demo_sk#62748) AND (((hd_dep_count#62751 = 3) OR (hd_dep_count#62751 = 1)) OR (hd_dep_count#62751 = 1)))\n               +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#62748, hd_dep_count#62751], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#62748, hd_income_band_sk#62749, hd_buy_potential#62750, hd_dep_count#62751, hd_vehicl..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q13"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 3,
    "name" : "q14a"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 3,
    "name" : "q14b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_zip#65791, 200), ENSURE_REQUIREMENTS, [id=#90646]\n+- *(4) HashAggregate(keys=[ca_zip#65791], functions=[partial_sum(UnscaledValue(cs_sales_price#65751))], output=[ca_zip#65791, sum#65829L])\n   +- *(4) Project [cs_sales_price#65751, ca_zip#65791]\n      +- *(4) BroadcastHashJoin [cs_sold_date_sk#65730], [d_date_sk#65795], Inner, BuildRight, false\n         :- *(4) Project [cs_sold_date_sk#65730, cs_sales_price#65751, ca_zip#65791]\n         :  +- *(4) BroadcastHashJoin [c_current_addr_sk#65768], [ca_address_sk#65782], Inner, BuildRight, ((substr(ca_zip#65791, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#65790 IN (CA,WA,GA)) OR (cs_sales_price#65751 > 500.00)), false\n         :     :- *(4) Project [cs_sold_date_sk#65730, cs_sales_price#65751, c_current_addr_sk#65768]\n         :     :  +- *(4) BroadcastHashJoin [cs_bill_customer_sk#65733], [c_customer_sk#65764], Inner, BuildRight, false\n         :     :     :- *(4) Filter (isnotnull(cs_bill_customer_sk#65733) AND isnotnull(cs_sold_date_sk#65730))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#65730, cs_bill_customer_sk#65733, cs_sales_price#65751], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#65730, cs_sold_time_sk#65731, cs_ship_date_sk#65732, cs_bill_customer_sk#65733, ..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#90625]\n         :     :        +- *(1) Filter (isnotnull(c_customer_sk#65764) AND isnotnull(c_current_addr_sk#65768))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#65764, c_current_addr_sk#65768], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#65764, c_customer_id#65765, c_current_cdemo_sk#65766, c_current_hdemo_sk#65767, c_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#90632]\n         :        +- *(2) Filter isnotnull(ca_address_sk#65782)\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#65782, ca_state#65790, ca_zip#65791], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#65782, ca_address_id#65783, ca_street_number#65784, ca_street_name#65785, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#90640]\n            +- *(3) Project [d_date_sk#65795]\n               +- *(3) Filter ((((isnotnull(d_qoy#65805) AND isnotnull(d_year#65801)) AND (d_qoy#65805 = 1)) AND (d_year#65801 = 1998)) AND isnotnull(d_date_sk#65795))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#65795, d_qoy#65805, d_year#65801], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#65795, d_date_id#65796, d_date#65797, d_month_seq#65798, d_week_seq#65799, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q15"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#90806]\n+- *(5) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#65866)), merge_sum(UnscaledValue(cs_net_profit#65871)), partial_count(distinct cs_order_number#65855L)], output=[sum#66014L, sum#66016L, count#66019L])\n   +- *(5) HashAggregate(keys=[cs_order_number#65855L], functions=[merge_sum(UnscaledValue(cs_ext_ship_cost#65866)), merge_sum(UnscaledValue(cs_net_profit#65871))], output=[cs_order_number#65855L, sum#66014L, sum#66016L])\n      +- Exchange hashpartitioning(cs_order_number#65855L, 200), ENSURE_REQUIREMENTS, [id=#90801]\n         +- *(4) HashAggregate(keys=[cs_order_number#65855L], functions=[partial_sum(UnscaledValue(cs_ext_ship_cost#65866)), partial_sum(UnscaledValue(cs_net_profit#65871))], output=[cs_order_number#65855L, sum#66014L, sum#66016L])\n            +- *(4) Project [cs_order_number#65855L, cs_ext_ship_cost#65866, cs_net_profit#65871]\n               +- *(4) BroadcastHashJoin [cs_call_center_sk#65849], [cc_call_center_sk#65913], Inner, BuildRight, false\n                  :- *(4) Project [cs_call_center_sk#65849, cs_order_number#65855L, cs_ext_ship_cost#65866, cs_net_profit#65871]\n                  :  +- *(4) BroadcastHashJoin [cs_ship_addr_sk#65848], [ca_address_sk#65900], Inner, BuildRight, false\n                  :     :- *(4) Project [cs_ship_addr_sk#65848, cs_call_center_sk#65849, cs_order_number#65855L, cs_ext_ship_cost#65866, cs_net_profit#65871]\n                  :     :  +- *(4) BroadcastHashJoin [cs_ship_date_sk#65840], [d_date_sk#65872], Inner, BuildRight, false\n                  :     :     :- *(4) BroadcastHashJoin [cs_order_number#65855L], [cr_order_number#65994L], LeftAnti, BuildRight, false\n                  :     :     :  :- *(4) Project [cs_ship_date_sk#65840, cs_ship_addr_sk#65848, cs_call_center_sk#65849, cs_order_number#65855L, cs_ext_ship_cost#65866, cs_net_profit#65871]\n                  :     :     :  :  +- *(4) BroadcastHashJoin [cs_order_number#65855L], [cs_order_number#65961L], LeftSemi, BuildRight, NOT (cs_warehouse_sk#65852 = cs_warehouse_sk#65958), false\n                  :     :     :  :     :- *(4) Filter ((isnotnull(cs_ship_date_sk#65840) AND isnotnull(cs_ship_addr_sk#65848)) AND isnotnull(cs_call_center_sk#65849))\n                  :     :     :  :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ship_date_sk#65840, cs_ship_addr_sk#65848, cs_call_center_sk#65849, cs_warehouse_sk#65852, cs_order_number#65855L, cs_ext_ship_cost#65866, cs_net_profit#65871], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#65838, cs_sold_time_sk#65839, cs_ship_date_sk#65840, cs_bill_customer_sk#65841, ..., Partition Cols: []]\n                  :     :     :  :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#90741]\n                  :     :     :  :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_warehouse_sk#65958, cs_order_number#65961L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#65944, cs_sold_time_sk#65945, cs_ship_date_sk#65946, cs_bill_customer_sk#65947, ..., Partition Cols: []]\n                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#90745]\n                  :     :     :     +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_order_number#65994L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#65978, cr_returned_time_sk#65979, cr_item_sk#65980, cr_refunded_customer_sk#..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#90779]\n                  :     :        +- *(1) Project [d_date_sk#65872]\n                  :     :           +- *(1) Filter (((isnotnull(d_date#65874) AND (d_date#65874 >= 11017)) AND (d_date#65874 <= 11077)) AND isnotnull(d_date_sk#65872))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#65874, d_date_sk#65872], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#65872, d_date_id#65873, d_date#65874, d_month_seq#65875, d_week_seq#65876, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#90787]\n                  :        +- *(2) Project [ca_address_sk#65900]\n                  :           +- *(2) Filter ((isnotnull(ca_state#65908) AND (ca_state#65908 = IA)) AND isnotnull(ca_address_sk#65900))\n                  :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#65900, ca_state#65908], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#65900, ca_address_id#65901, ca_street_number#65902, ca_street_name#65903, ca_stree..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#90795]\n                     +- *(3) Project [cc_call_center_sk#65913]\n                        +- *(3) Filter (cc_county#65938 IN (Luce County,Wadena County,Jefferson Davis Parish,Daviess County,Williamson County) AND isnotnull(cc_call_center_sk#65913))\n                           +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#65913, cc_county#65938], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#65913, cc_call_center_id#65914, cc_rec_start_date#65915, cc_rec_end_date#65916..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q16"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#66228, i_item_desc#66231, s_state#66222, 200), ENSURE_REQUIREMENTS, [id=#91070]\n+- *(11) HashAggregate(keys=[i_item_id#66228, i_item_desc#66231, s_state#66222], functions=[partial_count(ss_quantity#66047), partial_avg(cast(ss_quantity#66047 as bigint)), partial_stddev_samp(cast(ss_quantity#66047 as double)), partial_count(sr_return_quantity#66070), partial_avg(cast(sr_return_quantity#66070 as bigint)), partial_stddev_samp(cast(sr_return_quantity#66070 as double)), partial_count(cs_quantity#66098), partial_avg(cast(cs_quantity#66098 as bigint)), partial_stddev_samp(cast(cs_quantity#66098 as double))], output=[i_item_id#66228, i_item_desc#66231, s_state#66222, count#66528L, sum#66529, count#66530L, n#66413, avg#66414, m2#66415, count#66531L, sum#66532, count#66533L, n#66429, avg#66430, m2#66431, count#66534L, sum#66535, count#66536L, n#66445, avg#66446, m2#66447])\n   +- *(11) Project [ss_quantity#66047, sr_return_quantity#66070, cs_quantity#66098, s_state#66222, i_item_id#66228, i_item_desc#66231]\n      +- *(11) BroadcastHashJoin [ss_item_sk#66039], [i_item_sk#66227], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#66039, ss_quantity#66047, sr_return_quantity#66070, cs_quantity#66098, s_state#66222]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#66044], [s_store_sk#66198], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#66039, ss_store_sk#66044, ss_quantity#66047, sr_return_quantity#66070, cs_quantity#66098]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#66080], [d_date_sk#66170], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#66039, ss_store_sk#66044, ss_quantity#66047, sr_return_quantity#66070, cs_sold_date_sk#66080, cs_quantity#66098]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#66060], [d_date_sk#66142], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#66039, ss_store_sk#66044, ss_quantity#66047, sr_returned_date_sk#66060, sr_return_quantity#66070, cs_sold_date_sk#66080, cs_quantity#66098]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#66037], [d_date_sk#66114], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#66037, ss_item_sk#66039, ss_store_sk#66044, ss_quantity#66047, sr_returned_date_sk#66060, sr_return_quantity#66070, cs_sold_date_sk#66080, cs_quantity#66098]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#66063, sr_item_sk#66062], [cs_bill_customer_sk#66083, cs_item_sk#66095], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#66063 ASC NULLS FIRST, sr_item_sk#66062 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#66063, sr_item_sk#66062, 200), ENSURE_REQUIREMENTS, [id=#90976]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#66037, ss_item_sk#66039, ss_store_sk#66044, ss_quantity#66047, sr_returned_date_sk#66060, sr_item_sk#66062, sr_customer_sk#66063, sr_return_quantity#66070]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#66040, ss_item_sk#66039, ss_ticket_number#66046L], [sr_customer_sk#66063, sr_item_sk#66062, sr_ticket_number#66069L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#66040) AND isnotnull(ss_item_sk#66039)) AND isnotnull(ss_ticket_number#66046L)) AND isnotnull(ss_sold_date_sk#66037)) AND isnotnull(ss_store_sk#66044))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#66037, ss_item_sk#66039, ss_customer_sk#66040, ss_store_sk#66044, ss_ticket_number#66046L, ss_quantity#66047], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#66037, ss_sold_time_sk#66038, ss_item_sk#66039, ss_customer_sk#66040, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#90971]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#66063) AND isnotnull(sr_item_sk#66062)) AND isnotnull(sr_ticket_number#66069L)) AND isnotnull(sr_returned_date_sk#66060))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#66060, sr_item_sk#66062, sr_customer_sk#66063, sr_ticket_number#66069L, sr_return_quantity#66070], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#66060, sr_return_time_sk#66061, sr_item_sk#66062, sr_customer_sk#66063, sr_c..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#66083 ASC NULLS FIRST, cs_item_sk#66095 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#66083, cs_item_sk#66095, 200), ENSURE_REQUIREMENTS, [id=#90984]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#66083) AND isnotnull(cs_item_sk#66095)) AND isnotnull(cs_sold_date_sk#66080))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#66080, cs_bill_customer_sk#66083, cs_item_sk#66095, cs_quantity#66098], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#66080, cs_sold_time_sk#66081, cs_ship_date_sk#66082, cs_bill_customer_sk#66083, ..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#90995]\n         :     :     :     :        +- *(6) Project [d_date_sk#66114]\n         :     :     :     :           +- *(6) Filter ((isnotnull(d_quarter_name#66129) AND (d_quarter_name#66129 = 1999Q1)) AND isnotnull(d_date_sk#66114))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#66114, d_quarter_name#66129], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#66114, d_date_id#66115, d_date#66116, d_month_seq#66117, d_week_seq#66118, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91003]\n         :     :     :        +- *(7) Project [d_date_sk#66142]\n         :     :     :           +- *(7) Filter (d_quarter_name#66157 IN (1999Q1,1999Q2,1999Q3) AND isnotnull(d_date_sk#66142))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#66142, d_quarter_name#66157], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#66142, d_date_id#66143, d_date#66144, d_month_seq#66145, d_week_seq#66146, d_quarter_s..., Partition Cols: []]\n         :     :     +- ReusedExchange [d_date_sk#66170], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91003]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91018]\n         :        +- *(9) Filter isnotnull(s_store_sk#66198)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#66198, s_state#66222], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#66198, s_store_id#66199, s_rec_start_date#66200, s_rec_end_date#66201, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91025]\n            +- *(10) Filter isnotnull(i_item_sk#66227)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#66227, i_item_id#66228, i_item_desc#66231], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#66227, i_item_id#66228, i_rec_start_date#66229, i_rec_end_date#66230, i_item_desc#6623..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q17"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#66705, ca_country#66706, ca_state#66707, ca_county#66708, spark_grouping_id#66704L, 200), ENSURE_REQUIREMENTS, [id=#91263]\n+- *(7) HashAggregate(keys=[i_item_id#66705, ca_country#66706, ca_state#66707, ca_county#66708, spark_grouping_id#66704L], functions=[partial_avg(cast(cs_quantity#66578 as decimal(12,2))), partial_avg(cast(cs_list_price#66580 as decimal(12,2))), partial_avg(cast(cs_coupon_amt#66587 as decimal(12,2))), partial_avg(cast(cs_sales_price#66581 as decimal(12,2))), partial_avg(cast(cs_net_profit#66593 as decimal(12,2))), partial_avg(cast(c_birth_year#66625 as decimal(12,2))), partial_avg(cast(cd_dep_count#66600 as decimal(12,2)))], output=[i_item_id#66705, ca_country#66706, ca_state#66707, ca_county#66708, spark_grouping_id#66704L, sum#66738, count#66739L, sum#66740, count#66741L, sum#66742, count#66743L, sum#66744, count#66745L, sum#66746, count#66747L, sum#66748, count#66749L, sum#66750, count#66751L])\n   +- *(7) Expand [List(cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, i_item_id#66672, ca_country#66640, ca_state#66638, ca_county#66637, 0), List(cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, i_item_id#66672, ca_country#66640, ca_state#66638, null, 1), List(cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, i_item_id#66672, ca_country#66640, null, null, 3), List(cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, i_item_id#66672, null, null, null, 7), List(cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, null, null, null, null, 15)], [cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, i_item_id#66705, ca_country#66706, ca_state#66707, ca_county#66708, spark_grouping_id#66704L]\n      +- *(7) Project [cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, i_item_id#66672, ca_country#66640, ca_state#66638, ca_county#66637]\n         +- *(7) BroadcastHashJoin [cs_item_sk#66575], [i_item_sk#66671], Inner, BuildRight, false\n            :- *(7) Project [cs_item_sk#66575, cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, ca_county#66637, ca_state#66638, ca_country#66640]\n            :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#66560], [d_date_sk#66643], Inner, BuildRight, false\n            :     :- *(7) Project [cs_sold_date_sk#66560, cs_item_sk#66575, cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_birth_year#66625, ca_county#66637, ca_state#66638, ca_country#66640]\n            :     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#66616], [ca_address_sk#66630], Inner, BuildRight, false\n            :     :     :- *(7) Project [cs_sold_date_sk#66560, cs_item_sk#66575, cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_current_addr_sk#66616, c_birth_year#66625]\n            :     :     :  +- *(7) BroadcastHashJoin [c_current_cdemo_sk#66614], [cd_demo_sk#66603], Inner, BuildRight, false\n            :     :     :     :- *(7) Project [cs_sold_date_sk#66560, cs_item_sk#66575, cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600, c_current_cdemo_sk#66614, c_current_addr_sk#66616, c_birth_year#66625]\n            :     :     :     :  +- *(7) BroadcastHashJoin [cs_bill_customer_sk#66563], [c_customer_sk#66612], Inner, BuildRight, false\n            :     :     :     :     :- *(7) Project [cs_sold_date_sk#66560, cs_bill_customer_sk#66563, cs_item_sk#66575, cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593, cd_dep_count#66600]\n            :     :     :     :     :  +- *(7) BroadcastHashJoin [cs_bill_cdemo_sk#66564], [cd_demo_sk#66594], Inner, BuildRight, false\n            :     :     :     :     :     :- *(7) Filter (((isnotnull(cs_bill_cdemo_sk#66564) AND isnotnull(cs_bill_customer_sk#66563)) AND isnotnull(cs_sold_date_sk#66560)) AND isnotnull(cs_item_sk#66575))\n            :     :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#66560, cs_bill_customer_sk#66563, cs_bill_cdemo_sk#66564, cs_item_sk#66575, cs_quantity#66578, cs_list_price#66580, cs_sales_price#66581, cs_coupon_amt#66587, cs_net_profit#66593], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#66560, cs_sold_time_sk#66561, cs_ship_date_sk#66562, cs_bill_customer_sk#66563, ..., Partition Cols: []]\n            :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91219]\n            :     :     :     :     :        +- *(1) Project [cd_demo_sk#66594, cd_dep_count#66600]\n            :     :     :     :     :           +- *(1) Filter ((((isnotnull(cd_gender#66595) AND isnotnull(cd_education_status#66597)) AND (cd_gender#66595 = F)) AND (cd_education_status#66597 = Unknown)) AND isnotnull(cd_demo_sk#66594))\n            :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#66594, cd_dep_count#66600, cd_education_status#66597, cd_gender#66595], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#66594, cd_gender#66595, cd_marital_status#66596, cd_education_status#66597, cd_purcha..., Partition Cols: []]\n            :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91227]\n            :     :     :     :        +- *(2) Project [c_customer_sk#66612, c_current_cdemo_sk#66614, c_current_addr_sk#66616, c_birth_year#66625]\n            :     :     :     :           +- *(2) Filter (((c_birth_month#66624 IN (4,8,12,10,11,9) AND isnotnull(c_customer_sk#66612)) AND isnotnull(c_current_cdemo_sk#66614)) AND isnotnull(c_current_addr_sk#66616))\n            :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer [c_birth_month#66624, c_birth_year#66625, c_current_addr_sk#66616, c_current_cdemo_sk#66614, c_customer_sk#66612], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#66612, c_customer_id#66613, c_current_cdemo_sk#66614, c_current_hdemo_sk#66615, c_..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91234]\n            :     :     :        +- *(3) Filter isnotnull(cd_demo_sk#66603)\n            :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#66603], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#66603, cd_gender#66604, cd_marital_status#66605, cd_education_status#66606, cd_purcha..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91241]\n            :     :        +- *(4) Filter (ca_state#66638 IN (AR,IA,TX,KS,LA,NC,SD) AND isnotnull(ca_address_sk#66630))\n            :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#66630, ca_county#66637, ca_state#66638, ca_country#66640], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#66630, ca_address_id#66631, ca_street_number#66632, ca_street_name#66633, ca_stree..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91249]\n            :        +- *(5) Project [d_date_sk#66643]\n            :           +- *(5) Filter ((isnotnull(d_year#66649) AND (d_year#66649 = 2001)) AND isnotnull(d_date_sk#66643))\n            :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#66643, d_year#66649], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#66643, d_date_id#66644, d_date#66645, d_month_seq#66646, d_week_seq#66647, d_quarter_s..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91256]\n               +- *(6) Filter isnotnull(i_item_sk#66671)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#66671, i_item_id#66672], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#66671, i_item_id#66672, i_rec_start_date#66673, i_rec_end_date#66674, i_item_desc#6667..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q18"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand#66826, i_brand_id#66825, i_manufact_id#66831, i_manufact#66832, 200), ENSURE_REQUIREMENTS, [id=#91422]\n+- *(6) HashAggregate(keys=[i_brand#66826, i_brand_id#66825, i_manufact_id#66831, i_manufact#66832], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#66810))], output=[i_brand#66826, i_brand_id#66825, i_manufact_id#66831, i_manufact#66832, sum#66914L])\n   +- *(6) Project [ss_ext_sales_price#66810, i_brand_id#66825, i_brand#66826, i_manufact_id#66831, i_manufact#66832]\n      +- *(6) BroadcastHashJoin [ss_store_sk#66802], [s_store_sk#66871], Inner, BuildRight, NOT (substr(ca_zip#66867, 1, 5) = substr(s_zip#66896, 1, 5)), false\n         :- *(6) Project [ss_store_sk#66802, ss_ext_sales_price#66810, i_brand_id#66825, i_brand#66826, i_manufact_id#66831, i_manufact#66832, ca_zip#66867]\n         :  +- *(6) BroadcastHashJoin [c_current_addr_sk#66844], [ca_address_sk#66858], Inner, BuildRight, false\n         :     :- *(6) Project [ss_store_sk#66802, ss_ext_sales_price#66810, i_brand_id#66825, i_brand#66826, i_manufact_id#66831, i_manufact#66832, c_current_addr_sk#66844]\n         :     :  +- *(6) BroadcastHashJoin [ss_customer_sk#66798], [c_customer_sk#66840], Inner, BuildRight, false\n         :     :     :- *(6) Project [ss_customer_sk#66798, ss_store_sk#66802, ss_ext_sales_price#66810, i_brand_id#66825, i_brand#66826, i_manufact_id#66831, i_manufact#66832]\n         :     :     :  +- *(6) BroadcastHashJoin [ss_item_sk#66797], [i_item_sk#66818], Inner, BuildRight, false\n         :     :     :     :- *(6) Project [ss_item_sk#66797, ss_customer_sk#66798, ss_store_sk#66802, ss_ext_sales_price#66810]\n         :     :     :     :  +- *(6) BroadcastHashJoin [d_date_sk#66767], [ss_sold_date_sk#66795], Inner, BuildLeft, false\n         :     :     :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91385]\n         :     :     :     :     :  +- *(1) Project [d_date_sk#66767]\n         :     :     :     :     :     +- *(1) Filter ((((isnotnull(d_moy#66775) AND isnotnull(d_year#66773)) AND (d_moy#66775 = 11)) AND (d_year#66773 = 2002)) AND isnotnull(d_date_sk#66767))\n         :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#66767, d_moy#66775, d_year#66773], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#66767, d_date_id#66768, d_date#66769, d_month_seq#66770, d_week_seq#66771, d_quarter_s..., Partition Cols: []]\n         :     :     :     :     +- *(6) Filter (((isnotnull(ss_sold_date_sk#66795) AND isnotnull(ss_item_sk#66797)) AND isnotnull(ss_customer_sk#66798)) AND isnotnull(ss_store_sk#66802))\n         :     :     :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#66795, ss_item_sk#66797, ss_customer_sk#66798, ss_store_sk#66802, ss_ext_sales_price#66810], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#66795, ss_sold_time_sk#66796, ss_item_sk#66797, ss_customer_sk#66798, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91395]\n         :     :     :        +- *(2) Project [i_item_sk#66818, i_brand_id#66825, i_brand#66826, i_manufact_id#66831, i_manufact#66832]\n         :     :     :           +- *(2) Filter ((isnotnull(i_manager_id#66838) AND (i_manager_id#66838 = 63)) AND isnotnull(i_item_sk#66818))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.item [i_brand#66826, i_brand_id#66825, i_item_sk#66818, i_manager_id#66838, i_manufact#66832, i_manufact_id#66831], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#66818, i_item_id#66819, i_rec_start_date#66820, i_rec_end_date#66821, i_item_desc#6682..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91402]\n         :     :        +- *(3) Filter (isnotnull(c_customer_sk#66840) AND isnotnull(c_current_addr_sk#66844))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#66840, c_current_addr_sk#66844], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#66840, c_customer_id#66841, c_current_cdemo_sk#66842, c_current_hdemo_sk#66843, c_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91409]\n         :        +- *(4) Filter (isnotnull(ca_address_sk#66858) AND isnotnull(ca_zip#66867))\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#66858, ca_zip#66867], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#66858, ca_address_id#66859, ca_street_number#66860, ca_street_name#66861, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91416]\n            +- *(5) Filter (isnotnull(s_zip#66896) AND isnotnull(s_store_sk#66871))\n               +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#66871, s_zip#66896], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#66871, s_store_id#66872, s_rec_start_date#66873, s_rec_end_date#66874, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q19"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(d_week_seq1#66921 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#91761]\n+- *(14) Project [d_week_seq1#66921, round(CheckOverflow((promote_precision(sun_sales1#66922) / promote_precision(sun_sales2#66930)), DecimalType(37,20), true), 2) AS round((sun_sales1 / sun_sales2), 2)#67210, round(CheckOverflow((promote_precision(mon_sales1#66923) / promote_precision(mon_sales2#66931)), DecimalType(37,20), true), 2) AS round((mon_sales1 / mon_sales2), 2)#67211, round(CheckOverflow((promote_precision(tue_sales1#66924) / promote_precision(tue_sales2#66932)), DecimalType(37,20), true), 2) AS round((tue_sales1 / tue_sales2), 2)#67212, round(CheckOverflow((promote_precision(wed_sales1#66925) / promote_precision(wed_sales2#66933)), DecimalType(37,20), true), 2) AS round((wed_sales1 / wed_sales2), 2)#67213, round(CheckOverflow((promote_precision(thu_sales1#66926) / promote_precision(thu_sales2#66934)), DecimalType(37,20), true), 2) AS round((thu_sales1 / thu_sales2), 2)#67214, round(CheckOverflow((promote_precision(fri_sales1#66927) / promote_precision(fri_sales2#66935)), DecimalType(37,20), true), 2) AS round((fri_sales1 / fri_sales2), 2)#67215, round(CheckOverflow((promote_precision(sat_sales1#66928) / promote_precision(sat_sales2#66936)), DecimalType(37,20), true), 2) AS round((sat_sales1 / sat_sales2), 2)#67216]\n   +- *(14) SortMergeJoin [d_week_seq1#66921], [(d_week_seq2#66929 - 53)], Inner\n      :- *(6) Sort [d_week_seq1#66921 ASC NULLS FIRST], false, 0\n      :  +- *(6) Project [d_week_seq#67020 AS d_week_seq1#66921, sun_sales#66941 AS sun_sales1#66922, mon_sales#66942 AS mon_sales1#66923, tue_sales#66943 AS tue_sales1#66924, wed_sales#66944 AS wed_sales1#66925, thu_sales#66945 AS thu_sales1#66926, fri_sales#66946 AS fri_sales1#66927, sat_sales#66947 AS sat_sales1#66928]\n      :     +- *(6) BroadcastHashJoin [d_week_seq#67020], [d_week_seq#67048], Inner, BuildRight, false\n      :        :- *(6) HashAggregate(keys=[d_week_seq#67020], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Sunday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Monday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Tuesday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Wednesday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Thursday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Friday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Saturday) THEN sales_price#66938 ELSE null END))], output=[d_week_seq#67020, sun_sales#66941, mon_sales#66942, tue_sales#66943, wed_sales#66944, thu_sales#66945, fri_sales#66946, sat_sales#66947])\n      :        :  +- Exchange hashpartitioning(d_week_seq#67020, 200), ENSURE_REQUIREMENTS, [id=#91603]\n      :        :     +- *(4) HashAggregate(keys=[d_week_seq#67020], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Sunday) THEN sales_price#66938 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Monday) THEN sales_price#66938 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Tuesday) THEN sales_price#66938 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Wednesday) THEN sales_price#66938 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Thursday) THEN sales_price#66938 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Friday) THEN sales_price#66938 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#67030 = Saturday) THEN sales_price#66938 ELSE null END))], output=[d_week_seq#67020, sum#67232L, sum#67233L, sum#67234L, sum#67235L, sum#67236L, sum#67237L, sum#67238L])\n      :        :        +- *(4) Project [sales_price#66938, d_week_seq#67020, d_day_name#67030]\n      :        :           +- *(4) BroadcastHashJoin [sold_date_sk#66937], [d_date_sk#67016], Inner, BuildRight, false\n      :        :              :- Union\n      :        :              :  :- *(1) Project [ws_sold_date_sk#66948 AS sold_date_sk#66937, ws_ext_sales_price#66971 AS sales_price#66938]\n      :        :              :  :  +- *(1) Filter isnotnull(ws_sold_date_sk#66948)\n      :        :              :  :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#66971, ws_sold_date_sk#66948], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#66948, ws_sold_time_sk#66949, ws_ship_date_sk#66950, ws_item_sk#66951, ws_bill_c..., Partition Cols: []]\n      :        :              :  +- *(2) Project [cs_sold_date_sk#66982 AS sold_date_sk#66939, cs_ext_sales_price#67005 AS sales_price#66940]\n      :        :              :     +- *(2) Filter isnotnull(cs_sold_date_sk#66982)\n      :        :              :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ext_sales_price#67005, cs_sold_date_sk#66982], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#66982, cs_sold_time_sk#66983, cs_ship_date_sk#66984, cs_bill_customer_sk#66985, ..., Partition Cols: []]\n      :        :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91597]\n      :        :                 +- *(3) Filter (isnotnull(d_date_sk#67016) AND isnotnull(d_week_seq#67020))\n      :        :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#67016, d_week_seq#67020, d_day_name#67030], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67016, d_date_id#67017, d_date#67018, d_month_seq#67019, d_week_seq#67020, d_quarter_s..., Partition Cols: []]\n      :        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91610]\n      :           +- *(5) Project [d_week_seq#67048]\n      :              +- *(5) Filter ((isnotnull(d_year#67050) AND (d_year#67050 = 1998)) AND isnotnull(d_week_seq#67048))\n      :                 +- Scan hive tpcds_sf1_iceberg.date_dim [d_week_seq#67048, d_year#67050], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67044, d_date_id#67045, d_date#67046, d_month_seq#67047, d_week_seq#67048, d_quarter_s..., Partition Cols: []]\n      +- *(13) Sort [(d_week_seq2#66929 - 53) ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning((d_week_seq2#66929 - 53), 200), ENSURE_REQUIREMENTS, [id=#91753]\n            +- *(12) Project [d_week_seq#67144 AS d_week_seq2#66929, sun_sales#66941 AS sun_sales2#66930, mon_sales#66942 AS mon_sales2#66931, tue_sales#66943 AS tue_sales2#66932, wed_sales#66944 AS wed_sales2#66933, thu_sales#66945 AS thu_sales2#66934, fri_sales#66946 AS fri_sales2#66935, sat_sales#66947 AS sat_sales2#66936]\n               +- *(12) BroadcastHashJoin [d_week_seq#67144], [d_week_seq#67172], Inner, BuildRight, false\n                  :- *(12) HashAggregate(keys=[d_week_seq#67144], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#67154 = Sunday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67154 = Monday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67154 = Tuesday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67154 = Wednesday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67154 = Thursday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67154 = Friday) THEN sales_price#66938 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#67154 = Saturday) THEN sales_price#66938 ELSE null END))], output=[d_week_seq#67144, sun_sales#66941, mon_sales#66942, tue_sales#66943, wed_sales#66944, thu_sales#66945, fri_sales#66946, sat_sales#66947])\n                  :  +- ReusedExchange [d_week_seq#67144, sum#67246L, sum#67247L, sum#67248L, sum#67249L, sum#67250L, sum#67251L, sum#67252L], Exchange hashpartitioning(d_week_seq#67020, 200), ENSURE_REQUIREMENTS, [id=#91603]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91643]\n                     +- *(11) Project [d_week_seq#67172]\n                        +- *(11) Filter ((isnotnull(d_year#67174) AND (d_year#67174 = 1999)) AND isnotnull(d_week_seq#67172))\n                           +- Scan hive tpcds_sf1_iceberg.date_dim [d_week_seq#67172, d_year#67174], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67168, d_date_id#67169, d_date#67170, d_month_seq#67171, d_week_seq#67172, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q2"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_class#67322, 200), ENSURE_REQUIREMENTS, [id=#91858]\n+- *(4) HashAggregate(keys=[i_item_id#67313, i_item_desc#67316, i_category#67324, i_class#67322, i_current_price#67317], functions=[sum(UnscaledValue(cs_ext_sales_price#67301))], output=[i_item_id#67313, i_item_desc#67316, i_category#67324, i_class#67322, i_current_price#67317, itemrevenue#67276, _w0#67366, _w1#67367])\n   +- Exchange hashpartitioning(i_item_id#67313, i_item_desc#67316, i_category#67324, i_class#67322, i_current_price#67317, 200), ENSURE_REQUIREMENTS, [id=#91854]\n      +- *(3) HashAggregate(keys=[i_item_id#67313, i_item_desc#67316, i_category#67324, i_class#67322, i_current_price#67317], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#67301))], output=[i_item_id#67313, i_item_desc#67316, i_category#67324, i_class#67322, i_current_price#67317, sum#67377L])\n         +- *(3) Project [cs_ext_sales_price#67301, i_item_id#67313, i_item_desc#67316, i_current_price#67317, i_class#67322, i_category#67324]\n            +- *(3) BroadcastHashJoin [cs_sold_date_sk#67278], [d_date_sk#67334], Inner, BuildRight, false\n               :- *(3) Project [cs_sold_date_sk#67278, cs_ext_sales_price#67301, i_item_id#67313, i_item_desc#67316, i_current_price#67317, i_class#67322, i_category#67324]\n               :  +- *(3) BroadcastHashJoin [cs_item_sk#67293], [i_item_sk#67312], Inner, BuildRight, false\n               :     :- *(3) Filter (isnotnull(cs_item_sk#67293) AND isnotnull(cs_sold_date_sk#67278))\n               :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#67278, cs_item_sk#67293, cs_ext_sales_price#67301], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#67278, cs_sold_time_sk#67279, cs_ship_date_sk#67280, cs_bill_customer_sk#67281, ..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91840]\n               :        +- *(1) Filter (i_category#67324 IN (Electronics,Children,Home) AND isnotnull(i_item_sk#67312))\n               :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#67312, i_item_id#67313, i_item_desc#67316, i_current_price#67317, i_class#67322, i_category#67324], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#67312, i_item_id#67313, i_rec_start_date#67314, i_rec_end_date#67315, i_item_desc#6731..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91848]\n                  +- *(2) Project [d_date_sk#67334]\n                     +- *(2) Filter (((isnotnull(d_date#67336) AND (d_date#67336 >= 11765)) AND (d_date#67336 <= 11795)) AND isnotnull(d_date_sk#67334))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#67336, d_date_sk#67334], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67334, d_date_id#67335, d_date#67336, d_month_seq#67337, d_week_seq#67338, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q20"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_warehouse_name#67394, i_item_id#67407, 200), ENSURE_REQUIREMENTS, [id=#91973]\n+- *(4) HashAggregate(keys=[w_warehouse_name#67394, i_item_id#67407], functions=[partial_sum(cast(CASE WHEN (d_date#67430 < 10693) THEN inv_quantity_on_hand#67391 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (d_date#67430 >= 10693) THEN inv_quantity_on_hand#67391 ELSE 0 END as bigint))], output=[w_warehouse_name#67394, i_item_id#67407, sum#67464L, sum#67465L])\n   +- *(4) Project [inv_quantity_on_hand#67391, w_warehouse_name#67394, i_item_id#67407, d_date#67430]\n      +- *(4) BroadcastHashJoin [inv_date_sk#67388], [d_date_sk#67428], Inner, BuildRight, false\n         :- *(4) Project [inv_date_sk#67388, inv_quantity_on_hand#67391, w_warehouse_name#67394, i_item_id#67407]\n         :  +- *(4) BroadcastHashJoin [inv_item_sk#67389], [i_item_sk#67406], Inner, BuildRight, false\n         :     :- *(4) Project [inv_date_sk#67388, inv_item_sk#67389, inv_quantity_on_hand#67391, w_warehouse_name#67394]\n         :     :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#67390], [w_warehouse_sk#67392], Inner, BuildRight, false\n         :     :     :- *(4) Filter ((isnotnull(inv_warehouse_sk#67390) AND isnotnull(inv_item_sk#67389)) AND isnotnull(inv_date_sk#67388))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#67388, inv_item_sk#67389, inv_warehouse_sk#67390, inv_quantity_on_hand#67391], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#67388, inv_item_sk#67389, inv_warehouse_sk#67390, inv_quantity_on_hand#67391], Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91952]\n         :     :        +- *(1) Filter isnotnull(w_warehouse_sk#67392)\n         :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#67392, w_warehouse_name#67394], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#67392, w_warehouse_id#67393, w_warehouse_name#67394, w_warehouse_sq_ft#67395, w_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#91960]\n         :        +- *(2) Project [i_item_sk#67406, i_item_id#67407]\n         :           +- *(2) Filter (((isnotnull(i_current_price#67411) AND (i_current_price#67411 >= 0.99)) AND (i_current_price#67411 <= 1.49)) AND isnotnull(i_item_sk#67406))\n         :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#67411, i_item_id#67407, i_item_sk#67406], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#67406, i_item_id#67407, i_rec_start_date#67408, i_rec_end_date#67409, i_item_desc#6741..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#91967]\n            +- *(3) Filter (((isnotnull(d_date#67430) AND (d_date#67430 >= 10663)) AND (d_date#67430 <= 10723)) AND isnotnull(d_date_sk#67428))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#67428, d_date#67430], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67428, d_date_id#67429, d_date#67430, d_month_seq#67431, d_week_seq#67432, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q21"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_product_name#67532, i_brand#67533, i_class#67534, i_category#67535, spark_grouping_id#67531L, 200), ENSURE_REQUIREMENTS, [id=#92061]\n+- *(3) HashAggregate(keys=[i_product_name#67532, i_brand#67533, i_class#67534, i_category#67535, spark_grouping_id#67531L], functions=[partial_avg(cast(inv_quantity_on_hand#67475 as bigint))], output=[i_product_name#67532, i_brand#67533, i_class#67534, i_category#67535, spark_grouping_id#67531L, sum#67548, count#67549L])\n   +- *(3) Expand [List(inv_quantity_on_hand#67475, i_product_name#67525, i_brand#67512, i_class#67514, i_category#67516, 0), List(inv_quantity_on_hand#67475, i_product_name#67525, i_brand#67512, i_class#67514, null, 1), List(inv_quantity_on_hand#67475, i_product_name#67525, i_brand#67512, null, null, 3), List(inv_quantity_on_hand#67475, i_product_name#67525, null, null, null, 7), List(inv_quantity_on_hand#67475, null, null, null, null, 15)], [inv_quantity_on_hand#67475, i_product_name#67532, i_brand#67533, i_class#67534, i_category#67535, spark_grouping_id#67531L]\n      +- *(3) Project [inv_quantity_on_hand#67475, i_product_name#67525, i_brand#67512, i_class#67514, i_category#67516]\n         +- *(3) BroadcastHashJoin [inv_item_sk#67473], [i_item_sk#67504], Inner, BuildRight, false\n            :- *(3) Project [inv_item_sk#67473, inv_quantity_on_hand#67475]\n            :  +- *(3) BroadcastHashJoin [inv_date_sk#67472], [d_date_sk#67476], Inner, BuildRight, false\n            :     :- *(3) Filter (isnotnull(inv_date_sk#67472) AND isnotnull(inv_item_sk#67473))\n            :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#67472, inv_item_sk#67473, inv_quantity_on_hand#67475], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#67472, inv_item_sk#67473, inv_warehouse_sk#67474, inv_quantity_on_hand#67475], Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#92047]\n            :        +- *(1) Project [d_date_sk#67476]\n            :           +- *(1) Filter (((isnotnull(d_month_seq#67479) AND (d_month_seq#67479 >= 1188)) AND (d_month_seq#67479 <= 1199)) AND isnotnull(d_date_sk#67476))\n            :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#67476, d_month_seq#67479], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67476, d_date_id#67477, d_date#67478, d_month_seq#67479, d_week_seq#67480, d_quarter_s..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#92054]\n               +- *(2) Filter isnotnull(i_item_sk#67504)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#67504, i_brand#67512, i_class#67514, i_category#67516, i_product_name#67525], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#67504, i_item_id#67505, i_rec_start_date#67506, i_rec_end_date#67507, i_item_desc#6750..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q22"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#93044]\n+- *(29) HashAggregate(keys=[], functions=[partial_sum(sales#67558)], output=[sum#68093, isEmpty#68094])\n   +- Union\n      :- *(14) Project [CheckOverflow((promote_precision(cast(cast(cs_quantity#67588 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#67590 as decimal(12,2)))), DecimalType(18,2), true) AS sales#67558]\n      :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#67570], [d_date_sk#67604], Inner, BuildRight, false\n      :     :- *(14) Project [cs_sold_date_sk#67570, cs_quantity#67588, cs_list_price#67590]\n      :     :  +- SortMergeJoin [cs_bill_customer_sk#67573], [c_customer_sk#67796], LeftSemi\n      :     :     :- *(9) Sort [cs_bill_customer_sk#67573 ASC NULLS FIRST], false, 0\n      :     :     :  +- Exchange hashpartitioning(cs_bill_customer_sk#67573, 200), ENSURE_REQUIREMENTS, [id=#92622]\n      :     :     :     +- *(8) Project [cs_sold_date_sk#67570, cs_bill_customer_sk#67573, cs_quantity#67588, cs_list_price#67590]\n      :     :     :        +- SortMergeJoin [cs_item_sk#67585], [item_sk#67563], LeftSemi\n      :     :     :           :- *(2) Sort [cs_item_sk#67585 ASC NULLS FIRST], false, 0\n      :     :     :           :  +- Exchange hashpartitioning(cs_item_sk#67585, 200), ENSURE_REQUIREMENTS, [id=#92585]\n      :     :     :           :     +- *(1) Filter isnotnull(cs_sold_date_sk#67570)\n      :     :     :           :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#67570, cs_bill_customer_sk#67573, cs_item_sk#67585, cs_quantity#67588, cs_list_price#67590], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#67570, cs_sold_time_sk#67571, cs_ship_date_sk#67572, cs_bill_customer_sk#67573, ..., Partition Cols: []]\n      :     :     :           +- *(7) Sort [item_sk#67563 ASC NULLS FIRST], false, 0\n      :     :     :              +- Exchange hashpartitioning(item_sk#67563, 200), ENSURE_REQUIREMENTS, [id=#92614]\n      :     :     :                 +- *(6) Project [item_sk#67563]\n      :     :     :                    +- *(6) Filter (count(1)#67770L > 4)\n      :     :     :                       +- *(6) HashAggregate(keys=[substr(i_item_desc#67751, 1, 30)#68095, i_item_sk#67747, d_date#67721], functions=[count(1)], output=[item_sk#67563, count(1)#67770L])\n      :     :     :                          +- Exchange hashpartitioning(substr(i_item_desc#67751, 1, 30)#68095, i_item_sk#67747, d_date#67721, 200), ENSURE_REQUIREMENTS, [id=#92608]\n      :     :     :                             +- *(5) HashAggregate(keys=[substr(i_item_desc#67751, 1, 30) AS substr(i_item_desc#67751, 1, 30)#68095, i_item_sk#67747, d_date#67721], functions=[partial_count(1)], output=[substr(i_item_desc#67751, 1, 30)#68095, i_item_sk#67747, d_date#67721, count#68097L])\n      :     :     :                                +- *(5) Project [d_date#67721, i_item_sk#67747, i_item_desc#67751]\n      :     :     :                                   +- *(5) BroadcastHashJoin [ss_item_sk#67698], [i_item_sk#67747], Inner, BuildRight, false\n      :     :     :                                      :- *(5) Project [ss_item_sk#67698, d_date#67721]\n      :     :     :                                      :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#67696], [d_date_sk#67719], Inner, BuildRight, false\n      :     :     :                                      :     :- *(5) Filter (isnotnull(ss_sold_date_sk#67696) AND isnotnull(ss_item_sk#67698))\n      :     :     :                                      :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#67696, ss_item_sk#67698], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#67696, ss_sold_time_sk#67697, ss_item_sk#67698, ss_customer_sk#67699, ss_cdemo_s..., Partition Cols: []]\n      :     :     :                                      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#92595]\n      :     :     :                                      :        +- *(3) Project [d_date_sk#67719, d_date#67721]\n      :     :     :                                      :           +- *(3) Filter (d_year#67725 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#67719))\n      :     :     :                                      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#67721, d_date_sk#67719, d_year#67725], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67719, d_date_id#67720, d_date#67721, d_month_seq#67722, d_week_seq#67723, d_quarter_s..., Partition Cols: []]\n      :     :     :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#92602]\n      :     :     :                                         +- *(4) Filter isnotnull(i_item_sk#67747)\n      :     :     :                                            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#67747, i_item_desc#67751], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#67747, i_item_id#67748, i_rec_start_date#67749, i_rec_end_date#67750, i_item_desc#6775..., Partition Cols: []]\n      :     :     +- *(12) Sort [c_customer_sk#67796 ASC NULLS FIRST], false, 0\n      :     :        +- *(12) Project [c_customer_sk#67796]\n      :     :           +- *(12) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67783 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67786 as decimal(12,2)))), DecimalType(18,2), true))#67888) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67783 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67786 as decimal(12,2)))), DecimalType(18,2), true))#67888 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery scalar-subquery#67569, [id=#92401] as decimal(32,6)))), DecimalType(38,8), true)))\n      :     :              :  +- Subquery scalar-subquery#67569, [id=#92401]\n      :     :              :     +- *(5) HashAggregate(keys=[], functions=[max(csales#67566)], output=[tpcds_cmax#67567])\n      :     :              :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#92397]\n      :     :              :           +- *(4) HashAggregate(keys=[], functions=[partial_max(csales#67566)], output=[max#68110])\n      :     :              :              +- *(4) HashAggregate(keys=[c_customer_sk#67838], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67825 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67828 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#67566])\n      :     :              :                 +- Exchange hashpartitioning(c_customer_sk#67838, 200), ENSURE_REQUIREMENTS, [id=#92392]\n      :     :              :                    +- *(3) HashAggregate(keys=[c_customer_sk#67838], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67825 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67828 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#67838, sum#68113, isEmpty#68114])\n      :     :              :                       +- *(3) Project [ss_quantity#67825, ss_sales_price#67828, c_customer_sk#67838]\n      :     :              :                          +- *(3) BroadcastHashJoin [ss_sold_date_sk#67815], [d_date_sk#67856], Inner, BuildRight, false\n      :     :              :                             :- *(3) Project [ss_sold_date_sk#67815, ss_quantity#67825, ss_sales_price#67828, c_customer_sk#67838]\n      :     :              :                             :  +- *(3) BroadcastHashJoin [ss_customer_sk#67818], [c_customer_sk#67838], Inner, BuildRight, false\n      :     :              :                             :     :- *(3) Filter (isnotnull(ss_customer_sk#67818) AND isnotnull(ss_sold_date_sk#67815))\n      :     :              :                             :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#67815, ss_customer_sk#67818, ss_quantity#67825, ss_sales_price#67828], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#67815, ss_sold_time_sk#67816, ss_item_sk#67817, ss_customer_sk#67818, ss_cdemo_s..., Partition Cols: []]\n      :     :              :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#92378]\n      :     :              :                             :        +- *(1) Filter isnotnull(c_customer_sk#67838)\n      :     :              :                             :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#67838], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#67838, c_customer_id#67839, c_current_cdemo_sk#67840, c_current_hdemo_sk#67841, c_..., Partition Cols: []]\n      :     :              :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#92386]\n      :     :              :                                +- *(2) Project [d_date_sk#67856]\n      :     :              :                                   +- *(2) Filter (d_year#67862 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#67856))\n      :     :              :                                      +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#67856, d_year#67862], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67856, d_date_id#67857, d_date#67858, d_month_seq#67859, d_week_seq#67860, d_quarter_s..., Partition Cols: []]\n      :     :              +- *(12) HashAggregate(keys=[c_customer_sk#67796], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67783 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67786 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#67796, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67783 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67786 as decimal(12,2)))), DecimalType(18,2), true))#67888])\n      :     :                 +- Exchange hashpartitioning(c_customer_sk#67796, 200), ENSURE_REQUIREMENTS, [id=#92637]\n      :     :                    +- *(11) HashAggregate(keys=[c_customer_sk#67796], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67783 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67786 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#67796, sum#68100, isEmpty#68101])\n      :     :                       +- *(11) Project [ss_quantity#67783, ss_sales_price#67786, c_customer_sk#67796]\n      :     :                          +- *(11) BroadcastHashJoin [ss_customer_sk#67776], [c_customer_sk#67796], Inner, BuildRight, false\n      :     :                             :- *(11) Filter isnotnull(ss_customer_sk#67776)\n      :     :                             :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_customer_sk#67776, ss_quantity#67783, ss_sales_price#67786], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#67773, ss_sold_time_sk#67774, ss_item_sk#67775, ss_customer_sk#67776, ss_cdemo_s..., Partition Cols: []]\n      :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#92631]\n      :     :                                +- *(10) Filter isnotnull(c_customer_sk#67796)\n      :     :                                   +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#67796], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#67796, c_customer_id#67797, c_current_cdemo_sk#67798, c_current_hdemo_sk#67799, c_..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#92651]\n      :        +- *(13) Project [d_date_sk#67604]\n      :           +- *(13) Filter ((((isnotnull(d_year#67610) AND isnotnull(d_moy#67612)) AND (d_year#67610 = 1998)) AND (d_moy#67612 = 7)) AND isnotnull(d_date_sk#67604))\n      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#67604, d_moy#67612, d_year#67610], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#67604, d_date_id#67605, d_date#67606, d_month_seq#67607, d_week_seq#67608, d_quarter_s..., Partition Cols: []]\n      +- *(28) Project [CheckOverflow((promote_precision(cast(cast(ws_quantity#67650 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ws_list_price#67652 as decimal(12,2)))), DecimalType(18,2), true) AS sales#67561]\n         +- *(28) BroadcastHashJoin [ws_sold_date_sk#67632], [d_date_sk#67666], Inner, BuildRight, false\n            :- *(28) Project [ws_sold_date_sk#67632, ws_quantity#67650, ws_list_price#67652]\n            :  +- SortMergeJoin [ws_bill_customer_sk#67636], [c_customer_sk#67993], LeftSemi\n            :     :- *(23) Sort [ws_bill_customer_sk#67636 ASC NULLS FIRST], false, 0\n            :     :  +- Exchange hashpartitioning(ws_bill_customer_sk#67636, 200), ENSURE_REQUIREMENTS, [id=#92849]\n            :     :     +- *(22) Project [ws_sold_date_sk#67632, ws_bill_customer_sk#67636, ws_quantity#67650, ws_list_price#67652]\n            :     :        +- SortMergeJoin [ws_item_sk#67635], [item_sk#67563], LeftSemi\n            :     :           :- *(16) Sort [ws_item_sk#67635 ASC NULLS FIRST], false, 0\n            :     :           :  +- Exchange hashpartitioning(ws_item_sk#67635, 200), ENSURE_REQUIREMENTS, [id=#92659]\n            :     :           :     +- *(15) Filter isnotnull(ws_sold_date_sk#67632)\n            :     :           :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#67632, ws_item_sk#67635, ws_bill_customer_sk#67636, ws_quantity#67650, ws_list_price#67652], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#67632, ws_sold_time_sk#67633, ws_ship_date_sk#67634, ws_item_sk#67635, ws_bill_c..., Partition Cols: []]\n            :     :           +- *(21) Sort [item_sk#67563 ASC NULLS FIRST], false, 0\n            :     :              +- ReusedExchange [item_sk#67563], Exchange hashpartitioning(item_sk#67563, 200), ENSURE_REQUIREMENTS, [id=#92614]\n            :     +- *(26) Sort [c_customer_sk#67993 ASC NULLS FIRST], false, 0\n            :        +- *(26) Project [c_customer_sk#67993]\n            :           +- *(26) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67980 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67983 as decimal(12,2)))), DecimalType(18,2), true))#68085) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67980 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67983 as decimal(12,2)))), DecimalType(18,2), true))#68085 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#67569, [id=#92401] as decimal(32,6)))), DecimalType(38,8), true)))\n            :              :  +- ReusedSubquery Subquery scalar-subquery#67569, [id=#92401]\n            :              +- *(26) HashAggregate(keys=[c_customer_sk#67993], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67980 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67983 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#67993, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#67980 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#67983 as decimal(12,2)))), DecimalType(18,2), true))#68085])\n            :                 +- ReusedExchange [c_customer_sk#67993, sum#68107, isEmpty#68108], Exchange hashpartitioning(c_customer_sk#67796, 200), ENSURE_REQUIREMENTS, [id=#92637]\n            +- ReusedExchange [d_date_sk#67666], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#92651]\n",
    "iteration" : 3,
    "name" : "q23a"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(c_last_name#68202, c_first_name#68201, 200), ENSURE_REQUIREMENTS, [id=#94649]\n+- *(19) HashAggregate(keys=[c_last_name#68202, c_first_name#68201], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(cs_quantity#68177 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(cs_list_price#68179 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_last_name#68202, c_first_name#68201, sum#68720, isEmpty#68721])\n   +- *(19) Project [cs_quantity#68177, cs_list_price#68179, c_first_name#68201, c_last_name#68202]\n      +- *(19) BroadcastHashJoin [cs_sold_date_sk#68159], [d_date_sk#68211], Inner, BuildRight, false\n         :- *(19) Project [cs_sold_date_sk#68159, cs_quantity#68177, cs_list_price#68179, c_first_name#68201, c_last_name#68202]\n         :  +- *(19) BroadcastHashJoin [cs_bill_customer_sk#68162], [c_customer_sk#68193], Inner, BuildRight, false\n         :     :- SortMergeJoin [cs_bill_customer_sk#68162], [c_customer_sk#68421], LeftSemi\n         :     :  :- *(9) Sort [cs_bill_customer_sk#68162 ASC NULLS FIRST], false, 0\n         :     :  :  +- Exchange hashpartitioning(cs_bill_customer_sk#68162, 200), ENSURE_REQUIREMENTS, [id=#93920]\n         :     :  :     +- *(8) Project [cs_sold_date_sk#68159, cs_bill_customer_sk#68162, cs_quantity#68177, cs_list_price#68179]\n         :     :  :        +- SortMergeJoin [cs_item_sk#68174], [item_sk#68152], LeftSemi\n         :     :  :           :- *(2) Sort [cs_item_sk#68174 ASC NULLS FIRST], false, 0\n         :     :  :           :  +- Exchange hashpartitioning(cs_item_sk#68174, 200), ENSURE_REQUIREMENTS, [id=#93883]\n         :     :  :           :     +- *(1) Filter (isnotnull(cs_bill_customer_sk#68162) AND isnotnull(cs_sold_date_sk#68159))\n         :     :  :           :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#68159, cs_bill_customer_sk#68162, cs_item_sk#68174, cs_quantity#68177, cs_list_price#68179], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#68159, cs_sold_time_sk#68160, cs_ship_date_sk#68161, cs_bill_customer_sk#68162, ..., Partition Cols: []]\n         :     :  :           +- *(7) Sort [item_sk#68152 ASC NULLS FIRST], false, 0\n         :     :  :              +- Exchange hashpartitioning(item_sk#68152, 200), ENSURE_REQUIREMENTS, [id=#93912]\n         :     :  :                 +- *(6) Project [item_sk#68152]\n         :     :  :                    +- *(6) Filter (count(1)#68395L > 4)\n         :     :  :                       +- *(6) HashAggregate(keys=[substr(i_item_desc#68376, 1, 30)#68722, i_item_sk#68372, d_date#68346], functions=[count(1)], output=[item_sk#68152, count(1)#68395L])\n         :     :  :                          +- Exchange hashpartitioning(substr(i_item_desc#68376, 1, 30)#68722, i_item_sk#68372, d_date#68346, 200), ENSURE_REQUIREMENTS, [id=#93906]\n         :     :  :                             +- *(5) HashAggregate(keys=[substr(i_item_desc#68376, 1, 30) AS substr(i_item_desc#68376, 1, 30)#68722, i_item_sk#68372, d_date#68346], functions=[partial_count(1)], output=[substr(i_item_desc#68376, 1, 30)#68722, i_item_sk#68372, d_date#68346, count#68724L])\n         :     :  :                                +- *(5) Project [d_date#68346, i_item_sk#68372, i_item_desc#68376]\n         :     :  :                                   +- *(5) BroadcastHashJoin [ss_item_sk#68323], [i_item_sk#68372], Inner, BuildRight, false\n         :     :  :                                      :- *(5) Project [ss_item_sk#68323, d_date#68346]\n         :     :  :                                      :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#68321], [d_date_sk#68344], Inner, BuildRight, false\n         :     :  :                                      :     :- *(5) Filter (isnotnull(ss_sold_date_sk#68321) AND isnotnull(ss_item_sk#68323))\n         :     :  :                                      :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#68321, ss_item_sk#68323], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#68321, ss_sold_time_sk#68322, ss_item_sk#68323, ss_customer_sk#68324, ss_cdemo_s..., Partition Cols: []]\n         :     :  :                                      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#93893]\n         :     :  :                                      :        +- *(3) Project [d_date_sk#68344, d_date#68346]\n         :     :  :                                      :           +- *(3) Filter (d_year#68350 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#68344))\n         :     :  :                                      :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#68346, d_date_sk#68344, d_year#68350], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#68344, d_date_id#68345, d_date#68346, d_month_seq#68347, d_week_seq#68348, d_quarter_s..., Partition Cols: []]\n         :     :  :                                      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#93900]\n         :     :  :                                         +- *(4) Filter isnotnull(i_item_sk#68372)\n         :     :  :                                            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#68372, i_item_desc#68376], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#68372, i_item_id#68373, i_rec_start_date#68374, i_rec_end_date#68375, i_item_desc#6837..., Partition Cols: []]\n         :     :  +- *(12) Sort [c_customer_sk#68421 ASC NULLS FIRST], false, 0\n         :     :     +- *(12) Project [c_customer_sk#68421]\n         :     :        +- *(12) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))#68513) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))#68513 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(Subquery scalar-subquery#68158, [id=#93491] as decimal(32,6)))), DecimalType(38,8), true)))\n         :     :           :  +- Subquery scalar-subquery#68158, [id=#93491]\n         :     :           :     +- *(5) HashAggregate(keys=[], functions=[max(csales#68155)], output=[tpcds_cmax#68156])\n         :     :           :        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#93487]\n         :     :           :           +- *(4) HashAggregate(keys=[], functions=[partial_max(csales#68155)], output=[max#68741])\n         :     :           :              +- *(4) HashAggregate(keys=[c_customer_sk#68463], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68450 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68453 as decimal(12,2)))), DecimalType(18,2), true))], output=[csales#68155])\n         :     :           :                 +- Exchange hashpartitioning(c_customer_sk#68463, 200), ENSURE_REQUIREMENTS, [id=#93482]\n         :     :           :                    +- *(3) HashAggregate(keys=[c_customer_sk#68463], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68450 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68453 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#68463, sum#68744, isEmpty#68745])\n         :     :           :                       +- *(3) Project [ss_quantity#68450, ss_sales_price#68453, c_customer_sk#68463]\n         :     :           :                          +- *(3) BroadcastHashJoin [ss_sold_date_sk#68440], [d_date_sk#68481], Inner, BuildRight, false\n         :     :           :                             :- *(3) Project [ss_sold_date_sk#68440, ss_quantity#68450, ss_sales_price#68453, c_customer_sk#68463]\n         :     :           :                             :  +- *(3) BroadcastHashJoin [ss_customer_sk#68443], [c_customer_sk#68463], Inner, BuildRight, false\n         :     :           :                             :     :- *(3) Filter (isnotnull(ss_customer_sk#68443) AND isnotnull(ss_sold_date_sk#68440))\n         :     :           :                             :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#68440, ss_customer_sk#68443, ss_quantity#68450, ss_sales_price#68453], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#68440, ss_sold_time_sk#68441, ss_item_sk#68442, ss_customer_sk#68443, ss_cdemo_s..., Partition Cols: []]\n         :     :           :                             :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#93468]\n         :     :           :                             :        +- *(1) Filter isnotnull(c_customer_sk#68463)\n         :     :           :                             :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#68463], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#68463, c_customer_id#68464, c_current_cdemo_sk#68465, c_current_hdemo_sk#68466, c_..., Partition Cols: []]\n         :     :           :                             +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#93476]\n         :     :           :                                +- *(2) Project [d_date_sk#68481]\n         :     :           :                                   +- *(2) Filter (d_year#68487 IN (1998,1999,2000,2001) AND isnotnull(d_date_sk#68481))\n         :     :           :                                      +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#68481, d_year#68487], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#68481, d_date_id#68482, d_date#68483, d_month_seq#68484, d_week_seq#68485, d_quarter_s..., Partition Cols: []]\n         :     :           +- *(12) HashAggregate(keys=[c_customer_sk#68421], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#68421, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))#68513])\n         :     :              +- Exchange hashpartitioning(c_customer_sk#68421, 200), ENSURE_REQUIREMENTS, [id=#93935]\n         :     :                 +- *(11) HashAggregate(keys=[c_customer_sk#68421], functions=[partial_sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#68421, sum#68727, isEmpty#68728])\n         :     :                    +- *(11) Project [ss_quantity#68408, ss_sales_price#68411, c_customer_sk#68421]\n         :     :                       +- *(11) BroadcastHashJoin [ss_customer_sk#68401], [c_customer_sk#68421], Inner, BuildRight, false\n         :     :                          :- *(11) Filter isnotnull(ss_customer_sk#68401)\n         :     :                          :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_customer_sk#68401, ss_quantity#68408, ss_sales_price#68411], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#68398, ss_sold_time_sk#68399, ss_item_sk#68400, ss_customer_sk#68401, ss_cdemo_s..., Partition Cols: []]\n         :     :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#93929]\n         :     :                             +- *(10) Filter isnotnull(c_customer_sk#68421)\n         :     :                                +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#68421], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#68421, c_customer_id#68422, c_current_cdemo_sk#68423, c_current_hdemo_sk#68424, c_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#94641]\n         :        +- SortMergeJoin [c_customer_sk#68193], [c_customer_sk#68421], LeftSemi\n         :           :- *(14) Sort [c_customer_sk#68193 ASC NULLS FIRST], false, 0\n         :           :  +- Exchange hashpartitioning(c_customer_sk#68193, 200), ENSURE_REQUIREMENTS, [id=#93947]\n         :           :     +- *(13) Filter isnotnull(c_customer_sk#68193)\n         :           :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#68193, c_first_name#68201, c_last_name#68202], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#68193, c_customer_id#68194, c_current_cdemo_sk#68195, c_current_hdemo_sk#68196, c_..., Partition Cols: []]\n         :           +- *(17) Sort [c_customer_sk#68421 ASC NULLS FIRST], false, 0\n         :              +- *(17) Project [c_customer_sk#68421]\n         :                 +- *(17) Filter (isnotnull(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))#68513) AND (cast(sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))#68513 as decimal(38,8)) > CheckOverflow((0.950000 * promote_precision(cast(ReusedSubquery Subquery scalar-subquery#68158, [id=#93491] as decimal(32,6)))), DecimalType(38,8), true)))\n         :                    :  +- ReusedSubquery Subquery scalar-subquery#68158, [id=#93491]\n         :                    +- *(17) HashAggregate(keys=[c_customer_sk#68421], functions=[sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))], output=[c_customer_sk#68421, sum(CheckOverflow((promote_precision(cast(cast(ss_quantity#68408 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#68411 as decimal(12,2)))), DecimalType(18,2), true))#68513])\n         :                       +- ReusedExchange [c_customer_sk#68421, sum#68727, isEmpty#68728], Exchange hashpartitioning(c_customer_sk#68421, 200), ENSURE_REQUIREMENTS, [id=#93935]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#93978]\n            +- *(18) Project [d_date_sk#68211]\n               +- *(18) Filter ((((isnotnull(d_year#68217) AND isnotnull(d_moy#68219)) AND (d_year#68217 = 1998)) AND (d_moy#68219 = 7)) AND isnotnull(d_date_sk#68211))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#68211, d_moy#68219, d_year#68217], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#68211, d_date_id#68212, d_date#68213, d_month_seq#68214, d_week_seq#68215, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q23b"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 3,
    "name" : "q24a"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 3,
    "name" : "q24b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#69582, i_item_desc#69585, s_store_id#69553, s_store_name#69557, 200), ENSURE_REQUIREMENTS, [id=#95697]\n+- *(11) HashAggregate(keys=[i_item_id#69582, i_item_desc#69585, s_store_id#69553, s_store_name#69557], functions=[partial_min(ss_net_profit#69413), partial_min(sr_net_loss#69433), partial_min(cs_net_profit#69467)], output=[i_item_id#69582, i_item_desc#69585, s_store_id#69553, s_store_name#69557, min#69620, min#69621, min#69622])\n   +- *(11) Project [ss_net_profit#69413, sr_net_loss#69433, cs_net_profit#69467, s_store_id#69553, s_store_name#69557, i_item_id#69582, i_item_desc#69585]\n      +- *(11) BroadcastHashJoin [ss_item_sk#69393], [i_item_sk#69581], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#69393, ss_net_profit#69413, sr_net_loss#69433, cs_net_profit#69467, s_store_id#69553, s_store_name#69557]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#69398], [s_store_sk#69552], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#69393, ss_store_sk#69398, ss_net_profit#69413, sr_net_loss#69433, cs_net_profit#69467]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#69434], [d_date_sk#69524], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#69393, ss_store_sk#69398, ss_net_profit#69413, sr_net_loss#69433, cs_sold_date_sk#69434, cs_net_profit#69467]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#69414], [d_date_sk#69496], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#69393, ss_store_sk#69398, ss_net_profit#69413, sr_returned_date_sk#69414, sr_net_loss#69433, cs_sold_date_sk#69434, cs_net_profit#69467]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#69391], [d_date_sk#69468], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#69391, ss_item_sk#69393, ss_store_sk#69398, ss_net_profit#69413, sr_returned_date_sk#69414, sr_net_loss#69433, cs_sold_date_sk#69434, cs_net_profit#69467]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#69417, sr_item_sk#69416], [cs_bill_customer_sk#69437, cs_item_sk#69449], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#69417 ASC NULLS FIRST, sr_item_sk#69416 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#69417, sr_item_sk#69416, 200), ENSURE_REQUIREMENTS, [id=#95603]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#69391, ss_item_sk#69393, ss_store_sk#69398, ss_net_profit#69413, sr_returned_date_sk#69414, sr_item_sk#69416, sr_customer_sk#69417, sr_net_loss#69433]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#69394, ss_item_sk#69393, ss_ticket_number#69400L], [sr_customer_sk#69417, sr_item_sk#69416, sr_ticket_number#69423L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#69394) AND isnotnull(ss_item_sk#69393)) AND isnotnull(ss_ticket_number#69400L)) AND isnotnull(ss_sold_date_sk#69391)) AND isnotnull(ss_store_sk#69398))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#69391, ss_item_sk#69393, ss_customer_sk#69394, ss_store_sk#69398, ss_ticket_number#69400L, ss_net_profit#69413], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#69391, ss_sold_time_sk#69392, ss_item_sk#69393, ss_customer_sk#69394, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#95598]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#69417) AND isnotnull(sr_item_sk#69416)) AND isnotnull(sr_ticket_number#69423L)) AND isnotnull(sr_returned_date_sk#69414))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#69414, sr_item_sk#69416, sr_customer_sk#69417, sr_ticket_number#69423L, sr_net_loss#69433], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#69414, sr_return_time_sk#69415, sr_item_sk#69416, sr_customer_sk#69417, sr_c..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#69437 ASC NULLS FIRST, cs_item_sk#69449 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#69437, cs_item_sk#69449, 200), ENSURE_REQUIREMENTS, [id=#95611]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#69437) AND isnotnull(cs_item_sk#69449)) AND isnotnull(cs_sold_date_sk#69434))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#69434, cs_bill_customer_sk#69437, cs_item_sk#69449, cs_net_profit#69467], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#69434, cs_sold_time_sk#69435, cs_ship_date_sk#69436, cs_bill_customer_sk#69437, ..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95622]\n         :     :     :     :        +- *(6) Project [d_date_sk#69468]\n         :     :     :     :           +- *(6) Filter ((((isnotnull(d_moy#69476) AND isnotnull(d_year#69474)) AND (d_moy#69476 = 4)) AND (d_year#69474 = 2002)) AND isnotnull(d_date_sk#69468))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#69468, d_moy#69476, d_year#69474], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#69468, d_date_id#69469, d_date#69470, d_month_seq#69471, d_week_seq#69472, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95630]\n         :     :     :        +- *(7) Project [d_date_sk#69496]\n         :     :     :           +- *(7) Filter (((((isnotnull(d_moy#69504) AND isnotnull(d_year#69502)) AND (d_moy#69504 >= 4)) AND (d_moy#69504 <= 10)) AND (d_year#69502 = 2002)) AND isnotnull(d_date_sk#69496))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#69496, d_moy#69504, d_year#69502], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#69496, d_date_id#69497, d_date#69498, d_month_seq#69499, d_week_seq#69500, d_quarter_s..., Partition Cols: []]\n         :     :     +- ReusedExchange [d_date_sk#69524], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95630]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95645]\n         :        +- *(9) Filter isnotnull(s_store_sk#69552)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#69552, s_store_id#69553, s_store_name#69557], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#69552, s_store_id#69553, s_rec_start_date#69554, s_rec_end_date#69555, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95652]\n            +- *(10) Filter isnotnull(i_item_sk#69581)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#69581, i_item_id#69582, i_item_desc#69585], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#69581, i_item_id#69582, i_rec_start_date#69583, i_rec_end_date#69584, i_item_desc#6958..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q25"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#69707, 200), ENSURE_REQUIREMENTS, [id=#95834]\n+- *(5) HashAggregate(keys=[i_item_id#69707], functions=[partial_avg(cast(cs_quantity#69653 as bigint)), partial_avg(UnscaledValue(cs_list_price#69655)), partial_avg(UnscaledValue(cs_coupon_amt#69662)), partial_avg(UnscaledValue(cs_sales_price#69656))], output=[i_item_id#69707, sum#69765, count#69766L, sum#69767, count#69768L, sum#69769, count#69770L, sum#69771, count#69772L])\n   +- *(5) Project [cs_quantity#69653, cs_list_price#69655, cs_sales_price#69656, cs_coupon_amt#69662, i_item_id#69707]\n      +- *(5) BroadcastHashJoin [cs_promo_sk#69651], [p_promo_sk#69728], Inner, BuildRight, false\n         :- *(5) Project [cs_promo_sk#69651, cs_quantity#69653, cs_list_price#69655, cs_sales_price#69656, cs_coupon_amt#69662, i_item_id#69707]\n         :  +- *(5) BroadcastHashJoin [cs_item_sk#69650], [i_item_sk#69706], Inner, BuildRight, false\n         :     :- *(5) Project [cs_item_sk#69650, cs_promo_sk#69651, cs_quantity#69653, cs_list_price#69655, cs_sales_price#69656, cs_coupon_amt#69662]\n         :     :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#69635], [d_date_sk#69678], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#69635, cs_item_sk#69650, cs_promo_sk#69651, cs_quantity#69653, cs_list_price#69655, cs_sales_price#69656, cs_coupon_amt#69662]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_bill_cdemo_sk#69639], [cd_demo_sk#69669], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(cs_bill_cdemo_sk#69639) AND isnotnull(cs_sold_date_sk#69635)) AND isnotnull(cs_item_sk#69650)) AND isnotnull(cs_promo_sk#69651))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#69635, cs_bill_cdemo_sk#69639, cs_item_sk#69650, cs_promo_sk#69651, cs_quantity#69653, cs_list_price#69655, cs_sales_price#69656, cs_coupon_amt#69662], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#69635, cs_sold_time_sk#69636, cs_ship_date_sk#69637, cs_bill_customer_sk#69638, ..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95805]\n         :     :     :        +- *(1) Project [cd_demo_sk#69669]\n         :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#69670) AND isnotnull(cd_marital_status#69671)) AND isnotnull(cd_education_status#69672)) AND (cd_gender#69670 = F)) AND (cd_marital_status#69671 = M)) AND (cd_education_status#69672 = 4 yr Degree)) AND isnotnull(cd_demo_sk#69669))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#69669, cd_education_status#69672, cd_gender#69670, cd_marital_status#69671], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#69669, cd_gender#69670, cd_marital_status#69671, cd_education_status#69672, cd_purcha..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95813]\n         :     :        +- *(2) Project [d_date_sk#69678]\n         :     :           +- *(2) Filter ((isnotnull(d_year#69684) AND (d_year#69684 = 1998)) AND isnotnull(d_date_sk#69678))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#69678, d_year#69684], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#69678, d_date_id#69679, d_date#69680, d_month_seq#69681, d_week_seq#69682, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95820]\n         :        +- *(3) Filter isnotnull(i_item_sk#69706)\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#69706, i_item_id#69707], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#69706, i_item_id#69707, i_rec_start_date#69708, i_rec_end_date#69709, i_item_desc#6971..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95828]\n            +- *(4) Project [p_promo_sk#69728]\n               +- *(4) Filter (((p_channel_email#69737 = N) OR (p_channel_event#69742 = N)) AND isnotnull(p_promo_sk#69728))\n                  +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_email#69737, p_channel_event#69742, p_promo_sk#69728], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#69728, p_promo_id#69729, p_start_date_sk#69730, p_end_date_sk#69731, p_item_sk#69732,..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q26"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#69902, s_state#69903, spark_grouping_id#69901L, 200), ENSURE_REQUIREMENTS, [id=#95974]\n+- *(5) HashAggregate(keys=[i_item_id#69902, s_state#69903, spark_grouping_id#69901L], functions=[partial_avg(cast(ss_quantity#69794 as bigint)), partial_avg(UnscaledValue(ss_list_price#69796)), partial_avg(UnscaledValue(ss_coupon_amt#69803)), partial_avg(UnscaledValue(ss_sales_price#69797))], output=[i_item_id#69902, s_state#69903, spark_grouping_id#69901L, sum#69922, count#69923L, sum#69924, count#69925L, sum#69926, count#69927L, sum#69928, count#69929L])\n   +- *(5) Expand [List(ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803, i_item_id#69874, s_state#69868, 0), List(ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803, i_item_id#69874, null, 1), List(ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803, null, null, 3)], [ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803, i_item_id#69902, s_state#69903, spark_grouping_id#69901L]\n      +- *(5) Project [ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803, i_item_id#69874, s_state#69868]\n         +- *(5) BroadcastHashJoin [ss_item_sk#69786], [i_item_sk#69873], Inner, BuildRight, false\n            :- *(5) Project [ss_item_sk#69786, ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803, s_state#69868]\n            :  +- *(5) BroadcastHashJoin [ss_store_sk#69791], [s_store_sk#69844], Inner, BuildRight, false\n            :     :- *(5) Project [ss_item_sk#69786, ss_store_sk#69791, ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803]\n            :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#69784], [d_date_sk#69816], Inner, BuildRight, false\n            :     :     :- *(5) Project [ss_sold_date_sk#69784, ss_item_sk#69786, ss_store_sk#69791, ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803]\n            :     :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#69788], [cd_demo_sk#69807], Inner, BuildRight, false\n            :     :     :     :- *(5) Filter (((isnotnull(ss_cdemo_sk#69788) AND isnotnull(ss_sold_date_sk#69784)) AND isnotnull(ss_store_sk#69791)) AND isnotnull(ss_item_sk#69786))\n            :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#69784, ss_item_sk#69786, ss_cdemo_sk#69788, ss_store_sk#69791, ss_quantity#69794, ss_list_price#69796, ss_sales_price#69797, ss_coupon_amt#69803], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#69784, ss_sold_time_sk#69785, ss_item_sk#69786, ss_customer_sk#69787, ss_cdemo_s..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95945]\n            :     :     :        +- *(1) Project [cd_demo_sk#69807]\n            :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#69808) AND isnotnull(cd_marital_status#69809)) AND isnotnull(cd_education_status#69810)) AND (cd_gender#69808 = M)) AND (cd_marital_status#69809 = M)) AND (cd_education_status#69810 = Secondary)) AND isnotnull(cd_demo_sk#69807))\n            :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#69807, cd_education_status#69810, cd_gender#69808, cd_marital_status#69809], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#69807, cd_gender#69808, cd_marital_status#69809, cd_education_status#69810, cd_purcha..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#95953]\n            :     :        +- *(2) Project [d_date_sk#69816]\n            :     :           +- *(2) Filter ((isnotnull(d_year#69822) AND (d_year#69822 = 1999)) AND isnotnull(d_date_sk#69816))\n            :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#69816, d_year#69822], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#69816, d_date_id#69817, d_date#69818, d_month_seq#69819, d_week_seq#69820, d_quarter_s..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95960]\n            :        +- *(3) Filter (s_state#69868 IN (AL,FL,TX,NM,MI,GA) AND isnotnull(s_store_sk#69844))\n            :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#69844, s_state#69868], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#69844, s_store_id#69845, s_rec_start_date#69846, s_rec_end_date#69847, s_closed_date_..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#95967]\n               +- *(4) Filter isnotnull(i_item_sk#69873)\n                  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#69873, i_item_id#69874], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#69873, i_item_id#69874, i_rec_start_date#69875, i_rec_end_date#69876, i_item_desc#6987..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q27"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 3,
    "name" : "q28"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#70499, i_item_desc#70502, s_store_id#70470, s_store_name#70474, 200), ENSURE_REQUIREMENTS, [id=#96602]\n+- *(11) HashAggregate(keys=[i_item_id#70499, i_item_desc#70502, s_store_id#70470, s_store_name#70474], functions=[partial_stddev_samp(cast(ss_quantity#70318 as double)), partial_stddev_samp(cast(sr_return_quantity#70341 as double)), partial_stddev_samp(cast(cs_quantity#70369 as double))], output=[i_item_id#70499, i_item_desc#70502, s_store_id#70470, s_store_name#70474, n#70600, avg#70601, m2#70602, n#70608, avg#70609, m2#70610, n#70616, avg#70617, m2#70618])\n   +- *(11) Project [ss_quantity#70318, sr_return_quantity#70341, cs_quantity#70369, s_store_id#70470, s_store_name#70474, i_item_id#70499, i_item_desc#70502]\n      +- *(11) BroadcastHashJoin [ss_item_sk#70310], [i_item_sk#70498], Inner, BuildRight, false\n         :- *(11) Project [ss_item_sk#70310, ss_quantity#70318, sr_return_quantity#70341, cs_quantity#70369, s_store_id#70470, s_store_name#70474]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#70315], [s_store_sk#70469], Inner, BuildRight, false\n         :     :- *(11) Project [ss_item_sk#70310, ss_store_sk#70315, ss_quantity#70318, sr_return_quantity#70341, cs_quantity#70369]\n         :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#70351], [d_date_sk#70441], Inner, BuildRight, false\n         :     :     :- *(11) Project [ss_item_sk#70310, ss_store_sk#70315, ss_quantity#70318, sr_return_quantity#70341, cs_sold_date_sk#70351, cs_quantity#70369]\n         :     :     :  +- *(11) BroadcastHashJoin [sr_returned_date_sk#70331], [d_date_sk#70413], Inner, BuildRight, false\n         :     :     :     :- *(11) Project [ss_item_sk#70310, ss_store_sk#70315, ss_quantity#70318, sr_returned_date_sk#70331, sr_return_quantity#70341, cs_sold_date_sk#70351, cs_quantity#70369]\n         :     :     :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#70308], [d_date_sk#70385], Inner, BuildRight, false\n         :     :     :     :     :- *(11) Project [ss_sold_date_sk#70308, ss_item_sk#70310, ss_store_sk#70315, ss_quantity#70318, sr_returned_date_sk#70331, sr_return_quantity#70341, cs_sold_date_sk#70351, cs_quantity#70369]\n         :     :     :     :     :  +- *(11) SortMergeJoin [sr_customer_sk#70334, sr_item_sk#70333], [cs_bill_customer_sk#70354, cs_item_sk#70366], Inner\n         :     :     :     :     :     :- *(3) Sort [sr_customer_sk#70334 ASC NULLS FIRST, sr_item_sk#70333 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :  +- Exchange hashpartitioning(sr_customer_sk#70334, sr_item_sk#70333, 200), ENSURE_REQUIREMENTS, [id=#96547]\n         :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#70308, ss_item_sk#70310, ss_store_sk#70315, ss_quantity#70318, sr_returned_date_sk#70331, sr_item_sk#70333, sr_customer_sk#70334, sr_return_quantity#70341]\n         :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_customer_sk#70311, ss_item_sk#70310, ss_ticket_number#70317L], [sr_customer_sk#70334, sr_item_sk#70333, sr_ticket_number#70340L], Inner, BuildRight, false\n         :     :     :     :     :     :           :- *(2) Filter ((((isnotnull(ss_customer_sk#70311) AND isnotnull(ss_item_sk#70310)) AND isnotnull(ss_ticket_number#70317L)) AND isnotnull(ss_sold_date_sk#70308)) AND isnotnull(ss_store_sk#70315))\n         :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#70308, ss_item_sk#70310, ss_customer_sk#70311, ss_store_sk#70315, ss_ticket_number#70317L, ss_quantity#70318], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#70308, ss_sold_time_sk#70309, ss_item_sk#70310, ss_customer_sk#70311, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[2, int, false], input[1, int, false], input[3, bigint, false]),false), [id=#96542]\n         :     :     :     :     :     :              +- *(1) Filter (((isnotnull(sr_customer_sk#70334) AND isnotnull(sr_item_sk#70333)) AND isnotnull(sr_ticket_number#70340L)) AND isnotnull(sr_returned_date_sk#70331))\n         :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#70331, sr_item_sk#70333, sr_customer_sk#70334, sr_ticket_number#70340L, sr_return_quantity#70341], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#70331, sr_return_time_sk#70332, sr_item_sk#70333, sr_customer_sk#70334, sr_c..., Partition Cols: []]\n         :     :     :     :     :     +- *(5) Sort [cs_bill_customer_sk#70354 ASC NULLS FIRST, cs_item_sk#70366 ASC NULLS FIRST], false, 0\n         :     :     :     :     :        +- Exchange hashpartitioning(cs_bill_customer_sk#70354, cs_item_sk#70366, 200), ENSURE_REQUIREMENTS, [id=#96555]\n         :     :     :     :     :           +- *(4) Filter ((isnotnull(cs_bill_customer_sk#70354) AND isnotnull(cs_item_sk#70366)) AND isnotnull(cs_sold_date_sk#70351))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#70351, cs_bill_customer_sk#70354, cs_item_sk#70366, cs_quantity#70369], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#70351, cs_sold_time_sk#70352, cs_ship_date_sk#70353, cs_bill_customer_sk#70354, ..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#96566]\n         :     :     :     :        +- *(6) Project [d_date_sk#70385]\n         :     :     :     :           +- *(6) Filter ((((isnotnull(d_moy#70393) AND isnotnull(d_year#70391)) AND (d_moy#70393 = 4)) AND (d_year#70391 = 2000)) AND isnotnull(d_date_sk#70385))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#70385, d_moy#70393, d_year#70391], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#70385, d_date_id#70386, d_date#70387, d_month_seq#70388, d_week_seq#70389, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#96574]\n         :     :     :        +- *(7) Project [d_date_sk#70413]\n         :     :     :           +- *(7) Filter (((((isnotnull(d_moy#70421) AND isnotnull(d_year#70419)) AND (d_moy#70421 >= 4)) AND (d_moy#70421 <= 7)) AND (d_year#70419 = 2000)) AND isnotnull(d_date_sk#70413))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#70413, d_moy#70421, d_year#70419], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#70413, d_date_id#70414, d_date#70415, d_month_seq#70416, d_week_seq#70417, d_quarter_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#96582]\n         :     :        +- *(8) Project [d_date_sk#70441]\n         :     :           +- *(8) Filter (d_year#70447 IN (2000,2001,2002) AND isnotnull(d_date_sk#70441))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#70441, d_year#70447], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#70441, d_date_id#70442, d_date#70443, d_month_seq#70444, d_week_seq#70445, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#96589]\n         :        +- *(9) Filter isnotnull(s_store_sk#70469)\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#70469, s_store_id#70470, s_store_name#70474], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#70469, s_store_id#70470, s_rec_start_date#70471, s_rec_end_date#70472, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#96596]\n            +- *(10) Filter isnotnull(i_item_sk#70498)\n               +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#70498, i_item_id#70499, i_item_desc#70502], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#70498, i_item_id#70499, i_rec_start_date#70500, i_rec_end_date#70501, i_item_desc#7050..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q29"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#70667, i_brand#70720, i_brand_id#70719, 200), ENSURE_REQUIREMENTS, [id=#96710]\n+- *(3) HashAggregate(keys=[d_year#70667, i_brand#70720, i_brand_id#70719], functions=[partial_sum(UnscaledValue(ss_sales_price#70702))], output=[d_year#70667, i_brand#70720, i_brand_id#70719, sum#70743L])\n   +- *(3) Project [d_year#70667, ss_sales_price#70702, i_brand_id#70719, i_brand#70720]\n      +- *(3) BroadcastHashJoin [ss_item_sk#70691], [i_item_sk#70712], Inner, BuildRight, false\n         :- *(3) Project [d_year#70667, ss_item_sk#70691, ss_sales_price#70702]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#70661], [ss_sold_date_sk#70689], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#96694]\n         :     :  +- *(1) Project [d_date_sk#70661, d_year#70667]\n         :     :     +- *(1) Filter ((isnotnull(d_moy#70669) AND (d_moy#70669 = 11)) AND isnotnull(d_date_sk#70661))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#70661, d_moy#70669, d_year#70667], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#70661, d_date_id#70662, d_date#70663, d_month_seq#70664, d_week_seq#70665, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#70689) AND isnotnull(ss_item_sk#70691))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#70689, ss_item_sk#70691, ss_sales_price#70702], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#70689, ss_sold_time_sk#70690, ss_item_sk#70691, ss_customer_sk#70692, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#96704]\n            +- *(2) Project [i_item_sk#70712, i_brand_id#70719, i_brand#70720]\n               +- *(2) Filter ((isnotnull(i_manufact_id#70725) AND (i_manufact_id#70725 = 816)) AND isnotnull(i_item_sk#70712))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#70720, i_brand_id#70719, i_item_sk#70712, i_manufact_id#70725], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#70712, i_item_id#70713, i_rec_start_date#70714, i_rec_end_date#70715, i_item_desc#7071..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q3"
  }, {
    "errorMsg" : "cannot resolve '`c_last_review_date`' given input columns: [spark_catalog.tpcds_sf1_iceberg.customer.c_birth_country, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_day, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_month, spark_catalog.tpcds_sf1_iceberg.customer.c_birth_year, spark_catalog.tpcds_sf1_iceberg.customer.c_current_addr_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_current_cdemo_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_current_hdemo_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_customer_id, spark_catalog.tpcds_sf1_iceberg.customer.c_customer_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_email_address, spark_catalog.tpcds_sf1_iceberg.customer.c_first_name, spark_catalog.tpcds_sf1_iceberg.customer.c_first_sales_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_first_shipto_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_last_name, spark_catalog.tpcds_sf1_iceberg.customer.c_last_review_date_sk, spark_catalog.tpcds_sf1_iceberg.customer.c_login, spark_catalog.tpcds_sf1_iceberg.customer.c_preferred_cust_flag, spark_catalog.tpcds_sf1_iceberg.customer.c_salutation, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_address_id, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_address_sk, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_city, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_country, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_county, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_gmt_offset, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_location_type, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_state, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_name, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_number, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_street_type, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_suite_number, spark_catalog.tpcds_sf1_iceberg.customer_address.ca_zip, ctr1.ctr_customer_sk, ctr1.ctr_state, ctr1.ctr_total_return]; line 16 pos 8;\n'GlobalLimit 100\n+- 'LocalLimit 100\n   +- 'Sort ['c_customer_id ASC NULLS FIRST, 'c_salutation ASC NULLS FIRST, 'c_first_name ASC NULLS FIRST, 'c_last_name ASC NULLS FIRST, 'c_preferred_cust_flag ASC NULLS FIRST, 'c_birth_day ASC NULLS FIRST, 'c_birth_month ASC NULLS FIRST, 'c_birth_year ASC NULLS FIRST, 'c_birth_country ASC NULLS FIRST, 'c_login ASC NULLS FIRST, 'c_email_address ASC NULLS FIRST, 'c_last_review_date ASC NULLS FIRST, 'ctr_total_return ASC NULLS FIRST], true\n      +- 'Project [c_customer_id#70832, c_salutation#70838, c_first_name#70839, c_last_name#70840, c_preferred_cust_flag#70841, c_birth_day#70842, c_birth_month#70843, c_birth_year#70844, c_birth_country#70845, c_login#70846, c_email_address#70847, 'c_last_review_date, ctr_total_return#70752]\n         +- Filter (((cast(ctr_total_return#70752 as decimal(24,7)) > cast(scalar-subquery#70749 [ctr_state#70751] as decimal(24,7))) AND (ca_address_sk#70818 = c_current_addr_sk#70835)) AND ((ca_state#70826 = MI) AND (ctr_customer_sk#70750 = c_customer_sk#70831)))\n            :  +- Aggregate [CheckOverflow((promote_precision(cast(avg(ctr_total_return#70752) as decimal(21,6))) * promote_precision(cast(1.2 as decimal(21,6)))), DecimalType(24,7), true) AS (CAST(avg(ctr_total_return) AS DECIMAL(21,6)) * CAST(1.2 AS DECIMAL(21,6)))#70917]\n            :     +- Filter (outer(ctr_state#70751) = ctr_state#70751)\n            :        +- SubqueryAlias ctr2\n            :           +- SubqueryAlias customer_total_return\n            :              +- Aggregate [wr_returning_customer_sk#70857, ca_state#70910], [wr_returning_customer_sk#70857 AS ctr_customer_sk#70750, ca_state#70910 AS ctr_state#70751, sum(wr_return_amt#70865) AS ctr_total_return#70752]\n            :                 +- Filter (((wr_returned_date_sk#70850 = d_date_sk#70874) AND (d_year#70880 = 2001)) AND (wr_returning_addr_sk#70860 = ca_address_sk#70902))\n            :                    +- Join Inner\n            :                       :- Join Inner\n            :                       :  :- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.web_returns\n            :                       :  :  +- HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#70850, wr_returned_time_sk#70851, wr_item_sk#70852, wr_refunded_customer_sk#..., Partition Cols: []]\n            :                       :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.date_dim\n            :                       :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#70874, d_date_id#70875, d_date#70876, d_month_seq#70877, d_week_seq#70878, d_quarter_s..., Partition Cols: []]\n            :                       +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n            :                          +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#70902, ca_address_id#70903, ca_street_number#70904, ca_street_name#70905, ca_stree..., Partition Cols: []]\n            +- Join Inner\n               :- Join Inner\n               :  :- SubqueryAlias ctr1\n               :  :  +- SubqueryAlias customer_total_return\n               :  :     +- Aggregate [wr_returning_customer_sk#70760, ca_state#70813], [wr_returning_customer_sk#70760 AS ctr_customer_sk#70750, ca_state#70813 AS ctr_state#70751, sum(wr_return_amt#70768) AS ctr_total_return#70752]\n               :  :        +- Filter (((wr_returned_date_sk#70753 = d_date_sk#70777) AND (d_year#70783 = 2001)) AND (wr_returning_addr_sk#70763 = ca_address_sk#70805))\n               :  :           +- Join Inner\n               :  :              :- Join Inner\n               :  :              :  :- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.web_returns\n               :  :              :  :  +- HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#70753, wr_returned_time_sk#70754, wr_item_sk#70755, wr_refunded_customer_sk#..., Partition Cols: []]\n               :  :              :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.date_dim\n               :  :              :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#70777, d_date_id#70778, d_date#70779, d_month_seq#70780, d_week_seq#70781, d_quarter_s..., Partition Cols: []]\n               :  :              +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n               :  :                 +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#70805, ca_address_id#70806, ca_street_number#70807, ca_street_name#70808, ca_stree..., Partition Cols: []]\n               :  +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer_address\n               :     +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#70818, ca_address_id#70819, ca_street_number#70820, ca_street_name#70821, ca_stree..., Partition Cols: []]\n               +- SubqueryAlias spark_catalog.tpcds_sf1_iceberg.customer\n                  +- HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#70831, c_customer_id#70832, c_current_cdemo_sk#70833, c_current_hdemo_sk#70834, c_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q30"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(store_q1_q2_increase#70919 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#97598]\n+- *(35) Project [ca_county#70982, d_year#70953, CheckOverflow((promote_precision(web_sales#71349) / promote_precision(web_sales#70923)), DecimalType(37,20), true) AS web_q1_q2_increase#70918, CheckOverflow((promote_precision(store_sales#71347) / promote_precision(store_sales#70922)), DecimalType(37,20), true) AS store_q1_q2_increase#70919, CheckOverflow((promote_precision(web_sales#71350) / promote_precision(web_sales#71349)), DecimalType(37,20), true) AS web_q2_q3_increase#70920, CheckOverflow((promote_precision(store_sales#71348) / promote_precision(store_sales#71347)), DecimalType(37,20), true) AS store_q2_q3_increase#70921]\n   +- *(35) SortMergeJoin [ca_county#71185], [ca_county#71335], Inner, (CASE WHEN (web_sales#71349 > 0.00) THEN CheckOverflow((promote_precision(web_sales#71350) / promote_precision(web_sales#71349)), DecimalType(37,20), true) ELSE null END > CASE WHEN (store_sales#71347 > 0.00) THEN CheckOverflow((promote_precision(store_sales#71348) / promote_precision(store_sales#71347)), DecimalType(37,20), true) ELSE null END)\n      :- *(29) Project [ca_county#70982, d_year#70953, store_sales#70922, store_sales#71347, store_sales#71348, ca_county#71185, web_sales#70923, web_sales#71349]\n      :  +- *(29) SortMergeJoin [ca_county#71185], [ca_county#71260], Inner, (CASE WHEN (web_sales#70923 > 0.00) THEN CheckOverflow((promote_precision(web_sales#71349) / promote_precision(web_sales#70923)), DecimalType(37,20), true) ELSE null END > CASE WHEN (store_sales#70922 > 0.00) THEN CheckOverflow((promote_precision(store_sales#71347) / promote_precision(store_sales#70922)), DecimalType(37,20), true) ELSE null END)\n      :     :- *(23) SortMergeJoin [ca_county#70982], [ca_county#71185], Inner\n      :     :  :- *(17) Project [ca_county#70982, d_year#70953, store_sales#70922, store_sales#71347, store_sales#71348]\n      :     :  :  +- *(17) SortMergeJoin [ca_county#71046], [ca_county#71110], Inner\n      :     :  :     :- *(11) SortMergeJoin [ca_county#70982], [ca_county#71046], Inner\n      :     :  :     :  :- *(5) Sort [ca_county#70982 ASC NULLS FIRST], false, 0\n      :     :  :     :  :  +- Exchange hashpartitioning(ca_county#70982, 200), ENSURE_REQUIREMENTS, [id=#97117]\n      :     :  :     :  :     +- *(4) HashAggregate(keys=[ca_county#70982, d_qoy#70957, d_year#70953], functions=[sum(UnscaledValue(ss_ext_sales_price#70939))], output=[ca_county#70982, d_year#70953, store_sales#70922])\n      :     :  :     :  :        +- Exchange hashpartitioning(ca_county#70982, d_qoy#70957, d_year#70953, 200), ENSURE_REQUIREMENTS, [id=#97113]\n      :     :  :     :  :           +- *(3) HashAggregate(keys=[ca_county#70982, d_qoy#70957, d_year#70953], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#70939))], output=[ca_county#70982, d_qoy#70957, d_year#70953, sum#71358L])\n      :     :  :     :  :              +- *(3) Project [ss_ext_sales_price#70939, d_year#70953, d_qoy#70957, ca_county#70982]\n      :     :  :     :  :                 +- *(3) BroadcastHashJoin [ss_addr_sk#70930], [ca_address_sk#70975], Inner, BuildRight, false\n      :     :  :     :  :                    :- *(3) Project [ss_addr_sk#70930, ss_ext_sales_price#70939, d_year#70953, d_qoy#70957]\n      :     :  :     :  :                    :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#70924], [d_date_sk#70947], Inner, BuildRight, false\n      :     :  :     :  :                    :     :- *(3) Filter (isnotnull(ss_sold_date_sk#70924) AND isnotnull(ss_addr_sk#70930))\n      :     :  :     :  :                    :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#70924, ss_addr_sk#70930, ss_ext_sales_price#70939], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#70924, ss_sold_time_sk#70925, ss_item_sk#70926, ss_customer_sk#70927, ss_cdemo_s..., Partition Cols: []]\n      :     :  :     :  :                    :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97100]\n      :     :  :     :  :                    :        +- *(1) Filter ((((isnotnull(d_qoy#70957) AND isnotnull(d_year#70953)) AND (d_qoy#70957 = 1)) AND (d_year#70953 = 2000)) AND isnotnull(d_date_sk#70947))\n      :     :  :     :  :                    :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#70947, d_year#70953, d_qoy#70957], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#70947, d_date_id#70948, d_date#70949, d_month_seq#70950, d_week_seq#70951, d_quarter_s..., Partition Cols: []]\n      :     :  :     :  :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97107]\n      :     :  :     :  :                       +- *(2) Filter (isnotnull(ca_address_sk#70975) AND isnotnull(ca_county#70982))\n      :     :  :     :  :                          +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#70975, ca_county#70982], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#70975, ca_address_id#70976, ca_street_number#70977, ca_street_name#70978, ca_stree..., Partition Cols: []]\n      :     :  :     :  +- *(10) Sort [ca_county#71046 ASC NULLS FIRST], false, 0\n      :     :  :     :     +- Exchange hashpartitioning(ca_county#71046, 200), ENSURE_REQUIREMENTS, [id=#97350]\n      :     :  :     :        +- *(9) HashAggregate(keys=[ca_county#71046, d_qoy#71021, d_year#71017], functions=[sum(UnscaledValue(ss_ext_sales_price#71003))], output=[ca_county#71046, store_sales#71347])\n      :     :  :     :           +- Exchange hashpartitioning(ca_county#71046, d_qoy#71021, d_year#71017, 200), ENSURE_REQUIREMENTS, [id=#97308]\n      :     :  :     :              +- *(8) HashAggregate(keys=[ca_county#71046, d_qoy#71021, d_year#71017], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#71003))], output=[ca_county#71046, d_qoy#71021, d_year#71017, sum#71360L])\n      :     :  :     :                 +- *(8) Project [ss_ext_sales_price#71003, d_year#71017, d_qoy#71021, ca_county#71046]\n      :     :  :     :                    +- *(8) BroadcastHashJoin [ss_addr_sk#70994], [ca_address_sk#71039], Inner, BuildRight, false\n      :     :  :     :                       :- *(8) Project [ss_addr_sk#70994, ss_ext_sales_price#71003, d_year#71017, d_qoy#71021]\n      :     :  :     :                       :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#70988], [d_date_sk#71011], Inner, BuildRight, false\n      :     :  :     :                       :     :- *(8) Filter (isnotnull(ss_sold_date_sk#70988) AND isnotnull(ss_addr_sk#70994))\n      :     :  :     :                       :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#70988, ss_addr_sk#70994, ss_ext_sales_price#71003], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#70988, ss_sold_time_sk#70989, ss_item_sk#70990, ss_customer_sk#70991, ss_cdemo_s..., Partition Cols: []]\n      :     :  :     :                       :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97127]\n      :     :  :     :                       :        +- *(6) Filter ((((isnotnull(d_qoy#71021) AND isnotnull(d_year#71017)) AND (d_qoy#71021 = 2)) AND (d_year#71017 = 2000)) AND isnotnull(d_date_sk#71011))\n      :     :  :     :                       :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#71011, d_year#71017, d_qoy#71021], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#71011, d_date_id#71012, d_date#71013, d_month_seq#71014, d_week_seq#71015, d_quarter_s..., Partition Cols: []]\n      :     :  :     :                       +- ReusedExchange [ca_address_sk#71039, ca_county#71046], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97107]\n      :     :  :     +- *(16) Sort [ca_county#71110 ASC NULLS FIRST], false, 0\n      :     :  :        +- Exchange hashpartitioning(ca_county#71110, 200), ENSURE_REQUIREMENTS, [id=#97399]\n      :     :  :           +- *(15) HashAggregate(keys=[ca_county#71110, d_qoy#71085, d_year#71081], functions=[sum(UnscaledValue(ss_ext_sales_price#71067))], output=[ca_county#71110, store_sales#71348])\n      :     :  :              +- Exchange hashpartitioning(ca_county#71110, d_qoy#71085, d_year#71081, 200), ENSURE_REQUIREMENTS, [id=#97376]\n      :     :  :                 +- *(14) HashAggregate(keys=[ca_county#71110, d_qoy#71085, d_year#71081], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#71067))], output=[ca_county#71110, d_qoy#71085, d_year#71081, sum#71362L])\n      :     :  :                    +- *(14) Project [ss_ext_sales_price#71067, d_year#71081, d_qoy#71085, ca_county#71110]\n      :     :  :                       +- *(14) BroadcastHashJoin [ss_addr_sk#71058], [ca_address_sk#71103], Inner, BuildRight, false\n      :     :  :                          :- *(14) Project [ss_addr_sk#71058, ss_ext_sales_price#71067, d_year#71081, d_qoy#71085]\n      :     :  :                          :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#71052], [d_date_sk#71075], Inner, BuildRight, false\n      :     :  :                          :     :- *(14) Filter (isnotnull(ss_sold_date_sk#71052) AND isnotnull(ss_addr_sk#71058))\n      :     :  :                          :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#71052, ss_addr_sk#71058, ss_ext_sales_price#71067], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#71052, ss_sold_time_sk#71053, ss_item_sk#71054, ss_customer_sk#71055, ss_cdemo_s..., Partition Cols: []]\n      :     :  :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97157]\n      :     :  :                          :        +- *(12) Filter ((((isnotnull(d_qoy#71085) AND isnotnull(d_year#71081)) AND (d_qoy#71085 = 3)) AND (d_year#71081 = 2000)) AND isnotnull(d_date_sk#71075))\n      :     :  :                          :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#71075, d_year#71081, d_qoy#71085], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#71075, d_date_id#71076, d_date#71077, d_month_seq#71078, d_week_seq#71079, d_quarter_s..., Partition Cols: []]\n      :     :  :                          +- ReusedExchange [ca_address_sk#71103, ca_county#71110], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97107]\n      :     :  +- *(22) Sort [ca_county#71185 ASC NULLS FIRST], false, 0\n      :     :     +- Exchange hashpartitioning(ca_county#71185, 200), ENSURE_REQUIREMENTS, [id=#97465]\n      :     :        +- *(21) HashAggregate(keys=[ca_county#71185, d_qoy#71160, d_year#71156], functions=[sum(UnscaledValue(ws_ext_sales_price#71139))], output=[ca_county#71185, web_sales#70923])\n      :     :           +- Exchange hashpartitioning(ca_county#71185, d_qoy#71160, d_year#71156, 200), ENSURE_REQUIREMENTS, [id=#97442]\n      :     :              +- *(20) HashAggregate(keys=[ca_county#71185, d_qoy#71160, d_year#71156], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#71139))], output=[ca_county#71185, d_qoy#71160, d_year#71156, sum#71364L])\n      :     :                 +- *(20) Project [ws_ext_sales_price#71139, d_year#71156, d_qoy#71160, ca_county#71185]\n      :     :                    +- *(20) BroadcastHashJoin [ws_bill_addr_sk#71123], [ca_address_sk#71178], Inner, BuildRight, false\n      :     :                       :- *(20) Project [ws_bill_addr_sk#71123, ws_ext_sales_price#71139, d_year#71156, d_qoy#71160]\n      :     :                       :  +- *(20) BroadcastHashJoin [ws_sold_date_sk#71116], [d_date_sk#71150], Inner, BuildRight, false\n      :     :                       :     :- *(20) Filter (isnotnull(ws_sold_date_sk#71116) AND isnotnull(ws_bill_addr_sk#71123))\n      :     :                       :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#71116, ws_bill_addr_sk#71123, ws_ext_sales_price#71139], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#71116, ws_sold_time_sk#71117, ws_ship_date_sk#71118, ws_item_sk#71119, ws_bill_c..., Partition Cols: []]\n      :     :                       :     +- ReusedExchange [d_date_sk#71150, d_year#71156, d_qoy#71160], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97100]\n      :     :                       +- ReusedExchange [ca_address_sk#71178, ca_county#71185], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97107]\n      :     +- *(28) Sort [ca_county#71260 ASC NULLS FIRST], false, 0\n      :        +- Exchange hashpartitioning(ca_county#71260, 200), ENSURE_REQUIREMENTS, [id=#97518]\n      :           +- *(27) HashAggregate(keys=[ca_county#71260, d_qoy#71235, d_year#71231], functions=[sum(UnscaledValue(ws_ext_sales_price#71214))], output=[ca_county#71260, web_sales#71349])\n      :              +- Exchange hashpartitioning(ca_county#71260, d_qoy#71235, d_year#71231, 200), ENSURE_REQUIREMENTS, [id=#97495]\n      :                 +- *(26) HashAggregate(keys=[ca_county#71260, d_qoy#71235, d_year#71231], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#71214))], output=[ca_county#71260, d_qoy#71235, d_year#71231, sum#71366L])\n      :                    +- *(26) Project [ws_ext_sales_price#71214, d_year#71231, d_qoy#71235, ca_county#71260]\n      :                       +- *(26) BroadcastHashJoin [ws_bill_addr_sk#71198], [ca_address_sk#71253], Inner, BuildRight, false\n      :                          :- *(26) Project [ws_bill_addr_sk#71198, ws_ext_sales_price#71214, d_year#71231, d_qoy#71235]\n      :                          :  +- *(26) BroadcastHashJoin [ws_sold_date_sk#71191], [d_date_sk#71225], Inner, BuildRight, false\n      :                          :     :- *(26) Filter (isnotnull(ws_sold_date_sk#71191) AND isnotnull(ws_bill_addr_sk#71198))\n      :                          :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#71191, ws_bill_addr_sk#71198, ws_ext_sales_price#71214], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#71191, ws_sold_time_sk#71192, ws_ship_date_sk#71193, ws_item_sk#71194, ws_bill_c..., Partition Cols: []]\n      :                          :     +- ReusedExchange [d_date_sk#71225, d_year#71231, d_qoy#71235], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97127]\n      :                          +- ReusedExchange [ca_address_sk#71253, ca_county#71260], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97107]\n      +- *(34) Sort [ca_county#71335 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(ca_county#71335, 200), ENSURE_REQUIREMENTS, [id=#97584]\n            +- *(33) HashAggregate(keys=[ca_county#71335, d_qoy#71310, d_year#71306], functions=[sum(UnscaledValue(ws_ext_sales_price#71289))], output=[ca_county#71335, web_sales#71350])\n               +- Exchange hashpartitioning(ca_county#71335, d_qoy#71310, d_year#71306, 200), ENSURE_REQUIREMENTS, [id=#97561]\n                  +- *(32) HashAggregate(keys=[ca_county#71335, d_qoy#71310, d_year#71306], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#71289))], output=[ca_county#71335, d_qoy#71310, d_year#71306, sum#71368L])\n                     +- *(32) Project [ws_ext_sales_price#71289, d_year#71306, d_qoy#71310, ca_county#71335]\n                        +- *(32) BroadcastHashJoin [ws_bill_addr_sk#71273], [ca_address_sk#71328], Inner, BuildRight, false\n                           :- *(32) Project [ws_bill_addr_sk#71273, ws_ext_sales_price#71289, d_year#71306, d_qoy#71310]\n                           :  +- *(32) BroadcastHashJoin [ws_sold_date_sk#71266], [d_date_sk#71300], Inner, BuildRight, false\n                           :     :- *(32) Filter (isnotnull(ws_sold_date_sk#71266) AND isnotnull(ws_bill_addr_sk#71273))\n                           :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#71266, ws_bill_addr_sk#71273, ws_ext_sales_price#71289], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#71266, ws_sold_time_sk#71267, ws_ship_date_sk#71268, ws_item_sk#71269, ws_bill_c..., Partition Cols: []]\n                           :     +- ReusedExchange [d_date_sk#71300, d_year#71306, d_qoy#71310], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97157]\n                           +- ReusedExchange [ca_address_sk#71328, ca_county#71335], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#97107]\n",
    "iteration" : 3,
    "name" : "q31"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#97786]\n+- *(8) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(cs_ext_discount_amt#71416))], output=[sum#71545L])\n   +- *(8) Project [cs_ext_discount_amt#71416]\n      +- *(8) BroadcastHashJoin [cs_sold_date_sk#71394], [d_date_sk#71450], Inner, BuildRight, false\n         :- *(8) Project [cs_sold_date_sk#71394, cs_ext_discount_amt#71416]\n         :  +- *(8) SortMergeJoin [i_item_sk#71428], [cs_item_sk#71493], Inner, (cast(cs_ext_discount_amt#71416 as decimal(14,7)) > (CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#71541)\n         :     :- *(3) Sort [i_item_sk#71428 ASC NULLS FIRST], false, 0\n         :     :  +- Exchange hashpartitioning(i_item_sk#71428, 200), ENSURE_REQUIREMENTS, [id=#97724]\n         :     :     +- *(2) Project [cs_sold_date_sk#71394, cs_ext_discount_amt#71416, i_item_sk#71428]\n         :     :        +- *(2) BroadcastHashJoin [cs_item_sk#71409], [i_item_sk#71428], Inner, BuildRight, false\n         :     :           :- *(2) Filter ((isnotnull(cs_item_sk#71409) AND isnotnull(cs_ext_discount_amt#71416)) AND isnotnull(cs_sold_date_sk#71394))\n         :     :           :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#71394, cs_item_sk#71409, cs_ext_discount_amt#71416], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#71394, cs_sold_time_sk#71395, cs_ship_date_sk#71396, cs_bill_customer_sk#71397, ..., Partition Cols: []]\n         :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#97719]\n         :     :              +- *(1) Project [i_item_sk#71428]\n         :     :                 +- *(1) Filter ((isnotnull(i_manufact_id#71441) AND (i_manufact_id#71441 = 490)) AND isnotnull(i_item_sk#71428))\n         :     :                    +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#71428, i_manufact_id#71441], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#71428, i_item_id#71429, i_rec_start_date#71430, i_rec_end_date#71431, i_item_desc#7143..., Partition Cols: []]\n         :     +- *(6) Sort [cs_item_sk#71493 ASC NULLS FIRST], false, 0\n         :        +- *(6) Filter isnotnull((CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#71541)\n         :           +- *(6) HashAggregate(keys=[cs_item_sk#71493], functions=[avg(UnscaledValue(cs_ext_discount_amt#71500))], output=[(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(cs_ext_discount_amt) AS DECIMAL(11,6)))#71541, cs_item_sk#71493])\n         :              +- Exchange hashpartitioning(cs_item_sk#71493, 200), ENSURE_REQUIREMENTS, [id=#97741]\n         :                 +- *(5) HashAggregate(keys=[cs_item_sk#71493], functions=[partial_avg(UnscaledValue(cs_ext_discount_amt#71500))], output=[cs_item_sk#71493, sum#71548, count#71549L])\n         :                    +- *(5) Project [cs_item_sk#71493, cs_ext_discount_amt#71500]\n         :                       +- *(5) BroadcastHashJoin [cs_sold_date_sk#71478], [d_date_sk#71512], Inner, BuildRight, false\n         :                          :- *(5) Filter (isnotnull(cs_sold_date_sk#71478) AND isnotnull(cs_item_sk#71493))\n         :                          :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#71478, cs_item_sk#71493, cs_ext_discount_amt#71500], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#71478, cs_sold_time_sk#71479, cs_ship_date_sk#71480, cs_bill_customer_sk#71481, ..., Partition Cols: []]\n         :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#97735]\n         :                             +- *(4) Project [d_date_sk#71512]\n         :                                +- *(4) Filter (((isnotnull(d_date#71514) AND (d_date#71514 >= 10618)) AND (d_date#71514 <= 10708)) AND isnotnull(d_date_sk#71512))\n         :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#71514, d_date_sk#71512], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#71512, d_date_id#71513, d_date#71514, d_month_seq#71515, d_week_seq#71516, d_quarter_s..., Partition Cols: []]\n         +- ReusedExchange [d_date_sk#71450], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#97735]\n",
    "iteration" : 3,
    "name" : "q32"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manufact_id#71636, 200), ENSURE_REQUIREMENTS, [id=#98417]\n+- *(19) HashAggregate(keys=[i_manufact_id#71636], functions=[partial_sum(total_sales#71554)], output=[i_manufact_id#71636, sum#71914, isEmpty#71915])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_manufact_id#71636], functions=[sum(UnscaledValue(ss_ext_sales_price#71574))], output=[i_manufact_id#71636, total_sales#71554])\n      :  +- Exchange hashpartitioning(i_manufact_id#71636, 200), ENSURE_REQUIREMENTS, [id=#98107]\n      :     +- *(5) HashAggregate(keys=[i_manufact_id#71636], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#71574))], output=[i_manufact_id#71636, sum#71917L])\n      :        +- *(5) Project [ss_ext_sales_price#71574, i_manufact_id#71636]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#71561], [i_item_sk#71623], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#71561, ss_ext_sales_price#71574]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#71565], [ca_address_sk#71610], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#71561, ss_addr_sk#71565, ss_ext_sales_price#71574]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#71559], [d_date_sk#71582], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#71559) AND isnotnull(ss_addr_sk#71565)) AND isnotnull(ss_item_sk#71561))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#71559, ss_item_sk#71561, ss_addr_sk#71565, ss_ext_sales_price#71574], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#71559, ss_sold_time_sk#71560, ss_item_sk#71561, ss_customer_sk#71562, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98079]\n      :              :     :        +- *(1) Project [d_date_sk#71582]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#71588) AND isnotnull(d_moy#71590)) AND (d_year#71588 = 2001)) AND (d_moy#71590 = 1)) AND isnotnull(d_date_sk#71582))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#71582, d_moy#71590, d_year#71588], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#71582, d_date_id#71583, d_date#71584, d_month_seq#71585, d_week_seq#71586, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98087]\n      :              :        +- *(2) Project [ca_address_sk#71610]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#71621) AND (ca_gmt_offset#71621 = -6.00)) AND isnotnull(ca_address_sk#71610))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#71610, ca_gmt_offset#71621], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#71610, ca_address_id#71611, ca_street_number#71612, ca_street_name#71613, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98101]\n      :                 +- *(4) BroadcastHashJoin [i_manufact_id#71636], [i_manufact_id#71852], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#71623)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#71623, i_manufact_id#71636], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#71623, i_item_id#71624, i_rec_start_date#71625, i_rec_end_date#71626, i_item_desc#7162..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98097]\n      :                       +- *(3) Project [i_manufact_id#71852]\n      :                          +- *(3) Filter (isnotnull(i_category#71851) AND (i_category#71851 = Electronics))\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_category#71851, i_manufact_id#71852], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#71839, i_item_id#71840, i_rec_start_date#71841, i_rec_end_date#71842, i_item_desc#7184..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_manufact_id#71733], functions=[sum(UnscaledValue(cs_ext_sales_price#71668))], output=[i_manufact_id#71733, total_sales#71556])\n      :  +- Exchange hashpartitioning(i_manufact_id#71733, 200), ENSURE_REQUIREMENTS, [id=#98281]\n      :     +- *(11) HashAggregate(keys=[i_manufact_id#71733], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#71668))], output=[i_manufact_id#71733, sum#71919L])\n      :        +- *(11) Project [cs_ext_sales_price#71668, i_manufact_id#71733]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#71660], [i_item_sk#71720], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#71660, cs_ext_sales_price#71668]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#71651], [ca_address_sk#71707], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#71651, cs_item_sk#71660, cs_ext_sales_price#71668]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#71645], [d_date_sk#71679], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#71645) AND isnotnull(cs_bill_addr_sk#71651)) AND isnotnull(cs_item_sk#71660))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#71645, cs_bill_addr_sk#71651, cs_item_sk#71660, cs_ext_sales_price#71668], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#71645, cs_sold_time_sk#71646, cs_ship_date_sk#71647, cs_bill_customer_sk#71648, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#71679], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98079]\n      :              :     +- ReusedExchange [ca_address_sk#71707], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98087]\n      :              +- ReusedExchange [i_item_sk#71720, i_manufact_id#71733], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98101]\n      +- *(18) HashAggregate(keys=[i_manufact_id#71830], functions=[sum(UnscaledValue(ws_ext_sales_price#71765))], output=[i_manufact_id#71830, total_sales#71558])\n         +- Exchange hashpartitioning(i_manufact_id#71830, 200), ENSURE_REQUIREMENTS, [id=#98385]\n            +- *(17) HashAggregate(keys=[i_manufact_id#71830], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#71765))], output=[i_manufact_id#71830, sum#71921L])\n               +- *(17) Project [ws_ext_sales_price#71765, i_manufact_id#71830]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#71745], [i_item_sk#71817], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#71745, ws_ext_sales_price#71765]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#71749], [ca_address_sk#71804], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#71745, ws_bill_addr_sk#71749, ws_ext_sales_price#71765]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#71742], [d_date_sk#71776], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#71742) AND isnotnull(ws_bill_addr_sk#71749)) AND isnotnull(ws_item_sk#71745))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#71742, ws_item_sk#71745, ws_bill_addr_sk#71749, ws_ext_sales_price#71765], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#71742, ws_sold_time_sk#71743, ws_ship_date_sk#71744, ws_item_sk#71745, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#71776], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98079]\n                     :     +- ReusedExchange [ca_address_sk#71804], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98087]\n                     +- ReusedExchange [i_item_sk#71817, i_manufact_id#71830], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98101]\n",
    "iteration" : 3,
    "name" : "q33"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(c_last_name#72024 ASC NULLS FIRST, c_first_name#72023 ASC NULLS FIRST, c_salutation#72022 ASC NULLS FIRST, c_preferred_cust_flag#72025 DESC NULLS LAST, ss_ticket_number#71939L ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#98567]\n+- *(6) Project [c_last_name#72024, c_first_name#72023, c_salutation#72022, c_preferred_cust_flag#72025, ss_ticket_number#71939L, cnt#71928L]\n   +- *(6) BroadcastHashJoin [ss_customer_sk#71933], [c_customer_sk#72015], Inner, BuildRight, false\n      :- *(6) Filter ((cnt#71928L >= 15) AND (cnt#71928L <= 20))\n      :  +- *(6) HashAggregate(keys=[ss_ticket_number#71939L, ss_customer_sk#71933], functions=[count(1)], output=[ss_ticket_number#71939L, ss_customer_sk#71933, cnt#71928L])\n      :     +- Exchange hashpartitioning(ss_ticket_number#71939L, ss_customer_sk#71933, 200), ENSURE_REQUIREMENTS, [id=#98555]\n      :        +- *(4) HashAggregate(keys=[ss_ticket_number#71939L, ss_customer_sk#71933], functions=[partial_count(1)], output=[ss_ticket_number#71939L, ss_customer_sk#71933, count#72040L])\n      :           +- *(4) Project [ss_customer_sk#71933, ss_ticket_number#71939L]\n      :              +- *(4) BroadcastHashJoin [ss_hdemo_sk#71935], [hd_demo_sk#72010], Inner, BuildRight, false\n      :                 :- *(4) Project [ss_customer_sk#71933, ss_hdemo_sk#71935, ss_ticket_number#71939L]\n      :                 :  +- *(4) BroadcastHashJoin [ss_store_sk#71937], [s_store_sk#71981], Inner, BuildRight, false\n      :                 :     :- *(4) Project [ss_customer_sk#71933, ss_hdemo_sk#71935, ss_store_sk#71937, ss_ticket_number#71939L]\n      :                 :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#71930], [d_date_sk#71953], Inner, BuildRight, false\n      :                 :     :     :- *(4) Filter (((isnotnull(ss_sold_date_sk#71930) AND isnotnull(ss_store_sk#71937)) AND isnotnull(ss_hdemo_sk#71935)) AND isnotnull(ss_customer_sk#71933))\n      :                 :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#71930, ss_customer_sk#71933, ss_hdemo_sk#71935, ss_store_sk#71937, ss_ticket_number#71939L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#71930, ss_sold_time_sk#71931, ss_item_sk#71932, ss_customer_sk#71933, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98533]\n      :                 :     :        +- *(1) Project [d_date_sk#71953]\n      :                 :     :           +- *(1) Filter (((((d_dom#71962 >= 1) AND (d_dom#71962 <= 3)) OR ((d_dom#71962 >= 25) AND (d_dom#71962 <= 28))) AND d_year#71959 IN (1999,2000,2001)) AND isnotnull(d_date_sk#71953))\n      :                 :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#71953, d_dom#71962, d_year#71959], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#71953, d_date_id#71954, d_date#71955, d_month_seq#71956, d_week_seq#71957, d_quarter_s..., Partition Cols: []]\n      :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98541]\n      :                 :        +- *(2) Project [s_store_sk#71981]\n      :                 :           +- *(2) Filter (s_county#72004 IN (Nez Perce County,Murray County,Surry County,Calhoun County,Wilkinson County,Brown County,Wallace County,Carter County) AND isnotnull(s_store_sk#71981))\n      :                 :              +- Scan hive tpcds_sf1_iceberg.store [s_county#72004, s_store_sk#71981], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#71981, s_store_id#71982, s_rec_start_date#71983, s_rec_end_date#71984, s_closed_date_..., Partition Cols: []]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98549]\n      :                    +- *(3) Project [hd_demo_sk#72010]\n      :                       +- *(3) Filter ((((isnotnull(hd_vehicle_count#72014) AND ((hd_buy_potential#72012 = 1001-5000) OR (hd_buy_potential#72012 = Unknown))) AND (hd_vehicle_count#72014 > 0)) AND (CASE WHEN (hd_vehicle_count#72014 > 0) THEN (cast(hd_dep_count#72013 as double) / cast(hd_vehicle_count#72014 as double)) ELSE null END > 1.2)) AND isnotnull(hd_demo_sk#72010))\n      :                          +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#72012, hd_demo_sk#72010, hd_dep_count#72013, hd_vehicle_count#72014], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#72010, hd_income_band_sk#72011, hd_buy_potential#72012, hd_dep_count#72013, hd_vehicl..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98562]\n         +- *(5) Filter isnotnull(c_customer_sk#72015)\n            +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#72015, c_salutation#72022, c_first_name#72023, c_last_name#72024, c_preferred_cust_flag#72025], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#72015, c_customer_id#72016, c_current_cdemo_sk#72017, c_current_hdemo_sk#72018, c_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q34"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_state#72083, cd_gender#72089, cd_marital_status#72090, cd_dep_count#72094, cd_dep_employed_count#72095, cd_dep_college_count#72096, 200), ENSURE_REQUIREMENTS, [id=#98873]\n+- *(14) HashAggregate(keys=[ca_state#72083, cd_gender#72089, cd_marital_status#72090, cd_dep_count#72094, cd_dep_employed_count#72095, cd_dep_college_count#72096], functions=[partial_count(1), partial_stddev_samp(cast(cd_dep_count#72094 as double)), partial_sum(cast(cd_dep_count#72094 as bigint)), partial_min(cd_dep_count#72094), partial_stddev_samp(cast(cd_dep_employed_count#72095 as double)), partial_sum(cast(cd_dep_employed_count#72095 as bigint)), partial_min(cd_dep_employed_count#72095), partial_stddev_samp(cast(cd_dep_college_count#72096 as double)), partial_sum(cast(cd_dep_college_count#72096 as bigint)), partial_min(cd_dep_college_count#72096)], output=[ca_state#72083, cd_gender#72089, cd_marital_status#72090, cd_dep_count#72094, cd_dep_employed_count#72095, cd_dep_college_count#72096, count#72483L, n#72413, avg#72414, m2#72415, sum#72484L, min#72485, n#72421, avg#72422, m2#72423, sum#72486L, min#72487, n#72429, avg#72430, m2#72431, sum#72488L, min#72489])\n   +- *(14) Project [ca_state#72083, cd_gender#72089, cd_marital_status#72090, cd_dep_count#72094, cd_dep_employed_count#72095, cd_dep_college_count#72096]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#72059], [cd_demo_sk#72088], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#72059, ca_state#72083]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#72061], [ca_address_sk#72075], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#72059, c_current_addr_sk#72061]\n         :     :  +- *(14) Filter (exists#72450 OR exists#72451)\n         :     :     +- SortMergeJoin [c_customer_sk#72057], [cs_ship_customer_sk#72217], ExistenceJoin(exists#72451)\n         :     :        :- SortMergeJoin [c_customer_sk#72057], [ws_bill_customer_sk#72152], ExistenceJoin(exists#72450)\n         :     :        :  :- SortMergeJoin [c_customer_sk#72057], [ss_customer_sk#72100], LeftSemi\n         :     :        :  :  :- *(2) Sort [c_customer_sk#72057 ASC NULLS FIRST], false, 0\n         :     :        :  :  :  +- Exchange hashpartitioning(c_customer_sk#72057, 200), ENSURE_REQUIREMENTS, [id=#98744]\n         :     :        :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#72061) AND isnotnull(c_current_cdemo_sk#72059))\n         :     :        :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#72057, c_current_cdemo_sk#72059, c_current_addr_sk#72061], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#72057, c_customer_id#72058, c_current_cdemo_sk#72059, c_current_hdemo_sk#72060, c_..., Partition Cols: []]\n         :     :        :  :  +- *(5) Sort [ss_customer_sk#72100 ASC NULLS FIRST], false, 0\n         :     :        :  :     +- Exchange hashpartitioning(ss_customer_sk#72100, 200), ENSURE_REQUIREMENTS, [id=#98759]\n         :     :        :  :        +- *(4) Project [ss_customer_sk#72100]\n         :     :        :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#72097], [d_date_sk#72120], Inner, BuildRight, false\n         :     :        :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#72097)\n         :     :        :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#72097, ss_customer_sk#72100], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#72097, ss_sold_time_sk#72098, ss_item_sk#72099, ss_customer_sk#72100, ss_cdemo_s..., Partition Cols: []]\n         :     :        :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98754]\n         :     :        :  :                 +- *(3) Project [d_date_sk#72120]\n         :     :        :  :                    +- *(3) Filter ((((isnotnull(d_year#72126) AND isnotnull(d_qoy#72130)) AND (d_year#72126 = 2002)) AND (d_qoy#72130 < 4)) AND isnotnull(d_date_sk#72120))\n         :     :        :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#72120, d_qoy#72130, d_year#72126], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#72120, d_date_id#72121, d_date#72122, d_month_seq#72123, d_week_seq#72124, d_quarter_s..., Partition Cols: []]\n         :     :        :  +- *(8) Sort [ws_bill_customer_sk#72152 ASC NULLS FIRST], false, 0\n         :     :        :     +- Exchange hashpartitioning(ws_bill_customer_sk#72152, 200), ENSURE_REQUIREMENTS, [id=#98841]\n         :     :        :        +- *(7) Project [ws_bill_customer_sk#72152]\n         :     :        :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#72148], [d_date_sk#72182], Inner, BuildRight, false\n         :     :        :              :- *(7) Filter isnotnull(ws_sold_date_sk#72148)\n         :     :        :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#72148, ws_bill_customer_sk#72152], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#72148, ws_sold_time_sk#72149, ws_ship_date_sk#72150, ws_item_sk#72151, ws_bill_c..., Partition Cols: []]\n         :     :        :              +- ReusedExchange [d_date_sk#72182], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98754]\n         :     :        +- *(11) Sort [cs_ship_customer_sk#72217 ASC NULLS FIRST], false, 0\n         :     :           +- Exchange hashpartitioning(cs_ship_customer_sk#72217, 200), ENSURE_REQUIREMENTS, [id=#98859]\n         :     :              +- *(10) Project [cs_ship_customer_sk#72217]\n         :     :                 +- *(10) BroadcastHashJoin [cs_sold_date_sk#72210], [d_date_sk#72244], Inner, BuildRight, false\n         :     :                    :- *(10) Filter isnotnull(cs_sold_date_sk#72210)\n         :     :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#72210, cs_ship_customer_sk#72217], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#72210, cs_sold_time_sk#72211, cs_ship_date_sk#72212, cs_bill_customer_sk#72213, ..., Partition Cols: []]\n         :     :                    +- ReusedExchange [d_date_sk#72244], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98754]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98802]\n         :        +- *(12) Filter isnotnull(ca_address_sk#72075)\n         :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#72075, ca_state#72083], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#72075, ca_address_id#72076, ca_street_number#72077, ca_street_name#72078, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98809]\n            +- *(13) Filter isnotnull(cd_demo_sk#72088)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#72088, cd_gender#72089, cd_marital_status#72090, cd_dep_count#72094, cd_dep_employed_count#72095, cd_dep_college_count#72096], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#72088, cd_gender#72089, cd_marital_status#72090, cd_education_status#72091, cd_purcha..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q35"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#72637, _w2#72638, 200), ENSURE_REQUIREMENTS, [id=#99005]\n+- *(5) HashAggregate(keys=[i_category#72623, i_class#72624, spark_grouping_id#72622L], functions=[sum(UnscaledValue(ss_net_profit#72536)), sum(UnscaledValue(ss_ext_sales_price#72529))], output=[gross_margin#72509, i_category#72623, i_class#72624, lochierarchy#72510, _w1#72637, _w2#72638, _w3#72639])\n   +- Exchange hashpartitioning(i_category#72623, i_class#72624, spark_grouping_id#72622L, 200), ENSURE_REQUIREMENTS, [id=#99001]\n      +- *(4) HashAggregate(keys=[i_category#72623, i_class#72624, spark_grouping_id#72622L], functions=[partial_sum(UnscaledValue(ss_net_profit#72536)), partial_sum(UnscaledValue(ss_ext_sales_price#72529))], output=[i_category#72623, i_class#72624, spark_grouping_id#72622L, sum#72656L, sum#72657L])\n         +- *(4) Expand [List(ss_ext_sales_price#72529, ss_net_profit#72536, i_category#72577, i_class#72575, 0), List(ss_ext_sales_price#72529, ss_net_profit#72536, i_category#72577, null, 1), List(ss_ext_sales_price#72529, ss_net_profit#72536, null, null, 3)], [ss_ext_sales_price#72529, ss_net_profit#72536, i_category#72623, i_class#72624, spark_grouping_id#72622L]\n            +- *(4) Project [ss_ext_sales_price#72529, ss_net_profit#72536, i_category#72577, i_class#72575]\n               +- *(4) BroadcastHashJoin [ss_store_sk#72521], [s_store_sk#72587], Inner, BuildRight, false\n                  :- *(4) Project [ss_store_sk#72521, ss_ext_sales_price#72529, ss_net_profit#72536, i_class#72575, i_category#72577]\n                  :  +- *(4) BroadcastHashJoin [ss_item_sk#72516], [i_item_sk#72565], Inner, BuildRight, false\n                  :     :- *(4) Project [ss_item_sk#72516, ss_store_sk#72521, ss_ext_sales_price#72529, ss_net_profit#72536]\n                  :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#72514], [d_date_sk#72537], Inner, BuildRight, false\n                  :     :     :- *(4) Filter ((isnotnull(ss_sold_date_sk#72514) AND isnotnull(ss_item_sk#72516)) AND isnotnull(ss_store_sk#72521))\n                  :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#72514, ss_item_sk#72516, ss_store_sk#72521, ss_ext_sales_price#72529, ss_net_profit#72536], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#72514, ss_sold_time_sk#72515, ss_item_sk#72516, ss_customer_sk#72517, ss_cdemo_s..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98979]\n                  :     :        +- *(1) Project [d_date_sk#72537]\n                  :     :           +- *(1) Filter ((isnotnull(d_year#72543) AND (d_year#72543 = 2000)) AND isnotnull(d_date_sk#72537))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#72537, d_year#72543], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#72537, d_date_id#72538, d_date#72539, d_month_seq#72540, d_week_seq#72541, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#98986]\n                  :        +- *(2) Filter isnotnull(i_item_sk#72565)\n                  :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#72565, i_class#72575, i_category#72577], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#72565, i_item_id#72566, i_rec_start_date#72567, i_rec_end_date#72568, i_item_desc#7256..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#98994]\n                     +- *(3) Project [s_store_sk#72587]\n                        +- *(3) Filter (s_state#72611 IN (MN,TX,IN,CA,LA,NM) AND isnotnull(s_store_sk#72587))\n                           +- Scan hive tpcds_sf1_iceberg.store [s_state#72611, s_store_sk#72587], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#72587, s_store_id#72588, s_rec_start_date#72589, s_rec_end_date#72590, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q36"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#72665, i_item_desc#72668, i_current_price#72669, 200), ENSURE_REQUIREMENTS, [id=#99121]\n+- *(4) HashAggregate(keys=[i_item_id#72665, i_item_desc#72668, i_current_price#72669], functions=[], output=[i_item_id#72665, i_item_desc#72668, i_current_price#72669])\n   +- *(4) Project [i_item_id#72665, i_item_desc#72668, i_current_price#72669]\n      +- *(4) BroadcastHashJoin [i_item_sk#72664], [cs_item_sk#72733], Inner, BuildRight, false\n         :- *(4) Project [i_item_sk#72664, i_item_id#72665, i_item_desc#72668, i_current_price#72669]\n         :  +- *(4) BroadcastHashJoin [inv_date_sk#72686], [d_date_sk#72690], Inner, BuildRight, false\n         :     :- *(4) Project [i_item_sk#72664, i_item_id#72665, i_item_desc#72668, i_current_price#72669, inv_date_sk#72686]\n         :     :  +- *(4) BroadcastHashJoin [i_item_sk#72664], [inv_item_sk#72687], Inner, BuildLeft, false\n         :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#99097]\n         :     :     :  +- *(1) Project [i_item_sk#72664, i_item_id#72665, i_item_desc#72668, i_current_price#72669]\n         :     :     :     +- *(1) Filter ((((isnotnull(i_current_price#72669) AND (i_current_price#72669 >= 16.00)) AND (i_current_price#72669 <= 46.00)) AND i_manufact_id#72677 IN (841,790,796,739)) AND isnotnull(i_item_sk#72664))\n         :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_current_price#72669, i_item_desc#72668, i_item_id#72665, i_item_sk#72664, i_manufact_id#72677], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#72664, i_item_id#72665, i_rec_start_date#72666, i_rec_end_date#72667, i_item_desc#7266..., Partition Cols: []]\n         :     :     +- *(4) Project [inv_date_sk#72686, inv_item_sk#72687]\n         :     :        +- *(4) Filter ((((isnotnull(inv_quantity_on_hand#72689) AND (inv_quantity_on_hand#72689 >= 100)) AND (inv_quantity_on_hand#72689 <= 500)) AND isnotnull(inv_item_sk#72687)) AND isnotnull(inv_date_sk#72686))\n         :     :           +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#72686, inv_item_sk#72687, inv_quantity_on_hand#72689], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#72686, inv_item_sk#72687, inv_warehouse_sk#72688, inv_quantity_on_hand#72689], Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#99108]\n         :        +- *(2) Project [d_date_sk#72690]\n         :           +- *(2) Filter (((isnotnull(d_date#72692) AND (d_date#72692 >= 11843)) AND (d_date#72692 <= 11903)) AND isnotnull(d_date_sk#72690))\n         :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#72692, d_date_sk#72690], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#72690, d_date_id#72691, d_date#72692, d_month_seq#72693, d_week_seq#72694, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99115]\n            +- *(3) Filter isnotnull(cs_item_sk#72733)\n               +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#72733], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#72718, cs_sold_time_sk#72719, cs_ship_date_sk#72720, cs_bill_customer_sk#72721, ..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q37"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#99623]\n+- *(16) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#72992L])\n   +- *(16) HashAggregate(keys=[c_last_name#72820, c_first_name#72819, d_date#72785], functions=[], output=[])\n      +- *(16) HashAggregate(keys=[c_last_name#72820, c_first_name#72819, d_date#72785], functions=[], output=[c_last_name#72820, c_first_name#72819, d_date#72785])\n         +- *(16) HashAggregate(keys=[c_last_name#72820, c_first_name#72819, d_date#72785], functions=[], output=[c_last_name#72820, c_first_name#72819, d_date#72785])\n            +- *(16) HashAggregate(keys=[c_last_name#72820, c_first_name#72819, d_date#72785], functions=[], output=[c_last_name#72820, c_first_name#72819, d_date#72785])\n               +- *(16) HashAggregate(keys=[c_last_name#72820, c_first_name#72819, d_date#72785], functions=[], output=[c_last_name#72820, c_first_name#72819, d_date#72785])\n                  +- Exchange hashpartitioning(c_last_name#72820, c_first_name#72819, d_date#72785, 200), ENSURE_REQUIREMENTS, [id=#99575]\n                     +- *(15) HashAggregate(keys=[c_last_name#72820, c_first_name#72819, d_date#72785], functions=[], output=[c_last_name#72820, c_first_name#72819, d_date#72785])\n                        +- SortMergeJoin [coalesce(c_last_name#72820, ), isnull(c_last_name#72820), coalesce(c_first_name#72819, ), isnull(c_first_name#72819), coalesce(d_date#72785, 0), isnull(d_date#72785)], [coalesce(c_last_name#72980, ), isnull(c_last_name#72980), coalesce(c_first_name#72979, ), isnull(c_first_name#72979), coalesce(d_date#72945, 0), isnull(d_date#72945)], LeftSemi\n                           :- SortMergeJoin [coalesce(c_last_name#72820, ), isnull(c_last_name#72820), coalesce(c_first_name#72819, ), isnull(c_first_name#72819), coalesce(d_date#72785, 0), isnull(d_date#72785)], [coalesce(c_last_name#72900, ), isnull(c_last_name#72900), coalesce(c_first_name#72899, ), isnull(c_first_name#72899), coalesce(d_date#72865, 0), isnull(d_date#72865)], LeftSemi\n                           :  :- *(4) Sort [coalesce(c_last_name#72820, ) ASC NULLS FIRST, isnull(c_last_name#72820) ASC NULLS FIRST, coalesce(c_first_name#72819, ) ASC NULLS FIRST, isnull(c_first_name#72819) ASC NULLS FIRST, coalesce(d_date#72785, 0) ASC NULLS FIRST, isnull(d_date#72785) ASC NULLS FIRST], false, 0\n                           :  :  +- Exchange hashpartitioning(coalesce(c_last_name#72820, ), isnull(c_last_name#72820), coalesce(c_first_name#72819, ), isnull(c_first_name#72819), coalesce(d_date#72785, 0), isnull(d_date#72785), 200), ENSURE_REQUIREMENTS, [id=#99366]\n                           :  :     +- *(3) Project [d_date#72785, c_first_name#72819, c_last_name#72820]\n                           :  :        +- *(3) BroadcastHashJoin [ss_customer_sk#72763], [c_customer_sk#72811], Inner, BuildRight, false\n                           :  :           :- *(3) Project [ss_customer_sk#72763, d_date#72785]\n                           :  :           :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#72760], [d_date_sk#72783], Inner, BuildRight, false\n                           :  :           :     :- *(3) Filter (isnotnull(ss_sold_date_sk#72760) AND isnotnull(ss_customer_sk#72763))\n                           :  :           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#72760, ss_customer_sk#72763], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#72760, ss_sold_time_sk#72761, ss_item_sk#72762, ss_customer_sk#72763, ss_cdemo_s..., Partition Cols: []]\n                           :  :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#99354]\n                           :  :           :        +- *(1) Project [d_date_sk#72783, d_date#72785]\n                           :  :           :           +- *(1) Filter (((isnotnull(d_month_seq#72786) AND (d_month_seq#72786 >= 1203)) AND (d_month_seq#72786 <= 1214)) AND isnotnull(d_date_sk#72783))\n                           :  :           :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#72785, d_date_sk#72783, d_month_seq#72786], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#72783, d_date_id#72784, d_date#72785, d_month_seq#72786, d_week_seq#72787, d_quarter_s..., Partition Cols: []]\n                           :  :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99361]\n                           :  :              +- *(2) Filter isnotnull(c_customer_sk#72811)\n                           :  :                 +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#72811, c_first_name#72819, c_last_name#72820], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#72811, c_customer_id#72812, c_current_cdemo_sk#72813, c_current_hdemo_sk#72814, c_..., Partition Cols: []]\n                           :  +- *(9) Sort [coalesce(c_last_name#72900, ) ASC NULLS FIRST, isnull(c_last_name#72900) ASC NULLS FIRST, coalesce(c_first_name#72899, ) ASC NULLS FIRST, isnull(c_first_name#72899) ASC NULLS FIRST, coalesce(d_date#72865, 0) ASC NULLS FIRST, isnull(d_date#72865) ASC NULLS FIRST], false, 0\n                           :     +- Exchange hashpartitioning(coalesce(c_last_name#72900, ), isnull(c_last_name#72900), coalesce(c_first_name#72899, ), isnull(c_first_name#72899), coalesce(d_date#72865, 0), isnull(d_date#72865), 200), ENSURE_REQUIREMENTS, [id=#99484]\n                           :        +- *(8) HashAggregate(keys=[c_last_name#72900, c_first_name#72899, d_date#72865], functions=[], output=[c_last_name#72900, c_first_name#72899, d_date#72865])\n                           :           +- Exchange hashpartitioning(c_last_name#72900, c_first_name#72899, d_date#72865, 200), ENSURE_REQUIREMENTS, [id=#99480]\n                           :              +- *(7) HashAggregate(keys=[c_last_name#72900, c_first_name#72899, d_date#72865], functions=[], output=[c_last_name#72900, c_first_name#72899, d_date#72865])\n                           :                 +- *(7) Project [c_last_name#72900, c_first_name#72899, d_date#72865]\n                           :                    +- *(7) BroadcastHashJoin [cs_bill_customer_sk#72832], [c_customer_sk#72891], Inner, BuildRight, false\n                           :                       :- *(7) Project [cs_bill_customer_sk#72832, d_date#72865]\n                           :                       :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#72829], [d_date_sk#72863], Inner, BuildRight, false\n                           :                       :     :- *(7) Filter (isnotnull(cs_sold_date_sk#72829) AND isnotnull(cs_bill_customer_sk#72832))\n                           :                       :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#72829, cs_bill_customer_sk#72832], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#72829, cs_sold_time_sk#72830, cs_ship_date_sk#72831, cs_bill_customer_sk#72832, ..., Partition Cols: []]\n                           :                       :     +- ReusedExchange [d_date_sk#72863, d_date#72865], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#99354]\n                           :                       +- ReusedExchange [c_customer_sk#72891, c_first_name#72899, c_last_name#72900], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99361]\n                           +- *(14) Sort [coalesce(c_last_name#72980, ) ASC NULLS FIRST, isnull(c_last_name#72980) ASC NULLS FIRST, coalesce(c_first_name#72979, ) ASC NULLS FIRST, isnull(c_first_name#72979) ASC NULLS FIRST, coalesce(d_date#72945, 0) ASC NULLS FIRST, isnull(d_date#72945) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(c_last_name#72980, ), isnull(c_last_name#72980), coalesce(c_first_name#72979, ), isnull(c_first_name#72979), coalesce(d_date#72945, 0), isnull(d_date#72945), 200), ENSURE_REQUIREMENTS, [id=#99561]\n                                 +- *(13) HashAggregate(keys=[c_last_name#72980, c_first_name#72979, d_date#72945], functions=[], output=[c_last_name#72980, c_first_name#72979, d_date#72945])\n                                    +- Exchange hashpartitioning(c_last_name#72980, c_first_name#72979, d_date#72945, 200), ENSURE_REQUIREMENTS, [id=#99538]\n                                       +- *(12) HashAggregate(keys=[c_last_name#72980, c_first_name#72979, d_date#72945], functions=[], output=[c_last_name#72980, c_first_name#72979, d_date#72945])\n                                          +- *(12) Project [c_last_name#72980, c_first_name#72979, d_date#72945]\n                                             +- *(12) BroadcastHashJoin [ws_bill_customer_sk#72913], [c_customer_sk#72971], Inner, BuildRight, false\n                                                :- *(12) Project [ws_bill_customer_sk#72913, d_date#72945]\n                                                :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#72909], [d_date_sk#72943], Inner, BuildRight, false\n                                                :     :- *(12) Filter (isnotnull(ws_sold_date_sk#72909) AND isnotnull(ws_bill_customer_sk#72913))\n                                                :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#72909, ws_bill_customer_sk#72913], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#72909, ws_sold_time_sk#72910, ws_ship_date_sk#72911, ws_item_sk#72912, ws_bill_c..., Partition Cols: []]\n                                                :     +- ReusedExchange [d_date_sk#72943, d_date#72945], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#99354]\n                                                +- ReusedExchange [c_customer_sk#72971, c_first_name#72979, c_last_name#72980], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99361]\n",
    "iteration" : 3,
    "name" : "q38"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(w_warehouse_sk#73024 ASC NULLS FIRST, i_item_sk#73002 ASC NULLS FIRST, d_moy#73046 ASC NULLS FIRST, mean#72996 ASC NULLS FIRST, cov#72997 ASC NULLS FIRST, d_moy#73114 ASC NULLS FIRST, mean#73188 ASC NULLS FIRST, cov#73186 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#100021]\n+- *(13) SortMergeJoin [i_item_sk#73002, w_warehouse_sk#73024], [i_item_sk#73070, w_warehouse_sk#73092], Inner\n   :- *(6) Sort [i_item_sk#73002 ASC NULLS FIRST, w_warehouse_sk#73024 ASC NULLS FIRST], false, 0\n   :  +- Exchange hashpartitioning(i_item_sk#73002, w_warehouse_sk#73024, 200), ENSURE_REQUIREMENTS, [id=#99840]\n   :     +- *(5) Project [w_warehouse_sk#73024, i_item_sk#73002, d_moy#73046, mean#72996, CASE WHEN (mean#72996 = 0.0) THEN null ELSE (stdev#72995 / mean#72996) END AS cov#72997]\n   :        +- *(5) Filter (CASE WHEN (mean#72996 = 0.0) THEN 0.0 ELSE (stdev#72995 / mean#72996) END > 1.0)\n   :           +- *(5) HashAggregate(keys=[w_warehouse_name#73026, w_warehouse_sk#73024, i_item_sk#73002, d_moy#73046], functions=[stddev_samp(cast(inv_quantity_on_hand#73001 as double)), avg(cast(inv_quantity_on_hand#73001 as bigint))], output=[w_warehouse_sk#73024, i_item_sk#73002, d_moy#73046, stdev#72995, mean#72996])\n   :              +- Exchange hashpartitioning(w_warehouse_name#73026, w_warehouse_sk#73024, i_item_sk#73002, d_moy#73046, 200), ENSURE_REQUIREMENTS, [id=#99834]\n   :                 +- *(4) HashAggregate(keys=[w_warehouse_name#73026, w_warehouse_sk#73024, i_item_sk#73002, d_moy#73046], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#73001 as double)), partial_avg(cast(inv_quantity_on_hand#73001 as bigint))], output=[w_warehouse_name#73026, w_warehouse_sk#73024, i_item_sk#73002, d_moy#73046, n#73175, avg#73176, m2#73177, sum#73209, count#73210L])\n   :                    +- *(4) Project [inv_quantity_on_hand#73001, i_item_sk#73002, w_warehouse_sk#73024, w_warehouse_name#73026, d_moy#73046]\n   :                       +- *(4) BroadcastHashJoin [inv_date_sk#72998], [d_date_sk#73038], Inner, BuildRight, false\n   :                          :- *(4) Project [inv_date_sk#72998, inv_quantity_on_hand#73001, i_item_sk#73002, w_warehouse_sk#73024, w_warehouse_name#73026]\n   :                          :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#73000], [w_warehouse_sk#73024], Inner, BuildRight, false\n   :                          :     :- *(4) Project [inv_date_sk#72998, inv_warehouse_sk#73000, inv_quantity_on_hand#73001, i_item_sk#73002]\n   :                          :     :  +- *(4) BroadcastHashJoin [inv_item_sk#72999], [i_item_sk#73002], Inner, BuildRight, false\n   :                          :     :     :- *(4) Filter ((isnotnull(inv_item_sk#72999) AND isnotnull(inv_warehouse_sk#73000)) AND isnotnull(inv_date_sk#72998))\n   :                          :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#72998, inv_item_sk#72999, inv_warehouse_sk#73000, inv_quantity_on_hand#73001], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#72998, inv_item_sk#72999, inv_warehouse_sk#73000, inv_quantity_on_hand#73001], Partition Cols: []]\n   :                          :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99813]\n   :                          :     :        +- *(1) Filter isnotnull(i_item_sk#73002)\n   :                          :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#73002], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#73002, i_item_id#73003, i_rec_start_date#73004, i_rec_end_date#73005, i_item_desc#7300..., Partition Cols: []]\n   :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99820]\n   :                          :        +- *(2) Filter isnotnull(w_warehouse_sk#73024)\n   :                          :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#73024, w_warehouse_name#73026], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#73024, w_warehouse_id#73025, w_warehouse_name#73026, w_warehouse_sq_ft#73027, w_s..., Partition Cols: []]\n   :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#99828]\n   :                             +- *(3) Project [d_date_sk#73038, d_moy#73046]\n   :                                +- *(3) Filter ((((isnotnull(d_year#73044) AND isnotnull(d_moy#73046)) AND (d_year#73044 = 1999)) AND (d_moy#73046 = 3)) AND isnotnull(d_date_sk#73038))\n   :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#73038, d_moy#73046, d_year#73044], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#73038, d_date_id#73039, d_date#73040, d_month_seq#73041, d_week_seq#73042, d_quarter_s..., Partition Cols: []]\n   +- *(12) Sort [i_item_sk#73070 ASC NULLS FIRST, w_warehouse_sk#73092 ASC NULLS FIRST], false, 0\n      +- Exchange hashpartitioning(i_item_sk#73070, w_warehouse_sk#73092, 200), ENSURE_REQUIREMENTS, [id=#99994]\n         +- *(11) Project [w_warehouse_sk#73092, i_item_sk#73070, d_moy#73114, mean#73188, CASE WHEN (mean#73188 = 0.0) THEN null ELSE (stdev#73187 / mean#73188) END AS cov#73186]\n            +- *(11) Filter (CASE WHEN (mean#73188 = 0.0) THEN 0.0 ELSE (stdev#73187 / mean#73188) END > 1.0)\n               +- *(11) HashAggregate(keys=[w_warehouse_name#73094, w_warehouse_sk#73092, i_item_sk#73070, d_moy#73114], functions=[stddev_samp(cast(inv_quantity_on_hand#73069 as double)), avg(cast(inv_quantity_on_hand#73069 as bigint))], output=[w_warehouse_sk#73092, i_item_sk#73070, d_moy#73114, stdev#73187, mean#73188])\n                  +- Exchange hashpartitioning(w_warehouse_name#73094, w_warehouse_sk#73092, i_item_sk#73070, d_moy#73114, 200), ENSURE_REQUIREMENTS, [id=#99940]\n                     +- *(10) HashAggregate(keys=[w_warehouse_name#73094, w_warehouse_sk#73092, i_item_sk#73070, d_moy#73114], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#73069 as double)), partial_avg(cast(inv_quantity_on_hand#73069 as bigint))], output=[w_warehouse_name#73094, w_warehouse_sk#73092, i_item_sk#73070, d_moy#73114, n#73183, avg#73184, m2#73185, sum#73221, count#73222L])\n                        +- *(10) Project [inv_quantity_on_hand#73069, i_item_sk#73070, w_warehouse_sk#73092, w_warehouse_name#73094, d_moy#73114]\n                           +- *(10) BroadcastHashJoin [inv_date_sk#73066], [d_date_sk#73106], Inner, BuildRight, false\n                              :- *(10) Project [inv_date_sk#73066, inv_quantity_on_hand#73069, i_item_sk#73070, w_warehouse_sk#73092, w_warehouse_name#73094]\n                              :  +- *(10) BroadcastHashJoin [inv_warehouse_sk#73068], [w_warehouse_sk#73092], Inner, BuildRight, false\n                              :     :- *(10) Project [inv_date_sk#73066, inv_warehouse_sk#73068, inv_quantity_on_hand#73069, i_item_sk#73070]\n                              :     :  +- *(10) BroadcastHashJoin [inv_item_sk#73067], [i_item_sk#73070], Inner, BuildRight, false\n                              :     :     :- *(10) Filter ((isnotnull(inv_item_sk#73067) AND isnotnull(inv_warehouse_sk#73068)) AND isnotnull(inv_date_sk#73066))\n                              :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#73066, inv_item_sk#73067, inv_warehouse_sk#73068, inv_quantity_on_hand#73069], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#73066, inv_item_sk#73067, inv_warehouse_sk#73068, inv_quantity_on_hand#73069], Partition Cols: []]\n                              :     :     +- ReusedExchange [i_item_sk#73070], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99813]\n                              :     +- ReusedExchange [w_warehouse_sk#73092, w_warehouse_name#73094], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#99820]\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#99865]\n                                 +- *(9) Project [d_date_sk#73106, d_moy#73114]\n                                    +- *(9) Filter ((((isnotnull(d_year#73112) AND isnotnull(d_moy#73114)) AND (d_year#73112 = 1999)) AND (d_moy#73114 = 4)) AND isnotnull(d_date_sk#73106))\n                                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#73106, d_moy#73114, d_year#73112], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#73106, d_date_id#73107, d_date#73108, d_month_seq#73109, d_week_seq#73110, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q39a"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(w_warehouse_sk#73339 ASC NULLS FIRST, i_item_sk#73317 ASC NULLS FIRST, d_moy#73361 ASC NULLS FIRST, mean#73311 ASC NULLS FIRST, cov#73312 ASC NULLS FIRST, d_moy#73429 ASC NULLS FIRST, mean#73503 ASC NULLS FIRST, cov#73501 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#100419]\n+- *(13) SortMergeJoin [i_item_sk#73317, w_warehouse_sk#73339], [i_item_sk#73385, w_warehouse_sk#73407], Inner\n   :- *(6) Sort [i_item_sk#73317 ASC NULLS FIRST, w_warehouse_sk#73339 ASC NULLS FIRST], false, 0\n   :  +- Exchange hashpartitioning(i_item_sk#73317, w_warehouse_sk#73339, 200), ENSURE_REQUIREMENTS, [id=#100238]\n   :     +- *(5) Project [w_warehouse_sk#73339, i_item_sk#73317, d_moy#73361, mean#73311, CASE WHEN (mean#73311 = 0.0) THEN null ELSE (stdev#73310 / mean#73311) END AS cov#73312]\n   :        +- *(5) Filter ((CASE WHEN (mean#73311 = 0.0) THEN 0.0 ELSE (stdev#73310 / mean#73311) END > 1.0) AND (CASE WHEN (mean#73311 = 0.0) THEN null ELSE (stdev#73310 / mean#73311) END > 1.5))\n   :           +- *(5) HashAggregate(keys=[w_warehouse_name#73341, w_warehouse_sk#73339, i_item_sk#73317, d_moy#73361], functions=[stddev_samp(cast(inv_quantity_on_hand#73316 as double)), avg(cast(inv_quantity_on_hand#73316 as bigint))], output=[w_warehouse_sk#73339, i_item_sk#73317, d_moy#73361, stdev#73310, mean#73311])\n   :              +- Exchange hashpartitioning(w_warehouse_name#73341, w_warehouse_sk#73339, i_item_sk#73317, d_moy#73361, 200), ENSURE_REQUIREMENTS, [id=#100232]\n   :                 +- *(4) HashAggregate(keys=[w_warehouse_name#73341, w_warehouse_sk#73339, i_item_sk#73317, d_moy#73361], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#73316 as double)), partial_avg(cast(inv_quantity_on_hand#73316 as bigint))], output=[w_warehouse_name#73341, w_warehouse_sk#73339, i_item_sk#73317, d_moy#73361, n#73490, avg#73491, m2#73492, sum#73524, count#73525L])\n   :                    +- *(4) Project [inv_quantity_on_hand#73316, i_item_sk#73317, w_warehouse_sk#73339, w_warehouse_name#73341, d_moy#73361]\n   :                       +- *(4) BroadcastHashJoin [inv_date_sk#73313], [d_date_sk#73353], Inner, BuildRight, false\n   :                          :- *(4) Project [inv_date_sk#73313, inv_quantity_on_hand#73316, i_item_sk#73317, w_warehouse_sk#73339, w_warehouse_name#73341]\n   :                          :  +- *(4) BroadcastHashJoin [inv_warehouse_sk#73315], [w_warehouse_sk#73339], Inner, BuildRight, false\n   :                          :     :- *(4) Project [inv_date_sk#73313, inv_warehouse_sk#73315, inv_quantity_on_hand#73316, i_item_sk#73317]\n   :                          :     :  +- *(4) BroadcastHashJoin [inv_item_sk#73314], [i_item_sk#73317], Inner, BuildRight, false\n   :                          :     :     :- *(4) Filter ((isnotnull(inv_item_sk#73314) AND isnotnull(inv_warehouse_sk#73315)) AND isnotnull(inv_date_sk#73313))\n   :                          :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#73313, inv_item_sk#73314, inv_warehouse_sk#73315, inv_quantity_on_hand#73316], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#73313, inv_item_sk#73314, inv_warehouse_sk#73315, inv_quantity_on_hand#73316], Partition Cols: []]\n   :                          :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#100211]\n   :                          :     :        +- *(1) Filter isnotnull(i_item_sk#73317)\n   :                          :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#73317], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#73317, i_item_id#73318, i_rec_start_date#73319, i_rec_end_date#73320, i_item_desc#7332..., Partition Cols: []]\n   :                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#100218]\n   :                          :        +- *(2) Filter isnotnull(w_warehouse_sk#73339)\n   :                          :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#73339, w_warehouse_name#73341], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#73339, w_warehouse_id#73340, w_warehouse_name#73341, w_warehouse_sq_ft#73342, w_s..., Partition Cols: []]\n   :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#100226]\n   :                             +- *(3) Project [d_date_sk#73353, d_moy#73361]\n   :                                +- *(3) Filter ((((isnotnull(d_year#73359) AND isnotnull(d_moy#73361)) AND (d_year#73359 = 1999)) AND (d_moy#73361 = 3)) AND isnotnull(d_date_sk#73353))\n   :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#73353, d_moy#73361, d_year#73359], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#73353, d_date_id#73354, d_date#73355, d_month_seq#73356, d_week_seq#73357, d_quarter_s..., Partition Cols: []]\n   +- *(12) Sort [i_item_sk#73385 ASC NULLS FIRST, w_warehouse_sk#73407 ASC NULLS FIRST], false, 0\n      +- Exchange hashpartitioning(i_item_sk#73385, w_warehouse_sk#73407, 200), ENSURE_REQUIREMENTS, [id=#100392]\n         +- *(11) Project [w_warehouse_sk#73407, i_item_sk#73385, d_moy#73429, mean#73503, CASE WHEN (mean#73503 = 0.0) THEN null ELSE (stdev#73502 / mean#73503) END AS cov#73501]\n            +- *(11) Filter (CASE WHEN (mean#73503 = 0.0) THEN 0.0 ELSE (stdev#73502 / mean#73503) END > 1.0)\n               +- *(11) HashAggregate(keys=[w_warehouse_name#73409, w_warehouse_sk#73407, i_item_sk#73385, d_moy#73429], functions=[stddev_samp(cast(inv_quantity_on_hand#73384 as double)), avg(cast(inv_quantity_on_hand#73384 as bigint))], output=[w_warehouse_sk#73407, i_item_sk#73385, d_moy#73429, stdev#73502, mean#73503])\n                  +- Exchange hashpartitioning(w_warehouse_name#73409, w_warehouse_sk#73407, i_item_sk#73385, d_moy#73429, 200), ENSURE_REQUIREMENTS, [id=#100338]\n                     +- *(10) HashAggregate(keys=[w_warehouse_name#73409, w_warehouse_sk#73407, i_item_sk#73385, d_moy#73429], functions=[partial_stddev_samp(cast(inv_quantity_on_hand#73384 as double)), partial_avg(cast(inv_quantity_on_hand#73384 as bigint))], output=[w_warehouse_name#73409, w_warehouse_sk#73407, i_item_sk#73385, d_moy#73429, n#73498, avg#73499, m2#73500, sum#73536, count#73537L])\n                        +- *(10) Project [inv_quantity_on_hand#73384, i_item_sk#73385, w_warehouse_sk#73407, w_warehouse_name#73409, d_moy#73429]\n                           +- *(10) BroadcastHashJoin [inv_date_sk#73381], [d_date_sk#73421], Inner, BuildRight, false\n                              :- *(10) Project [inv_date_sk#73381, inv_quantity_on_hand#73384, i_item_sk#73385, w_warehouse_sk#73407, w_warehouse_name#73409]\n                              :  +- *(10) BroadcastHashJoin [inv_warehouse_sk#73383], [w_warehouse_sk#73407], Inner, BuildRight, false\n                              :     :- *(10) Project [inv_date_sk#73381, inv_warehouse_sk#73383, inv_quantity_on_hand#73384, i_item_sk#73385]\n                              :     :  +- *(10) BroadcastHashJoin [inv_item_sk#73382], [i_item_sk#73385], Inner, BuildRight, false\n                              :     :     :- *(10) Filter ((isnotnull(inv_item_sk#73382) AND isnotnull(inv_warehouse_sk#73383)) AND isnotnull(inv_date_sk#73381))\n                              :     :     :  +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#73381, inv_item_sk#73382, inv_warehouse_sk#73383, inv_quantity_on_hand#73384], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#73381, inv_item_sk#73382, inv_warehouse_sk#73383, inv_quantity_on_hand#73384], Partition Cols: []]\n                              :     :     +- ReusedExchange [i_item_sk#73385], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#100211]\n                              :     +- ReusedExchange [w_warehouse_sk#73407, w_warehouse_name#73409], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#100218]\n                              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#100263]\n                                 +- *(9) Project [d_date_sk#73421, d_moy#73429]\n                                    +- *(9) Filter ((((isnotnull(d_year#73427) AND isnotnull(d_moy#73429)) AND (d_year#73427 = 1999)) AND (d_moy#73429 = 4)) AND isnotnull(d_date_sk#73421))\n                                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#73421, d_moy#73429, d_year#73427], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#73421, d_date_id#73422, d_date#73423, d_month_seq#73424, d_week_seq#73425, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q39b"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#73625, 200), ENSURE_REQUIREMENTS, [id=#100853]\n+- *(4) Filter (isnotnull(year_total#73633) AND (year_total#73633 > 0.000000))\n   +- *(4) HashAggregate(keys=[c_customer_id#73656, c_first_name#73663, c_last_name#73664, c_preferred_cust_flag#73665, c_birth_country#73669, c_login#73670, c_email_address#73671, d_year#73702], functions=[sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#73690 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#73689 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#73687 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#73688 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[customer_id#73625, year_total#73633])\n      +- Exchange hashpartitioning(c_customer_id#73656, c_first_name#73663, c_last_name#73664, c_preferred_cust_flag#73665, c_birth_country#73669, c_login#73670, c_email_address#73671, d_year#73702, 200), ENSURE_REQUIREMENTS, [id=#100848]\n         +- *(3) HashAggregate(keys=[c_customer_id#73656, c_first_name#73663, c_last_name#73664, c_preferred_cust_flag#73665, c_birth_country#73669, c_login#73670, c_email_address#73671, d_year#73702], functions=[partial_sum(CheckOverflow((promote_precision(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(ss_ext_list_price#73690 as decimal(8,2))) - promote_precision(cast(ss_ext_wholesale_cost#73689 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) - promote_precision(cast(ss_ext_discount_amt#73687 as decimal(9,2)))), DecimalType(9,2), true) as decimal(10,2))) + promote_precision(cast(ss_ext_sales_price#73688 as decimal(10,2)))), DecimalType(10,2), true)) / 2.00), DecimalType(14,6), true))], output=[c_customer_id#73656, c_first_name#73663, c_last_name#73664, c_preferred_cust_flag#73665, c_birth_country#73669, c_login#73670, c_email_address#73671, d_year#73702, sum#75103, isEmpty#75104])\n            +- *(3) Project [c_customer_id#73656, c_first_name#73663, c_last_name#73664, c_preferred_cust_flag#73665, c_birth_country#73669, c_login#73670, c_email_address#73671, ss_ext_discount_amt#73687, ss_ext_sales_price#73688, ss_ext_wholesale_cost#73689, ss_ext_list_price#73690, d_year#73702]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#73673], [d_date_sk#73696], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#73656, c_first_name#73663, c_last_name#73664, c_preferred_cust_flag#73665, c_birth_country#73669, c_login#73670, c_email_address#73671, ss_sold_date_sk#73673, ss_ext_discount_amt#73687, ss_ext_sales_price#73688, ss_ext_wholesale_cost#73689, ss_ext_list_price#73690]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#73655], [ss_customer_sk#73676], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#100833]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#73655) AND isnotnull(c_customer_id#73656))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#73655, c_customer_id#73656, c_first_name#73663, c_last_name#73664, c_preferred_cust_flag#73665, c_birth_country#73669, c_login#73670, c_email_address#73671], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#73655, c_customer_id#73656, c_current_cdemo_sk#73657, c_current_hdemo_sk#73658, c_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#73676) AND isnotnull(ss_sold_date_sk#73673))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#73673, ss_customer_sk#73676, ss_ext_discount_amt#73687, ss_ext_sales_price#73688, ss_ext_wholesale_cost#73689, ss_ext_list_price#73690], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#73673, ss_sold_time_sk#73674, ss_item_sk#73675, ss_customer_sk#73676, ss_cdemo_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#100842]\n                     +- *(2) Filter ((isnotnull(d_year#73702) AND (d_year#73702 = 1999)) AND isnotnull(d_date_sk#73696))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#73696, d_year#73702], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#73696, d_date_id#73697, d_date#73698, d_month_seq#73699, d_week_seq#73700, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q4"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_state#75231, i_item_id#75236, 200), ENSURE_REQUIREMENTS, [id=#101476]\n+- *(5) HashAggregate(keys=[w_state#75231, i_item_id#75236], functions=[partial_sum(CASE WHEN (d_date#75259 < 10708) THEN CheckOverflow((promote_precision(cast(cs_sales_price#75181 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#75217 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#75259 >= 10708) THEN CheckOverflow((promote_precision(cast(cs_sales_price#75181 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_refunded_cash#75217 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true) ELSE 0.00 END)], output=[w_state#75231, i_item_id#75236, sum#75297, isEmpty#75298, sum#75299, isEmpty#75300])\n   +- *(5) Project [cs_sales_price#75181, cr_refunded_cash#75217, w_state#75231, i_item_id#75236, d_date#75259]\n      +- *(5) BroadcastHashJoin [cs_sold_date_sk#75160], [d_date_sk#75257], Inner, BuildRight, false\n         :- *(5) Project [cs_sold_date_sk#75160, cs_sales_price#75181, cr_refunded_cash#75217, w_state#75231, i_item_id#75236]\n         :  +- *(5) BroadcastHashJoin [cs_item_sk#75175], [i_item_sk#75235], Inner, BuildRight, false\n         :     :- *(5) Project [cs_sold_date_sk#75160, cs_item_sk#75175, cs_sales_price#75181, cr_refunded_cash#75217, w_state#75231]\n         :     :  +- *(5) BroadcastHashJoin [cs_warehouse_sk#75174], [w_warehouse_sk#75221], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#75160, cs_warehouse_sk#75174, cs_item_sk#75175, cs_sales_price#75181, cr_refunded_cash#75217]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_order_number#75177L, cs_item_sk#75175], [cr_order_number#75210L, cr_item_sk#75196], LeftOuter, BuildRight, false\n         :     :     :     :- *(5) Filter ((isnotnull(cs_warehouse_sk#75174) AND isnotnull(cs_item_sk#75175)) AND isnotnull(cs_sold_date_sk#75160))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#75160, cs_warehouse_sk#75174, cs_item_sk#75175, cs_order_number#75177L, cs_sales_price#75181], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#75160, cs_sold_time_sk#75161, cs_ship_date_sk#75162, cs_bill_customer_sk#75163, ..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#101448]\n         :     :     :        +- *(1) Filter (isnotnull(cr_order_number#75210L) AND isnotnull(cr_item_sk#75196))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#75196, cr_order_number#75210L, cr_refunded_cash#75217], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#75194, cr_returned_time_sk#75195, cr_item_sk#75196, cr_refunded_customer_sk#..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#101455]\n         :     :        +- *(2) Filter isnotnull(w_warehouse_sk#75221)\n         :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#75221, w_state#75231], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#75221, w_warehouse_id#75222, w_warehouse_name#75223, w_warehouse_sq_ft#75224, w_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101463]\n         :        +- *(3) Project [i_item_sk#75235, i_item_id#75236]\n         :           +- *(3) Filter (((isnotnull(i_current_price#75240) AND (i_current_price#75240 >= 0.99)) AND (i_current_price#75240 <= 1.49)) AND isnotnull(i_item_sk#75235))\n         :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#75240, i_item_id#75236, i_item_sk#75235], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#75235, i_item_id#75236, i_rec_start_date#75237, i_rec_end_date#75238, i_item_desc#7523..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#101470]\n            +- *(4) Filter (((isnotnull(d_date#75259) AND (d_date#75259 >= 10678)) AND (d_date#75259 <= 10738)) AND isnotnull(d_date_sk#75257))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#75257, d_date#75259], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#75257, d_date_id#75258, d_date#75259, d_month_seq#75260, d_week_seq#75261, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q40"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_product_name#75329, 200), ENSURE_REQUIREMENTS, [id=#101562]\n+- *(3) HashAggregate(keys=[i_product_name#75329], functions=[], output=[i_product_name#75329])\n   +- *(3) Project [i_product_name#75329]\n      +- *(3) BroadcastHashJoin [i_manufact#75322], [i_manufact#75345], Inner, BuildRight, false\n         :- *(3) Project [i_manufact#75322, i_product_name#75329]\n         :  +- *(3) Filter (((isnotnull(i_manufact_id#75321) AND (i_manufact_id#75321 >= 841)) AND (i_manufact_id#75321 <= 881)) AND isnotnull(i_manufact#75322))\n         :     +- Scan hive tpcds_sf1_iceberg.item [i_manufact#75322, i_manufact_id#75321, i_product_name#75329], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#75308, i_item_id#75309, i_rec_start_date#75310, i_rec_end_date#75311, i_item_desc#7531..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#101556]\n            +- *(2) Project [i_manufact#75345]\n               +- *(2) Filter (item_cnt#75306L > 0)\n                  +- *(2) HashAggregate(keys=[i_manufact#75345], functions=[count(1)], output=[item_cnt#75306L, i_manufact#75345])\n                     +- Exchange hashpartitioning(i_manufact#75345, 200), ENSURE_REQUIREMENTS, [id=#101550]\n                        +- *(1) HashAggregate(keys=[i_manufact#75345], functions=[partial_count(1)], output=[i_manufact#75345, count#75357L])\n                           +- *(1) Project [i_manufact#75345]\n                              +- *(1) Filter (((((i_category#75343 = Women) AND (((((i_color#75348 = bisque) OR (i_color#75348 = khaki)) AND ((i_units#75349 = Carton) OR (i_units#75349 = Box))) AND ((i_size#75346 = large) OR (i_size#75346 = extra large))) OR ((((i_color#75348 = antique) OR (i_color#75348 = sandy)) AND ((i_units#75349 = Pallet) OR (i_units#75349 = Cup))) AND ((i_size#75346 = petite) OR (i_size#75346 = small))))) OR ((i_category#75343 = Men) AND (((((i_color#75348 = forest) OR (i_color#75348 = brown)) AND ((i_units#75349 = Dram) OR (i_units#75349 = Ton))) AND ((i_size#75346 = economy) OR (i_size#75346 = medium))) OR ((((i_color#75348 = chartreuse) OR (i_color#75348 = light)) AND ((i_units#75349 = Pound) OR (i_units#75349 = Dozen))) AND ((i_size#75346 = large) OR (i_size#75346 = extra large)))))) OR (((i_category#75343 = Women) AND (((((i_color#75348 = turquoise) OR (i_color#75348 = chocolate)) AND ((i_units#75349 = Bundle) OR (i_units#75349 = Unknown))) AND ((i_size#75346 = large) OR (i_size#75346 = extra large))) OR ((((i_color#75348 = maroon) OR (i_color#75348 = pale)) AND ((i_units#75349 = Each) OR (i_units#75349 = Tbl))) AND ((i_size#75346 = petite) OR (i_size#75346 = small))))) OR ((i_category#75343 = Men) AND (((((i_color#75348 = almond) OR (i_color#75348 = floral)) AND ((i_units#75349 = Gross) OR (i_units#75349 = N/A))) AND ((i_size#75346 = economy) OR (i_size#75346 = medium))) OR ((((i_color#75348 = drab) OR (i_color#75348 = plum)) AND ((i_units#75349 = Bunch) OR (i_units#75349 = Case))) AND ((i_size#75346 = large) OR (i_size#75346 = extra large))))))) AND isnotnull(i_manufact#75345))\n                                 +- Scan hive tpcds_sf1_iceberg.item [i_category#75343, i_color#75348, i_manufact#75345, i_size#75346, i_units#75349], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#75331, i_item_id#75332, i_rec_start_date#75333, i_rec_end_date#75334, i_item_desc#7533..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q41"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#75366, i_category_id#75422, i_category#75423, 200), ENSURE_REQUIREMENTS, [id=#101646]\n+- *(3) HashAggregate(keys=[d_year#75366, i_category_id#75422, i_category#75423], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#75403))], output=[d_year#75366, i_category_id#75422, i_category#75423, sum#75445L])\n   +- *(3) Project [d_year#75366, ss_ext_sales_price#75403, i_category_id#75422, i_category#75423]\n      +- *(3) BroadcastHashJoin [ss_item_sk#75390], [i_item_sk#75411], Inner, BuildRight, false\n         :- *(3) Project [d_year#75366, ss_item_sk#75390, ss_ext_sales_price#75403]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#75360], [ss_sold_date_sk#75388], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101630]\n         :     :  +- *(1) Project [d_date_sk#75360, d_year#75366]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#75368) AND isnotnull(d_year#75366)) AND (d_moy#75368 = 11)) AND (d_year#75366 = 2002)) AND isnotnull(d_date_sk#75360))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#75360, d_moy#75368, d_year#75366], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#75360, d_date_id#75361, d_date#75362, d_month_seq#75363, d_week_seq#75364, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#75388) AND isnotnull(ss_item_sk#75390))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#75388, ss_item_sk#75390, ss_ext_sales_price#75403], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#75388, ss_sold_time_sk#75389, ss_item_sk#75390, ss_customer_sk#75391, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101640]\n            +- *(2) Project [i_item_sk#75411, i_category_id#75422, i_category#75423]\n               +- *(2) Filter ((isnotnull(i_manager_id#75431) AND (i_manager_id#75431 = 1)) AND isnotnull(i_item_sk#75411))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_category#75423, i_category_id#75422, i_item_sk#75411, i_manager_id#75431], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#75411, i_item_id#75412, i_rec_start_date#75413, i_rec_end_date#75414, i_item_desc#7541..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q42"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#75514, s_store_id#75510, 200), ENSURE_REQUIREMENTS, [id=#101730]\n+- *(3) HashAggregate(keys=[s_store_name#75514, s_store_id#75510], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#75472 = Sunday) THEN ss_sales_price#75499 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#75472 = Monday) THEN ss_sales_price#75499 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#75472 = Tuesday) THEN ss_sales_price#75499 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#75472 = Wednesday) THEN ss_sales_price#75499 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#75472 = Thursday) THEN ss_sales_price#75499 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#75472 = Friday) THEN ss_sales_price#75499 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#75472 = Saturday) THEN ss_sales_price#75499 ELSE null END))], output=[s_store_name#75514, s_store_id#75510, sum#75570L, sum#75571L, sum#75572L, sum#75573L, sum#75574L, sum#75575L, sum#75576L])\n   +- *(3) Project [d_day_name#75472, ss_sales_price#75499, s_store_id#75510, s_store_name#75514]\n      +- *(3) BroadcastHashJoin [ss_store_sk#75493], [s_store_sk#75509], Inner, BuildRight, false\n         :- *(3) Project [d_day_name#75472, ss_store_sk#75493, ss_sales_price#75499]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#75458], [ss_sold_date_sk#75486], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101714]\n         :     :  +- *(1) Project [d_date_sk#75458, d_day_name#75472]\n         :     :     +- *(1) Filter ((isnotnull(d_year#75464) AND (d_year#75464 = 2002)) AND isnotnull(d_date_sk#75458))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#75458, d_day_name#75472, d_year#75464], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#75458, d_date_id#75459, d_date#75460, d_month_seq#75461, d_week_seq#75462, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#75486) AND isnotnull(ss_store_sk#75493))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#75486, ss_store_sk#75493, ss_sales_price#75499], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#75486, ss_sold_time_sk#75487, ss_item_sk#75488, ss_customer_sk#75489, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#101724]\n            +- *(2) Project [s_store_sk#75509, s_store_id#75510, s_store_name#75514]\n               +- *(2) Filter ((isnotnull(s_gmt_offset#75536) AND (s_gmt_offset#75536 = -5.00)) AND isnotnull(s_store_sk#75509))\n                  +- Scan hive tpcds_sf1_iceberg.store [s_gmt_offset#75536, s_store_id#75510, s_store_name#75514, s_store_sk#75509], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#75509, s_store_id#75510, s_rec_start_date#75511, s_rec_end_date#75512, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q43"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 3,
    "name" : "q44"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_zip#75882, ca_state#75881, 200), ENSURE_REQUIREMENTS, [id=#102293]\n+- *(6) HashAggregate(keys=[ca_zip#75882, ca_state#75881], functions=[partial_sum(UnscaledValue(ws_sales_price#75842))], output=[ca_zip#75882, ca_state#75881, sum#75967L])\n   +- *(6) Project [ws_sales_price#75842, ca_state#75881, ca_zip#75882]\n      +- *(6) Filter (substr(ca_zip#75882, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#75965)\n         +- *(6) BroadcastHashJoin [i_item_id#75915], [i_item_id#75937], ExistenceJoin(exists#75965), BuildRight, false\n            :- *(6) Project [ws_sales_price#75842, ca_state#75881, ca_zip#75882, i_item_id#75915]\n            :  +- *(6) BroadcastHashJoin [ws_item_sk#75824], [i_item_sk#75914], Inner, BuildRight, false\n            :     :- *(6) Project [ws_item_sk#75824, ws_sales_price#75842, ca_state#75881, ca_zip#75882]\n            :     :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#75821], [d_date_sk#75886], Inner, BuildRight, false\n            :     :     :- *(6) Project [ws_sold_date_sk#75821, ws_item_sk#75824, ws_sales_price#75842, ca_state#75881, ca_zip#75882]\n            :     :     :  +- *(6) BroadcastHashJoin [c_current_addr_sk#75859], [ca_address_sk#75873], Inner, BuildRight, false\n            :     :     :     :- *(6) Project [ws_sold_date_sk#75821, ws_item_sk#75824, ws_sales_price#75842, c_current_addr_sk#75859]\n            :     :     :     :  +- *(6) BroadcastHashJoin [ws_bill_customer_sk#75825], [c_customer_sk#75855], Inner, BuildRight, false\n            :     :     :     :     :- *(6) Filter ((isnotnull(ws_bill_customer_sk#75825) AND isnotnull(ws_sold_date_sk#75821)) AND isnotnull(ws_item_sk#75824))\n            :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#75821, ws_item_sk#75824, ws_bill_customer_sk#75825, ws_sales_price#75842], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#75821, ws_sold_time_sk#75822, ws_ship_date_sk#75823, ws_item_sk#75824, ws_bill_c..., Partition Cols: []]\n            :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#102256]\n            :     :     :     :        +- *(1) Filter (isnotnull(c_customer_sk#75855) AND isnotnull(c_current_addr_sk#75859))\n            :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#75855, c_current_addr_sk#75859], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#75855, c_customer_id#75856, c_current_cdemo_sk#75857, c_current_hdemo_sk#75858, c_..., Partition Cols: []]\n            :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#102263]\n            :     :     :        +- *(2) Filter isnotnull(ca_address_sk#75873)\n            :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#75873, ca_state#75881, ca_zip#75882], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#75873, ca_address_id#75874, ca_street_number#75875, ca_street_name#75876, ca_stree..., Partition Cols: []]\n            :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#102271]\n            :     :        +- *(3) Project [d_date_sk#75886]\n            :     :           +- *(3) Filter ((((isnotnull(d_qoy#75896) AND isnotnull(d_year#75892)) AND (d_qoy#75896 = 2)) AND (d_year#75892 = 2002)) AND isnotnull(d_date_sk#75886))\n            :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#75886, d_qoy#75896, d_year#75892], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#75886, d_date_id#75887, d_date#75888, d_month_seq#75889, d_week_seq#75890, d_quarter_s..., Partition Cols: []]\n            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#102278]\n            :        +- *(4) Filter isnotnull(i_item_sk#75914)\n            :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#75914, i_item_id#75915], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#75914, i_item_id#75915, i_rec_start_date#75916, i_rec_end_date#75917, i_item_desc#7591..., Partition Cols: []]\n            +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#102286]\n               +- *(5) Project [i_item_id#75937]\n                  +- *(5) Filter i_item_sk#75936 IN (2,3,5,7,11,13,17,19,23,29)\n                     +- Scan hive tpcds_sf1_iceberg.item [i_item_id#75937, i_item_sk#75936], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#75936, i_item_id#75937, i_rec_start_date#75938, i_rec_end_date#75939, i_item_desc#7594..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q45"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 3,
    "name" : "q46"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, rn#76127, 200), ENSURE_REQUIREMENTS, [id=#102853]\n+- *(9) Filter (((((isnotnull(d_year#76187) AND isnotnull(avg_monthly_sales#76126)) AND (d_year#76187 = 2001)) AND (avg_monthly_sales#76126 > 0.000000)) AND (CASE WHEN (avg_monthly_sales#76126 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#76125 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#76126 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#76126 as decimal(22,6)))), DecimalType(38,16), true) ELSE null END > 0.1000000000000000)) AND isnotnull(rn#76127))\n   +- Window [rank(d_year#76187, d_moy#76189) windowspecdefinition(i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187 ASC NULLS FIRST, d_moy#76189 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#76127], [i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226], [d_year#76187 ASC NULLS FIRST, d_moy#76189 ASC NULLS FIRST]\n      +- *(8) Sort [i_category#76148 ASC NULLS FIRST, i_brand#76144 ASC NULLS FIRST, s_store_name#76214 ASC NULLS FIRST, s_company_name#76226 ASC NULLS FIRST, d_year#76187 ASC NULLS FIRST, d_moy#76189 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, 200), ENSURE_REQUIREMENTS, [id=#102845]\n            +- *(7) Project [i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187, d_moy#76189, sum_sales#76125, avg_monthly_sales#76126]\n               +- Window [avg(_w0#76475) windowspecdefinition(i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#76126], [i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187]\n                  +- *(6) Sort [i_category#76148 ASC NULLS FIRST, i_brand#76144 ASC NULLS FIRST, s_store_name#76214 ASC NULLS FIRST, s_company_name#76226 ASC NULLS FIRST, d_year#76187 ASC NULLS FIRST], false, 0\n                     +- Exchange hashpartitioning(i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187, 200), ENSURE_REQUIREMENTS, [id=#102837]\n                        +- *(5) HashAggregate(keys=[i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187, d_moy#76189], functions=[sum(UnscaledValue(ss_sales_price#76171))], output=[i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187, d_moy#76189, sum_sales#76125, _w0#76475])\n                           +- Exchange hashpartitioning(i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187, d_moy#76189, 200), ENSURE_REQUIREMENTS, [id=#102833]\n                              +- *(4) HashAggregate(keys=[i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187, d_moy#76189], functions=[partial_sum(UnscaledValue(ss_sales_price#76171))], output=[i_category#76148, i_brand#76144, s_store_name#76214, s_company_name#76226, d_year#76187, d_moy#76189, sum#76617L])\n                                 +- *(4) Project [i_brand#76144, i_category#76148, ss_sales_price#76171, d_year#76187, d_moy#76189, s_store_name#76214, s_company_name#76226]\n                                    +- *(4) BroadcastHashJoin [ss_store_sk#76165], [s_store_sk#76209], Inner, BuildRight, false\n                                       :- *(4) Project [i_brand#76144, i_category#76148, ss_store_sk#76165, ss_sales_price#76171, d_year#76187, d_moy#76189]\n                                       :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#76158], [d_date_sk#76181], Inner, BuildRight, false\n                                       :     :- *(4) Project [i_brand#76144, i_category#76148, ss_sold_date_sk#76158, ss_store_sk#76165, ss_sales_price#76171]\n                                       :     :  +- *(4) BroadcastHashJoin [i_item_sk#76136], [ss_item_sk#76160], Inner, BuildLeft, false\n                                       :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#102811]\n                                       :     :     :  +- *(1) Filter ((isnotnull(i_item_sk#76136) AND isnotnull(i_category#76148)) AND isnotnull(i_brand#76144))\n                                       :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#76136, i_brand#76144, i_category#76148], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#76136, i_item_id#76137, i_rec_start_date#76138, i_rec_end_date#76139, i_item_desc#7614..., Partition Cols: []]\n                                       :     :     +- *(4) Filter ((isnotnull(ss_item_sk#76160) AND isnotnull(ss_sold_date_sk#76158)) AND isnotnull(ss_store_sk#76165))\n                                       :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#76158, ss_item_sk#76160, ss_store_sk#76165, ss_sales_price#76171], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#76158, ss_sold_time_sk#76159, ss_item_sk#76160, ss_customer_sk#76161, ss_cdemo_s..., Partition Cols: []]\n                                       :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#102820]\n                                       :        +- *(2) Filter ((((d_year#76187 = 2001) OR ((d_year#76187 = 2000) AND (d_moy#76189 = 12))) OR ((d_year#76187 = 2002) AND (d_moy#76189 = 1))) AND isnotnull(d_date_sk#76181))\n                                       :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#76181, d_year#76187, d_moy#76189], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#76181, d_date_id#76182, d_date#76183, d_month_seq#76184, d_week_seq#76185, d_quarter_s..., Partition Cols: []]\n                                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#102827]\n                                          +- *(3) Filter ((isnotnull(s_store_sk#76209) AND isnotnull(s_store_name#76214)) AND isnotnull(s_company_name#76226))\n                                             +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#76209, s_store_name#76214, s_company_name#76226], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#76209, s_store_id#76210, s_rec_start_date#76211, s_rec_end_date#76212, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q47"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#103318]\n+- *(5) HashAggregate(keys=[], functions=[partial_sum(cast(ss_quantity#76666 as bigint))], output=[sum#76762L])\n   +- *(5) Project [ss_quantity#76666]\n      +- *(5) BroadcastHashJoin [ss_sold_date_sk#76656], [d_date_sk#76730], Inner, BuildRight, false\n         :- *(5) Project [ss_sold_date_sk#76656, ss_quantity#76666]\n         :  +- *(5) BroadcastHashJoin [ss_addr_sk#76662], [ca_address_sk#76717], Inner, BuildRight, ((((ca_state#76725 IN (MT,OH,GA) AND (ss_net_profit#76678 >= 0.00)) AND (ss_net_profit#76678 <= 2000.00)) OR ((ca_state#76725 IN (WV,AZ,NM) AND (ss_net_profit#76678 >= 150.00)) AND (ss_net_profit#76678 <= 3000.00))) OR ((ca_state#76725 IN (NY,PA,KY) AND (ss_net_profit#76678 >= 50.00)) AND (ss_net_profit#76678 <= 25000.00))), false\n         :     :- *(5) Project [ss_sold_date_sk#76656, ss_addr_sk#76662, ss_quantity#76666, ss_net_profit#76678]\n         :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#76660], [cd_demo_sk#76708], Inner, BuildRight, ((((((cd_marital_status#76710 = U) AND (cd_education_status#76711 = 2 yr Degree)) AND (ss_sales_price#76669 >= 100.00)) AND (ss_sales_price#76669 <= 150.00)) OR ((((cd_marital_status#76710 = S) AND (cd_education_status#76711 = Primary)) AND (ss_sales_price#76669 >= 50.00)) AND (ss_sales_price#76669 <= 100.00))) OR ((((cd_marital_status#76710 = W) AND (cd_education_status#76711 = 4 yr Degree)) AND (ss_sales_price#76669 >= 150.00)) AND (ss_sales_price#76669 <= 200.00))), false\n         :     :     :- *(5) Project [ss_sold_date_sk#76656, ss_cdemo_sk#76660, ss_addr_sk#76662, ss_quantity#76666, ss_sales_price#76669, ss_net_profit#76678]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_store_sk#76663], [s_store_sk#76679], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((((isnotnull(ss_store_sk#76663) AND isnotnull(ss_cdemo_sk#76660)) AND isnotnull(ss_addr_sk#76662)) AND isnotnull(ss_sold_date_sk#76656)) AND ((((ss_sales_price#76669 >= 100.00) AND (ss_sales_price#76669 <= 150.00)) OR ((ss_sales_price#76669 >= 50.00) AND (ss_sales_price#76669 <= 100.00))) OR ((ss_sales_price#76669 >= 150.00) AND (ss_sales_price#76669 <= 200.00)))) AND ((((ss_net_profit#76678 >= 0.00) AND (ss_net_profit#76678 <= 2000.00)) OR ((ss_net_profit#76678 >= 150.00) AND (ss_net_profit#76678 <= 3000.00))) OR ((ss_net_profit#76678 >= 50.00) AND (ss_net_profit#76678 <= 25000.00))))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#76656, ss_cdemo_sk#76660, ss_addr_sk#76662, ss_store_sk#76663, ss_quantity#76666, ss_sales_price#76669, ss_net_profit#76678], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#76656, ss_sold_time_sk#76657, ss_item_sk#76658, ss_customer_sk#76659, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#103289]\n         :     :     :        +- *(1) Filter isnotnull(s_store_sk#76679)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#76679], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#76679, s_store_id#76680, s_rec_start_date#76681, s_rec_end_date#76682, s_closed_date_..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#103296]\n         :     :        +- *(2) Filter (isnotnull(cd_demo_sk#76708) AND ((((cd_marital_status#76710 = U) AND (cd_education_status#76711 = 2 yr Degree)) OR ((cd_marital_status#76710 = S) AND (cd_education_status#76711 = Primary))) OR ((cd_marital_status#76710 = W) AND (cd_education_status#76711 = 4 yr Degree))))\n         :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#76708, cd_marital_status#76710, cd_education_status#76711], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#76708, cd_gender#76709, cd_marital_status#76710, cd_education_status#76711, cd_purcha..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#103304]\n         :        +- *(3) Project [ca_address_sk#76717, ca_state#76725]\n         :           +- *(3) Filter (((isnotnull(ca_country#76727) AND (ca_country#76727 = United States)) AND isnotnull(ca_address_sk#76717)) AND ((ca_state#76725 IN (MT,OH,GA) OR ca_state#76725 IN (WV,AZ,NM)) OR ca_state#76725 IN (NY,PA,KY)))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#76717, ca_country#76727, ca_state#76725], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#76717, ca_address_id#76718, ca_street_number#76719, ca_street_name#76720, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#103312]\n            +- *(4) Project [d_date_sk#76730]\n               +- *(4) Filter ((isnotnull(d_year#76736) AND (d_year#76736 = 2000)) AND isnotnull(d_date_sk#76730))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#76730, d_year#76736], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#76730, d_date_id#76731, d_date#76732, d_month_seq#76733, d_week_seq#76734, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q48"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#76770, item#76765, return_ratio#76766, return_rank#76768, currency_rank#76769, 200), ENSURE_REQUIREMENTS, [id=#103874]\n+- *(22) HashAggregate(keys=[channel#76770, item#76765, return_ratio#76766, return_rank#76768, currency_rank#76769], functions=[], output=[channel#76770, item#76765, return_ratio#76766, return_rank#76768, currency_rank#76769])\n   +- Union\n      :- *(7) Project [web AS channel#76770, item#76765, return_ratio#76766, return_rank#76768, currency_rank#76769]\n      :  +- *(7) Filter ((return_rank#76768 <= 10) OR (currency_rank#76769 <= 10))\n      :     +- Window [rank(currency_ratio#76767) windowspecdefinition(currency_ratio#76767 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#76769], [currency_ratio#76767 ASC NULLS FIRST]\n      :        +- *(6) Sort [currency_ratio#76767 ASC NULLS FIRST], false, 0\n      :           +- Window [rank(return_ratio#76766) windowspecdefinition(return_ratio#76766 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#76768], [return_ratio#76766 ASC NULLS FIRST]\n      :              +- *(5) Sort [return_ratio#76766 ASC NULLS FIRST], false, 0\n      :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#103608]\n      :                    +- *(4) HashAggregate(keys=[ws_item_sk#76798], functions=[sum(cast(coalesce(wr_return_quantity#76843, 0) as bigint)), sum(cast(coalesce(ws_quantity#76813, 0) as bigint)), sum(coalesce(cast(wr_return_amt#76844 as decimal(12,2)), 0.00)), sum(coalesce(cast(ws_net_paid#76824 as decimal(12,2)), 0.00))], output=[item#76765, return_ratio#76766, currency_ratio#76767])\n      :                       +- Exchange hashpartitioning(ws_item_sk#76798, 200), ENSURE_REQUIREMENTS, [id=#103604]\n      :                          +- *(3) HashAggregate(keys=[ws_item_sk#76798], functions=[partial_sum(cast(coalesce(wr_return_quantity#76843, 0) as bigint)), partial_sum(cast(coalesce(ws_quantity#76813, 0) as bigint)), partial_sum(coalesce(cast(wr_return_amt#76844 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ws_net_paid#76824 as decimal(12,2)), 0.00))], output=[ws_item_sk#76798, sum#77118L, sum#77119L, sum#77120, isEmpty#77121, sum#77122, isEmpty#77123])\n      :                             +- *(3) Project [ws_item_sk#76798, ws_quantity#76813, ws_net_paid#76824, wr_return_quantity#76843, wr_return_amt#76844]\n      :                                +- *(3) BroadcastHashJoin [ws_sold_date_sk#76795], [d_date_sk#76853], Inner, BuildRight, false\n      :                                   :- *(3) Project [ws_sold_date_sk#76795, ws_item_sk#76798, ws_quantity#76813, ws_net_paid#76824, wr_return_quantity#76843, wr_return_amt#76844]\n      :                                   :  +- *(3) BroadcastHashJoin [ws_order_number#76812L, ws_item_sk#76798], [wr_order_number#76842L, wr_item_sk#76831], Inner, BuildRight, false\n      :                                   :     :- *(3) Project [ws_sold_date_sk#76795, ws_item_sk#76798, ws_order_number#76812L, ws_quantity#76813, ws_net_paid#76824]\n      :                                   :     :  +- *(3) Filter ((((((((isnotnull(ws_net_profit#76828) AND isnotnull(ws_net_paid#76824)) AND isnotnull(ws_quantity#76813)) AND (ws_net_profit#76828 > 1.00)) AND (ws_net_paid#76824 > 0.00)) AND (ws_quantity#76813 > 0)) AND isnotnull(ws_order_number#76812L)) AND isnotnull(ws_item_sk#76798)) AND isnotnull(ws_sold_date_sk#76795))\n      :                                   :     :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_item_sk#76798, ws_net_paid#76824, ws_net_profit#76828, ws_order_number#76812L, ws_quantity#76813, ws_sold_date_sk#76795], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#76795, ws_sold_time_sk#76796, ws_ship_date_sk#76797, ws_item_sk#76798, ws_bill_c..., Partition Cols: []]\n      :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#103590]\n      :                                   :        +- *(1) Filter (((isnotnull(wr_return_amt#76844) AND (wr_return_amt#76844 > 10000.00)) AND isnotnull(wr_order_number#76842L)) AND isnotnull(wr_item_sk#76831))\n      :                                   :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#76831, wr_order_number#76842L, wr_return_quantity#76843, wr_return_amt#76844], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#76829, wr_returned_time_sk#76830, wr_item_sk#76831, wr_refunded_customer_sk#..., Partition Cols: []]\n      :                                   +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#103598]\n      :                                      +- *(2) Project [d_date_sk#76853]\n      :                                         +- *(2) Filter ((((isnotnull(d_year#76859) AND isnotnull(d_moy#76861)) AND (d_year#76859 = 1999)) AND (d_moy#76861 = 11)) AND isnotnull(d_date_sk#76853))\n      :                                            +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#76853, d_moy#76861, d_year#76859], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#76853, d_date_id#76854, d_date#76855, d_month_seq#76856, d_week_seq#76857, d_quarter_s..., Partition Cols: []]\n      :- *(14) Project [catalog AS channel#76776, item#76771, return_ratio#76772, return_rank#76774, currency_rank#76775]\n      :  +- *(14) Filter ((return_rank#76774 <= 10) OR (currency_rank#76775 <= 10))\n      :     +- Window [rank(currency_ratio#76773) windowspecdefinition(currency_ratio#76773 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#76775], [currency_ratio#76773 ASC NULLS FIRST]\n      :        +- *(13) Sort [currency_ratio#76773 ASC NULLS FIRST], false, 0\n      :           +- Window [rank(return_ratio#76772) windowspecdefinition(return_ratio#76772 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#76774], [return_ratio#76772 ASC NULLS FIRST]\n      :              +- *(12) Sort [return_ratio#76772 ASC NULLS FIRST], false, 0\n      :                 +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#103730]\n      :                    +- *(11) HashAggregate(keys=[cs_item_sk#76896], functions=[sum(cast(coalesce(cr_return_quantity#76932, 0) as bigint)), sum(cast(coalesce(cs_quantity#76899, 0) as bigint)), sum(coalesce(cast(cr_return_amount#76933 as decimal(12,2)), 0.00)), sum(coalesce(cast(cs_net_paid#76910 as decimal(12,2)), 0.00))], output=[item#76771, return_ratio#76772, currency_ratio#76773])\n      :                       +- Exchange hashpartitioning(cs_item_sk#76896, 200), ENSURE_REQUIREMENTS, [id=#103726]\n      :                          +- *(10) HashAggregate(keys=[cs_item_sk#76896], functions=[partial_sum(cast(coalesce(cr_return_quantity#76932, 0) as bigint)), partial_sum(cast(coalesce(cs_quantity#76899, 0) as bigint)), partial_sum(coalesce(cast(cr_return_amount#76933 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(cs_net_paid#76910 as decimal(12,2)), 0.00))], output=[cs_item_sk#76896, sum#77130L, sum#77131L, sum#77132, isEmpty#77133, sum#77134, isEmpty#77135])\n      :                             +- *(10) Project [cs_item_sk#76896, cs_quantity#76899, cs_net_paid#76910, cr_return_quantity#76932, cr_return_amount#76933]\n      :                                +- *(10) BroadcastHashJoin [cs_sold_date_sk#76881], [d_date_sk#76942], Inner, BuildRight, false\n      :                                   :- *(10) Project [cs_sold_date_sk#76881, cs_item_sk#76896, cs_quantity#76899, cs_net_paid#76910, cr_return_quantity#76932, cr_return_amount#76933]\n      :                                   :  +- *(10) BroadcastHashJoin [cs_order_number#76898L, cs_item_sk#76896], [cr_order_number#76931L, cr_item_sk#76917], Inner, BuildRight, false\n      :                                   :     :- *(10) Project [cs_sold_date_sk#76881, cs_item_sk#76896, cs_order_number#76898L, cs_quantity#76899, cs_net_paid#76910]\n      :                                   :     :  +- *(10) Filter ((((((((isnotnull(cs_net_profit#76914) AND isnotnull(cs_net_paid#76910)) AND isnotnull(cs_quantity#76899)) AND (cs_net_profit#76914 > 1.00)) AND (cs_net_paid#76910 > 0.00)) AND (cs_quantity#76899 > 0)) AND isnotnull(cs_order_number#76898L)) AND isnotnull(cs_item_sk#76896)) AND isnotnull(cs_sold_date_sk#76881))\n      :                                   :     :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#76896, cs_net_paid#76910, cs_net_profit#76914, cs_order_number#76898L, cs_quantity#76899, cs_sold_date_sk#76881], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#76881, cs_sold_time_sk#76882, cs_ship_date_sk#76883, cs_bill_customer_sk#76884, ..., Partition Cols: []]\n      :                                   :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#103627]\n      :                                   :        +- *(8) Filter (((isnotnull(cr_return_amount#76933) AND (cr_return_amount#76933 > 10000.00)) AND isnotnull(cr_order_number#76931L)) AND isnotnull(cr_item_sk#76917))\n      :                                   :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#76917, cr_order_number#76931L, cr_return_quantity#76932, cr_return_amount#76933], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#76915, cr_returned_time_sk#76916, cr_item_sk#76917, cr_refunded_customer_sk#..., Partition Cols: []]\n      :                                   +- ReusedExchange [d_date_sk#76942], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#103598]\n      +- *(21) Project [store AS channel#76782, item#76777, return_ratio#76778, return_rank#76780, currency_rank#76781]\n         +- *(21) Filter ((return_rank#76780 <= 10) OR (currency_rank#76781 <= 10))\n            +- Window [rank(currency_ratio#76779) windowspecdefinition(currency_ratio#76779 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS currency_rank#76781], [currency_ratio#76779 ASC NULLS FIRST]\n               +- *(20) Sort [currency_ratio#76779 ASC NULLS FIRST], false, 0\n                  +- Window [rank(return_ratio#76778) windowspecdefinition(return_ratio#76778 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS return_rank#76780], [return_ratio#76778 ASC NULLS FIRST]\n                     +- *(19) Sort [return_ratio#76778 ASC NULLS FIRST], false, 0\n                        +- Exchange SinglePartition, ENSURE_REQUIREMENTS, [id=#103825]\n                           +- *(18) HashAggregate(keys=[ss_item_sk#76972], functions=[sum(cast(coalesce(sr_return_quantity#77003, 0) as bigint)), sum(cast(coalesce(ss_quantity#76980, 0) as bigint)), sum(coalesce(cast(sr_return_amt#77004 as decimal(12,2)), 0.00)), sum(coalesce(cast(ss_net_paid#76990 as decimal(12,2)), 0.00))], output=[item#76777, return_ratio#76778, currency_ratio#76779])\n                              +- Exchange hashpartitioning(ss_item_sk#76972, 200), ENSURE_REQUIREMENTS, [id=#103821]\n                                 +- *(17) HashAggregate(keys=[ss_item_sk#76972], functions=[partial_sum(cast(coalesce(sr_return_quantity#77003, 0) as bigint)), partial_sum(cast(coalesce(ss_quantity#76980, 0) as bigint)), partial_sum(coalesce(cast(sr_return_amt#77004 as decimal(12,2)), 0.00)), partial_sum(coalesce(cast(ss_net_paid#76990 as decimal(12,2)), 0.00))], output=[ss_item_sk#76972, sum#77142L, sum#77143L, sum#77144, isEmpty#77145, sum#77146, isEmpty#77147])\n                                    +- *(17) Project [ss_item_sk#76972, ss_quantity#76980, ss_net_paid#76990, sr_return_quantity#77003, sr_return_amt#77004]\n                                       +- *(17) BroadcastHashJoin [ss_sold_date_sk#76970], [d_date_sk#77013], Inner, BuildRight, false\n                                          :- *(17) Project [ss_sold_date_sk#76970, ss_item_sk#76972, ss_quantity#76980, ss_net_paid#76990, sr_return_quantity#77003, sr_return_amt#77004]\n                                          :  +- *(17) BroadcastHashJoin [ss_ticket_number#76979L, ss_item_sk#76972], [sr_ticket_number#77002L, sr_item_sk#76995], Inner, BuildRight, false\n                                          :     :- *(17) Project [ss_sold_date_sk#76970, ss_item_sk#76972, ss_ticket_number#76979L, ss_quantity#76980, ss_net_paid#76990]\n                                          :     :  +- *(17) Filter ((((((((isnotnull(ss_net_profit#76992) AND isnotnull(ss_net_paid#76990)) AND isnotnull(ss_quantity#76980)) AND (ss_net_profit#76992 > 1.00)) AND (ss_net_paid#76990 > 0.00)) AND (ss_quantity#76980 > 0)) AND isnotnull(ss_ticket_number#76979L)) AND isnotnull(ss_item_sk#76972)) AND isnotnull(ss_sold_date_sk#76970))\n                                          :     :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#76972, ss_net_paid#76990, ss_net_profit#76992, ss_quantity#76980, ss_sold_date_sk#76970, ss_ticket_number#76979L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#76970, ss_sold_time_sk#76971, ss_item_sk#76972, ss_customer_sk#76973, ss_cdemo_s..., Partition Cols: []]\n                                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#103664]\n                                          :        +- *(15) Filter (((isnotnull(sr_return_amt#77004) AND (sr_return_amt#77004 > 10000.00)) AND isnotnull(sr_ticket_number#77002L)) AND isnotnull(sr_item_sk#76995))\n                                          :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#76995, sr_ticket_number#77002L, sr_return_quantity#77003, sr_return_amt#77004], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#76993, sr_return_time_sk#76994, sr_item_sk#76995, sr_customer_sk#76996, sr_c..., Partition Cols: []]\n                                          +- ReusedExchange [d_date_sk#77013], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#103598]\n",
    "iteration" : 3,
    "name" : "q49"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#77630, id#77631, spark_grouping_id#77629L, 200), ENSURE_REQUIREMENTS, [id=#104286]\n+- *(20) HashAggregate(keys=[channel#77630, id#77631, spark_grouping_id#77629L], functions=[partial_sum(sales#77232), partial_sum(returns#77234), partial_sum(profit#77210)], output=[channel#77630, id#77631, spark_grouping_id#77629L, sum#77649, isEmpty#77650, sum#77651, isEmpty#77652, sum#77653, isEmpty#77654])\n   +- *(20) Expand [List(sales#77232, returns#77234, profit#77210, channel#77627, id#77628, 0), List(sales#77232, returns#77234, profit#77210, channel#77627, null, 1), List(sales#77232, returns#77234, profit#77210, null, null, 3)], [sales#77232, returns#77234, profit#77210, channel#77630, id#77631, spark_grouping_id#77629L]\n      +- Union\n         :- *(6) HashAggregate(keys=[s_store_id#77340], functions=[sum(UnscaledValue(sales_price#77222)), sum(UnscaledValue(return_amt#77224)), sum(UnscaledValue(profit#77223)), sum(UnscaledValue(net_loss#77225))], output=[sales#77232, returns#77234, profit#77210, channel#77627, id#77628])\n         :  +- Exchange hashpartitioning(s_store_id#77340, 200), ENSURE_REQUIREMENTS, [id=#104151]\n         :     +- *(5) HashAggregate(keys=[s_store_id#77340], functions=[partial_sum(UnscaledValue(sales_price#77222)), partial_sum(UnscaledValue(return_amt#77224)), partial_sum(UnscaledValue(profit#77223)), partial_sum(UnscaledValue(net_loss#77225))], output=[s_store_id#77340, sum#77659L, sum#77660L, sum#77661L, sum#77662L])\n         :        +- *(5) Project [sales_price#77222, profit#77223, return_amt#77224, net_loss#77225, s_store_id#77340]\n         :           +- *(5) BroadcastHashJoin [store_sk#77220], [s_store_sk#77339], Inner, BuildRight, false\n         :              :- *(5) Project [store_sk#77220, sales_price#77222, profit#77223, return_amt#77224, net_loss#77225]\n         :              :  +- *(5) BroadcastHashJoin [date_sk#77221], [d_date_sk#77311], Inner, BuildRight, false\n         :              :     :- Union\n         :              :     :  :- *(1) Project [ss_store_sk#77275 AS store_sk#77220, ss_sold_date_sk#77268 AS date_sk#77221, ss_ext_sales_price#77283 AS sales_price#77222, ss_net_profit#77290 AS profit#77223, 0.00 AS return_amt#77224, 0.00 AS net_loss#77225]\n         :              :     :  :  +- *(1) Filter (isnotnull(ss_sold_date_sk#77268) AND isnotnull(ss_store_sk#77275))\n         :              :     :  :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_ext_sales_price#77283, ss_net_profit#77290, ss_sold_date_sk#77268, ss_store_sk#77275], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#77268, ss_sold_time_sk#77269, ss_item_sk#77270, ss_customer_sk#77271, ss_cdemo_s..., Partition Cols: []]\n         :              :     :  +- *(2) Project [sr_store_sk#77298 AS store_sk#77226, sr_returned_date_sk#77291 AS date_sk#77227, 0.00 AS sales_price#77228, 0.00 AS profit#77229, sr_return_amt#77302 AS return_amt#77230, sr_net_loss#77310 AS net_loss#77231]\n         :              :     :     +- *(2) Filter (isnotnull(sr_returned_date_sk#77291) AND isnotnull(sr_store_sk#77298))\n         :              :     :        +- Scan hive tpcds_sf1_iceberg.store_returns [sr_net_loss#77310, sr_return_amt#77302, sr_returned_date_sk#77291, sr_store_sk#77298], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#77291, sr_return_time_sk#77292, sr_item_sk#77293, sr_customer_sk#77294, sr_c..., Partition Cols: []]\n         :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104138]\n         :              :        +- *(3) Project [d_date_sk#77311]\n         :              :           +- *(3) Filter (((isnotnull(d_date#77313) AND (d_date#77313 >= 11188)) AND (d_date#77313 <= 11202)) AND isnotnull(d_date_sk#77311))\n         :              :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#77313, d_date_sk#77311], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#77311, d_date_id#77312, d_date#77313, d_month_seq#77314, d_week_seq#77315, d_quarter_s..., Partition Cols: []]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#104145]\n         :                 +- *(4) Filter isnotnull(s_store_sk#77339)\n         :                    +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#77339, s_store_id#77340], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#77339, s_store_id#77340, s_rec_start_date#77341, s_rec_end_date#77342, s_closed_date_..., Partition Cols: []]\n         :- *(12) HashAggregate(keys=[cp_catalog_page_id#77458], functions=[sum(UnscaledValue(sales_price#77238)), sum(UnscaledValue(return_amt#77240)), sum(UnscaledValue(profit#77239)), sum(UnscaledValue(net_loss#77241))], output=[sales#77248, returns#77250, profit#77213, channel#77639, id#77640])\n         :  +- Exchange hashpartitioning(cp_catalog_page_id#77458, 200), ENSURE_REQUIREMENTS, [id=#104257]\n         :     +- *(11) HashAggregate(keys=[cp_catalog_page_id#77458], functions=[partial_sum(UnscaledValue(sales_price#77238)), partial_sum(UnscaledValue(return_amt#77240)), partial_sum(UnscaledValue(profit#77239)), partial_sum(UnscaledValue(net_loss#77241))], output=[cp_catalog_page_id#77458, sum#77667L, sum#77668L, sum#77669L, sum#77670L])\n         :        +- *(11) Project [sales_price#77238, profit#77239, return_amt#77240, net_loss#77241, cp_catalog_page_id#77458]\n         :           +- *(11) BroadcastHashJoin [page_sk#77236], [cp_catalog_page_sk#77457], Inner, BuildRight, false\n         :              :- *(11) Project [page_sk#77236, sales_price#77238, profit#77239, return_amt#77240, net_loss#77241]\n         :              :  +- *(11) BroadcastHashJoin [date_sk#77237], [d_date_sk#77429], Inner, BuildRight, false\n         :              :     :- Union\n         :              :     :  :- *(7) Project [cs_catalog_page_sk#77380 AS page_sk#77236, cs_sold_date_sk#77368 AS date_sk#77237, cs_ext_sales_price#77391 AS sales_price#77238, cs_net_profit#77401 AS profit#77239, 0.00 AS return_amt#77240, 0.00 AS net_loss#77241]\n         :              :     :  :  +- *(7) Filter (isnotnull(cs_sold_date_sk#77368) AND isnotnull(cs_catalog_page_sk#77380))\n         :              :     :  :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_catalog_page_sk#77380, cs_ext_sales_price#77391, cs_net_profit#77401, cs_sold_date_sk#77368], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#77368, cs_sold_time_sk#77369, cs_ship_date_sk#77370, cs_bill_customer_sk#77371, ..., Partition Cols: []]\n         :              :     :  +- *(8) Project [cr_catalog_page_sk#77414 AS page_sk#77242, cr_returned_date_sk#77402 AS date_sk#77243, 0.00 AS sales_price#77244, 0.00 AS profit#77245, cr_return_amount#77420 AS return_amt#77246, cr_net_loss#77428 AS net_loss#77247]\n         :              :     :     +- *(8) Filter (isnotnull(cr_returned_date_sk#77402) AND isnotnull(cr_catalog_page_sk#77414))\n         :              :     :        +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_catalog_page_sk#77414, cr_net_loss#77428, cr_return_amount#77420, cr_returned_date_sk#77402], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#77402, cr_returned_time_sk#77403, cr_item_sk#77404, cr_refunded_customer_sk#..., Partition Cols: []]\n         :              :     +- ReusedExchange [d_date_sk#77429], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104138]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#104176]\n         :                 +- *(10) Filter isnotnull(cp_catalog_page_sk#77457)\n         :                    +- Scan hive tpcds_sf1_iceberg.catalog_page [cp_catalog_page_sk#77457, cp_catalog_page_id#77458], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cp_catalog_page_sk#77457, cp_catalog_page_id#77458, cp_start_date_sk#77459, cp_end_date_sk#77460..., Partition Cols: []]\n         +- *(19) HashAggregate(keys=[web_site_id#77587], functions=[sum(UnscaledValue(sales_price#77254)), sum(UnscaledValue(return_amt#77256)), sum(UnscaledValue(profit#77255)), sum(UnscaledValue(net_loss#77257))], output=[sales#77264, returns#77266, profit#77216, channel#77641, id#77642])\n            +- Exchange hashpartitioning(web_site_id#77587, 200), ENSURE_REQUIREMENTS, [id=#104277]\n               +- *(18) HashAggregate(keys=[web_site_id#77587], functions=[partial_sum(UnscaledValue(sales_price#77254)), partial_sum(UnscaledValue(return_amt#77256)), partial_sum(UnscaledValue(profit#77255)), partial_sum(UnscaledValue(net_loss#77257))], output=[web_site_id#77587, sum#77675L, sum#77676L, sum#77677L, sum#77678L])\n                  +- *(18) Project [sales_price#77254, profit#77255, return_amt#77256, net_loss#77257, web_site_id#77587]\n                     +- *(18) BroadcastHashJoin [wsr_web_site_sk#77252], [web_site_sk#77586], Inner, BuildRight, false\n                        :- *(18) Project [wsr_web_site_sk#77252, sales_price#77254, profit#77255, return_amt#77256, net_loss#77257]\n                        :  +- *(18) BroadcastHashJoin [date_sk#77253], [d_date_sk#77558], Inner, BuildRight, false\n                        :     :- Union\n                        :     :  :- *(13) Project [ws_web_site_sk#77479 AS wsr_web_site_sk#77252, ws_sold_date_sk#77466 AS date_sk#77253, ws_ext_sales_price#77489 AS sales_price#77254, ws_net_profit#77499 AS profit#77255, 0.00 AS return_amt#77256, 0.00 AS net_loss#77257]\n                        :     :  :  +- *(13) Filter (isnotnull(ws_sold_date_sk#77466) AND isnotnull(ws_web_site_sk#77479))\n                        :     :  :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#77489, ws_net_profit#77499, ws_sold_date_sk#77466, ws_web_site_sk#77479], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#77466, ws_sold_time_sk#77467, ws_ship_date_sk#77468, ws_item_sk#77469, ws_bill_c..., Partition Cols: []]\n                        :     :  +- *(15) Project [ws_web_site_sk#77537 AS wsr_web_site_sk#77258, wr_returned_date_sk#77500 AS date_sk#77259, 0.00 AS sales_price#77260, 0.00 AS profit#77261, wr_return_amt#77515 AS return_amt#77262, wr_net_loss#77523 AS net_loss#77263]\n                        :     :     +- *(15) BroadcastHashJoin [wr_item_sk#77502, wr_order_number#77513L], [ws_item_sk#77527, ws_order_number#77541L], Inner, BuildLeft, false\n                        :     :        :- BroadcastExchange HashedRelationBroadcastMode(List(input[1, int, true], input[2, bigint, true]),false), [id=#104193]\n                        :     :        :  +- *(14) Filter isnotnull(wr_returned_date_sk#77500)\n                        :     :        :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_returned_date_sk#77500, wr_item_sk#77502, wr_order_number#77513L, wr_return_amt#77515, wr_net_loss#77523], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#77500, wr_returned_time_sk#77501, wr_item_sk#77502, wr_refunded_customer_sk#..., Partition Cols: []]\n                        :     :        +- *(15) Filter ((isnotnull(ws_item_sk#77527) AND isnotnull(ws_order_number#77541L)) AND isnotnull(ws_web_site_sk#77537))\n                        :     :           +- Scan hive tpcds_sf1_iceberg.web_sales [ws_item_sk#77527, ws_web_site_sk#77537, ws_order_number#77541L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#77524, ws_sold_time_sk#77525, ws_ship_date_sk#77526, ws_item_sk#77527, ws_bill_c..., Partition Cols: []]\n                        :     +- ReusedExchange [d_date_sk#77558], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104138]\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#104213]\n                           +- *(17) Filter isnotnull(web_site_sk#77586)\n                              +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#77586, web_site_id#77587], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#77586, web_site_id#77587, web_rec_start_date#77588, web_rec_end_date#77589, web_name..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q5"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#77738, s_company_id#77749, s_street_number#77751, s_street_name#77752, s_street_type#77753, s_suite_number#77754, s_city#77755, s_county#77756, s_state#77757, s_zip#77758, 200), ENSURE_REQUIREMENTS, [id=#104417]\n+- *(5) HashAggregate(keys=[s_store_name#77738, s_company_id#77749, s_street_number#77751, s_street_name#77752, s_street_type#77753, s_suite_number#77754, s_city#77755, s_county#77756, s_state#77757, s_zip#77758], functions=[partial_sum(cast(CASE WHEN ((sr_returned_date_sk#77713 - ss_sold_date_sk#77690) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#77713 - ss_sold_date_sk#77690) > 30) AND ((sr_returned_date_sk#77713 - ss_sold_date_sk#77690) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#77713 - ss_sold_date_sk#77690) > 60) AND ((sr_returned_date_sk#77713 - ss_sold_date_sk#77690) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((sr_returned_date_sk#77713 - ss_sold_date_sk#77690) > 90) AND ((sr_returned_date_sk#77713 - ss_sold_date_sk#77690) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((sr_returned_date_sk#77713 - ss_sold_date_sk#77690) > 120) THEN 1 ELSE 0 END as bigint))], output=[s_store_name#77738, s_company_id#77749, s_street_number#77751, s_street_name#77752, s_street_type#77753, s_suite_number#77754, s_city#77755, s_county#77756, s_state#77757, s_zip#77758, sum#77853L, sum#77854L, sum#77855L, sum#77856L, sum#77857L])\n   +- *(5) Project [ss_sold_date_sk#77690, sr_returned_date_sk#77713, s_store_name#77738, s_company_id#77749, s_street_number#77751, s_street_name#77752, s_street_type#77753, s_suite_number#77754, s_city#77755, s_county#77756, s_state#77757, s_zip#77758]\n      +- *(5) BroadcastHashJoin [sr_returned_date_sk#77713], [d_date_sk#77790], Inner, BuildRight, false\n         :- *(5) Project [ss_sold_date_sk#77690, sr_returned_date_sk#77713, s_store_name#77738, s_company_id#77749, s_street_number#77751, s_street_name#77752, s_street_type#77753, s_suite_number#77754, s_city#77755, s_county#77756, s_state#77757, s_zip#77758]\n         :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#77690], [d_date_sk#77762], Inner, BuildRight, false\n         :     :- *(5) Project [ss_sold_date_sk#77690, sr_returned_date_sk#77713, s_store_name#77738, s_company_id#77749, s_street_number#77751, s_street_name#77752, s_street_type#77753, s_suite_number#77754, s_city#77755, s_county#77756, s_state#77757, s_zip#77758]\n         :     :  +- *(5) BroadcastHashJoin [ss_store_sk#77697], [s_store_sk#77733], Inner, BuildRight, false\n         :     :     :- *(5) Project [ss_sold_date_sk#77690, ss_store_sk#77697, sr_returned_date_sk#77713]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_ticket_number#77699L, ss_item_sk#77692, ss_customer_sk#77693], [sr_ticket_number#77722L, sr_item_sk#77715, sr_customer_sk#77716], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter ((((isnotnull(ss_ticket_number#77699L) AND isnotnull(ss_item_sk#77692)) AND isnotnull(ss_customer_sk#77693)) AND isnotnull(ss_store_sk#77697)) AND isnotnull(ss_sold_date_sk#77690))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#77690, ss_item_sk#77692, ss_customer_sk#77693, ss_store_sk#77697, ss_ticket_number#77699L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#77690, ss_sold_time_sk#77691, ss_item_sk#77692, ss_customer_sk#77693, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[3, bigint, false], input[1, int, false], input[2, int, false]),false), [id=#104389]\n         :     :     :        +- *(1) Filter (((isnotnull(sr_ticket_number#77722L) AND isnotnull(sr_item_sk#77715)) AND isnotnull(sr_customer_sk#77716)) AND isnotnull(sr_returned_date_sk#77713))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#77713, sr_item_sk#77715, sr_customer_sk#77716, sr_ticket_number#77722L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#77713, sr_return_time_sk#77714, sr_item_sk#77715, sr_customer_sk#77716, sr_c..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#104396]\n         :     :        +- *(2) Filter isnotnull(s_store_sk#77733)\n         :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#77733, s_store_name#77738, s_company_id#77749, s_street_number#77751, s_street_name#77752, s_street_type#77753, s_suite_number#77754, s_city#77755, s_county#77756, s_state#77757, s_zip#77758], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#77733, s_store_id#77734, s_rec_start_date#77735, s_rec_end_date#77736, s_closed_date_..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#104403]\n         :        +- *(3) Filter isnotnull(d_date_sk#77762)\n         :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#77762], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#77762, d_date_id#77763, d_date#77764, d_month_seq#77765, d_week_seq#77766, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104411]\n            +- *(4) Project [d_date_sk#77790]\n               +- *(4) Filter ((((isnotnull(d_year#77796) AND isnotnull(d_moy#77798)) AND (d_year#77796 = 2000)) AND (d_moy#77798 = 9)) AND isnotnull(d_date_sk#77790))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#77790, d_moy#77798, d_year#77796], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#77790, d_date_id#77791, d_date#77792, d_month_seq#77793, d_week_seq#77794, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q50"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(item_sk#77874, 200), ENSURE_REQUIREMENTS, [id=#104727]\n+- *(13) Project [CASE WHEN isnotnull(item_sk#77880) THEN item_sk#77880 ELSE item_sk#77882 END AS item_sk#77874, CASE WHEN isnotnull(d_date#77920) THEN d_date#77920 ELSE d_date#77971 END AS d_date#77875, cume_sales#77881 AS web_sales#77876, cume_sales#77883 AS store_sales#77877]\n   +- SortMergeJoin [item_sk#77880, d_date#77920], [item_sk#77882, d_date#77971], FullOuter\n      :- *(6) Sort [item_sk#77880 ASC NULLS FIRST, d_date#77920 ASC NULLS FIRST], false, 0\n      :  +- Exchange hashpartitioning(item_sk#77880, d_date#77920, 200), ENSURE_REQUIREMENTS, [id=#104576]\n      :     +- *(5) Project [item_sk#77880, d_date#77920, cume_sales#77881]\n      :        +- Window [sum(_w0#78001) windowspecdefinition(ws_item_sk#77887, d_date#77920 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#77881], [ws_item_sk#77887], [d_date#77920 ASC NULLS FIRST]\n      :           +- *(4) Sort [ws_item_sk#77887 ASC NULLS FIRST, d_date#77920 ASC NULLS FIRST], false, 0\n      :              +- Exchange hashpartitioning(ws_item_sk#77887, 200), ENSURE_REQUIREMENTS, [id=#104568]\n      :                 +- *(3) HashAggregate(keys=[ws_item_sk#77887, d_date#77920], functions=[sum(UnscaledValue(ws_sales_price#77905))], output=[item_sk#77880, d_date#77920, _w0#78001, ws_item_sk#77887])\n      :                    +- Exchange hashpartitioning(ws_item_sk#77887, d_date#77920, 200), ENSURE_REQUIREMENTS, [id=#104564]\n      :                       +- *(2) HashAggregate(keys=[ws_item_sk#77887, d_date#77920], functions=[partial_sum(UnscaledValue(ws_sales_price#77905))], output=[ws_item_sk#77887, d_date#77920, sum#78012L])\n      :                          +- *(2) Project [ws_item_sk#77887, ws_sales_price#77905, d_date#77920]\n      :                             +- *(2) BroadcastHashJoin [ws_sold_date_sk#77884], [d_date_sk#77918], Inner, BuildRight, false\n      :                                :- *(2) Filter (isnotnull(ws_item_sk#77887) AND isnotnull(ws_sold_date_sk#77884))\n      :                                :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#77884, ws_item_sk#77887, ws_sales_price#77905], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#77884, ws_sold_time_sk#77885, ws_ship_date_sk#77886, ws_item_sk#77887, ws_bill_c..., Partition Cols: []]\n      :                                +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104558]\n      :                                   +- *(1) Project [d_date_sk#77918, d_date#77920]\n      :                                      +- *(1) Filter (((isnotnull(d_month_seq#77921) AND (d_month_seq#77921 >= 1177)) AND (d_month_seq#77921 <= 1188)) AND isnotnull(d_date_sk#77918))\n      :                                         +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#77920, d_date_sk#77918, d_month_seq#77921], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#77918, d_date_id#77919, d_date#77920, d_month_seq#77921, d_week_seq#77922, d_quarter_s..., Partition Cols: []]\n      +- *(12) Sort [item_sk#77882 ASC NULLS FIRST, d_date#77971 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(item_sk#77882, d_date#77971, 200), ENSURE_REQUIREMENTS, [id=#104655]\n            +- *(11) Project [item_sk#77882, d_date#77971, cume_sales#77883]\n               +- Window [sum(_w0#78002) windowspecdefinition(ss_item_sk#77948, d_date#77971 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#77883], [ss_item_sk#77948], [d_date#77971 ASC NULLS FIRST]\n                  +- *(10) Sort [ss_item_sk#77948 ASC NULLS FIRST, d_date#77971 ASC NULLS FIRST], false, 0\n                     +- Exchange hashpartitioning(ss_item_sk#77948, 200), ENSURE_REQUIREMENTS, [id=#104647]\n                        +- *(9) HashAggregate(keys=[ss_item_sk#77948, d_date#77971], functions=[sum(UnscaledValue(ss_sales_price#77959))], output=[item_sk#77882, d_date#77971, _w0#78002, ss_item_sk#77948])\n                           +- Exchange hashpartitioning(ss_item_sk#77948, d_date#77971, 200), ENSURE_REQUIREMENTS, [id=#104643]\n                              +- *(8) HashAggregate(keys=[ss_item_sk#77948, d_date#77971], functions=[partial_sum(UnscaledValue(ss_sales_price#77959))], output=[ss_item_sk#77948, d_date#77971, sum#78014L])\n                                 +- *(8) Project [ss_item_sk#77948, ss_sales_price#77959, d_date#77971]\n                                    +- *(8) BroadcastHashJoin [ss_sold_date_sk#77946], [d_date_sk#77969], Inner, BuildRight, false\n                                       :- *(8) Filter (isnotnull(ss_item_sk#77948) AND isnotnull(ss_sold_date_sk#77946))\n                                       :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#77946, ss_item_sk#77948, ss_sales_price#77959], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#77946, ss_sold_time_sk#77947, ss_item_sk#77948, ss_customer_sk#77949, ss_cdemo_s..., Partition Cols: []]\n                                       +- ReusedExchange [d_date_sk#77969, d_date#77971], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104558]\n",
    "iteration" : 3,
    "name" : "q51"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#78037, i_brand#78090, i_brand_id#78089, 200), ENSURE_REQUIREMENTS, [id=#104815]\n+- *(3) HashAggregate(keys=[d_year#78037, i_brand#78090, i_brand_id#78089], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#78074))], output=[d_year#78037, i_brand#78090, i_brand_id#78089, sum#78113L])\n   +- *(3) Project [d_year#78037, ss_ext_sales_price#78074, i_brand_id#78089, i_brand#78090]\n      +- *(3) BroadcastHashJoin [ss_item_sk#78061], [i_item_sk#78082], Inner, BuildRight, false\n         :- *(3) Project [d_year#78037, ss_item_sk#78061, ss_ext_sales_price#78074]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#78031], [ss_sold_date_sk#78059], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104799]\n         :     :  +- *(1) Project [d_date_sk#78031, d_year#78037]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#78039) AND isnotnull(d_year#78037)) AND (d_moy#78039 = 12)) AND (d_year#78037 = 2001)) AND isnotnull(d_date_sk#78031))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#78031, d_moy#78039, d_year#78037], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#78031, d_date_id#78032, d_date#78033, d_month_seq#78034, d_week_seq#78035, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#78059) AND isnotnull(ss_item_sk#78061))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#78059, ss_item_sk#78061, ss_ext_sales_price#78074], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#78059, ss_sold_time_sk#78060, ss_item_sk#78061, ss_customer_sk#78062, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104809]\n            +- *(2) Project [i_item_sk#78082, i_brand_id#78089, i_brand#78090]\n               +- *(2) Filter ((isnotnull(i_manager_id#78102) AND (i_manager_id#78102 = 1)) AND isnotnull(i_item_sk#78082))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#78090, i_brand_id#78089, i_item_sk#78082, i_manager_id#78102], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#78082, i_item_id#78083, i_rec_start_date#78084, i_rec_end_date#78085, i_item_desc#7808..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q52"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manufact_id#78134, 200), ENSURE_REQUIREMENTS, [id=#104946]\n+- *(5) HashAggregate(keys=[i_manufact_id#78134, d_qoy#78176], functions=[sum(UnscaledValue(ss_sales_price#78156))], output=[i_manufact_id#78134, sum_sales#78119, _w0#78226])\n   +- Exchange hashpartitioning(i_manufact_id#78134, d_qoy#78176, 200), ENSURE_REQUIREMENTS, [id=#104942]\n      +- *(4) HashAggregate(keys=[i_manufact_id#78134, d_qoy#78176], functions=[partial_sum(UnscaledValue(ss_sales_price#78156))], output=[i_manufact_id#78134, d_qoy#78176, sum#78231L])\n         +- *(4) Project [i_manufact_id#78134, ss_sales_price#78156, d_qoy#78176]\n            +- *(4) BroadcastHashJoin [ss_store_sk#78150], [s_store_sk#78194], Inner, BuildRight, false\n               :- *(4) Project [i_manufact_id#78134, ss_store_sk#78150, ss_sales_price#78156, d_qoy#78176]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#78143], [d_date_sk#78166], Inner, BuildRight, false\n               :     :- *(4) Project [i_manufact_id#78134, ss_sold_date_sk#78143, ss_store_sk#78150, ss_sales_price#78156]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#78121], [ss_item_sk#78145], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104919]\n               :     :     :  +- *(1) Project [i_item_sk#78121, i_manufact_id#78134]\n               :     :     :     +- *(1) Filter ((((i_category#78133 IN (Books,Children,Electronics) AND i_class#78131 IN (personal,portable,reference,self-help)) AND i_brand#78129 IN (scholaramalgamalg #14,scholaramalgamalg #7,exportiunivamalg #9,scholaramalgamalg #9)) OR ((i_category#78133 IN (Women,Music,Men) AND i_class#78131 IN (accessories,classical,fragrances,pants)) AND i_brand#78129 IN (amalgimporto #1,edu packscholar #1,exportiimporto #1,importoamalg #1))) AND isnotnull(i_item_sk#78121))\n               :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#78129, i_category#78133, i_class#78131, i_item_sk#78121, i_manufact_id#78134], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#78121, i_item_id#78122, i_rec_start_date#78123, i_rec_end_date#78124, i_item_desc#7812..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#78145) AND isnotnull(ss_sold_date_sk#78143)) AND isnotnull(ss_store_sk#78150))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#78143, ss_item_sk#78145, ss_store_sk#78150, ss_sales_price#78156], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#78143, ss_sold_time_sk#78144, ss_item_sk#78145, ss_customer_sk#78146, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#104929]\n               :        +- *(2) Project [d_date_sk#78166, d_qoy#78176]\n               :           +- *(2) Filter (d_month_seq#78169 INSET (1190,1196,1191,1199,1195,1192,1194,1198,1188,1189,1193,1197) AND isnotnull(d_date_sk#78166))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#78166, d_month_seq#78169, d_qoy#78176], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#78166, d_date_id#78167, d_date#78168, d_month_seq#78169, d_week_seq#78170, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#104936]\n                  +- *(3) Filter isnotnull(s_store_sk#78194)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#78194], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#78194, s_store_id#78195, s_rec_start_date#78196, s_rec_end_date#78197, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q53"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(segment#78247, 200), ENSURE_REQUIREMENTS, [id=#105276]\n+- *(14) HashAggregate(keys=[segment#78247], functions=[partial_count(1)], output=[segment#78247, count#78541L])\n   +- *(14) HashAggregate(keys=[c_customer_sk#78367], functions=[sum(UnscaledValue(ss_ext_sales_price#78400))], output=[segment#78247])\n      +- *(14) HashAggregate(keys=[c_customer_sk#78367], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#78400))], output=[c_customer_sk#78367, sum#78543L])\n         +- *(14) Project [c_customer_sk#78367, ss_ext_sales_price#78400]\n            +- *(14) BroadcastHashJoin [ss_sold_date_sk#78385], [d_date_sk#78450], Inner, BuildRight, false\n               :- *(14) Project [c_customer_sk#78367, ss_sold_date_sk#78385, ss_ext_sales_price#78400]\n               :  +- *(14) BroadcastHashJoin [ca_county#78415, ca_state#78416], [s_county#78444, s_state#78445], Inner, BuildRight, false\n               :     :- *(14) Project [c_customer_sk#78367, ss_sold_date_sk#78385, ss_ext_sales_price#78400, ca_county#78415, ca_state#78416]\n               :     :  +- *(14) BroadcastHashJoin [c_current_addr_sk#78371], [ca_address_sk#78408], Inner, BuildRight, false\n               :     :     :- *(14) Project [c_customer_sk#78367, c_current_addr_sk#78371, ss_sold_date_sk#78385, ss_ext_sales_price#78400]\n               :     :     :  +- *(14) SortMergeJoin [c_customer_sk#78367], [ss_customer_sk#78388], Inner\n               :     :     :     :- *(8) Sort [c_customer_sk#78367 ASC NULLS FIRST], false, 0\n               :     :     :     :  +- Exchange hashpartitioning(c_customer_sk#78367, 200), ENSURE_REQUIREMENTS, [id=#105235]\n               :     :     :     :     +- *(7) HashAggregate(keys=[c_customer_sk#78367, c_current_addr_sk#78371], functions=[], output=[c_customer_sk#78367, c_current_addr_sk#78371])\n               :     :     :     :        +- Exchange hashpartitioning(c_customer_sk#78367, c_current_addr_sk#78371, 200), ENSURE_REQUIREMENTS, [id=#105231]\n               :     :     :     :           +- *(6) HashAggregate(keys=[c_customer_sk#78367, c_current_addr_sk#78371], functions=[], output=[c_customer_sk#78367, c_current_addr_sk#78371])\n               :     :     :     :              +- *(6) Project [c_customer_sk#78367, c_current_addr_sk#78371]\n               :     :     :     :                 +- *(6) BroadcastHashJoin [customer_sk#78239], [c_customer_sk#78367], Inner, BuildRight, false\n               :     :     :     :                    :- *(6) Project [customer_sk#78239]\n               :     :     :     :                    :  +- *(6) BroadcastHashJoin [sold_date_sk#78238], [d_date_sk#78339], Inner, BuildRight, false\n               :     :     :     :                    :     :- *(6) Project [sold_date_sk#78238, customer_sk#78239]\n               :     :     :     :                    :     :  +- *(6) BroadcastHashJoin [item_sk#78240], [i_item_sk#78317], Inner, BuildRight, false\n               :     :     :     :                    :     :     :- Union\n               :     :     :     :                    :     :     :  :- *(1) Project [cs_sold_date_sk#78249 AS sold_date_sk#78238, cs_bill_customer_sk#78252 AS customer_sk#78239, cs_item_sk#78264 AS item_sk#78240]\n               :     :     :     :                    :     :     :  :  +- *(1) Filter ((isnotnull(cs_item_sk#78264) AND isnotnull(cs_sold_date_sk#78249)) AND isnotnull(cs_bill_customer_sk#78252))\n               :     :     :     :                    :     :     :  :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_bill_customer_sk#78252, cs_item_sk#78264, cs_sold_date_sk#78249], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#78249, cs_sold_time_sk#78250, cs_ship_date_sk#78251, cs_bill_customer_sk#78252, ..., Partition Cols: []]\n               :     :     :     :                    :     :     :  +- *(2) Project [ws_sold_date_sk#78283 AS sold_date_sk#78241, ws_bill_customer_sk#78287 AS customer_sk#78242, ws_item_sk#78286 AS item_sk#78243]\n               :     :     :     :                    :     :     :     +- *(2) Filter ((isnotnull(ws_item_sk#78286) AND isnotnull(ws_sold_date_sk#78283)) AND isnotnull(ws_bill_customer_sk#78287))\n               :     :     :     :                    :     :     :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_bill_customer_sk#78287, ws_item_sk#78286, ws_sold_date_sk#78283], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#78283, ws_sold_time_sk#78284, ws_ship_date_sk#78285, ws_item_sk#78286, ws_bill_c..., Partition Cols: []]\n               :     :     :     :                    :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105210]\n               :     :     :     :                    :     :        +- *(3) Project [i_item_sk#78317]\n               :     :     :     :                    :     :           +- *(3) Filter ((((isnotnull(i_category#78329) AND isnotnull(i_class#78327)) AND (i_category#78329 = Men)) AND (i_class#78327 = pants)) AND isnotnull(i_item_sk#78317))\n               :     :     :     :                    :     :              +- Scan hive tpcds_sf1_iceberg.item [i_category#78329, i_class#78327, i_item_sk#78317], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#78317, i_item_id#78318, i_rec_start_date#78319, i_rec_end_date#78320, i_item_desc#7832..., Partition Cols: []]\n               :     :     :     :                    :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105218]\n               :     :     :     :                    :        +- *(4) Project [d_date_sk#78339]\n               :     :     :     :                    :           +- *(4) Filter ((((isnotnull(d_moy#78347) AND isnotnull(d_year#78345)) AND (d_moy#78347 = 5)) AND (d_year#78345 = 2002)) AND isnotnull(d_date_sk#78339))\n               :     :     :     :                    :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#78339, d_moy#78347, d_year#78345], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#78339, d_date_id#78340, d_date#78341, d_month_seq#78342, d_week_seq#78343, d_quarter_s..., Partition Cols: []]\n               :     :     :     :                    +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#105225]\n               :     :     :     :                       +- *(5) Filter (isnotnull(c_customer_sk#78367) AND isnotnull(c_current_addr_sk#78371))\n               :     :     :     :                          +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#78367, c_current_addr_sk#78371], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#78367, c_customer_id#78368, c_current_cdemo_sk#78369, c_current_hdemo_sk#78370, c_..., Partition Cols: []]\n               :     :     :     +- *(10) Sort [ss_customer_sk#78388 ASC NULLS FIRST], false, 0\n               :     :     :        +- Exchange hashpartitioning(ss_customer_sk#78388, 200), ENSURE_REQUIREMENTS, [id=#105243]\n               :     :     :           +- *(9) Filter (isnotnull(ss_customer_sk#78388) AND isnotnull(ss_sold_date_sk#78385))\n               :     :     :              +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#78385, ss_customer_sk#78388, ss_ext_sales_price#78400], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#78385, ss_sold_time_sk#78386, ss_item_sk#78387, ss_customer_sk#78388, ss_cdemo_s..., Partition Cols: []]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#105253]\n               :     :        +- *(11) Filter ((isnotnull(ca_address_sk#78408) AND isnotnull(ca_county#78415)) AND isnotnull(ca_state#78416))\n               :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#78408, ca_county#78415, ca_state#78416], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#78408, ca_address_id#78409, ca_street_number#78410, ca_street_name#78411, ca_stree..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, false], input[1, string, false]),false), [id=#105260]\n               :        +- *(12) Filter (isnotnull(s_county#78444) AND isnotnull(s_state#78445))\n               :           +- Scan hive tpcds_sf1_iceberg.store [s_county#78444, s_state#78445], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#78421, s_store_id#78422, s_rec_start_date#78423, s_rec_end_date#78424, s_closed_date_..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105268]\n                  +- *(13) Project [d_date_sk#78450]\n                     +- *(13) Filter (((isnotnull(d_month_seq#78453) AND (d_month_seq#78453 >= Subquery scalar-subquery#78244, [id=#105123])) AND (d_month_seq#78453 <= Subquery scalar-subquery#78245, [id=#105144])) AND isnotnull(d_date_sk#78450))\n                        :  :- Subquery scalar-subquery#78244, [id=#105123]\n                        :  :  +- *(2) HashAggregate(keys=[(d_month_seq + 1)#78506], functions=[], output=[(d_month_seq + 1)#78506])\n                        :  :     +- Exchange hashpartitioning((d_month_seq + 1)#78506, 200), ENSURE_REQUIREMENTS, [id=#105119]\n                        :  :        +- *(1) HashAggregate(keys=[(d_month_seq + 1)#78506], functions=[], output=[(d_month_seq + 1)#78506])\n                        :  :           +- *(1) Project [(d_month_seq#78481 + 1) AS (d_month_seq + 1)#78506]\n                        :  :              +- *(1) Filter (((isnotnull(d_year#78484) AND isnotnull(d_moy#78486)) AND (d_year#78484 = 2002)) AND (d_moy#78486 = 5))\n                        :  :                 +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#78481, d_moy#78486, d_year#78484], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#78478, d_date_id#78479, d_date#78480, d_month_seq#78481, d_week_seq#78482, d_quarter_s..., Partition Cols: []]\n                        :  +- Subquery scalar-subquery#78245, [id=#105144]\n                        :     +- *(2) HashAggregate(keys=[(d_month_seq + 3)#78535], functions=[], output=[(d_month_seq + 3)#78535])\n                        :        +- Exchange hashpartitioning((d_month_seq + 3)#78535, 200), ENSURE_REQUIREMENTS, [id=#105140]\n                        :           +- *(1) HashAggregate(keys=[(d_month_seq + 3)#78535], functions=[], output=[(d_month_seq + 3)#78535])\n                        :              +- *(1) Project [(d_month_seq#78510 + 3) AS (d_month_seq + 3)#78535]\n                        :                 +- *(1) Filter (((isnotnull(d_year#78513) AND isnotnull(d_moy#78515)) AND (d_year#78513 = 2002)) AND (d_moy#78515 = 5))\n                        :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#78510, d_moy#78515, d_year#78513], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#78507, d_date_id#78508, d_date#78509, d_month_seq#78510, d_week_seq#78511, d_quarter_s..., Partition Cols: []]\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#78450, d_month_seq#78453], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#78450, d_date_id#78451, d_date#78452, d_month_seq#78453, d_week_seq#78454, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q54"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand#78610, i_brand_id#78609, 200), ENSURE_REQUIREMENTS, [id=#105432]\n+- *(3) HashAggregate(keys=[i_brand#78610, i_brand_id#78609], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#78594))], output=[i_brand#78610, i_brand_id#78609, sum#78632L])\n   +- *(3) Project [ss_ext_sales_price#78594, i_brand_id#78609, i_brand#78610]\n      +- *(3) BroadcastHashJoin [ss_item_sk#78581], [i_item_sk#78602], Inner, BuildRight, false\n         :- *(3) Project [ss_item_sk#78581, ss_ext_sales_price#78594]\n         :  +- *(3) BroadcastHashJoin [d_date_sk#78551], [ss_sold_date_sk#78579], Inner, BuildLeft, false\n         :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105416]\n         :     :  +- *(1) Project [d_date_sk#78551]\n         :     :     +- *(1) Filter ((((isnotnull(d_moy#78559) AND isnotnull(d_year#78557)) AND (d_moy#78559 = 11)) AND (d_year#78557 = 2001)) AND isnotnull(d_date_sk#78551))\n         :     :        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#78551, d_moy#78559, d_year#78557], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#78551, d_date_id#78552, d_date#78553, d_month_seq#78554, d_week_seq#78555, d_quarter_s..., Partition Cols: []]\n         :     +- *(3) Filter (isnotnull(ss_sold_date_sk#78579) AND isnotnull(ss_item_sk#78581))\n         :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#78579, ss_item_sk#78581, ss_ext_sales_price#78594], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#78579, ss_sold_time_sk#78580, ss_item_sk#78581, ss_customer_sk#78582, ss_cdemo_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105426]\n            +- *(2) Project [i_item_sk#78602, i_brand_id#78609, i_brand#78610]\n               +- *(2) Filter ((isnotnull(i_manager_id#78622) AND (i_manager_id#78622 = 67)) AND isnotnull(i_item_sk#78602))\n                  +- Scan hive tpcds_sf1_iceberg.item [i_brand#78610, i_brand_id#78609, i_item_sk#78602, i_manager_id#78622], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#78602, i_item_id#78603, i_rec_start_date#78604, i_rec_end_date#78605, i_item_desc#7860..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q55"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#78709, 200), ENSURE_REQUIREMENTS, [id=#106064]\n+- *(19) HashAggregate(keys=[i_item_id#78709], functions=[partial_sum(total_sales#78639)], output=[i_item_id#78709, sum#79000, isEmpty#79001])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_item_id#78709], functions=[sum(UnscaledValue(ss_ext_sales_price#78659))], output=[i_item_id#78709, total_sales#78639])\n      :  +- Exchange hashpartitioning(i_item_id#78709, 200), ENSURE_REQUIREMENTS, [id=#105754]\n      :     +- *(5) HashAggregate(keys=[i_item_id#78709], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#78659))], output=[i_item_id#78709, sum#79003L])\n      :        +- *(5) Project [ss_ext_sales_price#78659, i_item_id#78709]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#78646], [i_item_sk#78708], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#78646, ss_ext_sales_price#78659]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#78650], [ca_address_sk#78695], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#78646, ss_addr_sk#78650, ss_ext_sales_price#78659]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#78644], [d_date_sk#78667], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#78644) AND isnotnull(ss_addr_sk#78650)) AND isnotnull(ss_item_sk#78646))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#78644, ss_item_sk#78646, ss_addr_sk#78650, ss_ext_sales_price#78659], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#78644, ss_sold_time_sk#78645, ss_item_sk#78646, ss_customer_sk#78647, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105726]\n      :              :     :        +- *(1) Project [d_date_sk#78667]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#78673) AND isnotnull(d_moy#78675)) AND (d_year#78673 = 1999)) AND (d_moy#78675 = 6)) AND isnotnull(d_date_sk#78667))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#78667, d_moy#78675, d_year#78673], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#78667, d_date_id#78668, d_date#78669, d_month_seq#78670, d_week_seq#78671, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105734]\n      :              :        +- *(2) Project [ca_address_sk#78695]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#78706) AND (ca_gmt_offset#78706 = -7.00)) AND isnotnull(ca_address_sk#78695))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#78695, ca_gmt_offset#78706], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#78695, ca_address_id#78696, ca_street_number#78697, ca_street_name#78698, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#105748]\n      :                 +- *(4) BroadcastHashJoin [i_item_id#78709], [i_item_id#78925], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#78708)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#78708, i_item_id#78709], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#78708, i_item_id#78709, i_rec_start_date#78710, i_rec_end_date#78711, i_item_desc#7871..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#105744]\n      :                       +- *(3) Project [i_item_id#78925]\n      :                          +- *(3) Filter i_color#78941 IN (blanched,spring,seashell)\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_color#78941, i_item_id#78925], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#78924, i_item_id#78925, i_rec_start_date#78926, i_rec_end_date#78927, i_item_desc#7892..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_item_id#78806], functions=[sum(UnscaledValue(cs_ext_sales_price#78753))], output=[i_item_id#78806, total_sales#78641])\n      :  +- Exchange hashpartitioning(i_item_id#78806, 200), ENSURE_REQUIREMENTS, [id=#105928]\n      :     +- *(11) HashAggregate(keys=[i_item_id#78806], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#78753))], output=[i_item_id#78806, sum#79005L])\n      :        +- *(11) Project [cs_ext_sales_price#78753, i_item_id#78806]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#78745], [i_item_sk#78805], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#78745, cs_ext_sales_price#78753]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#78736], [ca_address_sk#78792], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#78736, cs_item_sk#78745, cs_ext_sales_price#78753]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#78730], [d_date_sk#78764], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#78730) AND isnotnull(cs_bill_addr_sk#78736)) AND isnotnull(cs_item_sk#78745))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#78730, cs_bill_addr_sk#78736, cs_item_sk#78745, cs_ext_sales_price#78753], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#78730, cs_sold_time_sk#78731, cs_ship_date_sk#78732, cs_bill_customer_sk#78733, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#78764], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105726]\n      :              :     +- ReusedExchange [ca_address_sk#78792], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105734]\n      :              +- ReusedExchange [i_item_sk#78805, i_item_id#78806], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#105748]\n      +- *(18) HashAggregate(keys=[i_item_id#78903], functions=[sum(UnscaledValue(ws_ext_sales_price#78850))], output=[i_item_id#78903, total_sales#78643])\n         +- Exchange hashpartitioning(i_item_id#78903, 200), ENSURE_REQUIREMENTS, [id=#106032]\n            +- *(17) HashAggregate(keys=[i_item_id#78903], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#78850))], output=[i_item_id#78903, sum#79007L])\n               +- *(17) Project [ws_ext_sales_price#78850, i_item_id#78903]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#78830], [i_item_sk#78902], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#78830, ws_ext_sales_price#78850]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#78834], [ca_address_sk#78889], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#78830, ws_bill_addr_sk#78834, ws_ext_sales_price#78850]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#78827], [d_date_sk#78861], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#78827) AND isnotnull(ws_bill_addr_sk#78834)) AND isnotnull(ws_item_sk#78830))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#78827, ws_item_sk#78830, ws_bill_addr_sk#78834, ws_ext_sales_price#78850], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#78827, ws_sold_time_sk#78828, ws_ship_date_sk#78829, ws_item_sk#78830, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#78861], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105726]\n                     :     +- ReusedExchange [ca_address_sk#78889], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#105734]\n                     +- ReusedExchange [i_item_sk#78902, i_item_id#78903], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#105748]\n",
    "iteration" : 3,
    "name" : "q56"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#79037, i_brand#79033, cc_name#79115, rn#79016, 200), ENSURE_REQUIREMENTS, [id=#106425]\n+- *(9) Project [i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, sum_sales#79014, avg_monthly_sales#79015, rn#79016]\n   +- *(9) Filter (((((isnotnull(d_year#79087) AND isnotnull(avg_monthly_sales#79015)) AND (d_year#79087 = 2000)) AND (avg_monthly_sales#79015 > 0.000000)) AND (CASE WHEN (avg_monthly_sales#79015 > 0.000000) THEN CheckOverflow((promote_precision(abs(CheckOverflow((promote_precision(cast(sum_sales#79014 as decimal(22,6))) - promote_precision(cast(avg_monthly_sales#79015 as decimal(22,6)))), DecimalType(22,6), true))) / promote_precision(cast(avg_monthly_sales#79015 as decimal(22,6)))), DecimalType(38,16), true) ELSE null END > 0.1000000000000000)) AND isnotnull(rn#79016))\n      +- Window [rank(d_year#79087, d_moy#79089) windowspecdefinition(i_category#79037, i_brand#79033, cc_name#79115, d_year#79087 ASC NULLS FIRST, d_moy#79089 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#79016], [i_category#79037, i_brand#79033, cc_name#79115], [d_year#79087 ASC NULLS FIRST, d_moy#79089 ASC NULLS FIRST]\n         +- *(8) Sort [i_category#79037 ASC NULLS FIRST, i_brand#79033 ASC NULLS FIRST, cc_name#79115 ASC NULLS FIRST, d_year#79087 ASC NULLS FIRST, d_moy#79089 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(i_category#79037, i_brand#79033, cc_name#79115, 200), ENSURE_REQUIREMENTS, [id=#106416]\n               +- *(7) Project [i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, d_moy#79089, sum_sales#79014, avg_monthly_sales#79015]\n                  +- Window [avg(_w0#79403) windowspecdefinition(i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#79015], [i_category#79037, i_brand#79033, cc_name#79115, d_year#79087]\n                     +- *(6) Sort [i_category#79037 ASC NULLS FIRST, i_brand#79033 ASC NULLS FIRST, cc_name#79115 ASC NULLS FIRST, d_year#79087 ASC NULLS FIRST], false, 0\n                        +- Exchange hashpartitioning(i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, 200), ENSURE_REQUIREMENTS, [id=#106408]\n                           +- *(5) HashAggregate(keys=[i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, d_moy#79089], functions=[sum(UnscaledValue(cs_sales_price#79068))], output=[i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, d_moy#79089, sum_sales#79014, _w0#79403])\n                              +- Exchange hashpartitioning(i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, d_moy#79089, 200), ENSURE_REQUIREMENTS, [id=#106404]\n                                 +- *(4) HashAggregate(keys=[i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, d_moy#79089], functions=[partial_sum(UnscaledValue(cs_sales_price#79068))], output=[i_category#79037, i_brand#79033, cc_name#79115, d_year#79087, d_moy#79089, sum#79542L])\n                                    +- *(4) Project [i_brand#79033, i_category#79037, cs_sales_price#79068, d_year#79087, d_moy#79089, cc_name#79115]\n                                       +- *(4) BroadcastHashJoin [cs_call_center_sk#79058], [cc_call_center_sk#79109], Inner, BuildRight, false\n                                          :- *(4) Project [i_brand#79033, i_category#79037, cs_call_center_sk#79058, cs_sales_price#79068, d_year#79087, d_moy#79089]\n                                          :  +- *(4) BroadcastHashJoin [cs_sold_date_sk#79047], [d_date_sk#79081], Inner, BuildRight, false\n                                          :     :- *(4) Project [i_brand#79033, i_category#79037, cs_sold_date_sk#79047, cs_call_center_sk#79058, cs_sales_price#79068]\n                                          :     :  +- *(4) BroadcastHashJoin [i_item_sk#79025], [cs_item_sk#79062], Inner, BuildLeft, false\n                                          :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#106382]\n                                          :     :     :  +- *(1) Filter ((isnotnull(i_item_sk#79025) AND isnotnull(i_category#79037)) AND isnotnull(i_brand#79033))\n                                          :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#79025, i_brand#79033, i_category#79037], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#79025, i_item_id#79026, i_rec_start_date#79027, i_rec_end_date#79028, i_item_desc#7902..., Partition Cols: []]\n                                          :     :     +- *(4) Filter ((isnotnull(cs_item_sk#79062) AND isnotnull(cs_sold_date_sk#79047)) AND isnotnull(cs_call_center_sk#79058))\n                                          :     :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#79047, cs_call_center_sk#79058, cs_item_sk#79062, cs_sales_price#79068], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#79047, cs_sold_time_sk#79048, cs_ship_date_sk#79049, cs_bill_customer_sk#79050, ..., Partition Cols: []]\n                                          :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#106391]\n                                          :        +- *(2) Filter ((((d_year#79087 = 2000) OR ((d_year#79087 = 1999) AND (d_moy#79089 = 12))) OR ((d_year#79087 = 2001) AND (d_moy#79089 = 1))) AND isnotnull(d_date_sk#79081))\n                                          :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#79081, d_year#79087, d_moy#79089], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#79081, d_date_id#79082, d_date#79083, d_month_seq#79084, d_week_seq#79085, d_quarter_s..., Partition Cols: []]\n                                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#106398]\n                                             +- *(3) Filter (isnotnull(cc_call_center_sk#79109) AND isnotnull(cc_name#79115))\n                                                +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#79109, cc_name#79115], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#79109, cc_call_center_id#79110, cc_rec_start_date#79111, cc_rec_end_date#79112..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q57"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#79618, 200), ENSURE_REQUIREMENTS, [id=#107108]\n+- *(4) HashAggregate(keys=[i_item_id#79618], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#79609))], output=[i_item_id#79618, sum#80015L])\n   +- *(4) Project [ss_ext_sales_price#79609, i_item_id#79618]\n      +- *(4) BroadcastHashJoin [ss_sold_date_sk#79594], [d_date_sk#79639], Inner, BuildRight, false\n         :- *(4) Project [ss_sold_date_sk#79594, ss_ext_sales_price#79609, i_item_id#79618]\n         :  +- *(4) BroadcastHashJoin [ss_item_sk#79596], [i_item_sk#79617], Inner, BuildRight, false\n         :     :- *(4) Filter (isnotnull(ss_item_sk#79596) AND isnotnull(ss_sold_date_sk#79594))\n         :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#79594, ss_item_sk#79596, ss_ext_sales_price#79609], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#79594, ss_sold_time_sk#79595, ss_item_sk#79596, ss_customer_sk#79597, ss_cdemo_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#107087]\n         :        +- *(1) Filter (isnotnull(i_item_sk#79617) AND isnotnull(i_item_id#79618))\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#79617, i_item_id#79618], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#79617, i_item_id#79618, i_rec_start_date#79619, i_rec_end_date#79620, i_item_desc#7962..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#107102]\n            +- *(3) Project [d_date_sk#79639]\n               +- *(3) BroadcastHashJoin [d_date#79641], [d_date#79837], LeftSemi, BuildRight, false\n                  :- *(3) Filter isnotnull(d_date_sk#79639)\n                  :  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#79639, d_date#79641], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#79639, d_date_id#79640, d_date#79641, d_month_seq#79642, d_week_seq#79643, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#107097]\n                     +- *(2) Project [d_date#79837]\n                        +- *(2) Filter (isnotnull(d_week_seq#79839) AND (d_week_seq#79839 = Subquery scalar-subquery#79582, [id=#106974]))\n                           :  +- Subquery scalar-subquery#79582, [id=#106974]\n                           :     +- *(1) Project [d_week_seq#79867]\n                           :        +- *(1) Filter (isnotnull(d_date#79865) AND (d_date#79865 = 11101))\n                           :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#79865, d_week_seq#79867], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#79863, d_date_id#79864, d_date#79865, d_month_seq#79866, d_week_seq#79867, d_quarter_s..., Partition Cols: []]\n                           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#79837, d_week_seq#79839], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#79835, d_date_id#79836, d_date#79837, d_month_seq#79838, d_week_seq#79839, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q58"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_id1#80034, d_week_seq1#80033, 200), ENSURE_REQUIREMENTS, [id=#107628]\n+- *(5) Project [s_store_name#80115 AS s_store_name1#80032, d_week_seq#80086 AS d_week_seq1#80033, s_store_id#80111 AS s_store_id1#80034, sun_sales#80052 AS sun_sales1#80035, mon_sales#80053 AS mon_sales1#80036, tue_sales#80054 AS tue_sales1#80037, wed_sales#80055 AS wed_sales1#80038, thu_sales#80056 AS thu_sales1#80039, fri_sales#80057 AS fri_sales1#80040, sat_sales#80058 AS sat_sales1#80041]\n   +- *(5) BroadcastHashJoin [d_week_seq#80086], [d_week_seq#80143], Inner, BuildRight, false\n      :- *(5) Project [d_week_seq#80086, sun_sales#80052, mon_sales#80053, tue_sales#80054, wed_sales#80055, thu_sales#80056, fri_sales#80057, sat_sales#80058, s_store_id#80111, s_store_name#80115]\n      :  +- *(5) BroadcastHashJoin [ss_store_sk#80066], [s_store_sk#80110], Inner, BuildRight, false\n      :     :- *(5) HashAggregate(keys=[d_week_seq#80086, ss_store_sk#80066], functions=[sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Sunday) THEN ss_sales_price#80072 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Monday) THEN ss_sales_price#80072 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Tuesday) THEN ss_sales_price#80072 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Wednesday) THEN ss_sales_price#80072 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Thursday) THEN ss_sales_price#80072 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Friday) THEN ss_sales_price#80072 ELSE null END)), sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Saturday) THEN ss_sales_price#80072 ELSE null END))], output=[d_week_seq#80086, ss_store_sk#80066, sun_sales#80052, mon_sales#80053, tue_sales#80054, wed_sales#80055, thu_sales#80056, fri_sales#80057, sat_sales#80058])\n      :     :  +- Exchange hashpartitioning(d_week_seq#80086, ss_store_sk#80066, 200), ENSURE_REQUIREMENTS, [id=#107609]\n      :     :     +- *(2) HashAggregate(keys=[d_week_seq#80086, ss_store_sk#80066], functions=[partial_sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Sunday) THEN ss_sales_price#80072 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Monday) THEN ss_sales_price#80072 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Tuesday) THEN ss_sales_price#80072 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Wednesday) THEN ss_sales_price#80072 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Thursday) THEN ss_sales_price#80072 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Friday) THEN ss_sales_price#80072 ELSE null END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#80096 = Saturday) THEN ss_sales_price#80072 ELSE null END))], output=[d_week_seq#80086, ss_store_sk#80066, sum#80313L, sum#80314L, sum#80315L, sum#80316L, sum#80317L, sum#80318L, sum#80319L])\n      :     :        +- *(2) Project [ss_store_sk#80066, ss_sales_price#80072, d_week_seq#80086, d_day_name#80096]\n      :     :           +- *(2) BroadcastHashJoin [ss_sold_date_sk#80059], [d_date_sk#80082], Inner, BuildRight, false\n      :     :              :- *(2) Filter (isnotnull(ss_sold_date_sk#80059) AND isnotnull(ss_store_sk#80066))\n      :     :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#80059, ss_store_sk#80066, ss_sales_price#80072], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#80059, ss_sold_time_sk#80060, ss_item_sk#80061, ss_customer_sk#80062, ss_cdemo_s..., Partition Cols: []]\n      :     :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#107603]\n      :     :                 +- *(1) Filter (isnotnull(d_date_sk#80082) AND isnotnull(d_week_seq#80086))\n      :     :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#80082, d_week_seq#80086, d_day_name#80096], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#80082, d_date_id#80083, d_date#80084, d_month_seq#80085, d_week_seq#80086, d_quarter_s..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#107615]\n      :        +- *(3) Filter (isnotnull(s_store_sk#80110) AND isnotnull(s_store_id#80111))\n      :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#80110, s_store_id#80111, s_store_name#80115], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#80110, s_store_id#80111, s_rec_start_date#80112, s_rec_end_date#80113, s_closed_date_..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#107623]\n         +- *(4) Project [d_week_seq#80143]\n            +- *(4) Filter (((isnotnull(d_month_seq#80142) AND (d_month_seq#80142 >= 1197)) AND (d_month_seq#80142 <= 1208)) AND isnotnull(d_week_seq#80143))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#80142, d_week_seq#80143], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#80139, d_date_id#80140, d_date#80141, d_month_seq#80142, d_week_seq#80143, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q59"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ca_state#80373, 200), ENSURE_REQUIREMENTS, [id=#107991]\n+- *(13) HashAggregate(keys=[ca_state#80373], functions=[partial_count(1)], output=[ca_state#80373, count#80528L])\n   +- *(13) Project [ca_state#80373]\n      +- *(13) SortMergeJoin [ss_item_sk#80398], [i_item_sk#80447], Inner\n         :- *(8) Sort [ss_item_sk#80398 ASC NULLS FIRST], false, 0\n         :  +- Exchange hashpartitioning(ss_item_sk#80398, 200), ENSURE_REQUIREMENTS, [id=#107961]\n         :     +- *(7) Project [ca_state#80373, ss_item_sk#80398]\n         :        +- *(7) BroadcastHashJoin [ss_sold_date_sk#80396], [d_date_sk#80419], Inner, BuildRight, false\n         :           :- *(7) Project [ca_state#80373, ss_sold_date_sk#80396, ss_item_sk#80398]\n         :           :  +- *(7) SortMergeJoin [c_customer_sk#80378], [ss_customer_sk#80399], Inner\n         :           :     :- *(3) Sort [c_customer_sk#80378 ASC NULLS FIRST], false, 0\n         :           :     :  +- Exchange hashpartitioning(c_customer_sk#80378, 200), ENSURE_REQUIREMENTS, [id=#107937]\n         :           :     :     +- *(2) Project [ca_state#80373, c_customer_sk#80378]\n         :           :     :        +- *(2) BroadcastHashJoin [ca_address_sk#80365], [c_current_addr_sk#80382], Inner, BuildLeft, false\n         :           :     :           :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#107930]\n         :           :     :           :  +- *(1) Filter isnotnull(ca_address_sk#80365)\n         :           :     :           :     +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#80365, ca_state#80373], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#80365, ca_address_id#80366, ca_street_number#80367, ca_street_name#80368, ca_stree..., Partition Cols: []]\n         :           :     :           +- *(2) Filter (isnotnull(c_current_addr_sk#80382) AND isnotnull(c_customer_sk#80378))\n         :           :     :              +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#80378, c_current_addr_sk#80382], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#80378, c_customer_id#80379, c_current_cdemo_sk#80380, c_current_hdemo_sk#80381, c_..., Partition Cols: []]\n         :           :     +- *(5) Sort [ss_customer_sk#80399 ASC NULLS FIRST], false, 0\n         :           :        +- Exchange hashpartitioning(ss_customer_sk#80399, 200), ENSURE_REQUIREMENTS, [id=#107945]\n         :           :           +- *(4) Filter ((isnotnull(ss_customer_sk#80399) AND isnotnull(ss_sold_date_sk#80396)) AND isnotnull(ss_item_sk#80398))\n         :           :              +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#80396, ss_item_sk#80398, ss_customer_sk#80399], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#80396, ss_sold_time_sk#80397, ss_item_sk#80398, ss_customer_sk#80399, ss_cdemo_s..., Partition Cols: []]\n         :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#107956]\n         :              +- *(6) Project [d_date_sk#80419]\n         :                 +- *(6) Filter ((isnotnull(d_month_seq#80422) AND (d_month_seq#80422 = Subquery scalar-subquery#80359, [id=#107878])) AND isnotnull(d_date_sk#80419))\n         :                    :  +- Subquery scalar-subquery#80359, [id=#107878]\n         :                    :     +- *(2) HashAggregate(keys=[d_month_seq#80472], functions=[], output=[d_month_seq#80472])\n         :                    :        +- Exchange hashpartitioning(d_month_seq#80472, 200), ENSURE_REQUIREMENTS, [id=#107874]\n         :                    :           +- *(1) HashAggregate(keys=[d_month_seq#80472], functions=[], output=[d_month_seq#80472])\n         :                    :              +- *(1) Project [d_month_seq#80472]\n         :                    :                 +- *(1) Filter (((isnotnull(d_year#80475) AND isnotnull(d_moy#80477)) AND (d_year#80475 = 2002)) AND (d_moy#80477 = 3))\n         :                    :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_month_seq#80472, d_moy#80477, d_year#80475], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#80469, d_date_id#80470, d_date#80471, d_month_seq#80472, d_week_seq#80473, d_quarter_s..., Partition Cols: []]\n         :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#80419, d_month_seq#80422], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#80419, d_date_id#80420, d_date#80421, d_month_seq#80422, d_week_seq#80423, d_quarter_s..., Partition Cols: []]\n         +- *(12) Sort [i_item_sk#80447 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(i_item_sk#80447, 200), ENSURE_REQUIREMENTS, [id=#107982]\n               +- *(11) Project [i_item_sk#80447]\n                  +- *(11) Filter (cast(i_current_price#80452 as decimal(14,7)) > CheckOverflow((1.200000 * promote_precision(avg(i_current_price)#80520)), DecimalType(14,7), true))\n                     +- *(11) BroadcastHashJoin [i_category#80459], [i_category#80509], LeftOuter, BuildRight, false\n                        :- *(11) Filter (isnotnull(i_current_price#80452) AND isnotnull(i_item_sk#80447))\n                        :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#80447, i_current_price#80452, i_category#80459], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#80447, i_item_id#80448, i_rec_start_date#80449, i_rec_end_date#80450, i_item_desc#8045..., Partition Cols: []]\n                        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, string, true]),false), [id=#107976]\n                           +- *(10) HashAggregate(keys=[i_category#80509], functions=[avg(UnscaledValue(i_current_price#80502))], output=[avg(i_current_price)#80520, i_category#80509])\n                              +- Exchange hashpartitioning(i_category#80509, 200), ENSURE_REQUIREMENTS, [id=#107972]\n                                 +- *(9) HashAggregate(keys=[i_category#80509], functions=[partial_avg(UnscaledValue(i_current_price#80502))], output=[i_category#80509, sum#80531, count#80532L])\n                                    +- *(9) Filter isnotnull(i_category#80509)\n                                       +- Scan hive tpcds_sf1_iceberg.item [i_current_price#80502, i_category#80509], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#80497, i_item_id#80498, i_rec_start_date#80499, i_rec_end_date#80500, i_item_desc#8050..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q6"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#80608, 200), ENSURE_REQUIREMENTS, [id=#108625]\n+- *(19) HashAggregate(keys=[i_item_id#80608], functions=[partial_sum(total_sales#80538)], output=[i_item_id#80608, sum#80899, isEmpty#80900])\n   +- Union\n      :- *(6) HashAggregate(keys=[i_item_id#80608], functions=[sum(UnscaledValue(ss_ext_sales_price#80558))], output=[i_item_id#80608, total_sales#80538])\n      :  +- Exchange hashpartitioning(i_item_id#80608, 200), ENSURE_REQUIREMENTS, [id=#108315]\n      :     +- *(5) HashAggregate(keys=[i_item_id#80608], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#80558))], output=[i_item_id#80608, sum#80902L])\n      :        +- *(5) Project [ss_ext_sales_price#80558, i_item_id#80608]\n      :           +- *(5) BroadcastHashJoin [ss_item_sk#80545], [i_item_sk#80607], Inner, BuildRight, false\n      :              :- *(5) Project [ss_item_sk#80545, ss_ext_sales_price#80558]\n      :              :  +- *(5) BroadcastHashJoin [ss_addr_sk#80549], [ca_address_sk#80594], Inner, BuildRight, false\n      :              :     :- *(5) Project [ss_item_sk#80545, ss_addr_sk#80549, ss_ext_sales_price#80558]\n      :              :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#80543], [d_date_sk#80566], Inner, BuildRight, false\n      :              :     :     :- *(5) Filter ((isnotnull(ss_sold_date_sk#80543) AND isnotnull(ss_addr_sk#80549)) AND isnotnull(ss_item_sk#80545))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#80543, ss_item_sk#80545, ss_addr_sk#80549, ss_ext_sales_price#80558], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#80543, ss_sold_time_sk#80544, ss_item_sk#80545, ss_customer_sk#80546, ss_cdemo_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108287]\n      :              :     :        +- *(1) Project [d_date_sk#80566]\n      :              :     :           +- *(1) Filter ((((isnotnull(d_year#80572) AND isnotnull(d_moy#80574)) AND (d_year#80572 = 1998)) AND (d_moy#80574 = 10)) AND isnotnull(d_date_sk#80566))\n      :              :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#80566, d_moy#80574, d_year#80572], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#80566, d_date_id#80567, d_date#80568, d_month_seq#80569, d_week_seq#80570, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108295]\n      :              :        +- *(2) Project [ca_address_sk#80594]\n      :              :           +- *(2) Filter ((isnotnull(ca_gmt_offset#80605) AND (ca_gmt_offset#80605 = -5.00)) AND isnotnull(ca_address_sk#80594))\n      :              :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#80594, ca_gmt_offset#80605], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#80594, ca_address_id#80595, ca_street_number#80596, ca_street_name#80597, ca_stree..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#108309]\n      :                 +- *(4) BroadcastHashJoin [i_item_id#80608], [i_item_id#80824], LeftSemi, BuildRight, false\n      :                    :- *(4) Filter isnotnull(i_item_sk#80607)\n      :                    :  +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#80607, i_item_id#80608], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#80607, i_item_id#80608, i_rec_start_date#80609, i_rec_end_date#80610, i_item_desc#8061..., Partition Cols: []]\n      :                    +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, string, true]),false), [id=#108305]\n      :                       +- *(3) Project [i_item_id#80824]\n      :                          +- *(3) Filter (isnotnull(i_category#80835) AND (i_category#80835 = Shoes))\n      :                             +- Scan hive tpcds_sf1_iceberg.item [i_category#80835, i_item_id#80824], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#80823, i_item_id#80824, i_rec_start_date#80825, i_rec_end_date#80826, i_item_desc#8082..., Partition Cols: []]\n      :- *(12) HashAggregate(keys=[i_item_id#80705], functions=[sum(UnscaledValue(cs_ext_sales_price#80652))], output=[i_item_id#80705, total_sales#80540])\n      :  +- Exchange hashpartitioning(i_item_id#80705, 200), ENSURE_REQUIREMENTS, [id=#108489]\n      :     +- *(11) HashAggregate(keys=[i_item_id#80705], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#80652))], output=[i_item_id#80705, sum#80904L])\n      :        +- *(11) Project [cs_ext_sales_price#80652, i_item_id#80705]\n      :           +- *(11) BroadcastHashJoin [cs_item_sk#80644], [i_item_sk#80704], Inner, BuildRight, false\n      :              :- *(11) Project [cs_item_sk#80644, cs_ext_sales_price#80652]\n      :              :  +- *(11) BroadcastHashJoin [cs_bill_addr_sk#80635], [ca_address_sk#80691], Inner, BuildRight, false\n      :              :     :- *(11) Project [cs_bill_addr_sk#80635, cs_item_sk#80644, cs_ext_sales_price#80652]\n      :              :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#80629], [d_date_sk#80663], Inner, BuildRight, false\n      :              :     :     :- *(11) Filter ((isnotnull(cs_sold_date_sk#80629) AND isnotnull(cs_bill_addr_sk#80635)) AND isnotnull(cs_item_sk#80644))\n      :              :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#80629, cs_bill_addr_sk#80635, cs_item_sk#80644, cs_ext_sales_price#80652], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#80629, cs_sold_time_sk#80630, cs_ship_date_sk#80631, cs_bill_customer_sk#80632, ..., Partition Cols: []]\n      :              :     :     +- ReusedExchange [d_date_sk#80663], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108287]\n      :              :     +- ReusedExchange [ca_address_sk#80691], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108295]\n      :              +- ReusedExchange [i_item_sk#80704, i_item_id#80705], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#108309]\n      +- *(18) HashAggregate(keys=[i_item_id#80802], functions=[sum(UnscaledValue(ws_ext_sales_price#80749))], output=[i_item_id#80802, total_sales#80542])\n         +- Exchange hashpartitioning(i_item_id#80802, 200), ENSURE_REQUIREMENTS, [id=#108593]\n            +- *(17) HashAggregate(keys=[i_item_id#80802], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#80749))], output=[i_item_id#80802, sum#80906L])\n               +- *(17) Project [ws_ext_sales_price#80749, i_item_id#80802]\n                  +- *(17) BroadcastHashJoin [ws_item_sk#80729], [i_item_sk#80801], Inner, BuildRight, false\n                     :- *(17) Project [ws_item_sk#80729, ws_ext_sales_price#80749]\n                     :  +- *(17) BroadcastHashJoin [ws_bill_addr_sk#80733], [ca_address_sk#80788], Inner, BuildRight, false\n                     :     :- *(17) Project [ws_item_sk#80729, ws_bill_addr_sk#80733, ws_ext_sales_price#80749]\n                     :     :  +- *(17) BroadcastHashJoin [ws_sold_date_sk#80726], [d_date_sk#80760], Inner, BuildRight, false\n                     :     :     :- *(17) Filter ((isnotnull(ws_sold_date_sk#80726) AND isnotnull(ws_bill_addr_sk#80733)) AND isnotnull(ws_item_sk#80729))\n                     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#80726, ws_item_sk#80729, ws_bill_addr_sk#80733, ws_ext_sales_price#80749], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#80726, ws_sold_time_sk#80727, ws_ship_date_sk#80728, ws_item_sk#80729, ws_bill_c..., Partition Cols: []]\n                     :     :     +- ReusedExchange [d_date_sk#80760], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108287]\n                     :     +- ReusedExchange [ca_address_sk#80788], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108295]\n                     +- ReusedExchange [i_item_sk#80801, i_item_id#80802], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#108309]\n",
    "iteration" : 3,
    "name" : "q60"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#109099]\n+- *(14) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#81082))], output=[sum#81209L])\n   +- *(14) Project [ss_ext_sales_price#81082]\n      +- *(14) BroadcastHashJoin [ss_item_sk#81069], [i_item_sk#81178], Inner, BuildRight, false\n         :- *(14) Project [ss_item_sk#81069, ss_ext_sales_price#81082]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#81151], [ca_address_sk#81165], Inner, BuildRight, false\n         :     :- *(14) Project [ss_item_sk#81069, ss_ext_sales_price#81082, c_current_addr_sk#81151]\n         :     :  +- *(14) BroadcastHashJoin [ss_customer_sk#81070], [c_customer_sk#81147], Inner, BuildRight, false\n         :     :     :- *(14) Project [ss_item_sk#81069, ss_customer_sk#81070, ss_ext_sales_price#81082]\n         :     :     :  +- *(14) BroadcastHashJoin [ss_sold_date_sk#81067], [d_date_sk#81119], Inner, BuildRight, false\n         :     :     :     :- *(14) Project [ss_sold_date_sk#81067, ss_item_sk#81069, ss_customer_sk#81070, ss_ext_sales_price#81082]\n         :     :     :     :  +- *(14) BroadcastHashJoin [ss_store_sk#81074], [s_store_sk#81090], Inner, BuildRight, false\n         :     :     :     :     :- *(14) Filter (((isnotnull(ss_store_sk#81074) AND isnotnull(ss_sold_date_sk#81067)) AND isnotnull(ss_customer_sk#81070)) AND isnotnull(ss_item_sk#81069))\n         :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#81067, ss_item_sk#81069, ss_customer_sk#81070, ss_store_sk#81074, ss_ext_sales_price#81082], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#81067, ss_sold_time_sk#81068, ss_item_sk#81069, ss_customer_sk#81070, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     :     +- ReusedExchange [s_store_sk#81090], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108899]\n         :     :     :     +- ReusedExchange [d_date_sk#81119], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108915]\n         :     :     +- ReusedExchange [c_customer_sk#81147, c_current_addr_sk#81151], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#108922]\n         :     +- ReusedExchange [ca_address_sk#81165], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108930]\n         +- ReusedExchange [i_item_sk#81178], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#108938]\n",
    "iteration" : 3,
    "name" : "q61"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(substr(w_warehouse_name#81257, 1, 20)#81346, sm_type#81271, web_name#81279, 200), ENSURE_REQUIREMENTS, [id=#109314]\n+- *(5) HashAggregate(keys=[substr(w_warehouse_name#81257, 1, 20) AS substr(w_warehouse_name#81257, 1, 20)#81346, sm_type#81271, web_name#81279], functions=[partial_sum(cast(CASE WHEN ((ws_ship_date_sk#81223 - ws_sold_date_sk#81221) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#81223 - ws_sold_date_sk#81221) > 30) AND ((ws_ship_date_sk#81223 - ws_sold_date_sk#81221) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#81223 - ws_sold_date_sk#81221) > 60) AND ((ws_ship_date_sk#81223 - ws_sold_date_sk#81221) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((ws_ship_date_sk#81223 - ws_sold_date_sk#81221) > 90) AND ((ws_ship_date_sk#81223 - ws_sold_date_sk#81221) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((ws_ship_date_sk#81223 - ws_sold_date_sk#81221) > 120) THEN 1 ELSE 0 END as bigint))], output=[substr(w_warehouse_name#81257, 1, 20)#81346, sm_type#81271, web_name#81279, sum#81352L, sum#81353L, sum#81354L, sum#81355L, sum#81356L])\n   +- *(5) Project [ws_sold_date_sk#81221, ws_ship_date_sk#81223, w_warehouse_name#81257, sm_type#81271, web_name#81279]\n      +- *(5) BroadcastHashJoin [ws_ship_date_sk#81223], [d_date_sk#81301], Inner, BuildRight, false\n         :- *(5) Project [ws_sold_date_sk#81221, ws_ship_date_sk#81223, w_warehouse_name#81257, sm_type#81271, web_name#81279]\n         :  +- *(5) BroadcastHashJoin [ws_web_site_sk#81234], [web_site_sk#81275], Inner, BuildRight, false\n         :     :- *(5) Project [ws_sold_date_sk#81221, ws_ship_date_sk#81223, ws_web_site_sk#81234, w_warehouse_name#81257, sm_type#81271]\n         :     :  +- *(5) BroadcastHashJoin [ws_ship_mode_sk#81235], [sm_ship_mode_sk#81269], Inner, BuildRight, false\n         :     :     :- *(5) Project [ws_sold_date_sk#81221, ws_ship_date_sk#81223, ws_web_site_sk#81234, ws_ship_mode_sk#81235, w_warehouse_name#81257]\n         :     :     :  +- *(5) BroadcastHashJoin [ws_warehouse_sk#81236], [w_warehouse_sk#81255], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(ws_warehouse_sk#81236) AND isnotnull(ws_ship_mode_sk#81235)) AND isnotnull(ws_web_site_sk#81234)) AND isnotnull(ws_ship_date_sk#81223))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#81221, ws_ship_date_sk#81223, ws_web_site_sk#81234, ws_ship_mode_sk#81235, ws_warehouse_sk#81236], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#81221, ws_sold_time_sk#81222, ws_ship_date_sk#81223, ws_item_sk#81224, ws_bill_c..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#109286]\n         :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#81255)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#81255, w_warehouse_name#81257], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#81255, w_warehouse_id#81256, w_warehouse_name#81257, w_warehouse_sq_ft#81258, w_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#109293]\n         :     :        +- *(2) Filter isnotnull(sm_ship_mode_sk#81269)\n         :     :           +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_ship_mode_sk#81269, sm_type#81271], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#81269, sm_ship_mode_id#81270, sm_type#81271, sm_code#81272, sm_carrier#81273, sm..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#109300]\n         :        +- *(3) Filter isnotnull(web_site_sk#81275)\n         :           +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#81275, web_name#81279], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#81275, web_site_id#81276, web_rec_start_date#81277, web_rec_end_date#81278, web_name..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#109308]\n            +- *(4) Project [d_date_sk#81301]\n               +- *(4) Filter (((isnotnull(d_month_seq#81304) AND (d_month_seq#81304 >= 1194)) AND (d_month_seq#81304 <= 1205)) AND isnotnull(d_date_sk#81301))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#81301, d_month_seq#81304], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#81301, d_date_id#81302, d_date#81303, d_month_seq#81304, d_week_seq#81305, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q62"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_manager_id#81388, 200), ENSURE_REQUIREMENTS, [id=#109445]\n+- *(5) HashAggregate(keys=[i_manager_id#81388, d_moy#81421], functions=[sum(UnscaledValue(ss_sales_price#81403))], output=[i_manager_id#81388, sum_sales#81366, _w0#81473])\n   +- Exchange hashpartitioning(i_manager_id#81388, d_moy#81421, 200), ENSURE_REQUIREMENTS, [id=#109441]\n      +- *(4) HashAggregate(keys=[i_manager_id#81388, d_moy#81421], functions=[partial_sum(UnscaledValue(ss_sales_price#81403))], output=[i_manager_id#81388, d_moy#81421, sum#81478L])\n         +- *(4) Project [i_manager_id#81388, ss_sales_price#81403, d_moy#81421]\n            +- *(4) BroadcastHashJoin [ss_store_sk#81397], [s_store_sk#81441], Inner, BuildRight, false\n               :- *(4) Project [i_manager_id#81388, ss_store_sk#81397, ss_sales_price#81403, d_moy#81421]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#81390], [d_date_sk#81413], Inner, BuildRight, false\n               :     :- *(4) Project [i_manager_id#81388, ss_sold_date_sk#81390, ss_store_sk#81397, ss_sales_price#81403]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#81368], [ss_item_sk#81392], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#109418]\n               :     :     :  +- *(1) Project [i_item_sk#81368, i_manager_id#81388]\n               :     :     :     +- *(1) Filter ((((i_category#81380 IN (Books,Children,Electronics) AND i_class#81378 IN (personal,portable,reference,self-help)) AND i_brand#81376 IN (scholaramalgamalg #14,scholaramalgamalg #7,exportiunivamalg #9,scholaramalgamalg #9)) OR ((i_category#81380 IN (Women,Music,Men) AND i_class#81378 IN (accessories,classical,fragrances,pants)) AND i_brand#81376 IN (amalgimporto #1,edu packscholar #1,exportiimporto #1,importoamalg #1))) AND isnotnull(i_item_sk#81368))\n               :     :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#81376, i_category#81380, i_class#81378, i_item_sk#81368, i_manager_id#81388], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#81368, i_item_id#81369, i_rec_start_date#81370, i_rec_end_date#81371, i_item_desc#8137..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#81392) AND isnotnull(ss_sold_date_sk#81390)) AND isnotnull(ss_store_sk#81397))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#81390, ss_item_sk#81392, ss_store_sk#81397, ss_sales_price#81403], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#81390, ss_sold_time_sk#81391, ss_item_sk#81392, ss_customer_sk#81393, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#109428]\n               :        +- *(2) Project [d_date_sk#81413, d_moy#81421]\n               :           +- *(2) Filter (d_month_seq#81416 INSET (1233,1222,1228,1232,1223,1227,1231,1226,1224,1225,1230,1229) AND isnotnull(d_date_sk#81413))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#81413, d_month_seq#81416, d_moy#81421], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#81413, d_date_id#81414, d_date#81415, d_month_seq#81416, d_week_seq#81417, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#109435]\n                  +- *(3) Filter isnotnull(s_store_sk#81441)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#81441], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#81441, s_store_id#81442, s_rec_start_date#81443, s_rec_end_date#81444, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q63"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(product_name#81491 ASC NULLS FIRST, store_name#81493 ASC NULLS FIRST, cnt#82225L ASC NULLS FIRST, s1#81507 ASC NULLS FIRST, s1#82226 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#110913]\n+- *(47) Project [product_name#81491, store_name#81493, store_zip#81494, b_street_number#81495, b_street_name#81496, b_city#81497, b_zip#81498, c_street_number#81499, c_street_name#81500, c_city#81501, c_zip#81502, syear#81503, cnt#81506L, s1#81507 AS s11#81483, s2#81508 AS s21#81484, s3#81509 AS s31#81485, s1#82226 AS s12#81486, s2#82227 AS s22#81487, s3#82228 AS s32#81488, syear#82222, cnt#82225L, s1#81507, s1#82226]\n   +- *(47) SortMergeJoin [item_sk#81492, store_name#81493, store_zip#81494], [item_sk#82211, store_name#82212, store_zip#82213], Inner, (cnt#82225L <= cnt#81506L)\n      :- *(23) Sort [item_sk#81492 ASC NULLS FIRST, store_name#81493 ASC NULLS FIRST, store_zip#81494 ASC NULLS FIRST], false, 0\n      :  +- Exchange hashpartitioning(item_sk#81492, store_name#81493, store_zip#81494, 200), ENSURE_REQUIREMENTS, [id=#110611]\n      :     +- *(22) HashAggregate(keys=[i_product_name#81847, i_item_sk#81826, s_store_name#81705, s_zip#81725, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803, ca_street_number#81809, ca_street_name#81810, ca_city#81813, ca_zip#81816, d_year#81622, d_year#81650, d_year#81678], functions=[count(1), sum(UnscaledValue(ss_wholesale_cost#81523)), sum(UnscaledValue(ss_list_price#81524)), sum(UnscaledValue(ss_coupon_amt#81531))], output=[product_name#81491, item_sk#81492, store_name#81493, store_zip#81494, b_street_number#81495, b_street_name#81496, b_city#81497, b_zip#81498, c_street_number#81499, c_street_name#81500, c_city#81501, c_zip#81502, syear#81503, cnt#81506L, s1#81507, s2#81508, s3#81509])\n      :        +- *(22) HashAggregate(keys=[i_product_name#81847, i_item_sk#81826, s_store_name#81705, s_zip#81725, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803, ca_street_number#81809, ca_street_name#81810, ca_city#81813, ca_zip#81816, d_year#81622, d_year#81650, d_year#81678], functions=[partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#81523)), partial_sum(UnscaledValue(ss_list_price#81524)), partial_sum(UnscaledValue(ss_coupon_amt#81531))], output=[i_product_name#81847, i_item_sk#81826, s_store_name#81705, s_zip#81725, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803, ca_street_number#81809, ca_street_name#81810, ca_city#81813, ca_zip#81816, d_year#81622, d_year#81650, d_year#81678, count#82258L, sum#82259L, sum#82260L, sum#82261L])\n      :           +- *(22) Project [ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, d_year#81650, d_year#81678, s_store_name#81705, s_zip#81725, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803, ca_street_number#81809, ca_street_name#81810, ca_city#81813, ca_zip#81816, i_item_sk#81826, i_product_name#81847]\n      :              +- *(22) BroadcastHashJoin [ss_item_sk#81514], [i_item_sk#81826], Inner, BuildRight, false\n      :                 :- *(22) Project [ss_item_sk#81514, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, d_year#81650, d_year#81678, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803, ca_street_number#81809, ca_street_name#81810, ca_city#81813, ca_zip#81816]\n      :                 :  +- *(22) BroadcastHashJoin [hd_income_band_sk#81790], [ib_income_band_sk#81823], Inner, BuildRight, false\n      :                 :     :- *(22) Project [ss_item_sk#81514, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, d_year#81650, d_year#81678, hd_income_band_sk#81790, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803, ca_street_number#81809, ca_street_name#81810, ca_city#81813, ca_zip#81816]\n      :                 :     :  +- *(22) BroadcastHashJoin [hd_income_band_sk#81785], [ib_income_band_sk#81820], Inner, BuildRight, false\n      :                 :     :     :- *(22) Project [ss_item_sk#81514, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, d_year#81650, d_year#81678, hd_income_band_sk#81785, hd_income_band_sk#81790, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803, ca_street_number#81809, ca_street_name#81810, ca_city#81813, ca_zip#81816]\n      :                 :     :     :  +- *(22) BroadcastHashJoin [c_current_addr_sk#81733], [ca_address_sk#81807], Inner, BuildRight, false\n      :                 :     :     :     :- *(22) Project [ss_item_sk#81514, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_addr_sk#81733, d_year#81650, d_year#81678, hd_income_band_sk#81785, hd_income_band_sk#81790, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803]\n      :                 :     :     :     :  +- *(22) BroadcastHashJoin [ss_addr_sk#81518], [ca_address_sk#81794], Inner, BuildRight, false\n      :                 :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_addr_sk#81518, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_addr_sk#81733, d_year#81650, d_year#81678, hd_income_band_sk#81785, hd_income_band_sk#81790]\n      :                 :     :     :     :     :  +- *(22) BroadcastHashJoin [c_current_hdemo_sk#81732], [hd_demo_sk#81789], Inner, BuildRight, false\n      :                 :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_addr_sk#81518, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_hdemo_sk#81732, c_current_addr_sk#81733, d_year#81650, d_year#81678, hd_income_band_sk#81785]\n      :                 :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_hdemo_sk#81517], [hd_demo_sk#81784], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_hdemo_sk#81732, c_current_addr_sk#81733, d_year#81650, d_year#81678]\n      :                 :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_promo_sk#81520], [p_promo_sk#81765], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_hdemo_sk#81732, c_current_addr_sk#81733, d_year#81650, d_year#81678]\n      :                 :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_current_cdemo_sk#81731], [cd_demo_sk#81756], Inner, BuildRight, NOT (cd_marital_status#81749 = cd_marital_status#81758), false\n      :                 :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_cdemo_sk#81731, c_current_hdemo_sk#81732, c_current_addr_sk#81733, d_year#81650, d_year#81678, cd_marital_status#81749]\n      :                 :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_cdemo_sk#81516], [cd_demo_sk#81747], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_cdemo_sk#81516, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_cdemo_sk#81731, c_current_hdemo_sk#81732, c_current_addr_sk#81733, d_year#81650, d_year#81678]\n      :                 :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_first_shipto_date_sk#81734], [d_date_sk#81672], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_cdemo_sk#81516, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_cdemo_sk#81731, c_current_hdemo_sk#81732, c_current_addr_sk#81733, c_first_shipto_date_sk#81734, d_year#81650]\n      :                 :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [c_first_sales_date_sk#81735], [d_date_sk#81644], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_cdemo_sk#81516, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725, c_current_cdemo_sk#81731, c_current_hdemo_sk#81732, c_current_addr_sk#81733, c_first_shipto_date_sk#81734, c_first_sales_date_sk#81735]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_customer_sk#81515], [c_customer_sk#81729], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_customer_sk#81515, ss_cdemo_sk#81516, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622, s_store_name#81705, s_zip#81725]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_store_sk#81519], [s_store_sk#81700], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_item_sk#81514, ss_customer_sk#81515, ss_cdemo_sk#81516, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_store_sk#81519, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531, d_year#81622]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) BroadcastHashJoin [ss_sold_date_sk#81512], [d_date_sk#81616], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(22) Project [ss_sold_date_sk#81512, ss_item_sk#81514, ss_customer_sk#81515, ss_cdemo_sk#81516, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_store_sk#81519, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(22) SortMergeJoin [ss_item_sk#81514], [cs_item_sk#81570], Inner\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(3) Sort [ss_item_sk#81514 ASC NULLS FIRST], false, 0\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- Exchange hashpartitioning(ss_item_sk#81514, 200), ENSURE_REQUIREMENTS, [id=#110218]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(2) Project [ss_sold_date_sk#81512, ss_item_sk#81514, ss_customer_sk#81515, ss_cdemo_sk#81516, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_store_sk#81519, ss_promo_sk#81520, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(2) BroadcastHashJoin [ss_item_sk#81514, ss_ticket_number#81521L], [sr_item_sk#81537, sr_ticket_number#81544L], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           :- *(2) Filter ((((((((isnotnull(ss_item_sk#81514) AND isnotnull(ss_ticket_number#81521L)) AND isnotnull(ss_sold_date_sk#81512)) AND isnotnull(ss_store_sk#81519)) AND isnotnull(ss_customer_sk#81515)) AND isnotnull(ss_cdemo_sk#81516)) AND isnotnull(ss_promo_sk#81520)) AND isnotnull(ss_hdemo_sk#81517)) AND isnotnull(ss_addr_sk#81518))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#81512, ss_item_sk#81514, ss_customer_sk#81515, ss_cdemo_sk#81516, ss_hdemo_sk#81517, ss_addr_sk#81518, ss_store_sk#81519, ss_promo_sk#81520, ss_ticket_number#81521L, ss_wholesale_cost#81523, ss_list_price#81524, ss_coupon_amt#81531], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#81512, ss_sold_time_sk#81513, ss_item_sk#81514, ss_customer_sk#81515, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#110213]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(1) Filter (isnotnull(sr_item_sk#81537) AND isnotnull(sr_ticket_number#81544L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#81537, sr_ticket_number#81544L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#81535, sr_return_time_sk#81536, sr_item_sk#81537, sr_customer_sk#81538, sr_c..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(6) Sort [cs_item_sk#81570 ASC NULLS FIRST], false, 0\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(6) Project [cs_item_sk#81570]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- *(6) Filter (isnotnull(sum(cs_ext_list_price#81580)#82191) AND (cast(sum(cs_ext_list_price#81580)#82191 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#81612 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#81613 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#81614 as decimal(9,2)))), DecimalType(9,2), true))#82192)), DecimalType(21,2), true)))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(6) HashAggregate(keys=[cs_item_sk#81570], functions=[sum(UnscaledValue(cs_ext_list_price#81580)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#81612 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#81613 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#81614 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#81570, sum(cs_ext_list_price#81580)#82191, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#81612 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#81613 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#81614 as decimal(9,2)))), DecimalType(9,2), true))#82192])\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- Exchange hashpartitioning(cs_item_sk#81570, 200), ENSURE_REQUIREMENTS, [id=#110234]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                    +- *(5) HashAggregate(keys=[cs_item_sk#81570], functions=[partial_sum(UnscaledValue(cs_ext_list_price#81580)), partial_sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#81612 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#81613 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#81614 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#81570, sum#82265L, sum#82266, isEmpty#82267])\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                       +- *(5) Project [cs_item_sk#81570, cs_ext_list_price#81580, cr_refunded_cash#81612, cr_reversed_charge#81613, cr_store_credit#81614]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                          +- *(5) BroadcastHashJoin [cs_item_sk#81570, cs_order_number#81572L], [cr_item_sk#81591, cr_order_number#81605L], Inner, BuildRight, false\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :- *(5) Filter (isnotnull(cs_item_sk#81570) AND isnotnull(cs_order_number#81572L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_item_sk#81570, cs_order_number#81572L, cs_ext_list_price#81580], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#81555, cs_sold_time_sk#81556, cs_ship_date_sk#81557, cs_bill_customer_sk#81558, ..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                             +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#110228]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                +- *(4) Filter (isnotnull(cr_item_sk#81591) AND isnotnull(cr_order_number#81605L))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                                   +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#81591, cr_order_number#81605L, cr_refunded_cash#81612, cr_reversed_charge#81613, cr_store_credit#81614], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#81589, cr_returned_time_sk#81590, cr_item_sk#81591, cr_refunded_customer_sk#..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110247]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(7) Filter ((isnotnull(d_year#81622) AND (d_year#81622 = 2001)) AND isnotnull(d_date_sk#81616))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#81616, d_year#81622], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#81616, d_date_id#81617, d_date#81618, d_month_seq#81619, d_week_seq#81620, d_quarter_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110254]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(8) Filter ((isnotnull(s_store_sk#81700) AND isnotnull(s_store_name#81705)) AND isnotnull(s_zip#81725))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#81700, s_store_name#81705, s_zip#81725], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#81700, s_store_id#81701, s_rec_start_date#81702, s_rec_end_date#81703, s_closed_date_..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110261]\n      :                 :     :     :     :     :     :     :     :     :     :     :     :        +- *(9) Filter (((((isnotnull(c_customer_sk#81729) AND isnotnull(c_first_sales_date_sk#81735)) AND isnotnull(c_first_shipto_date_sk#81734)) AND isnotnull(c_current_cdemo_sk#81731)) AND isnotnull(c_current_hdemo_sk#81732)) AND isnotnull(c_current_addr_sk#81733))\n      :                 :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#81729, c_current_cdemo_sk#81731, c_current_hdemo_sk#81732, c_current_addr_sk#81733, c_first_shipto_date_sk#81734, c_first_sales_date_sk#81735], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#81729, c_customer_id#81730, c_current_cdemo_sk#81731, c_current_hdemo_sk#81732, c_..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110268]\n      :                 :     :     :     :     :     :     :     :     :     :     :        +- *(10) Filter isnotnull(d_date_sk#81644)\n      :                 :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#81644, d_year#81650], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#81644, d_date_id#81645, d_date#81646, d_month_seq#81647, d_week_seq#81648, d_quarter_s..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#81672, d_year#81678], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110268]\n      :                 :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110282]\n      :                 :     :     :     :     :     :     :     :     :        +- *(12) Filter (isnotnull(cd_demo_sk#81747) AND isnotnull(cd_marital_status#81749))\n      :                 :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#81747, cd_marital_status#81749], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#81747, cd_gender#81748, cd_marital_status#81749, cd_education_status#81750, cd_purcha..., Partition Cols: []]\n      :                 :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#81756, cd_marital_status#81758], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110282]\n      :                 :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110296]\n      :                 :     :     :     :     :     :     :        +- *(14) Filter isnotnull(p_promo_sk#81765)\n      :                 :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.promotion [p_promo_sk#81765], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#81765, p_promo_id#81766, p_start_date_sk#81767, p_end_date_sk#81768, p_item_sk#81769,..., Partition Cols: []]\n      :                 :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110303]\n      :                 :     :     :     :     :     :        +- *(15) Filter (isnotnull(hd_demo_sk#81784) AND isnotnull(hd_income_band_sk#81785))\n      :                 :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#81784, hd_income_band_sk#81785], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#81784, hd_income_band_sk#81785, hd_buy_potential#81786, hd_dep_count#81787, hd_vehicl..., Partition Cols: []]\n      :                 :     :     :     :     :     +- ReusedExchange [hd_demo_sk#81789, hd_income_band_sk#81790], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110303]\n      :                 :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110317]\n      :                 :     :     :     :        +- *(17) Filter isnotnull(ca_address_sk#81794)\n      :                 :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#81794, ca_street_number#81796, ca_street_name#81797, ca_city#81800, ca_zip#81803], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#81794, ca_address_id#81795, ca_street_number#81796, ca_street_name#81797, ca_stree..., Partition Cols: []]\n      :                 :     :     :     +- ReusedExchange [ca_address_sk#81807, ca_street_number#81809, ca_street_name#81810, ca_city#81813, ca_zip#81816], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110317]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110331]\n      :                 :     :        +- *(19) Filter isnotnull(ib_income_band_sk#81820)\n      :                 :     :           +- Scan hive tpcds_sf1_iceberg.income_band [ib_income_band_sk#81820], HiveTableRelation [`tpcds_sf1_iceberg`.`income_band`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ib_income_band_sk#81820, ib_lower_bound#81821, ib_upper_bound#81822], Partition Cols: []]\n      :                 :     +- ReusedExchange [ib_income_band_sk#81823], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110331]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#110346]\n      :                    +- *(21) Project [i_item_sk#81826, i_product_name#81847]\n      :                       +- *(21) Filter ((((((isnotnull(i_current_price#81831) AND i_color#81843 IN (ivory,purple,almond,bisque,lawn,azure)) AND (i_current_price#81831 >= 60.00)) AND (i_current_price#81831 <= 70.00)) AND (i_current_price#81831 >= 61.00)) AND (i_current_price#81831 <= 75.00)) AND isnotnull(i_item_sk#81826))\n      :                          +- Scan hive tpcds_sf1_iceberg.item [i_color#81843, i_current_price#81831, i_item_sk#81826, i_product_name#81847], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#81826, i_item_id#81827, i_rec_start_date#81828, i_rec_end_date#81829, i_item_desc#8183..., Partition Cols: []]\n      +- *(46) Sort [item_sk#82211 ASC NULLS FIRST, store_name#82212 ASC NULLS FIRST, store_zip#82213 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(item_sk#82211, store_name#82212, store_zip#82213, 200), ENSURE_REQUIREMENTS, [id=#110905]\n            +- *(45) HashAggregate(keys=[i_product_name#82183, i_item_sk#82162, s_store_name#82041, s_zip#82061, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139, ca_street_number#82145, ca_street_name#82146, ca_city#82149, ca_zip#82152, d_year#81958, d_year#81986, d_year#82014], functions=[count(1), sum(UnscaledValue(ss_wholesale_cost#81859)), sum(UnscaledValue(ss_list_price#81860)), sum(UnscaledValue(ss_coupon_amt#81867))], output=[item_sk#82211, store_name#82212, store_zip#82213, syear#82222, cnt#82225L, s1#82226, s2#82227, s3#82228])\n               +- *(45) HashAggregate(keys=[i_product_name#82183, i_item_sk#82162, s_store_name#82041, s_zip#82061, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139, ca_street_number#82145, ca_street_name#82146, ca_city#82149, ca_zip#82152, d_year#81958, d_year#81986, d_year#82014], functions=[partial_count(1), partial_sum(UnscaledValue(ss_wholesale_cost#81859)), partial_sum(UnscaledValue(ss_list_price#81860)), partial_sum(UnscaledValue(ss_coupon_amt#81867))], output=[i_product_name#82183, i_item_sk#82162, s_store_name#82041, s_zip#82061, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139, ca_street_number#82145, ca_street_name#82146, ca_city#82149, ca_zip#82152, d_year#81958, d_year#81986, d_year#82014, count#82272L, sum#82273L, sum#82274L, sum#82275L])\n                  +- *(45) Project [ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, d_year#81986, d_year#82014, s_store_name#82041, s_zip#82061, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139, ca_street_number#82145, ca_street_name#82146, ca_city#82149, ca_zip#82152, i_item_sk#82162, i_product_name#82183]\n                     +- *(45) BroadcastHashJoin [ss_item_sk#81850], [i_item_sk#82162], Inner, BuildRight, false\n                        :- *(45) Project [ss_item_sk#81850, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, d_year#81986, d_year#82014, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139, ca_street_number#82145, ca_street_name#82146, ca_city#82149, ca_zip#82152]\n                        :  +- *(45) BroadcastHashJoin [hd_income_band_sk#82126], [ib_income_band_sk#82159], Inner, BuildRight, false\n                        :     :- *(45) Project [ss_item_sk#81850, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, d_year#81986, d_year#82014, hd_income_band_sk#82126, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139, ca_street_number#82145, ca_street_name#82146, ca_city#82149, ca_zip#82152]\n                        :     :  +- *(45) BroadcastHashJoin [hd_income_band_sk#82121], [ib_income_band_sk#82156], Inner, BuildRight, false\n                        :     :     :- *(45) Project [ss_item_sk#81850, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, d_year#81986, d_year#82014, hd_income_band_sk#82121, hd_income_band_sk#82126, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139, ca_street_number#82145, ca_street_name#82146, ca_city#82149, ca_zip#82152]\n                        :     :     :  +- *(45) BroadcastHashJoin [c_current_addr_sk#82069], [ca_address_sk#82143], Inner, BuildRight, false\n                        :     :     :     :- *(45) Project [ss_item_sk#81850, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_addr_sk#82069, d_year#81986, d_year#82014, hd_income_band_sk#82121, hd_income_band_sk#82126, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139]\n                        :     :     :     :  +- *(45) BroadcastHashJoin [ss_addr_sk#81854], [ca_address_sk#82130], Inner, BuildRight, false\n                        :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_addr_sk#81854, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_addr_sk#82069, d_year#81986, d_year#82014, hd_income_band_sk#82121, hd_income_band_sk#82126]\n                        :     :     :     :     :  +- *(45) BroadcastHashJoin [c_current_hdemo_sk#82068], [hd_demo_sk#82125], Inner, BuildRight, false\n                        :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_addr_sk#81854, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_hdemo_sk#82068, c_current_addr_sk#82069, d_year#81986, d_year#82014, hd_income_band_sk#82121]\n                        :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_hdemo_sk#81853], [hd_demo_sk#82120], Inner, BuildRight, false\n                        :     :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_hdemo_sk#82068, c_current_addr_sk#82069, d_year#81986, d_year#82014]\n                        :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_promo_sk#81856], [p_promo_sk#82101], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_hdemo_sk#82068, c_current_addr_sk#82069, d_year#81986, d_year#82014]\n                        :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_current_cdemo_sk#82067], [cd_demo_sk#82092], Inner, BuildRight, NOT (cd_marital_status#82085 = cd_marital_status#82094), false\n                        :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_cdemo_sk#82067, c_current_hdemo_sk#82068, c_current_addr_sk#82069, d_year#81986, d_year#82014, cd_marital_status#82085]\n                        :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_cdemo_sk#81852], [cd_demo_sk#82083], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_cdemo_sk#81852, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_cdemo_sk#82067, c_current_hdemo_sk#82068, c_current_addr_sk#82069, d_year#81986, d_year#82014]\n                        :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_first_shipto_date_sk#82070], [d_date_sk#82008], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_cdemo_sk#81852, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_cdemo_sk#82067, c_current_hdemo_sk#82068, c_current_addr_sk#82069, c_first_shipto_date_sk#82070, d_year#81986]\n                        :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [c_first_sales_date_sk#82071], [d_date_sk#81980], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_cdemo_sk#81852, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061, c_current_cdemo_sk#82067, c_current_hdemo_sk#82068, c_current_addr_sk#82069, c_first_shipto_date_sk#82070, c_first_sales_date_sk#82071]\n                        :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_customer_sk#81851], [c_customer_sk#82065], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_customer_sk#81851, ss_cdemo_sk#81852, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958, s_store_name#82041, s_zip#82061]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_store_sk#81855], [s_store_sk#82036], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_item_sk#81850, ss_customer_sk#81851, ss_cdemo_sk#81852, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_store_sk#81855, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867, d_year#81958]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) BroadcastHashJoin [ss_sold_date_sk#81848], [d_date_sk#81952], Inner, BuildRight, false\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(45) Project [ss_sold_date_sk#81848, ss_item_sk#81850, ss_customer_sk#81851, ss_cdemo_sk#81852, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_store_sk#81855, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- *(45) SortMergeJoin [ss_item_sk#81850], [cs_item_sk#81906], Inner\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :- *(26) Sort [ss_item_sk#81850 ASC NULLS FIRST], false, 0\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     :  +- ReusedExchange [ss_sold_date_sk#81848, ss_item_sk#81850, ss_customer_sk#81851, ss_cdemo_sk#81852, ss_hdemo_sk#81853, ss_addr_sk#81854, ss_store_sk#81855, ss_promo_sk#81856, ss_wholesale_cost#81859, ss_list_price#81860, ss_coupon_amt#81867], Exchange hashpartitioning(ss_item_sk#81514, 200), ENSURE_REQUIREMENTS, [id=#110218]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- *(29) Sort [cs_item_sk#81906 ASC NULLS FIRST], false, 0\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(29) Project [cs_item_sk#81906]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- *(29) Filter (isnotnull(sum(cs_ext_list_price#81916)#82196) AND (cast(sum(cs_ext_list_price#81916)#82196 as decimal(21,2)) > CheckOverflow((2.00 * promote_precision(sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#81948 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#81949 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#81950 as decimal(9,2)))), DecimalType(9,2), true))#82197)), DecimalType(21,2), true)))\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :              +- *(29) HashAggregate(keys=[cs_item_sk#81906], functions=[sum(UnscaledValue(cs_ext_list_price#81916)), sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#81948 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#81949 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#81950 as decimal(9,2)))), DecimalType(9,2), true))], output=[cs_item_sk#81906, sum(cs_ext_list_price#81916)#82196, sum(CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(cast(cr_refunded_cash#81948 as decimal(8,2))) + promote_precision(cast(cr_reversed_charge#81949 as decimal(8,2)))), DecimalType(8,2), true) as decimal(9,2))) + promote_precision(cast(cr_store_credit#81950 as decimal(9,2)))), DecimalType(9,2), true))#82197])\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     :                 +- ReusedExchange [cs_item_sk#81906, sum#82279L, sum#82280, isEmpty#82281], Exchange hashpartitioning(cs_item_sk#81570, 200), ENSURE_REQUIREMENTS, [id=#110234]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110397]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :        +- *(30) Filter ((isnotnull(d_year#81958) AND (d_year#81958 = 2002)) AND isnotnull(d_date_sk#81952))\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#81952, d_year#81958], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#81952, d_date_id#81953, d_date#81954, d_month_seq#81955, d_week_seq#81956, d_quarter_s..., Partition Cols: []]\n                        :     :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [s_store_sk#82036, s_store_name#82041, s_zip#82061], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110254]\n                        :     :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [c_customer_sk#82065, c_current_cdemo_sk#82067, c_current_hdemo_sk#82068, c_current_addr_sk#82069, c_first_shipto_date_sk#82070, c_first_sales_date_sk#82071], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110261]\n                        :     :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#81980, d_year#81986], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110268]\n                        :     :     :     :     :     :     :     :     :     :     +- ReusedExchange [d_date_sk#82008, d_year#82014], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110268]\n                        :     :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#82083, cd_marital_status#82085], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110282]\n                        :     :     :     :     :     :     :     :     +- ReusedExchange [cd_demo_sk#82092, cd_marital_status#82094], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110282]\n                        :     :     :     :     :     :     :     +- ReusedExchange [p_promo_sk#82101], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110296]\n                        :     :     :     :     :     :     +- ReusedExchange [hd_demo_sk#82120, hd_income_band_sk#82121], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110303]\n                        :     :     :     :     :     +- ReusedExchange [hd_demo_sk#82125, hd_income_band_sk#82126], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110303]\n                        :     :     :     :     +- ReusedExchange [ca_address_sk#82130, ca_street_number#82132, ca_street_name#82133, ca_city#82136, ca_zip#82139], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110317]\n                        :     :     :     +- ReusedExchange [ca_address_sk#82143, ca_street_number#82145, ca_street_name#82146, ca_city#82149, ca_zip#82152], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110317]\n                        :     :     +- ReusedExchange [ib_income_band_sk#82156], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110331]\n                        :     +- ReusedExchange [ib_income_band_sk#82159], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#110331]\n                        +- ReusedExchange [i_item_sk#82162, i_product_name#82183], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#110346]\n",
    "iteration" : 3,
    "name" : "q64"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ss_store_sk#82422, 200), ENSURE_REQUIREMENTS, [id=#111091]\n+- *(5) Project [s_store_name#82318, ss_store_sk#82422, revenue#82312, i_item_desc#82346, i_current_price#82347, i_wholesale_cost#82348, i_brand#82350]\n   +- *(5) BroadcastHashJoin [ss_item_sk#82417], [i_item_sk#82342], Inner, BuildRight, false\n      :- *(5) Project [s_store_name#82318, ss_store_sk#82422, ss_item_sk#82417, revenue#82312]\n      :  +- *(5) BroadcastHashJoin [s_store_sk#82313], [ss_store_sk#82422], Inner, BuildLeft, false\n      :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111063]\n      :     :  +- *(1) Filter isnotnull(s_store_sk#82313)\n      :     :     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#82313, s_store_name#82318], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#82313, s_store_id#82314, s_rec_start_date#82315, s_rec_end_date#82316, s_closed_date_..., Partition Cols: []]\n      :     +- *(5) Filter isnotnull(revenue#82312)\n      :        +- *(5) HashAggregate(keys=[ss_store_sk#82422, ss_item_sk#82417], functions=[sum(UnscaledValue(ss_sales_price#82428))], output=[ss_store_sk#82422, ss_item_sk#82417, revenue#82312])\n      :           +- Exchange hashpartitioning(ss_store_sk#82422, ss_item_sk#82417, 200), ENSURE_REQUIREMENTS, [id=#111077]\n      :              +- *(3) HashAggregate(keys=[ss_store_sk#82422, ss_item_sk#82417], functions=[partial_sum(UnscaledValue(ss_sales_price#82428))], output=[ss_store_sk#82422, ss_item_sk#82417, sum#82476L])\n      :                 +- *(3) Project [ss_item_sk#82417, ss_store_sk#82422, ss_sales_price#82428]\n      :                    +- *(3) BroadcastHashJoin [ss_sold_date_sk#82415], [d_date_sk#82438], Inner, BuildRight, false\n      :                       :- *(3) Filter ((isnotnull(ss_sold_date_sk#82415) AND isnotnull(ss_store_sk#82422)) AND isnotnull(ss_item_sk#82417))\n      :                       :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#82415, ss_item_sk#82417, ss_store_sk#82422, ss_sales_price#82428], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#82415, ss_sold_time_sk#82416, ss_item_sk#82417, ss_customer_sk#82418, ss_cdemo_s..., Partition Cols: []]\n      :                       +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#111071]\n      :                          +- *(2) Project [d_date_sk#82438]\n      :                             +- *(2) Filter (((isnotnull(d_month_seq#82441) AND (d_month_seq#82441 >= 1185)) AND (d_month_seq#82441 <= 1196)) AND isnotnull(d_date_sk#82438))\n      :                                +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#82438, d_month_seq#82441], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#82438, d_date_id#82439, d_date#82440, d_month_seq#82441, d_week_seq#82442, d_quarter_s..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111086]\n         +- *(4) Filter isnotnull(i_item_sk#82342)\n            +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#82342, i_item_desc#82346, i_current_price#82347, i_wholesale_cost#82348, i_brand#82350], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#82342, i_item_id#82343, i_rec_start_date#82344, i_rec_end_date#82345, i_item_desc#8234..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q65"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, ship_carriers#82492, year#82493, 200), ENSURE_REQUIREMENTS, [id=#111616]\n+- *(13) HashAggregate(keys=[w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, ship_carriers#82492, year#82493], functions=[partial_sum(jan_sales#82494), partial_sum(feb_sales#82495), partial_sum(mar_sales#82496), partial_sum(apr_sales#82497), partial_sum(may_sales#82498), partial_sum(jun_sales#82499), partial_sum(jul_sales#82500), partial_sum(aug_sales#82501), partial_sum(sep_sales#82502), partial_sum(oct_sales#82503), partial_sum(nov_sales#82504), partial_sum(dec_sales#82505), partial_sum(CheckOverflow((promote_precision(jan_sales#82494) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(feb_sales#82495) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(mar_sales#82496) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(apr_sales#82497) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(may_sales#82498) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(jun_sales#82499) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(jul_sales#82500) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(aug_sales#82501) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(sep_sales#82502) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(oct_sales#82503) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(nov_sales#82504) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), partial_sum(CheckOverflow((promote_precision(dec_sales#82505) / promote_precision(cast(cast(w_warehouse_sq_ft#82617 as decimal(10,0)) as decimal(28,2)))), DecimalType(38,12), true)), ... 12 more fields], output=[w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, ship_carriers#82492, year#82493, sum#82965, isEmpty#82966, sum#82967, isEmpty#82968, sum#82969, isEmpty#82970, sum#82971, isEmpty#82972, sum#82973, isEmpty#82974, sum#82975, isEmpty#82976, sum#82977, isEmpty#82978, sum#82979, isEmpty#82980, ... 56 more fields])\n   +- Union\n      :- *(6) HashAggregate(keys=[w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, d_year#82634], functions=[sum(CASE WHEN (d_moy#82636 = 1) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 2) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 3) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 4) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 5) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 6) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 7) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 8) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 9) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 10) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 11) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 12) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 1) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 2) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 3) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 4) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 5) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 6) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 7) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 8) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 9) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 10) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 11) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82636 = 12) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, ship_carriers#82492, year#82493, jan_sales#82494, feb_sales#82495, mar_sales#82496, apr_sales#82497, may_sales#82498, jun_sales#82499, jul_sales#82500, aug_sales#82501, sep_sales#82502, oct_sales#82503, nov_sales#82504, dec_sales#82505, jan_net#82506, feb_net#82507, mar_net#82508, apr_net#82509, ... 8 more fields])\n      :  +- Exchange hashpartitioning(w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, d_year#82634, 200), ENSURE_REQUIREMENTS, [id=#111425]\n      :     +- *(5) HashAggregate(keys=[w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, d_year#82634], functions=[partial_sum(CASE WHEN (d_moy#82636 = 1) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 2) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 3) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 4) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 5) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 6) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 7) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 8) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 9) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 10) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 11) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 12) THEN CheckOverflow((promote_precision(cast(ws_ext_list_price#82605 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 1) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 2) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 3) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 4) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 5) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 6) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 7) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 8) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 9) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 10) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 11) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82636 = 12) THEN CheckOverflow((promote_precision(cast(ws_net_profit#82613 as decimal(12,2))) * promote_precision(cast(cast(ws_quantity#82598 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, d_year#82634, sum#83085, isEmpty#83086, sum#83087, isEmpty#83088, sum#83089, isEmpty#83090, sum#83091, isEmpty#83092, sum#83093, isEmpty#83094, sum#83095, isEmpty#83096, sum#83097, isEmpty#83098, sum#83099, isEmpty#83100, sum#83101, ... 31 more fields])\n      :        +- *(5) Project [ws_quantity#82598, ws_ext_list_price#82605, ws_net_profit#82613, w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, d_year#82634, d_moy#82636]\n      :           +- *(5) BroadcastHashJoin [ws_ship_mode_sk#82594], [sm_ship_mode_sk#82666], Inner, BuildRight, false\n      :              :- *(5) Project [ws_ship_mode_sk#82594, ws_quantity#82598, ws_ext_list_price#82605, ws_net_profit#82613, w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, d_year#82634, d_moy#82636]\n      :              :  +- *(5) BroadcastHashJoin [ws_sold_time_sk#82581], [t_time_sk#82656], Inner, BuildRight, false\n      :              :     :- *(5) Project [ws_sold_time_sk#82581, ws_ship_mode_sk#82594, ws_quantity#82598, ws_ext_list_price#82605, ws_net_profit#82613, w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626, d_year#82634, d_moy#82636]\n      :              :     :  +- *(5) BroadcastHashJoin [ws_sold_date_sk#82580], [d_date_sk#82628], Inner, BuildRight, false\n      :              :     :     :- *(5) Project [ws_sold_date_sk#82580, ws_sold_time_sk#82581, ws_ship_mode_sk#82594, ws_quantity#82598, ws_ext_list_price#82605, ws_net_profit#82613, w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626]\n      :              :     :     :  +- *(5) BroadcastHashJoin [ws_warehouse_sk#82595], [w_warehouse_sk#82614], Inner, BuildRight, false\n      :              :     :     :     :- *(5) Filter (((isnotnull(ws_warehouse_sk#82595) AND isnotnull(ws_sold_date_sk#82580)) AND isnotnull(ws_sold_time_sk#82581)) AND isnotnull(ws_ship_mode_sk#82594))\n      :              :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#82580, ws_sold_time_sk#82581, ws_ship_mode_sk#82594, ws_warehouse_sk#82595, ws_quantity#82598, ws_ext_list_price#82605, ws_net_profit#82613], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#82580, ws_sold_time_sk#82581, ws_ship_date_sk#82582, ws_item_sk#82583, ws_bill_c..., Partition Cols: []]\n      :              :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111396]\n      :              :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#82614)\n      :              :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#82614, w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_city#82622, w_county#82623, w_state#82624, w_country#82626], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#82614, w_warehouse_id#82615, w_warehouse_name#82616, w_warehouse_sq_ft#82617, w_s..., Partition Cols: []]\n      :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111403]\n      :              :     :        +- *(2) Filter ((isnotnull(d_year#82634) AND (d_year#82634 = 2002)) AND isnotnull(d_date_sk#82628))\n      :              :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#82628, d_year#82634, d_moy#82636], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#82628, d_date_id#82629, d_date#82630, d_month_seq#82631, d_week_seq#82632, d_quarter_s..., Partition Cols: []]\n      :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#111411]\n      :              :        +- *(3) Project [t_time_sk#82656]\n      :              :           +- *(3) Filter (((isnotnull(t_time#82658) AND (t_time#82658 >= 2662)) AND (t_time#82658 <= 31462)) AND isnotnull(t_time_sk#82656))\n      :              :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_time#82658, t_time_sk#82656], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#82656, t_time_id#82657, t_time#82658, t_hour#82659, t_minute#82660, t_second#82661, t_..., Partition Cols: []]\n      :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#111419]\n      :                 +- *(4) Project [sm_ship_mode_sk#82666]\n      :                    +- *(4) Filter (sm_carrier#82670 IN (FEDEX,MSC) AND isnotnull(sm_ship_mode_sk#82666))\n      :                       +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_carrier#82670, sm_ship_mode_sk#82666], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#82666, sm_ship_mode_id#82667, sm_type#82668, sm_code#82669, sm_carrier#82670, sm..., Partition Cols: []]\n      +- *(12) HashAggregate(keys=[w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718, d_year#82726], functions=[sum(CASE WHEN (d_moy#82728 = 1) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 2) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 3) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 4) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 5) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 6) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 7) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 8) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 9) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 10) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 11) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 12) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 1) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 2) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 3) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 4) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 5) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 6) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 7) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 8) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 9) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 10) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 11) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), sum(CASE WHEN (d_moy#82728 = 12) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718, ship_carriers#82518, year#82519, jan_sales#82520, feb_sales#82521, mar_sales#82522, apr_sales#82523, may_sales#82524, jun_sales#82525, jul_sales#82526, aug_sales#82527, sep_sales#82528, oct_sales#82529, nov_sales#82530, dec_sales#82531, jan_net#82532, feb_net#82533, mar_net#82534, apr_net#82535, ... 8 more fields])\n         +- Exchange hashpartitioning(w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718, d_year#82726, 200), ENSURE_REQUIREMENTS, [id=#111550]\n            +- *(11) HashAggregate(keys=[w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718, d_year#82726], functions=[partial_sum(CASE WHEN (d_moy#82728 = 1) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 2) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 3) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 4) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 5) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 6) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 7) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 8) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 9) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 10) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 11) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 12) THEN CheckOverflow((promote_precision(cast(cs_ext_list_price#82697 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 1) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 2) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 3) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 4) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 5) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 6) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 7) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 8) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 9) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 10) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 11) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END), partial_sum(CASE WHEN (d_moy#82728 = 12) THEN CheckOverflow((promote_precision(cast(cs_net_profit#82705 as decimal(12,2))) * promote_precision(cast(cast(cs_quantity#82690 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true) ELSE 0.00 END)], output=[w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718, d_year#82726, sum#83181, isEmpty#83182, sum#83183, isEmpty#83184, sum#83185, isEmpty#83186, sum#83187, isEmpty#83188, sum#83189, isEmpty#83190, sum#83191, isEmpty#83192, sum#83193, isEmpty#83194, sum#83195, isEmpty#83196, sum#83197, ... 31 more fields])\n               +- *(11) Project [cs_quantity#82690, cs_ext_list_price#82697, cs_net_profit#82705, w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718, d_year#82726, d_moy#82728]\n                  +- *(11) BroadcastHashJoin [cs_ship_mode_sk#82685], [sm_ship_mode_sk#82758], Inner, BuildRight, false\n                     :- *(11) Project [cs_ship_mode_sk#82685, cs_quantity#82690, cs_ext_list_price#82697, cs_net_profit#82705, w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718, d_year#82726, d_moy#82728]\n                     :  +- *(11) BroadcastHashJoin [cs_sold_time_sk#82673], [t_time_sk#82748], Inner, BuildRight, false\n                     :     :- *(11) Project [cs_sold_time_sk#82673, cs_ship_mode_sk#82685, cs_quantity#82690, cs_ext_list_price#82697, cs_net_profit#82705, w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718, d_year#82726, d_moy#82728]\n                     :     :  +- *(11) BroadcastHashJoin [cs_sold_date_sk#82672], [d_date_sk#82720], Inner, BuildRight, false\n                     :     :     :- *(11) Project [cs_sold_date_sk#82672, cs_sold_time_sk#82673, cs_ship_mode_sk#82685, cs_quantity#82690, cs_ext_list_price#82697, cs_net_profit#82705, w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718]\n                     :     :     :  +- *(11) BroadcastHashJoin [cs_warehouse_sk#82686], [w_warehouse_sk#82706], Inner, BuildRight, false\n                     :     :     :     :- *(11) Filter (((isnotnull(cs_warehouse_sk#82686) AND isnotnull(cs_sold_date_sk#82672)) AND isnotnull(cs_sold_time_sk#82673)) AND isnotnull(cs_ship_mode_sk#82685))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#82672, cs_sold_time_sk#82673, cs_ship_mode_sk#82685, cs_warehouse_sk#82686, cs_quantity#82690, cs_ext_list_price#82697, cs_net_profit#82705], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#82672, cs_sold_time_sk#82673, cs_ship_date_sk#82674, cs_bill_customer_sk#82675, ..., Partition Cols: []]\n                     :     :     :     +- ReusedExchange [w_warehouse_sk#82706, w_warehouse_name#82708, w_warehouse_sq_ft#82709, w_city#82714, w_county#82715, w_state#82716, w_country#82718], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111396]\n                     :     :     +- ReusedExchange [d_date_sk#82720, d_year#82726, d_moy#82728], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111403]\n                     :     +- ReusedExchange [t_time_sk#82748], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#111411]\n                     +- ReusedExchange [sm_ship_mode_sk#82758], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#111419]\n",
    "iteration" : 3,
    "name" : "q66"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#83486, 200), ENSURE_REQUIREMENTS, [id=#111745]\n+- *(5) HashAggregate(keys=[i_category#83486, i_class#83487, i_brand#83488, i_product_name#83489, d_year#83490, d_qoy#83491, d_moy#83492, s_store_id#83493, spark_grouping_id#83485L], functions=[sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#83387 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#83384 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))], output=[i_category#83486, i_class#83487, i_brand#83488, i_product_name#83489, d_year#83490, d_qoy#83491, d_moy#83492, s_store_id#83493, sumsales#83370])\n   +- Exchange hashpartitioning(i_category#83486, i_class#83487, i_brand#83488, i_product_name#83489, d_year#83490, d_qoy#83491, d_moy#83492, s_store_id#83493, spark_grouping_id#83485L, 200), ENSURE_REQUIREMENTS, [id=#111741]\n      +- *(4) HashAggregate(keys=[i_category#83486, i_class#83487, i_brand#83488, i_product_name#83489, d_year#83490, d_qoy#83491, d_moy#83492, s_store_id#83493, spark_grouping_id#83485L], functions=[partial_sum(coalesce(CheckOverflow((promote_precision(cast(ss_sales_price#83387 as decimal(12,2))) * promote_precision(cast(cast(ss_quantity#83384 as decimal(10,0)) as decimal(12,2)))), DecimalType(18,2), true), 0.00))], output=[i_category#83486, i_class#83487, i_brand#83488, i_product_name#83489, d_year#83490, d_qoy#83491, d_moy#83492, s_store_id#83493, spark_grouping_id#83485L, sum#83515, isEmpty#83516])\n         +- *(4) Expand [List(ss_quantity#83384, ss_sales_price#83387, i_category#83466, i_class#83464, i_brand#83462, i_product_name#83475, d_year#83403, d_qoy#83407, d_moy#83405, s_store_id#83426, 0), List(ss_quantity#83384, ss_sales_price#83387, i_category#83466, i_class#83464, i_brand#83462, i_product_name#83475, d_year#83403, d_qoy#83407, d_moy#83405, null, 1), List(ss_quantity#83384, ss_sales_price#83387, i_category#83466, i_class#83464, i_brand#83462, i_product_name#83475, d_year#83403, d_qoy#83407, null, null, 3), List(ss_quantity#83384, ss_sales_price#83387, i_category#83466, i_class#83464, i_brand#83462, i_product_name#83475, d_year#83403, null, null, null, 7), List(ss_quantity#83384, ss_sales_price#83387, i_category#83466, i_class#83464, i_brand#83462, i_product_name#83475, null, null, null, null, 15), List(ss_quantity#83384, ss_sales_price#83387, i_category#83466, i_class#83464, i_brand#83462, null, null, null, null, null, 31), List(ss_quantity#83384, ss_sales_price#83387, i_category#83466, i_class#83464, null, null, null, null, null, null, 63), List(ss_quantity#83384, ss_sales_price#83387, i_category#83466, null, null, null, null, null, null, null, 127), List(ss_quantity#83384, ss_sales_price#83387, null, null, null, null, null, null, null, null, 255)], [ss_quantity#83384, ss_sales_price#83387, i_category#83486, i_class#83487, i_brand#83488, i_product_name#83489, d_year#83490, d_qoy#83491, d_moy#83492, s_store_id#83493, spark_grouping_id#83485L]\n            +- *(4) Project [ss_quantity#83384, ss_sales_price#83387, i_category#83466, i_class#83464, i_brand#83462, i_product_name#83475, d_year#83403, d_qoy#83407, d_moy#83405, s_store_id#83426]\n               +- *(4) BroadcastHashJoin [ss_item_sk#83376], [i_item_sk#83454], Inner, BuildRight, false\n                  :- *(4) Project [ss_item_sk#83376, ss_quantity#83384, ss_sales_price#83387, d_year#83403, d_moy#83405, d_qoy#83407, s_store_id#83426]\n                  :  +- *(4) BroadcastHashJoin [ss_store_sk#83381], [s_store_sk#83425], Inner, BuildRight, false\n                  :     :- *(4) Project [ss_item_sk#83376, ss_store_sk#83381, ss_quantity#83384, ss_sales_price#83387, d_year#83403, d_moy#83405, d_qoy#83407]\n                  :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#83374], [d_date_sk#83397], Inner, BuildRight, false\n                  :     :     :- *(4) Filter ((isnotnull(ss_sold_date_sk#83374) AND isnotnull(ss_store_sk#83381)) AND isnotnull(ss_item_sk#83376))\n                  :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#83374, ss_item_sk#83376, ss_store_sk#83381, ss_quantity#83384, ss_sales_price#83387], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#83374, ss_sold_time_sk#83375, ss_item_sk#83376, ss_customer_sk#83377, ss_cdemo_s..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#111720]\n                  :     :        +- *(1) Project [d_date_sk#83397, d_year#83403, d_moy#83405, d_qoy#83407]\n                  :     :           +- *(1) Filter (((isnotnull(d_month_seq#83400) AND (d_month_seq#83400 >= 1177)) AND (d_month_seq#83400 <= 1188)) AND isnotnull(d_date_sk#83397))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#83397, d_month_seq#83400, d_moy#83405, d_qoy#83407, d_year#83403], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#83397, d_date_id#83398, d_date#83399, d_month_seq#83400, d_week_seq#83401, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111727]\n                  :        +- *(2) Filter isnotnull(s_store_sk#83425)\n                  :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#83425, s_store_id#83426], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#83425, s_store_id#83426, s_rec_start_date#83427, s_rec_end_date#83428, s_closed_date_..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#111734]\n                     +- *(3) Filter isnotnull(i_item_sk#83454)\n                        +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#83454, i_brand#83462, i_class#83464, i_category#83466, i_product_name#83475], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#83454, i_item_id#83455, i_rec_start_date#83456, i_rec_end_date#83457, i_item_desc#8345..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q67"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 3,
    "name" : "q68"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(cd_gender#83728, cd_marital_status#83729, cd_education_status#83730, cd_purchase_estimate#83731, cd_credit_rating#83732, 200), ENSURE_REQUIREMENTS, [id=#112257]\n+- *(14) HashAggregate(keys=[cd_gender#83728, cd_marital_status#83729, cd_education_status#83730, cd_purchase_estimate#83731, cd_credit_rating#83732], functions=[partial_count(1)], output=[cd_gender#83728, cd_marital_status#83729, cd_education_status#83730, cd_purchase_estimate#83731, cd_credit_rating#83732, count#83920L])\n   +- *(14) Project [cd_gender#83728, cd_marital_status#83729, cd_education_status#83730, cd_purchase_estimate#83731, cd_credit_rating#83732]\n      +- *(14) BroadcastHashJoin [c_current_cdemo_sk#83698], [cd_demo_sk#83727], Inner, BuildRight, false\n         :- *(14) Project [c_current_cdemo_sk#83698]\n         :  +- *(14) BroadcastHashJoin [c_current_addr_sk#83700], [ca_address_sk#83714], Inner, BuildRight, false\n         :     :- *(14) Project [c_current_cdemo_sk#83698, c_current_addr_sk#83700]\n         :     :  +- SortMergeJoin [c_customer_sk#83696], [cs_ship_customer_sk#83856], LeftAnti\n         :     :     :- SortMergeJoin [c_customer_sk#83696], [ws_bill_customer_sk#83791], LeftAnti\n         :     :     :  :- SortMergeJoin [c_customer_sk#83696], [ss_customer_sk#83739], LeftSemi\n         :     :     :  :  :- *(2) Sort [c_customer_sk#83696 ASC NULLS FIRST], false, 0\n         :     :     :  :  :  +- Exchange hashpartitioning(c_customer_sk#83696, 200), ENSURE_REQUIREMENTS, [id=#112129]\n         :     :     :  :  :     +- *(1) Filter (isnotnull(c_current_addr_sk#83700) AND isnotnull(c_current_cdemo_sk#83698))\n         :     :     :  :  :        +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#83696, c_current_cdemo_sk#83698, c_current_addr_sk#83700], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#83696, c_customer_id#83697, c_current_cdemo_sk#83698, c_current_hdemo_sk#83699, c_..., Partition Cols: []]\n         :     :     :  :  +- *(5) Sort [ss_customer_sk#83739 ASC NULLS FIRST], false, 0\n         :     :     :  :     +- Exchange hashpartitioning(ss_customer_sk#83739, 200), ENSURE_REQUIREMENTS, [id=#112144]\n         :     :     :  :        +- *(4) Project [ss_customer_sk#83739]\n         :     :     :  :           +- *(4) BroadcastHashJoin [ss_sold_date_sk#83736], [d_date_sk#83759], Inner, BuildRight, false\n         :     :     :  :              :- *(4) Filter isnotnull(ss_sold_date_sk#83736)\n         :     :     :  :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#83736, ss_customer_sk#83739], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#83736, ss_sold_time_sk#83737, ss_item_sk#83738, ss_customer_sk#83739, ss_cdemo_s..., Partition Cols: []]\n         :     :     :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112139]\n         :     :     :  :                 +- *(3) Project [d_date_sk#83759]\n         :     :     :  :                    +- *(3) Filter (((((isnotnull(d_year#83765) AND isnotnull(d_moy#83767)) AND (d_year#83765 = 1999)) AND (d_moy#83767 >= 1)) AND (d_moy#83767 <= 3)) AND isnotnull(d_date_sk#83759))\n         :     :     :  :                       +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#83759, d_moy#83767, d_year#83765], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#83759, d_date_id#83760, d_date#83761, d_month_seq#83762, d_week_seq#83763, d_quarter_s..., Partition Cols: []]\n         :     :     :  +- *(8) Sort [ws_bill_customer_sk#83791 ASC NULLS FIRST], false, 0\n         :     :     :     +- Exchange hashpartitioning(ws_bill_customer_sk#83791, 200), ENSURE_REQUIREMENTS, [id=#112226]\n         :     :     :        +- *(7) Project [ws_bill_customer_sk#83791]\n         :     :     :           +- *(7) BroadcastHashJoin [ws_sold_date_sk#83787], [d_date_sk#83821], Inner, BuildRight, false\n         :     :     :              :- *(7) Filter isnotnull(ws_sold_date_sk#83787)\n         :     :     :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#83787, ws_bill_customer_sk#83791], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#83787, ws_sold_time_sk#83788, ws_ship_date_sk#83789, ws_item_sk#83790, ws_bill_c..., Partition Cols: []]\n         :     :     :              +- ReusedExchange [d_date_sk#83821], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112139]\n         :     :     +- *(11) Sort [cs_ship_customer_sk#83856 ASC NULLS FIRST], false, 0\n         :     :        +- Exchange hashpartitioning(cs_ship_customer_sk#83856, 200), ENSURE_REQUIREMENTS, [id=#112244]\n         :     :           +- *(10) Project [cs_ship_customer_sk#83856]\n         :     :              +- *(10) BroadcastHashJoin [cs_sold_date_sk#83849], [d_date_sk#83883], Inner, BuildRight, false\n         :     :                 :- *(10) Filter isnotnull(cs_sold_date_sk#83849)\n         :     :                 :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#83849, cs_ship_customer_sk#83856], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#83849, cs_sold_time_sk#83850, cs_ship_date_sk#83851, cs_bill_customer_sk#83852, ..., Partition Cols: []]\n         :     :                 +- ReusedExchange [d_date_sk#83883], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112139]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112187]\n         :        +- *(12) Project [ca_address_sk#83714]\n         :           +- *(12) Filter (ca_state#83722 IN (IL,FL,SD) AND isnotnull(ca_address_sk#83714))\n         :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#83714, ca_state#83722], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#83714, ca_address_id#83715, ca_street_number#83716, ca_street_name#83717, ca_stree..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#112194]\n            +- *(13) Filter isnotnull(cd_demo_sk#83727)\n               +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#83727, cd_gender#83728, cd_marital_status#83729, cd_education_status#83730, cd_purchase_estimate#83731, cd_credit_rating#83732], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#83727, cd_gender#83728, cd_marital_status#83729, cd_education_status#83730, cd_purcha..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q69"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#83995, 200), ENSURE_REQUIREMENTS, [id=#112394]\n+- *(5) HashAggregate(keys=[i_item_id#83995], functions=[partial_avg(cast(ss_quantity#83944 as bigint)), partial_avg(UnscaledValue(ss_list_price#83946)), partial_avg(UnscaledValue(ss_coupon_amt#83953)), partial_avg(UnscaledValue(ss_sales_price#83947))], output=[i_item_id#83995, sum#84053, count#84054L, sum#84055, count#84056L, sum#84057, count#84058L, sum#84059, count#84060L])\n   +- *(5) Project [ss_quantity#83944, ss_list_price#83946, ss_sales_price#83947, ss_coupon_amt#83953, i_item_id#83995]\n      +- *(5) BroadcastHashJoin [ss_promo_sk#83942], [p_promo_sk#84016], Inner, BuildRight, false\n         :- *(5) Project [ss_promo_sk#83942, ss_quantity#83944, ss_list_price#83946, ss_sales_price#83947, ss_coupon_amt#83953, i_item_id#83995]\n         :  +- *(5) BroadcastHashJoin [ss_item_sk#83936], [i_item_sk#83994], Inner, BuildRight, false\n         :     :- *(5) Project [ss_item_sk#83936, ss_promo_sk#83942, ss_quantity#83944, ss_list_price#83946, ss_sales_price#83947, ss_coupon_amt#83953]\n         :     :  +- *(5) BroadcastHashJoin [ss_sold_date_sk#83934], [d_date_sk#83966], Inner, BuildRight, false\n         :     :     :- *(5) Project [ss_sold_date_sk#83934, ss_item_sk#83936, ss_promo_sk#83942, ss_quantity#83944, ss_list_price#83946, ss_sales_price#83947, ss_coupon_amt#83953]\n         :     :     :  +- *(5) BroadcastHashJoin [ss_cdemo_sk#83938], [cd_demo_sk#83957], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(ss_cdemo_sk#83938) AND isnotnull(ss_sold_date_sk#83934)) AND isnotnull(ss_item_sk#83936)) AND isnotnull(ss_promo_sk#83942))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#83934, ss_item_sk#83936, ss_cdemo_sk#83938, ss_promo_sk#83942, ss_quantity#83944, ss_list_price#83946, ss_sales_price#83947, ss_coupon_amt#83953], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#83934, ss_sold_time_sk#83935, ss_item_sk#83936, ss_customer_sk#83937, ss_cdemo_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112365]\n         :     :     :        +- *(1) Project [cd_demo_sk#83957]\n         :     :     :           +- *(1) Filter ((((((isnotnull(cd_gender#83958) AND isnotnull(cd_marital_status#83959)) AND isnotnull(cd_education_status#83960)) AND (cd_gender#83958 = F)) AND (cd_marital_status#83959 = W)) AND (cd_education_status#83960 = College)) AND isnotnull(cd_demo_sk#83957))\n         :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#83957, cd_education_status#83960, cd_gender#83958, cd_marital_status#83959], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#83957, cd_gender#83958, cd_marital_status#83959, cd_education_status#83960, cd_purcha..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112373]\n         :     :        +- *(2) Project [d_date_sk#83966]\n         :     :           +- *(2) Filter ((isnotnull(d_year#83972) AND (d_year#83972 = 2001)) AND isnotnull(d_date_sk#83966))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#83966, d_year#83972], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#83966, d_date_id#83967, d_date#83968, d_month_seq#83969, d_week_seq#83970, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#112380]\n         :        +- *(3) Filter isnotnull(i_item_sk#83994)\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#83994, i_item_id#83995], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#83994, i_item_id#83995, i_rec_start_date#83996, i_rec_end_date#83997, i_item_desc#8399..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112388]\n            +- *(4) Project [p_promo_sk#84016]\n               +- *(4) Filter (((p_channel_email#84025 = N) OR (p_channel_event#84030 = N)) AND isnotnull(p_promo_sk#84016))\n                  +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_email#84025, p_channel_event#84030, p_promo_sk#84016], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#84016, p_promo_id#84017, p_start_date_sk#84018, p_end_date_sk#84019, p_item_sk#84020,..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q7"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#84271, _w2#84272, 200), ENSURE_REQUIREMENTS, [id=#112745]\n+- *(12) HashAggregate(keys=[s_state#84257, s_county#84258, spark_grouping_id#84256L], functions=[sum(UnscaledValue(ss_net_profit#84097))], output=[total_sum#84070, s_state#84257, s_county#84258, lochierarchy#84071, _w1#84271, _w2#84272, _w3#84273])\n   +- Exchange hashpartitioning(s_state#84257, s_county#84258, spark_grouping_id#84256L, 200), ENSURE_REQUIREMENTS, [id=#112741]\n      +- *(11) HashAggregate(keys=[s_state#84257, s_county#84258, spark_grouping_id#84256L], functions=[partial_sum(UnscaledValue(ss_net_profit#84097))], output=[s_state#84257, s_county#84258, spark_grouping_id#84256L, sum#84295L])\n         +- *(11) Expand [List(ss_net_profit#84097, s_state#84150, s_county#84149, 0), List(ss_net_profit#84097, s_state#84150, null, 1), List(ss_net_profit#84097, null, null, 3)], [ss_net_profit#84097, s_state#84257, s_county#84258, spark_grouping_id#84256L]\n            +- *(11) Project [ss_net_profit#84097, s_state#84150, s_county#84149]\n               +- *(11) BroadcastHashJoin [ss_store_sk#84082], [s_store_sk#84126], Inner, BuildRight, false\n                  :- *(11) Project [ss_store_sk#84082, ss_net_profit#84097]\n                  :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#84075], [d_date_sk#84098], Inner, BuildRight, false\n                  :     :- *(11) Filter (isnotnull(ss_sold_date_sk#84075) AND isnotnull(ss_store_sk#84082))\n                  :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#84075, ss_store_sk#84082, ss_net_profit#84097], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#84075, ss_sold_time_sk#84076, ss_item_sk#84077, ss_customer_sk#84078, ss_cdemo_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112563]\n                  :        +- *(1) Project [d_date_sk#84098]\n                  :           +- *(1) Filter (((isnotnull(d_month_seq#84101) AND (d_month_seq#84101 >= 1206)) AND (d_month_seq#84101 <= 1217)) AND isnotnull(d_date_sk#84098))\n                  :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#84098, d_month_seq#84101], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#84098, d_date_id#84099, d_date#84100, d_month_seq#84101, d_week_seq#84102, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#112671]\n                     +- SortMergeJoin [s_state#84150], [s_state#84067], LeftSemi\n                        :- *(3) Sort [s_state#84150 ASC NULLS FIRST], false, 0\n                        :  +- Exchange hashpartitioning(s_state#84150, 200), ENSURE_REQUIREMENTS, [id=#112570]\n                        :     +- *(2) Filter isnotnull(s_store_sk#84126)\n                        :        +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#84126, s_county#84149, s_state#84150], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#84126, s_store_id#84127, s_rec_start_date#84128, s_rec_end_date#84129, s_closed_date_..., Partition Cols: []]\n                        +- *(10) Sort [s_state#84067 ASC NULLS FIRST], false, 0\n                           +- Exchange hashpartitioning(s_state#84067, 200), ENSURE_REQUIREMENTS, [id=#112666]\n                              +- *(9) Project [s_state#84067]\n                                 +- *(9) Filter (isnotnull(ranking#84068) AND (ranking#84068 <= 5))\n                                    +- Window [rank(_w2#84245) windowspecdefinition(s_state#84204, _w2#84245 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#84068], [s_state#84204], [_w2#84245 DESC NULLS LAST]\n                                       +- *(8) Sort [s_state#84204 ASC NULLS FIRST, _w2#84245 DESC NULLS LAST], false, 0\n                                          +- Exchange hashpartitioning(s_state#84204, 200), ENSURE_REQUIREMENTS, [id=#112657]\n                                             +- *(7) HashAggregate(keys=[s_state#84204], functions=[sum(UnscaledValue(ss_net_profit#84179))], output=[s_state#84067, s_state#84204, _w2#84245])\n                                                +- Exchange hashpartitioning(s_state#84204, 200), ENSURE_REQUIREMENTS, [id=#112653]\n                                                   +- *(6) HashAggregate(keys=[s_state#84204], functions=[partial_sum(UnscaledValue(ss_net_profit#84179))], output=[s_state#84204, sum#84297L])\n                                                      +- *(6) Project [ss_net_profit#84179, s_state#84204]\n                                                         +- *(6) BroadcastHashJoin [ss_sold_date_sk#84157], [d_date_sk#84209], Inner, BuildRight, false\n                                                            :- *(6) Project [ss_sold_date_sk#84157, ss_net_profit#84179, s_state#84204]\n                                                            :  +- *(6) BroadcastHashJoin [ss_store_sk#84164], [s_store_sk#84180], Inner, BuildRight, false\n                                                            :     :- *(6) Filter (isnotnull(ss_store_sk#84164) AND isnotnull(ss_sold_date_sk#84157))\n                                                            :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#84157, ss_store_sk#84164, ss_net_profit#84179], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#84157, ss_sold_time_sk#84158, ss_item_sk#84159, ss_customer_sk#84160, ss_cdemo_s..., Partition Cols: []]\n                                                            :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#112579]\n                                                            :        +- *(4) Filter isnotnull(s_store_sk#84180)\n                                                            :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#84180, s_state#84204], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#84180, s_store_id#84181, s_rec_start_date#84182, s_rec_end_date#84183, s_closed_date_..., Partition Cols: []]\n                                                            +- ReusedExchange [d_date_sk#84209], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112563]\n",
    "iteration" : 3,
    "name" : "q70"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(ext_price#84327 DESC NULLS LAST, brand_id#84325 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#112998]\n+- *(10) HashAggregate(keys=[i_brand#84336, i_brand_id#84335, t_hour#84528, t_minute#84529], functions=[sum(UnscaledValue(ext_price#84313))], output=[brand_id#84325, brand#84326, t_hour#84528, t_minute#84529, ext_price#84327])\n   +- Exchange hashpartitioning(i_brand#84336, i_brand_id#84335, t_hour#84528, t_minute#84529, 200), ENSURE_REQUIREMENTS, [id=#112994]\n      +- *(9) HashAggregate(keys=[i_brand#84336, i_brand_id#84335, t_hour#84528, t_minute#84529], functions=[partial_sum(UnscaledValue(ext_price#84313))], output=[i_brand#84336, i_brand_id#84335, t_hour#84528, t_minute#84529, sum#84545L])\n         +- *(9) Project [i_brand_id#84335, i_brand#84336, ext_price#84313, t_hour#84528, t_minute#84529]\n            +- *(9) BroadcastHashJoin [time_sk#84316], [t_time_sk#84525], Inner, BuildRight, false\n               :- *(9) Project [i_brand_id#84335, i_brand#84336, ext_price#84313, time_sk#84316]\n               :  +- *(9) BroadcastHashJoin [i_item_sk#84328], [sold_item_sk#84315], Inner, BuildLeft, false\n               :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112895]\n               :     :  +- *(1) Project [i_item_sk#84328, i_brand_id#84335, i_brand#84336]\n               :     :     +- *(1) Filter ((isnotnull(i_manager_id#84348) AND (i_manager_id#84348 = 1)) AND isnotnull(i_item_sk#84328))\n               :     :        +- Scan hive tpcds_sf1_iceberg.item [i_brand#84336, i_brand_id#84335, i_item_sk#84328, i_manager_id#84348], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#84328, i_item_id#84329, i_rec_start_date#84330, i_rec_end_date#84331, i_item_desc#8433..., Partition Cols: []]\n               :     +- Union\n               :        :- *(3) Project [ws_ext_sales_price#84373 AS ext_price#84313, ws_item_sk#84353 AS sold_item_sk#84315, ws_sold_time_sk#84351 AS time_sk#84316]\n               :        :  +- *(3) BroadcastHashJoin [ws_sold_date_sk#84350], [d_date_sk#84384], Inner, BuildRight, false\n               :        :     :- *(3) Filter ((isnotnull(ws_sold_date_sk#84350) AND isnotnull(ws_item_sk#84353)) AND isnotnull(ws_sold_time_sk#84351))\n               :        :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#84350, ws_sold_time_sk#84351, ws_item_sk#84353, ws_ext_sales_price#84373], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#84350, ws_sold_time_sk#84351, ws_ship_date_sk#84352, ws_item_sk#84353, ws_bill_c..., Partition Cols: []]\n               :        :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112903]\n               :        :        +- *(2) Project [d_date_sk#84384]\n               :        :           +- *(2) Filter ((((isnotnull(d_moy#84392) AND isnotnull(d_year#84390)) AND (d_moy#84392 = 11)) AND (d_year#84390 = 1999)) AND isnotnull(d_date_sk#84384))\n               :        :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#84384, d_moy#84392, d_year#84390], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#84384, d_date_id#84385, d_date#84386, d_month_seq#84387, d_week_seq#84388, d_quarter_s..., Partition Cols: []]\n               :        :- *(5) Project [cs_ext_sales_price#84435 AS ext_price#84317, cs_item_sk#84427 AS sold_item_sk#84319, cs_sold_time_sk#84413 AS time_sk#84320]\n               :        :  +- *(5) BroadcastHashJoin [cs_sold_date_sk#84412], [d_date_sk#84446], Inner, BuildRight, false\n               :        :     :- *(5) Filter ((isnotnull(cs_sold_date_sk#84412) AND isnotnull(cs_item_sk#84427)) AND isnotnull(cs_sold_time_sk#84413))\n               :        :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#84412, cs_sold_time_sk#84413, cs_item_sk#84427, cs_ext_sales_price#84435], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#84412, cs_sold_time_sk#84413, cs_ship_date_sk#84414, cs_bill_customer_sk#84415, ..., Partition Cols: []]\n               :        :     +- ReusedExchange [d_date_sk#84446], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112903]\n               :        +- *(7) Project [ss_ext_sales_price#84489 AS ext_price#84321, ss_item_sk#84476 AS sold_item_sk#84323, ss_sold_time_sk#84475 AS time_sk#84324]\n               :           +- *(7) BroadcastHashJoin [ss_sold_date_sk#84474], [d_date_sk#84497], Inner, BuildRight, false\n               :              :- *(7) Filter ((isnotnull(ss_sold_date_sk#84474) AND isnotnull(ss_item_sk#84476)) AND isnotnull(ss_sold_time_sk#84475))\n               :              :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#84474, ss_sold_time_sk#84475, ss_item_sk#84476, ss_ext_sales_price#84489], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#84474, ss_sold_time_sk#84475, ss_item_sk#84476, ss_customer_sk#84477, ss_cdemo_s..., Partition Cols: []]\n               :              +- ReusedExchange [d_date_sk#84497], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112903]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#112938]\n                  +- *(8) Project [t_time_sk#84525, t_hour#84528, t_minute#84529]\n                     +- *(8) Filter (((t_meal_time#84534 = breakfast) OR (t_meal_time#84534 = dinner)) AND isnotnull(t_time_sk#84525))\n                        +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#84528, t_meal_time#84534, t_minute#84529, t_time_sk#84525], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#84525, t_time_id#84526, t_time#84527, t_hour#84528, t_minute#84529, t_second#84530, t_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q71"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_desc#84612, w_warehouse_name#84596, d_week_seq#84648, 200), ENSURE_REQUIREMENTS, [id=#113297]\n+- *(14) HashAggregate(keys=[i_item_desc#84612, w_warehouse_name#84596, d_week_seq#84648], functions=[partial_sum(cast(CASE WHEN isnull(p_promo_sk#84728) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN isnotnull(p_promo_sk#84728) THEN 1 ELSE 0 END as bigint)), partial_count(1)], output=[i_item_desc#84612, w_warehouse_name#84596, d_week_seq#84648, sum#84789L, sum#84790L, count#84791L])\n   +- *(14) Project [w_warehouse_name#84596, i_item_desc#84612, d_week_seq#84648, p_promo_sk#84728]\n      +- *(14) BroadcastHashJoin [cs_item_sk#84571, cs_order_number#84573L], [cr_item_sk#84749, cr_order_number#84763L], LeftOuter, BuildRight, false\n         :- *(14) Project [cs_item_sk#84571, cs_order_number#84573L, w_warehouse_name#84596, i_item_desc#84612, d_week_seq#84648, p_promo_sk#84728]\n         :  +- *(14) BroadcastHashJoin [cs_promo_sk#84572], [p_promo_sk#84728], LeftOuter, BuildRight, false\n         :     :- *(14) Project [cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, w_warehouse_name#84596, i_item_desc#84612, d_week_seq#84648]\n         :     :  +- *(14) BroadcastHashJoin [cs_ship_date_sk#84558], [d_date_sk#84700], Inner, BuildRight, (d_date#84702 > d_date#84646 + 5 days), false\n         :     :     :- *(14) Project [cs_ship_date_sk#84558, cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, w_warehouse_name#84596, i_item_desc#84612, d_date#84646, d_week_seq#84648]\n         :     :     :  +- *(14) BroadcastHashJoin [d_week_seq#84648, inv_date_sk#84590], [d_week_seq#84676, d_date_sk#84672], Inner, BuildRight, false\n         :     :     :     :- *(14) Project [cs_ship_date_sk#84558, cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, inv_date_sk#84590, w_warehouse_name#84596, i_item_desc#84612, d_date#84646, d_week_seq#84648]\n         :     :     :     :  +- *(14) BroadcastHashJoin [cs_sold_date_sk#84556], [d_date_sk#84644], Inner, BuildRight, false\n         :     :     :     :     :- *(14) Project [cs_sold_date_sk#84556, cs_ship_date_sk#84558, cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, inv_date_sk#84590, w_warehouse_name#84596, i_item_desc#84612]\n         :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_bill_hdemo_sk#84561], [hd_demo_sk#84639], Inner, BuildRight, false\n         :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#84556, cs_ship_date_sk#84558, cs_bill_hdemo_sk#84561, cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, inv_date_sk#84590, w_warehouse_name#84596, i_item_desc#84612]\n         :     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_bill_cdemo_sk#84560], [cd_demo_sk#84630], Inner, BuildRight, false\n         :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#84556, cs_ship_date_sk#84558, cs_bill_cdemo_sk#84560, cs_bill_hdemo_sk#84561, cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, inv_date_sk#84590, w_warehouse_name#84596, i_item_desc#84612]\n         :     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [cs_item_sk#84571], [i_item_sk#84608], Inner, BuildRight, false\n         :     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#84556, cs_ship_date_sk#84558, cs_bill_cdemo_sk#84560, cs_bill_hdemo_sk#84561, cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, inv_date_sk#84590, w_warehouse_name#84596]\n         :     :     :     :     :     :     :     :  +- *(14) BroadcastHashJoin [inv_warehouse_sk#84592], [w_warehouse_sk#84594], Inner, BuildRight, false\n         :     :     :     :     :     :     :     :     :- *(14) Project [cs_sold_date_sk#84556, cs_ship_date_sk#84558, cs_bill_cdemo_sk#84560, cs_bill_hdemo_sk#84561, cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, inv_date_sk#84590, inv_warehouse_sk#84592]\n         :     :     :     :     :     :     :     :     :  +- *(14) SortMergeJoin [cs_item_sk#84571], [inv_item_sk#84591], Inner, (inv_quantity_on_hand#84593 < cs_quantity#84574)\n         :     :     :     :     :     :     :     :     :     :- *(2) Sort [cs_item_sk#84571 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :     :     :     :     :  +- Exchange hashpartitioning(cs_item_sk#84571, 200), ENSURE_REQUIREMENTS, [id=#113214]\n         :     :     :     :     :     :     :     :     :     :     +- *(1) Filter (((((isnotnull(cs_quantity#84574) AND isnotnull(cs_item_sk#84571)) AND isnotnull(cs_bill_cdemo_sk#84560)) AND isnotnull(cs_bill_hdemo_sk#84561)) AND isnotnull(cs_sold_date_sk#84556)) AND isnotnull(cs_ship_date_sk#84558))\n         :     :     :     :     :     :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#84556, cs_ship_date_sk#84558, cs_bill_cdemo_sk#84560, cs_bill_hdemo_sk#84561, cs_item_sk#84571, cs_promo_sk#84572, cs_order_number#84573L, cs_quantity#84574], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#84556, cs_sold_time_sk#84557, cs_ship_date_sk#84558, cs_bill_customer_sk#84559, ..., Partition Cols: []]\n         :     :     :     :     :     :     :     :     :     +- *(4) Sort [inv_item_sk#84591 ASC NULLS FIRST], false, 0\n         :     :     :     :     :     :     :     :     :        +- Exchange hashpartitioning(inv_item_sk#84591, 200), ENSURE_REQUIREMENTS, [id=#113222]\n         :     :     :     :     :     :     :     :     :           +- *(3) Filter (((isnotnull(inv_quantity_on_hand#84593) AND isnotnull(inv_item_sk#84591)) AND isnotnull(inv_warehouse_sk#84592)) AND isnotnull(inv_date_sk#84590))\n         :     :     :     :     :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#84590, inv_item_sk#84591, inv_warehouse_sk#84592, inv_quantity_on_hand#84593], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#84590, inv_item_sk#84591, inv_warehouse_sk#84592, inv_quantity_on_hand#84593], Partition Cols: []]\n         :     :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#113232]\n         :     :     :     :     :     :     :     :        +- *(5) Filter isnotnull(w_warehouse_sk#84594)\n         :     :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#84594, w_warehouse_name#84596], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#84594, w_warehouse_id#84595, w_warehouse_name#84596, w_warehouse_sq_ft#84597, w_s..., Partition Cols: []]\n         :     :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#113239]\n         :     :     :     :     :     :     :        +- *(6) Filter isnotnull(i_item_sk#84608)\n         :     :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#84608, i_item_desc#84612], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#84608, i_item_id#84609, i_rec_start_date#84610, i_rec_end_date#84611, i_item_desc#8461..., Partition Cols: []]\n         :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113247]\n         :     :     :     :     :     :        +- *(7) Project [cd_demo_sk#84630]\n         :     :     :     :     :     :           +- *(7) Filter ((isnotnull(cd_marital_status#84632) AND (cd_marital_status#84632 = S)) AND isnotnull(cd_demo_sk#84630))\n         :     :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#84630, cd_marital_status#84632], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#84630, cd_gender#84631, cd_marital_status#84632, cd_education_status#84633, cd_purcha..., Partition Cols: []]\n         :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113255]\n         :     :     :     :     :        +- *(8) Project [hd_demo_sk#84639]\n         :     :     :     :     :           +- *(8) Filter ((isnotnull(hd_buy_potential#84641) AND (hd_buy_potential#84641 = 1001-5000)) AND isnotnull(hd_demo_sk#84639))\n         :     :     :     :     :              +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#84641, hd_demo_sk#84639], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#84639, hd_income_band_sk#84640, hd_buy_potential#84641, hd_dep_count#84642, hd_vehicl..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113263]\n         :     :     :     :        +- *(9) Project [d_date_sk#84644, d_date#84646, d_week_seq#84648]\n         :     :     :     :           +- *(9) Filter ((((isnotnull(d_year#84650) AND (d_year#84650 = 2000)) AND isnotnull(d_date_sk#84644)) AND isnotnull(d_week_seq#84648)) AND isnotnull(d_date#84646))\n         :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#84646, d_date_sk#84644, d_week_seq#84648, d_year#84650], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#84644, d_date_id#84645, d_date#84646, d_month_seq#84647, d_week_seq#84648, d_quarter_s..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, false] as bigint), 32) | (cast(input[0, int, false] as bigint) & 4294967295))),false), [id=#113270]\n         :     :     :        +- *(10) Filter (isnotnull(d_week_seq#84676) AND isnotnull(d_date_sk#84672))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#84672, d_week_seq#84676], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#84672, d_date_id#84673, d_date#84674, d_month_seq#84675, d_week_seq#84676, d_quarter_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#113277]\n         :     :        +- *(11) Filter (isnotnull(d_date#84702) AND isnotnull(d_date_sk#84700))\n         :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#84700, d_date#84702], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#84700, d_date_id#84701, d_date#84702, d_month_seq#84703, d_week_seq#84704, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#113284]\n         :        +- *(12) Filter isnotnull(p_promo_sk#84728)\n         :           +- Scan hive tpcds_sf1_iceberg.promotion [p_promo_sk#84728], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#84728, p_promo_id#84729, p_start_date_sk#84730, p_end_date_sk#84731, p_item_sk#84732,..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#113291]\n            +- *(13) Filter (isnotnull(cr_item_sk#84749) AND isnotnull(cr_order_number#84763L))\n               +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#84749, cr_order_number#84763L], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#84747, cr_returned_time_sk#84748, cr_item_sk#84749, cr_refunded_customer_sk#..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q72"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(cnt#84799L DESC NULLS LAST, c_last_name#84895 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#113447]\n+- *(6) Project [c_last_name#84895, c_first_name#84894, c_salutation#84893, c_preferred_cust_flag#84896, ss_ticket_number#84810L, cnt#84799L]\n   +- *(6) BroadcastHashJoin [ss_customer_sk#84804], [c_customer_sk#84886], Inner, BuildRight, false\n      :- *(6) Filter ((cnt#84799L >= 1) AND (cnt#84799L <= 5))\n      :  +- *(6) HashAggregate(keys=[ss_ticket_number#84810L, ss_customer_sk#84804], functions=[count(1)], output=[ss_ticket_number#84810L, ss_customer_sk#84804, cnt#84799L])\n      :     +- Exchange hashpartitioning(ss_ticket_number#84810L, ss_customer_sk#84804, 200), ENSURE_REQUIREMENTS, [id=#113435]\n      :        +- *(4) HashAggregate(keys=[ss_ticket_number#84810L, ss_customer_sk#84804], functions=[partial_count(1)], output=[ss_ticket_number#84810L, ss_customer_sk#84804, count#84911L])\n      :           +- *(4) Project [ss_customer_sk#84804, ss_ticket_number#84810L]\n      :              +- *(4) BroadcastHashJoin [ss_hdemo_sk#84806], [hd_demo_sk#84881], Inner, BuildRight, false\n      :                 :- *(4) Project [ss_customer_sk#84804, ss_hdemo_sk#84806, ss_ticket_number#84810L]\n      :                 :  +- *(4) BroadcastHashJoin [ss_store_sk#84808], [s_store_sk#84852], Inner, BuildRight, false\n      :                 :     :- *(4) Project [ss_customer_sk#84804, ss_hdemo_sk#84806, ss_store_sk#84808, ss_ticket_number#84810L]\n      :                 :     :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#84801], [d_date_sk#84824], Inner, BuildRight, false\n      :                 :     :     :- *(4) Filter (((isnotnull(ss_sold_date_sk#84801) AND isnotnull(ss_store_sk#84808)) AND isnotnull(ss_hdemo_sk#84806)) AND isnotnull(ss_customer_sk#84804))\n      :                 :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#84801, ss_customer_sk#84804, ss_hdemo_sk#84806, ss_store_sk#84808, ss_ticket_number#84810L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#84801, ss_sold_time_sk#84802, ss_item_sk#84803, ss_customer_sk#84804, ss_cdemo_s..., Partition Cols: []]\n      :                 :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113413]\n      :                 :     :        +- *(1) Project [d_date_sk#84824]\n      :                 :     :           +- *(1) Filter ((((isnotnull(d_dom#84833) AND (d_dom#84833 >= 1)) AND (d_dom#84833 <= 2)) AND d_year#84830 IN (1999,2000,2001)) AND isnotnull(d_date_sk#84824))\n      :                 :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#84824, d_dom#84833, d_year#84830], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#84824, d_date_id#84825, d_date#84826, d_month_seq#84827, d_week_seq#84828, d_quarter_s..., Partition Cols: []]\n      :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113421]\n      :                 :        +- *(2) Project [s_store_sk#84852]\n      :                 :           +- *(2) Filter (s_county#84875 IN (Humboldt County,Hickman County,Galax city,Abbeville County) AND isnotnull(s_store_sk#84852))\n      :                 :              +- Scan hive tpcds_sf1_iceberg.store [s_county#84875, s_store_sk#84852], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#84852, s_store_id#84853, s_rec_start_date#84854, s_rec_end_date#84855, s_closed_date_..., Partition Cols: []]\n      :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#113429]\n      :                    +- *(3) Project [hd_demo_sk#84881]\n      :                       +- *(3) Filter ((((isnotnull(hd_vehicle_count#84885) AND ((hd_buy_potential#84883 = 1001-5000) OR (hd_buy_potential#84883 = Unknown))) AND (hd_vehicle_count#84885 > 0)) AND (CASE WHEN (hd_vehicle_count#84885 > 0) THEN (cast(hd_dep_count#84884 as double) / cast(hd_vehicle_count#84885 as double)) ELSE null END > 1.0)) AND isnotnull(hd_demo_sk#84881))\n      :                          +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#84883, hd_demo_sk#84881, hd_dep_count#84884, hd_vehicle_count#84885], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#84881, hd_income_band_sk#84882, hd_buy_potential#84883, hd_dep_count#84884, hd_vehicl..., Partition Cols: []]\n      +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#113442]\n         +- *(5) Filter isnotnull(c_customer_sk#84886)\n            +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#84886, c_salutation#84893, c_first_name#84894, c_last_name#84895, c_preferred_cust_flag#84896], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#84886, c_customer_id#84887, c_current_cdemo_sk#84888, c_current_hdemo_sk#84889, c_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q73"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(customer_id#84919, 200), ENSURE_REQUIREMENTS, [id=#113739]\n+- *(4) Filter (isnotnull(year_total#84923) AND (year_total#84923 > 0.00))\n   +- *(4) HashAggregate(keys=[c_customer_id#84932, c_first_name#84939, c_last_name#84940, d_year#84978], functions=[max(ss_net_paid#84969)], output=[customer_id#84919, year_total#84923])\n      +- Exchange hashpartitioning(c_customer_id#84932, c_first_name#84939, c_last_name#84940, d_year#84978, 200), ENSURE_REQUIREMENTS, [id=#113734]\n         +- *(3) HashAggregate(keys=[c_customer_id#84932, c_first_name#84939, c_last_name#84940, d_year#84978], functions=[partial_max(ss_net_paid#84969)], output=[c_customer_id#84932, c_first_name#84939, c_last_name#84940, d_year#84978, max#85557])\n            +- *(3) Project [c_customer_id#84932, c_first_name#84939, c_last_name#84940, ss_net_paid#84969, d_year#84978]\n               +- *(3) BroadcastHashJoin [ss_sold_date_sk#84949], [d_date_sk#84972], Inner, BuildRight, false\n                  :- *(3) Project [c_customer_id#84932, c_first_name#84939, c_last_name#84940, ss_sold_date_sk#84949, ss_net_paid#84969]\n                  :  +- *(3) BroadcastHashJoin [c_customer_sk#84931], [ss_customer_sk#84952], Inner, BuildLeft, false\n                  :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#113719]\n                  :     :  +- *(1) Filter (isnotnull(c_customer_sk#84931) AND isnotnull(c_customer_id#84932))\n                  :     :     +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#84931, c_customer_id#84932, c_first_name#84939, c_last_name#84940], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#84931, c_customer_id#84932, c_current_cdemo_sk#84933, c_current_hdemo_sk#84934, c_..., Partition Cols: []]\n                  :     +- *(3) Filter (isnotnull(ss_customer_sk#84952) AND isnotnull(ss_sold_date_sk#84949))\n                  :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#84949, ss_customer_sk#84952, ss_net_paid#84969], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#84949, ss_sold_time_sk#84950, ss_item_sk#84951, ss_customer_sk#84952, ss_cdemo_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#113728]\n                     +- *(2) Filter (((isnotnull(d_year#84978) AND (d_year#84978 = 2001)) AND d_year#84978 IN (2001,2002)) AND isnotnull(d_date_sk#84972))\n                        +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#84972, d_year#84978], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#84972, d_date_id#84973, d_date#84974, d_month_seq#84975, d_week_seq#84976, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q74"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, 200), ENSURE_REQUIREMENTS, [id=#114752]\n+- *(15) HashAggregate(keys=[d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637], functions=[sum(cast(sales_cnt#85582 as bigint)), sum(UnscaledValue(sales_amt#85583))], output=[d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, sales_cnt#85588L, sales_amt#85589])\n   +- Exchange hashpartitioning(d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, 200), ENSURE_REQUIREMENTS, [id=#114748]\n      +- *(14) HashAggregate(keys=[d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637], functions=[partial_sum(cast(sales_cnt#85582 as bigint)), partial_sum(UnscaledValue(sales_amt#85583))], output=[d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, sum#86232L, sum#86233L])\n         +- *(14) HashAggregate(keys=[d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, sales_cnt#85582, sales_amt#85583], functions=[], output=[d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, sales_cnt#85582, sales_amt#85583])\n            +- Exchange hashpartitioning(d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, sales_cnt#85582, sales_amt#85583, 200), ENSURE_REQUIREMENTS, [id=#114743]\n               +- *(13) HashAggregate(keys=[d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, sales_cnt#85582, sales_amt#85583], functions=[], output=[d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, sales_cnt#85582, sales_amt#85583])\n                  +- Union\n                     :- *(4) Project [d_year#85652, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, (cs_quantity#85608 - coalesce(cr_return_quantity#85691, 0)) AS sales_cnt#85582, CheckOverflow((promote_precision(cast(cs_ext_sales_price#85613 as decimal(8,2))) - promote_precision(cast(coalesce(cr_return_amount#85692, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#85583]\n                     :  +- *(4) BroadcastHashJoin [cs_order_number#85607L, cs_item_sk#85605], [cr_order_number#85690L, cr_item_sk#85676], LeftOuter, BuildRight, false\n                     :     :- *(4) Project [cs_item_sk#85605, cs_order_number#85607L, cs_quantity#85608, cs_ext_sales_price#85613, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637, d_year#85652]\n                     :     :  +- *(4) BroadcastHashJoin [cs_sold_date_sk#85590], [d_date_sk#85646], Inner, BuildRight, false\n                     :     :     :- *(4) Project [cs_sold_date_sk#85590, cs_item_sk#85605, cs_order_number#85607L, cs_quantity#85608, cs_ext_sales_price#85613, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637]\n                     :     :     :  +- *(4) BroadcastHashJoin [cs_item_sk#85605], [i_item_sk#85624], Inner, BuildRight, false\n                     :     :     :     :- *(4) Filter (isnotnull(cs_item_sk#85605) AND isnotnull(cs_sold_date_sk#85590))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#85590, cs_item_sk#85605, cs_order_number#85607L, cs_quantity#85608, cs_ext_sales_price#85613], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#85590, cs_sold_time_sk#85591, cs_ship_date_sk#85592, cs_bill_customer_sk#85593, ..., Partition Cols: []]\n                     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#114491]\n                     :     :     :        +- *(1) Project [i_item_sk#85624, i_brand_id#85631, i_class_id#85633, i_category_id#85635, i_manufact_id#85637]\n                     :     :     :           +- *(1) Filter ((((((isnotnull(i_category#85636) AND (i_category#85636 = Books)) AND isnotnull(i_item_sk#85624)) AND isnotnull(i_brand_id#85631)) AND isnotnull(i_class_id#85633)) AND isnotnull(i_category_id#85635)) AND isnotnull(i_manufact_id#85637))\n                     :     :     :              +- Scan hive tpcds_sf1_iceberg.item [i_brand_id#85631, i_category#85636, i_category_id#85635, i_class_id#85633, i_item_sk#85624, i_manufact_id#85637], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#85624, i_item_id#85625, i_rec_start_date#85626, i_rec_end_date#85627, i_item_desc#8562..., Partition Cols: []]\n                     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114498]\n                     :     :        +- *(2) Filter ((isnotnull(d_year#85652) AND (d_year#85652 = 2001)) AND isnotnull(d_date_sk#85646))\n                     :     :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#85646, d_year#85652], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#85646, d_date_id#85647, d_date#85648, d_month_seq#85649, d_week_seq#85650, d_quarter_s..., Partition Cols: []]\n                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#114505]\n                     :        +- *(3) Filter (isnotnull(cr_order_number#85690L) AND isnotnull(cr_item_sk#85676))\n                     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#85676, cr_order_number#85690L, cr_return_quantity#85691, cr_return_amount#85692], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#85674, cr_returned_time_sk#85675, cr_item_sk#85676, cr_refunded_customer_sk#..., Partition Cols: []]\n                     :- *(8) Project [d_year#85752, i_brand_id#85731, i_class_id#85733, i_category_id#85735, i_manufact_id#85737, (ss_quantity#85711 - coalesce(sr_return_quantity#85784, 0)) AS sales_cnt#85584, CheckOverflow((promote_precision(cast(ss_ext_sales_price#85716 as decimal(8,2))) - promote_precision(cast(coalesce(sr_return_amt#85785, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#85585]\n                     :  +- *(8) BroadcastHashJoin [ss_ticket_number#85710L, ss_item_sk#85703], [sr_ticket_number#85783L, sr_item_sk#85776], LeftOuter, BuildRight, false\n                     :     :- *(8) Project [ss_item_sk#85703, ss_ticket_number#85710L, ss_quantity#85711, ss_ext_sales_price#85716, i_brand_id#85731, i_class_id#85733, i_category_id#85735, i_manufact_id#85737, d_year#85752]\n                     :     :  +- *(8) BroadcastHashJoin [ss_sold_date_sk#85701], [d_date_sk#85746], Inner, BuildRight, false\n                     :     :     :- *(8) Project [ss_sold_date_sk#85701, ss_item_sk#85703, ss_ticket_number#85710L, ss_quantity#85711, ss_ext_sales_price#85716, i_brand_id#85731, i_class_id#85733, i_category_id#85735, i_manufact_id#85737]\n                     :     :     :  +- *(8) BroadcastHashJoin [ss_item_sk#85703], [i_item_sk#85724], Inner, BuildRight, false\n                     :     :     :     :- *(8) Filter (isnotnull(ss_item_sk#85703) AND isnotnull(ss_sold_date_sk#85701))\n                     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#85701, ss_item_sk#85703, ss_ticket_number#85710L, ss_quantity#85711, ss_ext_sales_price#85716], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#85701, ss_sold_time_sk#85702, ss_item_sk#85703, ss_customer_sk#85704, ss_cdemo_s..., Partition Cols: []]\n                     :     :     :     +- ReusedExchange [i_item_sk#85724, i_brand_id#85731, i_class_id#85733, i_category_id#85735, i_manufact_id#85737], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#114491]\n                     :     :     +- ReusedExchange [d_date_sk#85746, d_year#85752], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114498]\n                     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#114530]\n                     :        +- *(7) Filter (isnotnull(sr_ticket_number#85783L) AND isnotnull(sr_item_sk#85776))\n                     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#85776, sr_ticket_number#85783L, sr_return_quantity#85784, sr_return_amt#85785], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#85774, sr_return_time_sk#85775, sr_item_sk#85776, sr_customer_sk#85777, sr_c..., Partition Cols: []]\n                     +- *(12) Project [d_year#85856, i_brand_id#85835, i_class_id#85837, i_category_id#85839, i_manufact_id#85841, (ws_quantity#85812 - coalesce(wr_return_quantity#85892, 0)) AS sales_cnt#85586, CheckOverflow((promote_precision(cast(ws_ext_sales_price#85817 as decimal(8,2))) - promote_precision(cast(coalesce(wr_return_amt#85893, 0.00) as decimal(8,2)))), DecimalType(8,2), true) AS sales_amt#85587]\n                        +- *(12) BroadcastHashJoin [ws_order_number#85811L, ws_item_sk#85797], [wr_order_number#85891L, wr_item_sk#85880], LeftOuter, BuildRight, false\n                           :- *(12) Project [ws_item_sk#85797, ws_order_number#85811L, ws_quantity#85812, ws_ext_sales_price#85817, i_brand_id#85835, i_class_id#85837, i_category_id#85839, i_manufact_id#85841, d_year#85856]\n                           :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#85794], [d_date_sk#85850], Inner, BuildRight, false\n                           :     :- *(12) Project [ws_sold_date_sk#85794, ws_item_sk#85797, ws_order_number#85811L, ws_quantity#85812, ws_ext_sales_price#85817, i_brand_id#85835, i_class_id#85837, i_category_id#85839, i_manufact_id#85841]\n                           :     :  +- *(12) BroadcastHashJoin [ws_item_sk#85797], [i_item_sk#85828], Inner, BuildRight, false\n                           :     :     :- *(12) Filter (isnotnull(ws_item_sk#85797) AND isnotnull(ws_sold_date_sk#85794))\n                           :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#85794, ws_item_sk#85797, ws_order_number#85811L, ws_quantity#85812, ws_ext_sales_price#85817], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#85794, ws_sold_time_sk#85795, ws_ship_date_sk#85796, ws_item_sk#85797, ws_bill_c..., Partition Cols: []]\n                           :     :     +- ReusedExchange [i_item_sk#85828, i_brand_id#85835, i_class_id#85837, i_category_id#85839, i_manufact_id#85841], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#114491]\n                           :     +- ReusedExchange [d_date_sk#85850, d_year#85856], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#114498]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#114555]\n                              +- *(11) Filter (isnotnull(wr_order_number#85891L) AND isnotnull(wr_item_sk#85880))\n                                 +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#85880, wr_order_number#85891L, wr_return_quantity#85892, wr_return_amt#85893], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#85878, wr_returned_time_sk#85879, wr_item_sk#85880, wr_refunded_customer_sk#..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q75"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#86261, col_name#86262, d_year#86324, d_qoy#86328, i_category#86308, 200), ENSURE_REQUIREMENTS, [id=#115325]\n+- *(10) HashAggregate(keys=[channel#86261, col_name#86262, d_year#86324, d_qoy#86328, i_category#86308], functions=[partial_count(1), partial_sum(UnscaledValue(ext_sales_price#86263))], output=[channel#86261, col_name#86262, d_year#86324, d_qoy#86328, i_category#86308, count#86529L, sum#86530L])\n   +- Union\n      :- *(3) Project [store AS channel#86261, ss_promo_sk AS col_name#86262, d_year#86324, d_qoy#86328, i_category#86308, ss_ext_sales_price#86288 AS ext_sales_price#86263]\n      :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#86273], [d_date_sk#86318], Inner, BuildRight, false\n      :     :- *(3) Project [ss_sold_date_sk#86273, ss_ext_sales_price#86288, i_category#86308]\n      :     :  +- *(3) BroadcastHashJoin [ss_item_sk#86275], [i_item_sk#86296], Inner, BuildRight, false\n      :     :     :- *(3) Project [ss_sold_date_sk#86273, ss_item_sk#86275, ss_ext_sales_price#86288]\n      :     :     :  +- *(3) Filter ((isnull(ss_promo_sk#86281) AND isnotnull(ss_item_sk#86275)) AND isnotnull(ss_sold_date_sk#86273))\n      :     :     :     +- Scan hive tpcds_sf1_iceberg.store_sales [ss_ext_sales_price#86288, ss_item_sk#86275, ss_promo_sk#86281, ss_sold_date_sk#86273], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#86273, ss_sold_time_sk#86274, ss_item_sk#86275, ss_customer_sk#86276, ss_cdemo_s..., Partition Cols: []]\n      :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115210]\n      :     :        +- *(1) Filter isnotnull(i_item_sk#86296)\n      :     :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#86296, i_category#86308], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#86296, i_item_id#86297, i_rec_start_date#86298, i_rec_end_date#86299, i_item_desc#8630..., Partition Cols: []]\n      :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115217]\n      :        +- *(2) Filter isnotnull(d_date_sk#86318)\n      :           +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#86318, d_year#86324, d_qoy#86328], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#86318, d_date_id#86319, d_date#86320, d_month_seq#86321, d_week_seq#86322, d_quarter_s..., Partition Cols: []]\n      :- *(6) Project [web AS channel#86264, ws_ship_addr_sk AS col_name#86265, d_year#86408, d_qoy#86412, i_category#86392, ws_ext_sales_price#86369 AS ext_sales_price#86266]\n      :  +- *(6) BroadcastHashJoin [ws_sold_date_sk#86346], [d_date_sk#86402], Inner, BuildRight, false\n      :     :- *(6) Project [ws_sold_date_sk#86346, ws_ext_sales_price#86369, i_category#86392]\n      :     :  +- *(6) BroadcastHashJoin [ws_item_sk#86349], [i_item_sk#86380], Inner, BuildRight, false\n      :     :     :- *(6) Project [ws_sold_date_sk#86346, ws_item_sk#86349, ws_ext_sales_price#86369]\n      :     :     :  +- *(6) Filter ((isnull(ws_ship_addr_sk#86357) AND isnotnull(ws_item_sk#86349)) AND isnotnull(ws_sold_date_sk#86346))\n      :     :     :     +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ext_sales_price#86369, ws_item_sk#86349, ws_ship_addr_sk#86357, ws_sold_date_sk#86346], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#86346, ws_sold_time_sk#86347, ws_ship_date_sk#86348, ws_item_sk#86349, ws_bill_c..., Partition Cols: []]\n      :     :     +- ReusedExchange [i_item_sk#86380, i_category#86392], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115210]\n      :     +- ReusedExchange [d_date_sk#86402, d_year#86408, d_qoy#86412], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115217]\n      +- *(9) Project [catalog AS channel#86267, cs_ship_customer_sk AS col_name#86268, d_year#86492, d_qoy#86496, i_category#86476, cs_ext_sales_price#86453 AS ext_sales_price#86269]\n         +- *(9) BroadcastHashJoin [cs_sold_date_sk#86430], [d_date_sk#86486], Inner, BuildRight, false\n            :- *(9) Project [cs_sold_date_sk#86430, cs_ext_sales_price#86453, i_category#86476]\n            :  +- *(9) BroadcastHashJoin [cs_item_sk#86445], [i_item_sk#86464], Inner, BuildRight, false\n            :     :- *(9) Project [cs_sold_date_sk#86430, cs_item_sk#86445, cs_ext_sales_price#86453]\n            :     :  +- *(9) Filter ((isnull(cs_ship_customer_sk#86437) AND isnotnull(cs_item_sk#86445)) AND isnotnull(cs_sold_date_sk#86430))\n            :     :     +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_ext_sales_price#86453, cs_item_sk#86445, cs_ship_customer_sk#86437, cs_sold_date_sk#86430], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#86430, cs_sold_time_sk#86431, cs_ship_date_sk#86432, cs_bill_customer_sk#86433, ..., Partition Cols: []]\n            :     +- ReusedExchange [i_item_sk#86464, i_category#86476], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115210]\n            +- ReusedExchange [d_date_sk#86486, d_year#86492, d_qoy#86496], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115217]\n",
    "iteration" : 3,
    "name" : "q76"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#87001, id#87002, spark_grouping_id#87000L, 200), ENSURE_REQUIREMENTS, [id=#116058]\n+- *(26) HashAggregate(keys=[channel#87001, id#87002, spark_grouping_id#87000L], functions=[partial_sum(sales#86553), partial_sum(returns#86541), partial_sum(profit#86993)], output=[channel#87001, id#87002, spark_grouping_id#87000L, sum#87018, isEmpty#87019, sum#87020, isEmpty#87021, sum#87022, isEmpty#87023])\n   +- *(26) Expand [List(sales#86553, returns#86541, profit#86993, channel#86539, id#86540, 0), List(sales#86553, returns#86541, profit#86993, channel#86539, null, 1), List(sales#86553, returns#86541, profit#86993, null, null, 3)], [sales#86553, returns#86541, profit#86993, channel#87001, id#87002, spark_grouping_id#87000L]\n      +- Union\n         :- *(9) Project [sales#86553, coalesce(returns#86555, 0.00) AS returns#86541, CheckOverflow((promote_precision(cast(profit#86554 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#86556, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#86993, store channel AS channel#86539, s_store_sk#86616 AS id#86540]\n         :  +- SortMergeJoin [s_store_sk#86616], [s_store_sk#86693], LeftOuter\n         :     :- *(4) Sort [s_store_sk#86616 ASC NULLS FIRST], false, 0\n         :     :  +- *(4) HashAggregate(keys=[s_store_sk#86616], functions=[sum(UnscaledValue(ss_ext_sales_price#86580)), sum(UnscaledValue(ss_net_profit#86587))], output=[s_store_sk#86616, sales#86553, profit#86554])\n         :     :     +- Exchange hashpartitioning(s_store_sk#86616, 200), ENSURE_REQUIREMENTS, [id=#115699]\n         :     :        +- *(3) HashAggregate(keys=[s_store_sk#86616], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#86580)), partial_sum(UnscaledValue(ss_net_profit#86587))], output=[s_store_sk#86616, sum#87026L, sum#87027L])\n         :     :           +- *(3) Project [ss_ext_sales_price#86580, ss_net_profit#86587, s_store_sk#86616]\n         :     :              +- *(3) BroadcastHashJoin [ss_store_sk#86572], [s_store_sk#86616], Inner, BuildRight, false\n         :     :                 :- *(3) Project [ss_store_sk#86572, ss_ext_sales_price#86580, ss_net_profit#86587]\n         :     :                 :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#86565], [d_date_sk#86588], Inner, BuildRight, false\n         :     :                 :     :- *(3) Filter (isnotnull(ss_sold_date_sk#86565) AND isnotnull(ss_store_sk#86572))\n         :     :                 :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#86565, ss_store_sk#86572, ss_ext_sales_price#86580, ss_net_profit#86587], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#86565, ss_sold_time_sk#86566, ss_item_sk#86567, ss_customer_sk#86568, ss_cdemo_s..., Partition Cols: []]\n         :     :                 :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115686]\n         :     :                 :        +- *(1) Project [d_date_sk#86588]\n         :     :                 :           +- *(1) Filter (((isnotnull(d_date#86590) AND (d_date#86590 >= 11550)) AND (d_date#86590 <= 11580)) AND isnotnull(d_date_sk#86588))\n         :     :                 :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#86590, d_date_sk#86588], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#86588, d_date_id#86589, d_date#86590, d_month_seq#86591, d_week_seq#86592, d_quarter_s..., Partition Cols: []]\n         :     :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115693]\n         :     :                    +- *(2) Filter isnotnull(s_store_sk#86616)\n         :     :                       +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#86616], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#86616, s_store_id#86617, s_rec_start_date#86618, s_rec_end_date#86619, s_closed_date_..., Partition Cols: []]\n         :     +- *(8) Sort [s_store_sk#86693 ASC NULLS FIRST], false, 0\n         :        +- *(8) HashAggregate(keys=[s_store_sk#86693], functions=[sum(UnscaledValue(sr_return_amt#86656)), sum(UnscaledValue(sr_net_loss#86664))], output=[s_store_sk#86693, returns#86555, profit_loss#86556])\n         :           +- Exchange hashpartitioning(s_store_sk#86693, 200), ENSURE_REQUIREMENTS, [id=#115868]\n         :              +- *(7) HashAggregate(keys=[s_store_sk#86693], functions=[partial_sum(UnscaledValue(sr_return_amt#86656)), partial_sum(UnscaledValue(sr_net_loss#86664))], output=[s_store_sk#86693, sum#87030L, sum#87031L])\n         :                 +- *(7) Project [sr_return_amt#86656, sr_net_loss#86664, s_store_sk#86693]\n         :                    +- *(7) BroadcastHashJoin [sr_store_sk#86652], [s_store_sk#86693], Inner, BuildRight, false\n         :                       :- *(7) Project [sr_store_sk#86652, sr_return_amt#86656, sr_net_loss#86664]\n         :                       :  +- *(7) BroadcastHashJoin [sr_returned_date_sk#86645], [d_date_sk#86665], Inner, BuildRight, false\n         :                       :     :- *(7) Filter (isnotnull(sr_returned_date_sk#86645) AND isnotnull(sr_store_sk#86652))\n         :                       :     :  +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#86645, sr_store_sk#86652, sr_return_amt#86656, sr_net_loss#86664], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#86645, sr_return_time_sk#86646, sr_item_sk#86647, sr_customer_sk#86648, sr_c..., Partition Cols: []]\n         :                       :     +- ReusedExchange [d_date_sk#86665], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115686]\n         :                       +- ReusedExchange [s_store_sk#86693], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115693]\n         :- *(16) Project [sales#86557, returns#86559, CheckOverflow((promote_precision(cast(profit#86558 as decimal(18,2))) - promote_precision(cast(profit_loss#86560 as decimal(18,2)))), DecimalType(18,2), true) AS profit#86545, catalog channel AS channel#86543, cs_call_center_sk#86733 AS id#86544]\n         :  +- CartesianProduct\n         :     :- *(12) HashAggregate(keys=[cs_call_center_sk#86733], functions=[sum(UnscaledValue(cs_ext_sales_price#86745)), sum(UnscaledValue(cs_net_profit#86755))], output=[cs_call_center_sk#86733, sales#86557, profit#86558])\n         :     :  +- Exchange hashpartitioning(cs_call_center_sk#86733, 200), ENSURE_REQUIREMENTS, [id=#115929]\n         :     :     +- *(11) HashAggregate(keys=[cs_call_center_sk#86733], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#86745)), partial_sum(UnscaledValue(cs_net_profit#86755))], output=[cs_call_center_sk#86733, sum#87034L, sum#87035L])\n         :     :        +- *(11) Project [cs_call_center_sk#86733, cs_ext_sales_price#86745, cs_net_profit#86755]\n         :     :           +- *(11) BroadcastHashJoin [cs_sold_date_sk#86722], [d_date_sk#86756], Inner, BuildRight, false\n         :     :              :- *(11) Filter isnotnull(cs_sold_date_sk#86722)\n         :     :              :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#86722, cs_call_center_sk#86733, cs_ext_sales_price#86745, cs_net_profit#86755], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#86722, cs_sold_time_sk#86723, cs_ship_date_sk#86724, cs_bill_customer_sk#86725, ..., Partition Cols: []]\n         :     :              +- ReusedExchange [d_date_sk#86756], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115686]\n         :     +- *(15) HashAggregate(keys=[cr_call_center_sk#86795], functions=[sum(UnscaledValue(cr_return_amount#86802)), sum(UnscaledValue(cr_net_loss#86810))], output=[returns#86559, profit_loss#86560])\n         :        +- Exchange hashpartitioning(cr_call_center_sk#86795, 200), ENSURE_REQUIREMENTS, [id=#115947]\n         :           +- *(14) HashAggregate(keys=[cr_call_center_sk#86795], functions=[partial_sum(UnscaledValue(cr_return_amount#86802)), partial_sum(UnscaledValue(cr_net_loss#86810))], output=[cr_call_center_sk#86795, sum#87038L, sum#87039L])\n         :              +- *(14) Project [cr_call_center_sk#86795, cr_return_amount#86802, cr_net_loss#86810]\n         :                 +- *(14) BroadcastHashJoin [cr_returned_date_sk#86784], [d_date_sk#86811], Inner, BuildRight, false\n         :                    :- *(14) Filter isnotnull(cr_returned_date_sk#86784)\n         :                    :  +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_returned_date_sk#86784, cr_call_center_sk#86795, cr_return_amount#86802, cr_net_loss#86810], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#86784, cr_returned_time_sk#86785, cr_item_sk#86786, cr_refunded_customer_sk#..., Partition Cols: []]\n         :                    +- ReusedExchange [d_date_sk#86811], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115686]\n         +- *(25) Project [sales#86561, coalesce(returns#86563, 0.00) AS returns#86548, CheckOverflow((promote_precision(cast(profit#86562 as decimal(18,2))) - promote_precision(cast(coalesce(profit_loss#86564, 0.00) as decimal(18,2)))), DecimalType(18,2), true) AS profit#86994, web channel AS channel#87010, wp_web_page_sk#86901 AS id#87011]\n            +- SortMergeJoin [wp_web_page_sk#86901], [wp_web_page_sk#86967], LeftOuter\n               :- *(20) Sort [wp_web_page_sk#86901 ASC NULLS FIRST], false, 0\n               :  +- *(20) HashAggregate(keys=[wp_web_page_sk#86901], functions=[sum(UnscaledValue(ws_ext_sales_price#86862)), sum(UnscaledValue(ws_net_profit#86872))], output=[wp_web_page_sk#86901, sales#86561, profit#86562])\n               :     +- Exchange hashpartitioning(wp_web_page_sk#86901, 200), ENSURE_REQUIREMENTS, [id=#115971]\n               :        +- *(19) HashAggregate(keys=[wp_web_page_sk#86901], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#86862)), partial_sum(UnscaledValue(ws_net_profit#86872))], output=[wp_web_page_sk#86901, sum#87042L, sum#87043L])\n               :           +- *(19) Project [ws_ext_sales_price#86862, ws_net_profit#86872, wp_web_page_sk#86901]\n               :              +- *(19) BroadcastHashJoin [ws_web_page_sk#86851], [wp_web_page_sk#86901], Inner, BuildRight, false\n               :                 :- *(19) Project [ws_web_page_sk#86851, ws_ext_sales_price#86862, ws_net_profit#86872]\n               :                 :  +- *(19) BroadcastHashJoin [ws_sold_date_sk#86839], [d_date_sk#86873], Inner, BuildRight, false\n               :                 :     :- *(19) Filter (isnotnull(ws_sold_date_sk#86839) AND isnotnull(ws_web_page_sk#86851))\n               :                 :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#86839, ws_web_page_sk#86851, ws_ext_sales_price#86862, ws_net_profit#86872], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#86839, ws_sold_time_sk#86840, ws_ship_date_sk#86841, ws_item_sk#86842, ws_bill_c..., Partition Cols: []]\n               :                 :     +- ReusedExchange [d_date_sk#86873], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115686]\n               :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115781]\n               :                    +- *(18) Filter isnotnull(wp_web_page_sk#86901)\n               :                       +- Scan hive tpcds_sf1_iceberg.web_page [wp_web_page_sk#86901], HiveTableRelation [`tpcds_sf1_iceberg`.`web_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wp_web_page_sk#86901, wp_web_page_id#86902, wp_rec_start_date#86903, wp_rec_end_date#86904, wp_c..., Partition Cols: []]\n               +- *(24) Sort [wp_web_page_sk#86967 ASC NULLS FIRST], false, 0\n                  +- *(24) HashAggregate(keys=[wp_web_page_sk#86967], functions=[sum(UnscaledValue(wr_return_amt#86930)), sum(UnscaledValue(wr_net_loss#86938))], output=[wp_web_page_sk#86967, returns#86563, profit_loss#86564])\n                     +- Exchange hashpartitioning(wp_web_page_sk#86967, 200), ENSURE_REQUIREMENTS, [id=#116006]\n                        +- *(23) HashAggregate(keys=[wp_web_page_sk#86967], functions=[partial_sum(UnscaledValue(wr_return_amt#86930)), partial_sum(UnscaledValue(wr_net_loss#86938))], output=[wp_web_page_sk#86967, sum#87046L, sum#87047L])\n                           +- *(23) Project [wr_return_amt#86930, wr_net_loss#86938, wp_web_page_sk#86967]\n                              +- *(23) BroadcastHashJoin [wr_web_page_sk#86926], [wp_web_page_sk#86967], Inner, BuildRight, false\n                                 :- *(23) Project [wr_web_page_sk#86926, wr_return_amt#86930, wr_net_loss#86938]\n                                 :  +- *(23) BroadcastHashJoin [wr_returned_date_sk#86915], [d_date_sk#86939], Inner, BuildRight, false\n                                 :     :- *(23) Filter (isnotnull(wr_returned_date_sk#86915) AND isnotnull(wr_web_page_sk#86926))\n                                 :     :  +- Scan hive tpcds_sf1_iceberg.web_returns [wr_returned_date_sk#86915, wr_web_page_sk#86926, wr_return_amt#86930, wr_net_loss#86938], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#86915, wr_returned_time_sk#86916, wr_item_sk#86917, wr_refunded_customer_sk#..., Partition Cols: []]\n                                 :     +- ReusedExchange [d_date_sk#86939], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#115686]\n                                 +- ReusedExchange [wp_web_page_sk#86967], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#115781]\n",
    "iteration" : 3,
    "name" : "q77"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(d_year#87132, ss_item_sk#87085, ss_customer_sk#87086, 200), ENSURE_REQUIREMENTS, [id=#116288]\n+- *(3) HashAggregate(keys=[d_year#87132, ss_item_sk#87085, ss_customer_sk#87086], functions=[partial_sum(cast(ss_quantity#87093 as bigint)), partial_sum(UnscaledValue(ss_wholesale_cost#87094)), partial_sum(UnscaledValue(ss_sales_price#87096))], output=[d_year#87132, ss_item_sk#87085, ss_customer_sk#87086, sum#87349L, sum#87350L, sum#87351L])\n   +- *(3) Project [ss_item_sk#87085, ss_customer_sk#87086, ss_quantity#87093, ss_wholesale_cost#87094, ss_sales_price#87096, d_year#87132]\n      +- *(3) BroadcastHashJoin [ss_sold_date_sk#87083], [d_date_sk#87126], Inner, BuildRight, false\n         :- *(3) Project [ss_sold_date_sk#87083, ss_item_sk#87085, ss_customer_sk#87086, ss_quantity#87093, ss_wholesale_cost#87094, ss_sales_price#87096]\n         :  +- *(3) Filter isnull(sr_ticket_number#87115L)\n         :     +- *(3) BroadcastHashJoin [ss_ticket_number#87092L, ss_item_sk#87085], [sr_ticket_number#87115L, sr_item_sk#87108], LeftOuter, BuildRight, false\n         :        :- *(3) Filter isnotnull(ss_sold_date_sk#87083)\n         :        :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#87083, ss_item_sk#87085, ss_customer_sk#87086, ss_ticket_number#87092L, ss_quantity#87093, ss_wholesale_cost#87094, ss_sales_price#87096], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#87083, ss_sold_time_sk#87084, ss_item_sk#87085, ss_customer_sk#87086, ss_cdemo_s..., Partition Cols: []]\n         :        +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false], input[0, int, false]),false), [id=#116274]\n         :           +- *(1) Filter (isnotnull(sr_ticket_number#87115L) AND isnotnull(sr_item_sk#87108))\n         :              +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#87108, sr_ticket_number#87115L], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#87106, sr_return_time_sk#87107, sr_item_sk#87108, sr_customer_sk#87109, sr_c..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116282]\n            +- *(2) Filter ((isnotnull(d_year#87132) AND (d_year#87132 = 2000)) AND isnotnull(d_date_sk#87126))\n               +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#87126, d_year#87132], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#87126, d_date_id#87127, d_date#87128, d_month_seq#87129, d_week_seq#87130, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q78"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 3,
    "name" : "q79"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(s_store_name#87559, 200), ENSURE_REQUIREMENTS, [id=#116747]\n+- *(11) HashAggregate(keys=[s_store_name#87559], functions=[partial_sum(UnscaledValue(ss_net_profit#87525))], output=[s_store_name#87559, sum#87642L])\n   +- *(11) Project [ss_net_profit#87525, s_store_name#87559]\n      +- *(11) BroadcastHashJoin [substr(s_zip#87579, 1, 2)], [substr(ca_zip#87498, 1, 2)], Inner, BuildRight, false\n         :- *(11) Project [ss_net_profit#87525, s_store_name#87559, s_zip#87579]\n         :  +- *(11) BroadcastHashJoin [ss_store_sk#87510], [s_store_sk#87554], Inner, BuildRight, false\n         :     :- *(11) Project [ss_store_sk#87510, ss_net_profit#87525]\n         :     :  +- *(11) BroadcastHashJoin [ss_sold_date_sk#87503], [d_date_sk#87526], Inner, BuildRight, false\n         :     :     :- *(11) Filter (isnotnull(ss_sold_date_sk#87503) AND isnotnull(ss_store_sk#87510))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#87503, ss_store_sk#87510, ss_net_profit#87525], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#87503, ss_sold_time_sk#87504, ss_item_sk#87505, ss_customer_sk#87506, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#116692]\n         :     :        +- *(1) Project [d_date_sk#87526]\n         :     :           +- *(1) Filter ((((isnotnull(d_qoy#87536) AND isnotnull(d_year#87532)) AND (d_qoy#87536 = 2)) AND (d_year#87532 = 1998)) AND isnotnull(d_date_sk#87526))\n         :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#87526, d_qoy#87536, d_year#87532], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#87526, d_date_id#87527, d_date#87528, d_month_seq#87529, d_week_seq#87530, d_quarter_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116699]\n         :        +- *(2) Filter (isnotnull(s_store_sk#87554) AND isnotnull(s_zip#87579))\n         :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#87554, s_store_name#87559, s_zip#87579], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#87554, s_store_id#87555, s_rec_start_date#87556, s_rec_end_date#87557, s_closed_date_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(substr(input[0, string, true], 1, 2)),false), [id=#116741]\n            +- *(10) HashAggregate(keys=[ca_zip#87498], functions=[], output=[ca_zip#87498])\n               +- Exchange hashpartitioning(ca_zip#87498, 200), ENSURE_REQUIREMENTS, [id=#116737]\n                  +- *(9) HashAggregate(keys=[ca_zip#87498], functions=[], output=[ca_zip#87498])\n                     +- *(9) Project [substr(ca_zip#87592, 1, 5) AS ca_zip#87498]\n                        +- SortMergeJoin [coalesce(substr(ca_zip#87592, 1, 5), ), isnull(substr(ca_zip#87592, 1, 5))], [coalesce(ca_zip#87499, ), isnull(ca_zip#87499)], LeftSemi\n                           :- *(4) Sort [coalesce(substr(ca_zip#87592, 1, 5), ) ASC NULLS FIRST, isnull(substr(ca_zip#87592, 1, 5)) ASC NULLS FIRST], false, 0\n                           :  +- Exchange hashpartitioning(coalesce(substr(ca_zip#87592, 1, 5), ), isnull(substr(ca_zip#87592, 1, 5)), 200), ENSURE_REQUIREMENTS, [id=#116706]\n                           :     +- *(3) Filter (substr(ca_zip#87592, 1, 5) INSET (69952,33467,27413,19489,63792,52868,56436,11686,18360,99060,73134,36430,84919,73873,32754,12197,98338,86379,56877,86709,91110,45676,53163,17193,11652,98569,20244,49140,75742,57649,92292,94835,71836,27642,40936,92645,12318,15475,59004,47602,50788,25115,83910,84844,89338,41351,63180,14851,17895,25494,96560,25973,54010,20712,51782,21727,99132,69280,41352,27052,83647,73108,83833,37119,51793,31830,17672,56355,68908,35390,19988,13443,72592,85761,98862,59130,83086,27700,32919,28810,30621,20534,14073,45484,21060,58058,30106,77817,23952,95694,21094,61997,38607,73219,73146,43639,95430,65177,47529,63073,52389,45645,18410,25214,27369,70070,60560,41419,81755,18218,14196,11340,71144,65501,19326,82080,18700,38353,68293,59494,36479,25717,81003,71948,75675,49211,56455,59852,88217,46507,70450,64592,19444,70041,21800,30415,58032,90209,16704,10425,14440,31013,49230,51634,55233,45859,28239,97462,16791,43933,50412,39503,16005,13261,25264,50679,33773,46131,74686,15543,58062,98584,20317,50636,40146,95042,13123,24987,33869,10374,92380,34306,13844,60083,67975,66943,17819,48567,68605,15751,43432,91894,96435,95464,56600,46081,24660,81963,32958,81504,54207,24594,34594,19753,41162,27385,26217,49254,71997,89193,88086,54558,82602,34473,27287,81084,13378,18367,48333,83986,18829,51089,14155,92696,45533,35926,67881,94791,24286,21814,66057,60624,16515,83041,57839,68852,98072,80332,39459,54364,28571,17291,36335,49101,25333,51717,63991,28577,47369,44529,94898,37914,34948,32961,71256,57631,20601,79658,24891,67998,31655,29752,90669,41232,88137,39500,18421,71954,41255,15782,18767,63193,49130,16891,24227,51766,73021,84680,60298,68770,59226,81070,33562,12350,97173,47289,62361,51184,61527,47770,51195,93498,45266,18434,15371,31016,43830,52094,24255,48017,34972,33113,16226,14530,98069,16364,18884,15734,78366,32669,57553,65148,75660,21204,58581,18569,82620,38919,84247,48162,26689,42361,14242,90229,70073,68101,79077,55349,13338,41807,78093,58412,14312,58117,50632,62878,80846,19833,56224,52301,35076,68341,51933,13869,85066,61860,83583,69998,11912,21343,11489,15794,25178,27156,59080,53565,17879,40979,58218,53535,37788,28055,36201,23065,11855,63294,21231,68843,54585,22815,35863,61794,29450,29818,57025,12320,13376,22728,60736,77454,75752,13918,72991,11618,58454,27116,68730,29392,59386,22911,49472,62585,59345,10298,41836,17167,71286,13086,41967,33122,48530,35834,39214,33159,29086,81335,98533,32489,86057,41331) AND isnotnull(substr(ca_zip#87592, 1, 5)))\n                           :        +- Scan hive tpcds_sf1_iceberg.customer_address [ca_zip#87592], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#87583, ca_address_id#87584, ca_street_number#87585, ca_street_name#87586, ca_stree..., Partition Cols: []]\n                           +- *(8) Sort [coalesce(ca_zip#87499, ) ASC NULLS FIRST, isnull(ca_zip#87499) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(ca_zip#87499, ), isnull(ca_zip#87499), 200), ENSURE_REQUIREMENTS, [id=#116728]\n                                 +- *(7) Project [ca_zip#87499]\n                                    +- *(7) Filter (count(1)#87628L > 10)\n                                       +- *(7) HashAggregate(keys=[ca_zip#87605], functions=[count(1)], output=[ca_zip#87499, count(1)#87628L])\n                                          +- Exchange hashpartitioning(ca_zip#87605, 200), ENSURE_REQUIREMENTS, [id=#116722]\n                                             +- *(6) HashAggregate(keys=[ca_zip#87605], functions=[partial_count(1)], output=[ca_zip#87605, count#87644L])\n                                                +- *(6) Project [ca_zip#87605]\n                                                   +- *(6) BroadcastHashJoin [ca_address_sk#87596], [c_current_addr_sk#87613], Inner, BuildLeft, false\n                                                      :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#116713]\n                                                      :  +- *(5) Filter isnotnull(ca_address_sk#87596)\n                                                      :     +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#87596, ca_zip#87605], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#87596, ca_address_id#87597, ca_street_number#87598, ca_street_name#87599, ca_stree..., Partition Cols: []]\n                                                      +- *(6) Project [c_current_addr_sk#87613]\n                                                         +- *(6) Filter ((isnotnull(c_preferred_cust_flag#87619) AND (c_preferred_cust_flag#87619 = Y)) AND isnotnull(c_current_addr_sk#87613))\n                                                            +- Scan hive tpcds_sf1_iceberg.customer [c_current_addr_sk#87613, c_preferred_cust_flag#87619], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#87609, c_customer_id#87610, c_current_cdemo_sk#87611, c_current_hdemo_sk#87612, c_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q8"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(channel#88116, id#88117, spark_grouping_id#88115L, 200), ENSURE_REQUIREMENTS, [id=#117439]\n+- *(22) HashAggregate(keys=[channel#88116, id#88117, spark_grouping_id#88115L], functions=[partial_sum(sales#87658), partial_sum(returns#87659), partial_sum(profit#87660)], output=[channel#88116, id#88117, spark_grouping_id#88115L, sum#88135, isEmpty#88136, sum#88137, isEmpty#88138, sum#88139, isEmpty#88140])\n   +- *(22) Expand [List(sales#87658, returns#87659, profit#87660, channel#88113, id#88114, 0), List(sales#87658, returns#87659, profit#87660, channel#88113, null, 1), List(sales#87658, returns#87659, profit#87660, null, null, 3)], [sales#87658, returns#87659, profit#87660, channel#88116, id#88117, spark_grouping_id#88115L]\n      +- Union\n         :- *(7) HashAggregate(keys=[s_store_id#87740], functions=[sum(UnscaledValue(ss_ext_sales_price#87683)), sum(coalesce(cast(sr_return_amt#87702 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ss_net_profit#87690 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#87710 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#87658, returns#87659, profit#87660, channel#88113, id#88114])\n         :  +- Exchange hashpartitioning(s_store_id#87740, 200), ENSURE_REQUIREMENTS, [id=#117216]\n         :     +- *(6) HashAggregate(keys=[s_store_id#87740], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#87683)), partial_sum(coalesce(cast(sr_return_amt#87702 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ss_net_profit#87690 as decimal(13,2))) - promote_precision(cast(coalesce(cast(sr_net_loss#87710 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[s_store_id#87740, sum#88146L, sum#88147, isEmpty#88148, sum#88149, isEmpty#88150])\n         :        +- *(6) Project [ss_ext_sales_price#87683, ss_net_profit#87690, sr_return_amt#87702, sr_net_loss#87710, s_store_id#87740]\n         :           +- *(6) BroadcastHashJoin [ss_promo_sk#87676], [p_promo_sk#87790], Inner, BuildRight, false\n         :              :- *(6) Project [ss_promo_sk#87676, ss_ext_sales_price#87683, ss_net_profit#87690, sr_return_amt#87702, sr_net_loss#87710, s_store_id#87740]\n         :              :  +- *(6) BroadcastHashJoin [ss_item_sk#87670], [i_item_sk#87768], Inner, BuildRight, false\n         :              :     :- *(6) Project [ss_item_sk#87670, ss_promo_sk#87676, ss_ext_sales_price#87683, ss_net_profit#87690, sr_return_amt#87702, sr_net_loss#87710, s_store_id#87740]\n         :              :     :  +- *(6) BroadcastHashJoin [ss_store_sk#87675], [s_store_sk#87739], Inner, BuildRight, false\n         :              :     :     :- *(6) Project [ss_item_sk#87670, ss_store_sk#87675, ss_promo_sk#87676, ss_ext_sales_price#87683, ss_net_profit#87690, sr_return_amt#87702, sr_net_loss#87710]\n         :              :     :     :  +- *(6) BroadcastHashJoin [ss_sold_date_sk#87668], [d_date_sk#87711], Inner, BuildRight, false\n         :              :     :     :     :- *(6) Project [ss_sold_date_sk#87668, ss_item_sk#87670, ss_store_sk#87675, ss_promo_sk#87676, ss_ext_sales_price#87683, ss_net_profit#87690, sr_return_amt#87702, sr_net_loss#87710]\n         :              :     :     :     :  +- *(6) BroadcastHashJoin [ss_item_sk#87670, ss_ticket_number#87677L], [sr_item_sk#87693, sr_ticket_number#87700L], LeftOuter, BuildRight, false\n         :              :     :     :     :     :- *(6) Filter (((isnotnull(ss_sold_date_sk#87668) AND isnotnull(ss_store_sk#87675)) AND isnotnull(ss_item_sk#87670)) AND isnotnull(ss_promo_sk#87676))\n         :              :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#87668, ss_item_sk#87670, ss_store_sk#87675, ss_promo_sk#87676, ss_ticket_number#87677L, ss_ext_sales_price#87683, ss_net_profit#87690], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#87668, ss_sold_time_sk#87669, ss_item_sk#87670, ss_customer_sk#87671, ss_cdemo_s..., Partition Cols: []]\n         :              :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#117179]\n         :              :     :     :     :        +- *(1) Filter (isnotnull(sr_item_sk#87693) AND isnotnull(sr_ticket_number#87700L))\n         :              :     :     :     :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#87693, sr_ticket_number#87700L, sr_return_amt#87702, sr_net_loss#87710], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#87691, sr_return_time_sk#87692, sr_item_sk#87693, sr_customer_sk#87694, sr_c..., Partition Cols: []]\n         :              :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117187]\n         :              :     :     :        +- *(2) Project [d_date_sk#87711]\n         :              :     :     :           +- *(2) Filter (((isnotnull(d_date#87713) AND (d_date#87713 >= 11553)) AND (d_date#87713 <= 11613)) AND isnotnull(d_date_sk#87711))\n         :              :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#87713, d_date_sk#87711], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#87711, d_date_id#87712, d_date#87713, d_month_seq#87714, d_week_seq#87715, d_quarter_s..., Partition Cols: []]\n         :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#117194]\n         :              :     :        +- *(3) Filter isnotnull(s_store_sk#87739)\n         :              :     :           +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#87739, s_store_id#87740], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#87739, s_store_id#87740, s_rec_start_date#87741, s_rec_end_date#87742, s_closed_date_..., Partition Cols: []]\n         :              :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117202]\n         :              :        +- *(4) Project [i_item_sk#87768]\n         :              :           +- *(4) Filter ((isnotnull(i_current_price#87773) AND (i_current_price#87773 > 50.00)) AND isnotnull(i_item_sk#87768))\n         :              :              +- Scan hive tpcds_sf1_iceberg.item [i_current_price#87773, i_item_sk#87768], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#87768, i_item_id#87769, i_rec_start_date#87770, i_rec_end_date#87771, i_item_desc#8777..., Partition Cols: []]\n         :              +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117210]\n         :                 +- *(5) Project [p_promo_sk#87790]\n         :                    +- *(5) Filter ((isnotnull(p_channel_tv#87801) AND (p_channel_tv#87801 = N)) AND isnotnull(p_promo_sk#87790))\n         :                       +- Scan hive tpcds_sf1_iceberg.promotion [p_channel_tv#87801, p_promo_sk#87790], HiveTableRelation [`tpcds_sf1_iceberg`.`promotion`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [p_promo_sk#87790, p_promo_id#87791, p_start_date_sk#87792, p_end_date_sk#87793, p_item_sk#87794,..., Partition Cols: []]\n         :- *(14) HashAggregate(keys=[cp_catalog_page_id#87899], functions=[sum(UnscaledValue(cs_ext_sales_price#87832)), sum(coalesce(cast(cr_return_amount#87861 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(cs_net_profit#87842 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#87869 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#87662, returns#87663, profit#87664, channel#88125, id#88126])\n         :  +- Exchange hashpartitioning(cp_catalog_page_id#87899, 200), ENSURE_REQUIREMENTS, [id=#117386]\n         :     +- *(13) HashAggregate(keys=[cp_catalog_page_id#87899], functions=[partial_sum(UnscaledValue(cs_ext_sales_price#87832)), partial_sum(coalesce(cast(cr_return_amount#87861 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(cs_net_profit#87842 as decimal(13,2))) - promote_precision(cast(coalesce(cast(cr_net_loss#87869 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[cp_catalog_page_id#87899, sum#88156L, sum#88157, isEmpty#88158, sum#88159, isEmpty#88160])\n         :        +- *(13) Project [cs_ext_sales_price#87832, cs_net_profit#87842, cr_return_amount#87861, cr_net_loss#87869, cp_catalog_page_id#87899]\n         :           +- *(13) BroadcastHashJoin [cs_promo_sk#87825], [p_promo_sk#87929], Inner, BuildRight, false\n         :              :- *(13) Project [cs_promo_sk#87825, cs_ext_sales_price#87832, cs_net_profit#87842, cr_return_amount#87861, cr_net_loss#87869, cp_catalog_page_id#87899]\n         :              :  +- *(13) BroadcastHashJoin [cs_item_sk#87824], [i_item_sk#87907], Inner, BuildRight, false\n         :              :     :- *(13) Project [cs_item_sk#87824, cs_promo_sk#87825, cs_ext_sales_price#87832, cs_net_profit#87842, cr_return_amount#87861, cr_net_loss#87869, cp_catalog_page_id#87899]\n         :              :     :  +- *(13) BroadcastHashJoin [cs_catalog_page_sk#87821], [cp_catalog_page_sk#87898], Inner, BuildRight, false\n         :              :     :     :- *(13) Project [cs_catalog_page_sk#87821, cs_item_sk#87824, cs_promo_sk#87825, cs_ext_sales_price#87832, cs_net_profit#87842, cr_return_amount#87861, cr_net_loss#87869]\n         :              :     :     :  +- *(13) BroadcastHashJoin [cs_sold_date_sk#87809], [d_date_sk#87870], Inner, BuildRight, false\n         :              :     :     :     :- *(13) Project [cs_sold_date_sk#87809, cs_catalog_page_sk#87821, cs_item_sk#87824, cs_promo_sk#87825, cs_ext_sales_price#87832, cs_net_profit#87842, cr_return_amount#87861, cr_net_loss#87869]\n         :              :     :     :     :  +- *(13) BroadcastHashJoin [cs_item_sk#87824, cs_order_number#87826L], [cr_item_sk#87845, cr_order_number#87859L], LeftOuter, BuildRight, false\n         :              :     :     :     :     :- *(13) Filter (((isnotnull(cs_sold_date_sk#87809) AND isnotnull(cs_catalog_page_sk#87821)) AND isnotnull(cs_item_sk#87824)) AND isnotnull(cs_promo_sk#87825))\n         :              :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#87809, cs_catalog_page_sk#87821, cs_item_sk#87824, cs_promo_sk#87825, cs_order_number#87826L, cs_ext_sales_price#87832, cs_net_profit#87842], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#87809, cs_sold_time_sk#87810, cs_ship_date_sk#87811, cs_bill_customer_sk#87812, ..., Partition Cols: []]\n         :              :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#117225]\n         :              :     :     :     :        +- *(8) Filter (isnotnull(cr_item_sk#87845) AND isnotnull(cr_order_number#87859L))\n         :              :     :     :     :           +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_item_sk#87845, cr_order_number#87859L, cr_return_amount#87861, cr_net_loss#87869], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#87843, cr_returned_time_sk#87844, cr_item_sk#87845, cr_refunded_customer_sk#..., Partition Cols: []]\n         :              :     :     :     +- ReusedExchange [d_date_sk#87870], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117187]\n         :              :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#117240]\n         :              :     :        +- *(10) Filter isnotnull(cp_catalog_page_sk#87898)\n         :              :     :           +- Scan hive tpcds_sf1_iceberg.catalog_page [cp_catalog_page_sk#87898, cp_catalog_page_id#87899], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cp_catalog_page_sk#87898, cp_catalog_page_id#87899, cp_start_date_sk#87900, cp_end_date_sk#87901..., Partition Cols: []]\n         :              :     +- ReusedExchange [i_item_sk#87907], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117202]\n         :              +- ReusedExchange [p_promo_sk#87929], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117210]\n         +- *(21) HashAggregate(keys=[web_site_id#88035], functions=[sum(UnscaledValue(ws_ext_sales_price#87971)), sum(coalesce(cast(wr_return_amt#87997 as decimal(12,2)), 0.00)), sum(CheckOverflow((promote_precision(cast(ws_net_profit#87981 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#88005 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[sales#87665, returns#87666, profit#87667, channel#88127, id#88128])\n            +- Exchange hashpartitioning(web_site_id#88035, 200), ENSURE_REQUIREMENTS, [id=#117430]\n               +- *(20) HashAggregate(keys=[web_site_id#88035], functions=[partial_sum(UnscaledValue(ws_ext_sales_price#87971)), partial_sum(coalesce(cast(wr_return_amt#87997 as decimal(12,2)), 0.00)), partial_sum(CheckOverflow((promote_precision(cast(ws_net_profit#87981 as decimal(13,2))) - promote_precision(cast(coalesce(cast(wr_net_loss#88005 as decimal(12,2)), 0.00) as decimal(13,2)))), DecimalType(13,2), true))], output=[web_site_id#88035, sum#88166L, sum#88167, isEmpty#88168, sum#88169, isEmpty#88170])\n                  +- *(20) Project [ws_ext_sales_price#87971, ws_net_profit#87981, wr_return_amt#87997, wr_net_loss#88005, web_site_id#88035]\n                     +- *(20) BroadcastHashJoin [ws_promo_sk#87964], [p_promo_sk#88082], Inner, BuildRight, false\n                        :- *(20) Project [ws_promo_sk#87964, ws_ext_sales_price#87971, ws_net_profit#87981, wr_return_amt#87997, wr_net_loss#88005, web_site_id#88035]\n                        :  +- *(20) BroadcastHashJoin [ws_item_sk#87951], [i_item_sk#88060], Inner, BuildRight, false\n                        :     :- *(20) Project [ws_item_sk#87951, ws_promo_sk#87964, ws_ext_sales_price#87971, ws_net_profit#87981, wr_return_amt#87997, wr_net_loss#88005, web_site_id#88035]\n                        :     :  +- *(20) BroadcastHashJoin [ws_web_site_sk#87961], [web_site_sk#88034], Inner, BuildRight, false\n                        :     :     :- *(20) Project [ws_item_sk#87951, ws_web_site_sk#87961, ws_promo_sk#87964, ws_ext_sales_price#87971, ws_net_profit#87981, wr_return_amt#87997, wr_net_loss#88005]\n                        :     :     :  +- *(20) BroadcastHashJoin [ws_sold_date_sk#87948], [d_date_sk#88006], Inner, BuildRight, false\n                        :     :     :     :- *(20) Project [ws_sold_date_sk#87948, ws_item_sk#87951, ws_web_site_sk#87961, ws_promo_sk#87964, ws_ext_sales_price#87971, ws_net_profit#87981, wr_return_amt#87997, wr_net_loss#88005]\n                        :     :     :     :  +- *(20) BroadcastHashJoin [ws_item_sk#87951, ws_order_number#87965L], [wr_item_sk#87984, wr_order_number#87995L], LeftOuter, BuildRight, false\n                        :     :     :     :     :- *(20) Filter (((isnotnull(ws_sold_date_sk#87948) AND isnotnull(ws_web_site_sk#87961)) AND isnotnull(ws_item_sk#87951)) AND isnotnull(ws_promo_sk#87964))\n                        :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#87948, ws_item_sk#87951, ws_web_site_sk#87961, ws_promo_sk#87964, ws_order_number#87965L, ws_ext_sales_price#87971, ws_net_profit#87981], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#87948, ws_sold_time_sk#87949, ws_ship_date_sk#87950, ws_item_sk#87951, ws_bill_c..., Partition Cols: []]\n                        :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, bigint, false]),false), [id=#117271]\n                        :     :     :     :        +- *(15) Filter (isnotnull(wr_item_sk#87984) AND isnotnull(wr_order_number#87995L))\n                        :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#87984, wr_order_number#87995L, wr_return_amt#87997, wr_net_loss#88005], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#87982, wr_returned_time_sk#87983, wr_item_sk#87984, wr_refunded_customer_sk#..., Partition Cols: []]\n                        :     :     :     +- ReusedExchange [d_date_sk#88006], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117187]\n                        :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#117286]\n                        :     :        +- *(17) Filter isnotnull(web_site_sk#88034)\n                        :     :           +- Scan hive tpcds_sf1_iceberg.web_site [web_site_sk#88034, web_site_id#88035], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#88034, web_site_id#88035, web_rec_start_date#88036, web_rec_end_date#88037, web_name..., Partition Cols: []]\n                        :     +- ReusedExchange [i_item_sk#88060], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117202]\n                        +- ReusedExchange [p_promo_sk#88082], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117210]\n",
    "iteration" : 3,
    "name" : "q80"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 3,
    "name" : "q81"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#88397, i_item_desc#88400, i_current_price#88401, 200), ENSURE_REQUIREMENTS, [id=#117921]\n+- *(7) HashAggregate(keys=[i_item_id#88397, i_item_desc#88400, i_current_price#88401], functions=[], output=[i_item_id#88397, i_item_desc#88400, i_current_price#88401])\n   +- *(7) Project [i_item_id#88397, i_item_desc#88400, i_current_price#88401]\n      +- *(7) SortMergeJoin [i_item_sk#88396], [ss_item_sk#88452], Inner\n         :- *(4) Sort [i_item_sk#88396 ASC NULLS FIRST], false, 0\n         :  +- Exchange hashpartitioning(i_item_sk#88396, 200), ENSURE_REQUIREMENTS, [id=#117904]\n         :     +- *(3) Project [i_item_sk#88396, i_item_id#88397, i_item_desc#88400, i_current_price#88401]\n         :        +- *(3) BroadcastHashJoin [inv_date_sk#88418], [d_date_sk#88422], Inner, BuildRight, false\n         :           :- *(3) Project [i_item_sk#88396, i_item_id#88397, i_item_desc#88400, i_current_price#88401, inv_date_sk#88418]\n         :           :  +- *(3) BroadcastHashJoin [i_item_sk#88396], [inv_item_sk#88419], Inner, BuildLeft, false\n         :           :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117888]\n         :           :     :  +- *(1) Project [i_item_sk#88396, i_item_id#88397, i_item_desc#88400, i_current_price#88401]\n         :           :     :     +- *(1) Filter ((((isnotnull(i_current_price#88401) AND (i_current_price#88401 >= 68.00)) AND (i_current_price#88401 <= 98.00)) AND i_manufact_id#88409 IN (562,370,230,182)) AND isnotnull(i_item_sk#88396))\n         :           :     :        +- Scan hive tpcds_sf1_iceberg.item [i_current_price#88401, i_item_desc#88400, i_item_id#88397, i_item_sk#88396, i_manufact_id#88409], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#88396, i_item_id#88397, i_rec_start_date#88398, i_rec_end_date#88399, i_item_desc#8840..., Partition Cols: []]\n         :           :     +- *(3) Project [inv_date_sk#88418, inv_item_sk#88419]\n         :           :        +- *(3) Filter ((((isnotnull(inv_quantity_on_hand#88421) AND (inv_quantity_on_hand#88421 >= 100)) AND (inv_quantity_on_hand#88421 <= 500)) AND isnotnull(inv_item_sk#88419)) AND isnotnull(inv_date_sk#88418))\n         :           :           +- Scan hive tpcds_sf1_iceberg.inventory [inv_date_sk#88418, inv_item_sk#88419, inv_quantity_on_hand#88421], HiveTableRelation [`tpcds_sf1_iceberg`.`inventory`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [inv_date_sk#88418, inv_item_sk#88419, inv_warehouse_sk#88420, inv_quantity_on_hand#88421], Partition Cols: []]\n         :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#117899]\n         :              +- *(2) Project [d_date_sk#88422]\n         :                 +- *(2) Filter (((isnotnull(d_date#88424) AND (d_date#88424 >= 11815)) AND (d_date#88424 <= 11875)) AND isnotnull(d_date_sk#88422))\n         :                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#88424, d_date_sk#88422], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#88422, d_date_id#88423, d_date#88424, d_month_seq#88425, d_week_seq#88426, d_quarter_s..., Partition Cols: []]\n         +- *(6) Sort [ss_item_sk#88452 ASC NULLS FIRST], false, 0\n            +- Exchange hashpartitioning(ss_item_sk#88452, 200), ENSURE_REQUIREMENTS, [id=#117912]\n               +- *(5) Filter isnotnull(ss_item_sk#88452)\n                  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#88452], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#88450, ss_sold_time_sk#88451, ss_item_sk#88452, ss_customer_sk#88453, ss_cdemo_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q82"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_item_id#88517, 200), ENSURE_REQUIREMENTS, [id=#118284]\n+- *(5) HashAggregate(keys=[i_item_id#88517], functions=[partial_sum(cast(sr_return_quantity#88506 as bigint))], output=[i_item_id#88517, sum#88897L])\n   +- *(5) Project [sr_return_quantity#88506, i_item_id#88517]\n      +- *(5) BroadcastHashJoin [sr_returned_date_sk#88496], [d_date_sk#88538], Inner, BuildRight, false\n         :- *(5) Project [sr_returned_date_sk#88496, sr_return_quantity#88506, i_item_id#88517]\n         :  +- *(5) BroadcastHashJoin [sr_item_sk#88498], [i_item_sk#88516], Inner, BuildRight, false\n         :     :- *(5) Filter (isnotnull(sr_item_sk#88498) AND isnotnull(sr_returned_date_sk#88496))\n         :     :  +- Scan hive tpcds_sf1_iceberg.store_returns [sr_returned_date_sk#88496, sr_item_sk#88498, sr_return_quantity#88506], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#88496, sr_return_time_sk#88497, sr_item_sk#88498, sr_customer_sk#88499, sr_c..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#118257]\n         :        +- *(1) Filter (isnotnull(i_item_sk#88516) AND isnotnull(i_item_id#88517))\n         :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#88516, i_item_id#88517], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#88516, i_item_id#88517, i_rec_start_date#88518, i_rec_end_date#88519, i_item_desc#8852..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#118278]\n            +- *(4) Project [d_date_sk#88538]\n               +- *(4) BroadcastHashJoin [d_date#88540], [d_date#88719], LeftSemi, BuildRight, false\n                  :- *(4) Filter isnotnull(d_date_sk#88538)\n                  :  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#88538, d_date#88540], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#88538, d_date_id#88539, d_date#88540, d_month_seq#88541, d_week_seq#88542, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, date, true]),false), [id=#118273]\n                     +- *(3) Project [d_date#88719]\n                        +- *(3) BroadcastHashJoin [d_week_seq#88721], [d_week_seq#88749], LeftSemi, BuildRight, false\n                           :- Scan hive tpcds_sf1_iceberg.date_dim [d_date#88719, d_week_seq#88721], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#88717, d_date_id#88718, d_date#88719, d_month_seq#88720, d_week_seq#88721, d_quarter_s..., Partition Cols: []]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#118268]\n                              +- *(2) Project [d_week_seq#88749]\n                                 +- *(2) Filter cast(d_date#88747 as string) IN (2000-02-20,2000-10-08,2000-11-04)\n                                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#88747, d_week_seq#88749], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#88745, d_date_id#88746, d_date#88747, d_month_seq#88748, d_week_seq#88749, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q83"
  }, {
    "errorMsg" : "java.lang.RuntimeException: java.lang.InstantiationException",
    "iteration" : 3,
    "name" : "q84"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(r_reason_desc#89122, 200), ENSURE_REQUIREMENTS, [id=#118944]\n+- *(8) HashAggregate(keys=[r_reason_desc#89122], functions=[partial_avg(cast(ws_quantity#89007 as bigint)), partial_avg(UnscaledValue(wr_refunded_cash#89043)), partial_avg(UnscaledValue(wr_fee#89041))], output=[r_reason_desc#89122, sum#89147, count#89148L, sum#89149, count#89150L, sum#89151, count#89152L])\n   +- *(8) Project [ws_quantity#89007, wr_fee#89041, wr_refunded_cash#89043, r_reason_desc#89122]\n      +- *(8) BroadcastHashJoin [wr_reason_sk#89035], [r_reason_sk#89120], Inner, BuildRight, false\n         :- *(8) Project [ws_quantity#89007, wr_reason_sk#89035, wr_fee#89041, wr_refunded_cash#89043]\n         :  +- *(8) BroadcastHashJoin [ws_sold_date_sk#88989], [d_date_sk#89092], Inner, BuildRight, false\n         :     :- *(8) Project [ws_sold_date_sk#88989, ws_quantity#89007, wr_reason_sk#89035, wr_fee#89041, wr_refunded_cash#89043]\n         :     :  +- *(8) BroadcastHashJoin [wr_refunded_addr_sk#89029], [ca_address_sk#89079], Inner, BuildRight, ((((ca_state#89087 IN (IA,ND,FL) AND (ws_net_profit#89022 >= 100.00)) AND (ws_net_profit#89022 <= 200.00)) OR ((ca_state#89087 IN (OH,MS,VA) AND (ws_net_profit#89022 >= 150.00)) AND (ws_net_profit#89022 <= 300.00))) OR ((ca_state#89087 IN (MN,LA,TX) AND (ws_net_profit#89022 >= 50.00)) AND (ws_net_profit#89022 <= 250.00))), false\n         :     :     :- *(8) Project [ws_sold_date_sk#88989, ws_quantity#89007, ws_net_profit#89022, wr_refunded_addr_sk#89029, wr_reason_sk#89035, wr_fee#89041, wr_refunded_cash#89043]\n         :     :     :  +- *(8) BroadcastHashJoin [wr_returning_cdemo_sk#89031, cd_marital_status#89063, cd_education_status#89064], [cd_demo_sk#89070, cd_marital_status#89072, cd_education_status#89073], Inner, BuildRight, false\n         :     :     :     :- *(8) Project [ws_sold_date_sk#88989, ws_quantity#89007, ws_net_profit#89022, wr_refunded_addr_sk#89029, wr_returning_cdemo_sk#89031, wr_reason_sk#89035, wr_fee#89041, wr_refunded_cash#89043, cd_marital_status#89063, cd_education_status#89064]\n         :     :     :     :  +- *(8) BroadcastHashJoin [wr_refunded_cdemo_sk#89027], [cd_demo_sk#89061], Inner, BuildRight, ((((((cd_marital_status#89063 = D) AND (cd_education_status#89064 = 4 yr Degree)) AND (ws_sales_price#89010 >= 100.00)) AND (ws_sales_price#89010 <= 150.00)) OR ((((cd_marital_status#89063 = M) AND (cd_education_status#89064 = Primary)) AND (ws_sales_price#89010 >= 50.00)) AND (ws_sales_price#89010 <= 100.00))) OR ((((cd_marital_status#89063 = U) AND (cd_education_status#89064 = 2 yr Degree)) AND (ws_sales_price#89010 >= 150.00)) AND (ws_sales_price#89010 <= 200.00))), false\n         :     :     :     :     :- *(8) Project [ws_sold_date_sk#88989, ws_quantity#89007, ws_sales_price#89010, ws_net_profit#89022, wr_refunded_cdemo_sk#89027, wr_refunded_addr_sk#89029, wr_returning_cdemo_sk#89031, wr_reason_sk#89035, wr_fee#89041, wr_refunded_cash#89043]\n         :     :     :     :     :  +- *(8) BroadcastHashJoin [ws_web_page_sk#89001], [wp_web_page_sk#89047], Inner, BuildRight, false\n         :     :     :     :     :     :- *(8) Project [ws_sold_date_sk#88989, ws_web_page_sk#89001, ws_quantity#89007, ws_sales_price#89010, ws_net_profit#89022, wr_refunded_cdemo_sk#89027, wr_refunded_addr_sk#89029, wr_returning_cdemo_sk#89031, wr_reason_sk#89035, wr_fee#89041, wr_refunded_cash#89043]\n         :     :     :     :     :     :  +- *(8) BroadcastHashJoin [ws_item_sk#88992, ws_order_number#89006L], [wr_item_sk#89025, wr_order_number#89036L], Inner, BuildRight, false\n         :     :     :     :     :     :     :- *(8) Filter (((((isnotnull(ws_item_sk#88992) AND isnotnull(ws_order_number#89006L)) AND isnotnull(ws_web_page_sk#89001)) AND isnotnull(ws_sold_date_sk#88989)) AND ((((ws_sales_price#89010 >= 100.00) AND (ws_sales_price#89010 <= 150.00)) OR ((ws_sales_price#89010 >= 50.00) AND (ws_sales_price#89010 <= 100.00))) OR ((ws_sales_price#89010 >= 150.00) AND (ws_sales_price#89010 <= 200.00)))) AND ((((ws_net_profit#89022 >= 100.00) AND (ws_net_profit#89022 <= 200.00)) OR ((ws_net_profit#89022 >= 150.00) AND (ws_net_profit#89022 <= 300.00))) OR ((ws_net_profit#89022 >= 50.00) AND (ws_net_profit#89022 <= 250.00))))\n         :     :     :     :     :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#88989, ws_item_sk#88992, ws_web_page_sk#89001, ws_order_number#89006L, ws_quantity#89007, ws_sales_price#89010, ws_net_profit#89022], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#88989, ws_sold_time_sk#88990, ws_ship_date_sk#88991, ws_item_sk#88992, ws_bill_c..., Partition Cols: []]\n         :     :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[5, bigint, false]),false), [id=#118894]\n         :     :     :     :     :     :        +- *(1) Filter (((((isnotnull(wr_item_sk#89025) AND isnotnull(wr_order_number#89036L)) AND isnotnull(wr_refunded_cdemo_sk#89027)) AND isnotnull(wr_returning_cdemo_sk#89031)) AND isnotnull(wr_refunded_addr_sk#89029)) AND isnotnull(wr_reason_sk#89035))\n         :     :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_returns [wr_item_sk#89025, wr_refunded_cdemo_sk#89027, wr_refunded_addr_sk#89029, wr_returning_cdemo_sk#89031, wr_reason_sk#89035, wr_order_number#89036L, wr_fee#89041, wr_refunded_cash#89043], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#89023, wr_returned_time_sk#89024, wr_item_sk#89025, wr_refunded_customer_sk#..., Partition Cols: []]\n         :     :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#118901]\n         :     :     :     :     :        +- *(2) Filter isnotnull(wp_web_page_sk#89047)\n         :     :     :     :     :           +- Scan hive tpcds_sf1_iceberg.web_page [wp_web_page_sk#89047], HiveTableRelation [`tpcds_sf1_iceberg`.`web_page`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wp_web_page_sk#89047, wp_web_page_id#89048, wp_rec_start_date#89049, wp_rec_end_date#89050, wp_c..., Partition Cols: []]\n         :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#118908]\n         :     :     :     :        +- *(3) Filter (((isnotnull(cd_demo_sk#89061) AND isnotnull(cd_marital_status#89063)) AND isnotnull(cd_education_status#89064)) AND ((((cd_marital_status#89063 = D) AND (cd_education_status#89064 = 4 yr Degree)) OR ((cd_marital_status#89063 = M) AND (cd_education_status#89064 = Primary))) OR ((cd_marital_status#89063 = U) AND (cd_education_status#89064 = 2 yr Degree))))\n         :     :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#89061, cd_marital_status#89063, cd_education_status#89064], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#89061, cd_gender#89062, cd_marital_status#89063, cd_education_status#89064, cd_purcha..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[1, string, false], input[2, string, false]),false), [id=#118915]\n         :     :     :        +- *(4) Filter ((isnotnull(cd_demo_sk#89070) AND isnotnull(cd_marital_status#89072)) AND isnotnull(cd_education_status#89073))\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#89070, cd_marital_status#89072, cd_education_status#89073], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#89070, cd_gender#89071, cd_marital_status#89072, cd_education_status#89073, cd_purcha..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#118923]\n         :     :        +- *(5) Project [ca_address_sk#89079, ca_state#89087]\n         :     :           +- *(5) Filter (((isnotnull(ca_country#89089) AND (ca_country#89089 = United States)) AND isnotnull(ca_address_sk#89079)) AND ((ca_state#89087 IN (IA,ND,FL) OR ca_state#89087 IN (OH,MS,VA)) OR ca_state#89087 IN (MN,LA,TX)))\n         :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#89079, ca_country#89089, ca_state#89087], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#89079, ca_address_id#89080, ca_street_number#89081, ca_street_name#89082, ca_stree..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#118931]\n         :        +- *(6) Project [d_date_sk#89092]\n         :           +- *(6) Filter ((isnotnull(d_year#89098) AND (d_year#89098 = 2001)) AND isnotnull(d_date_sk#89092))\n         :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#89092, d_year#89098], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#89092, d_date_id#89093, d_date#89094, d_month_seq#89095, d_week_seq#89096, d_quarter_s..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#118938]\n            +- *(7) Filter isnotnull(r_reason_sk#89120)\n               +- Scan hive tpcds_sf1_iceberg.reason [r_reason_sk#89120, r_reason_desc#89122], HiveTableRelation [`tpcds_sf1_iceberg`.`reason`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [r_reason_sk#89120, r_reason_id#89121, r_reason_desc#89122], Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q85"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(_w1#89266, _w2#89267, 200), ENSURE_REQUIREMENTS, [id=#119060]\n+- *(4) HashAggregate(keys=[i_category#89252, i_class#89253, spark_grouping_id#89251L], functions=[sum(UnscaledValue(ws_net_paid#89192))], output=[total_sum#89158, i_category#89252, i_class#89253, lochierarchy#89159, _w1#89266, _w2#89267, _w3#89268])\n   +- Exchange hashpartitioning(i_category#89252, i_class#89253, spark_grouping_id#89251L, 200), ENSURE_REQUIREMENTS, [id=#119056]\n      +- *(3) HashAggregate(keys=[i_category#89252, i_class#89253, spark_grouping_id#89251L], functions=[partial_sum(UnscaledValue(ws_net_paid#89192))], output=[i_category#89252, i_class#89253, spark_grouping_id#89251L, sum#89284L])\n         +- *(3) Expand [List(ws_net_paid#89192, i_category#89237, i_class#89235, 0), List(ws_net_paid#89192, i_category#89237, null, 1), List(ws_net_paid#89192, null, null, 3)], [ws_net_paid#89192, i_category#89252, i_class#89253, spark_grouping_id#89251L]\n            +- *(3) Project [ws_net_paid#89192, i_category#89237, i_class#89235]\n               +- *(3) BroadcastHashJoin [ws_item_sk#89166], [i_item_sk#89225], Inner, BuildRight, false\n                  :- *(3) Project [ws_item_sk#89166, ws_net_paid#89192]\n                  :  +- *(3) BroadcastHashJoin [ws_sold_date_sk#89163], [d_date_sk#89197], Inner, BuildRight, false\n                  :     :- *(3) Filter (isnotnull(ws_sold_date_sk#89163) AND isnotnull(ws_item_sk#89166))\n                  :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#89163, ws_item_sk#89166, ws_net_paid#89192], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#89163, ws_sold_time_sk#89164, ws_ship_date_sk#89165, ws_item_sk#89166, ws_bill_c..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119042]\n                  :        +- *(1) Project [d_date_sk#89197]\n                  :           +- *(1) Filter (((isnotnull(d_month_seq#89200) AND (d_month_seq#89200 >= 1217)) AND (d_month_seq#89200 <= 1228)) AND isnotnull(d_date_sk#89197))\n                  :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#89197, d_month_seq#89200], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#89197, d_date_id#89198, d_date#89199, d_month_seq#89200, d_week_seq#89201, d_quarter_s..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#119049]\n                     +- *(2) Filter isnotnull(i_item_sk#89225)\n                        +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#89225, i_class#89235, i_category#89237], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#89225, i_item_id#89226, i_rec_start_date#89227, i_rec_end_date#89228, i_item_desc#8922..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q86"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#119566]\n+- *(16) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#89524L])\n   +- *(16) HashAggregate(keys=[c_last_name#89352, c_first_name#89351, d_date#89317], functions=[], output=[])\n      +- *(16) HashAggregate(keys=[c_last_name#89352, c_first_name#89351, d_date#89317], functions=[], output=[c_last_name#89352, c_first_name#89351, d_date#89317])\n         +- *(16) HashAggregate(keys=[c_last_name#89352, c_first_name#89351, d_date#89317], functions=[], output=[c_last_name#89352, c_first_name#89351, d_date#89317])\n            +- *(16) HashAggregate(keys=[c_last_name#89352, c_first_name#89351, d_date#89317], functions=[], output=[c_last_name#89352, c_first_name#89351, d_date#89317])\n               +- *(16) HashAggregate(keys=[c_last_name#89352, c_first_name#89351, d_date#89317], functions=[], output=[c_last_name#89352, c_first_name#89351, d_date#89317])\n                  +- Exchange hashpartitioning(c_last_name#89352, c_first_name#89351, d_date#89317, 200), ENSURE_REQUIREMENTS, [id=#119518]\n                     +- *(15) HashAggregate(keys=[c_last_name#89352, c_first_name#89351, d_date#89317], functions=[], output=[c_last_name#89352, c_first_name#89351, d_date#89317])\n                        +- SortMergeJoin [coalesce(c_last_name#89352, ), isnull(c_last_name#89352), coalesce(c_first_name#89351, ), isnull(c_first_name#89351), coalesce(d_date#89317, 0), isnull(d_date#89317)], [coalesce(c_last_name#89512, ), isnull(c_last_name#89512), coalesce(c_first_name#89511, ), isnull(c_first_name#89511), coalesce(d_date#89477, 0), isnull(d_date#89477)], LeftAnti\n                           :- SortMergeJoin [coalesce(c_last_name#89352, ), isnull(c_last_name#89352), coalesce(c_first_name#89351, ), isnull(c_first_name#89351), coalesce(d_date#89317, 0), isnull(d_date#89317)], [coalesce(c_last_name#89432, ), isnull(c_last_name#89432), coalesce(c_first_name#89431, ), isnull(c_first_name#89431), coalesce(d_date#89397, 0), isnull(d_date#89397)], LeftAnti\n                           :  :- *(4) Sort [coalesce(c_last_name#89352, ) ASC NULLS FIRST, isnull(c_last_name#89352) ASC NULLS FIRST, coalesce(c_first_name#89351, ) ASC NULLS FIRST, isnull(c_first_name#89351) ASC NULLS FIRST, coalesce(d_date#89317, 0) ASC NULLS FIRST, isnull(d_date#89317) ASC NULLS FIRST], false, 0\n                           :  :  +- Exchange hashpartitioning(coalesce(c_last_name#89352, ), isnull(c_last_name#89352), coalesce(c_first_name#89351, ), isnull(c_first_name#89351), coalesce(d_date#89317, 0), isnull(d_date#89317), 200), ENSURE_REQUIREMENTS, [id=#119309]\n                           :  :     +- *(3) Project [d_date#89317, c_first_name#89351, c_last_name#89352]\n                           :  :        +- *(3) BroadcastHashJoin [ss_customer_sk#89295], [c_customer_sk#89343], Inner, BuildRight, false\n                           :  :           :- *(3) Project [ss_customer_sk#89295, d_date#89317]\n                           :  :           :  +- *(3) BroadcastHashJoin [ss_sold_date_sk#89292], [d_date_sk#89315], Inner, BuildRight, false\n                           :  :           :     :- *(3) Filter (isnotnull(ss_sold_date_sk#89292) AND isnotnull(ss_customer_sk#89295))\n                           :  :           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#89292, ss_customer_sk#89295], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#89292, ss_sold_time_sk#89293, ss_item_sk#89294, ss_customer_sk#89295, ss_cdemo_s..., Partition Cols: []]\n                           :  :           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119297]\n                           :  :           :        +- *(1) Project [d_date_sk#89315, d_date#89317]\n                           :  :           :           +- *(1) Filter (((isnotnull(d_month_seq#89318) AND (d_month_seq#89318 >= 1224)) AND (d_month_seq#89318 <= 1235)) AND isnotnull(d_date_sk#89315))\n                           :  :           :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#89317, d_date_sk#89315, d_month_seq#89318], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#89315, d_date_id#89316, d_date#89317, d_month_seq#89318, d_week_seq#89319, d_quarter_s..., Partition Cols: []]\n                           :  :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#119304]\n                           :  :              +- *(2) Filter isnotnull(c_customer_sk#89343)\n                           :  :                 +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#89343, c_first_name#89351, c_last_name#89352], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#89343, c_customer_id#89344, c_current_cdemo_sk#89345, c_current_hdemo_sk#89346, c_..., Partition Cols: []]\n                           :  +- *(9) Sort [coalesce(c_last_name#89432, ) ASC NULLS FIRST, isnull(c_last_name#89432) ASC NULLS FIRST, coalesce(c_first_name#89431, ) ASC NULLS FIRST, isnull(c_first_name#89431) ASC NULLS FIRST, coalesce(d_date#89397, 0) ASC NULLS FIRST, isnull(d_date#89397) ASC NULLS FIRST], false, 0\n                           :     +- Exchange hashpartitioning(coalesce(c_last_name#89432, ), isnull(c_last_name#89432), coalesce(c_first_name#89431, ), isnull(c_first_name#89431), coalesce(d_date#89397, 0), isnull(d_date#89397), 200), ENSURE_REQUIREMENTS, [id=#119427]\n                           :        +- *(8) HashAggregate(keys=[c_last_name#89432, c_first_name#89431, d_date#89397], functions=[], output=[c_last_name#89432, c_first_name#89431, d_date#89397])\n                           :           +- Exchange hashpartitioning(c_last_name#89432, c_first_name#89431, d_date#89397, 200), ENSURE_REQUIREMENTS, [id=#119423]\n                           :              +- *(7) HashAggregate(keys=[c_last_name#89432, c_first_name#89431, d_date#89397], functions=[], output=[c_last_name#89432, c_first_name#89431, d_date#89397])\n                           :                 +- *(7) Project [c_last_name#89432, c_first_name#89431, d_date#89397]\n                           :                    +- *(7) BroadcastHashJoin [cs_bill_customer_sk#89364], [c_customer_sk#89423], Inner, BuildRight, false\n                           :                       :- *(7) Project [cs_bill_customer_sk#89364, d_date#89397]\n                           :                       :  +- *(7) BroadcastHashJoin [cs_sold_date_sk#89361], [d_date_sk#89395], Inner, BuildRight, false\n                           :                       :     :- *(7) Filter (isnotnull(cs_sold_date_sk#89361) AND isnotnull(cs_bill_customer_sk#89364))\n                           :                       :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#89361, cs_bill_customer_sk#89364], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#89361, cs_sold_time_sk#89362, cs_ship_date_sk#89363, cs_bill_customer_sk#89364, ..., Partition Cols: []]\n                           :                       :     +- ReusedExchange [d_date_sk#89395, d_date#89397], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119297]\n                           :                       +- ReusedExchange [c_customer_sk#89423, c_first_name#89431, c_last_name#89432], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#119304]\n                           +- *(14) Sort [coalesce(c_last_name#89512, ) ASC NULLS FIRST, isnull(c_last_name#89512) ASC NULLS FIRST, coalesce(c_first_name#89511, ) ASC NULLS FIRST, isnull(c_first_name#89511) ASC NULLS FIRST, coalesce(d_date#89477, 0) ASC NULLS FIRST, isnull(d_date#89477) ASC NULLS FIRST], false, 0\n                              +- Exchange hashpartitioning(coalesce(c_last_name#89512, ), isnull(c_last_name#89512), coalesce(c_first_name#89511, ), isnull(c_first_name#89511), coalesce(d_date#89477, 0), isnull(d_date#89477), 200), ENSURE_REQUIREMENTS, [id=#119504]\n                                 +- *(13) HashAggregate(keys=[c_last_name#89512, c_first_name#89511, d_date#89477], functions=[], output=[c_last_name#89512, c_first_name#89511, d_date#89477])\n                                    +- Exchange hashpartitioning(c_last_name#89512, c_first_name#89511, d_date#89477, 200), ENSURE_REQUIREMENTS, [id=#119481]\n                                       +- *(12) HashAggregate(keys=[c_last_name#89512, c_first_name#89511, d_date#89477], functions=[], output=[c_last_name#89512, c_first_name#89511, d_date#89477])\n                                          +- *(12) Project [c_last_name#89512, c_first_name#89511, d_date#89477]\n                                             +- *(12) BroadcastHashJoin [ws_bill_customer_sk#89445], [c_customer_sk#89503], Inner, BuildRight, false\n                                                :- *(12) Project [ws_bill_customer_sk#89445, d_date#89477]\n                                                :  +- *(12) BroadcastHashJoin [ws_sold_date_sk#89441], [d_date_sk#89475], Inner, BuildRight, false\n                                                :     :- *(12) Filter (isnotnull(ws_sold_date_sk#89441) AND isnotnull(ws_bill_customer_sk#89445))\n                                                :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#89441, ws_bill_customer_sk#89445], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#89441, ws_sold_time_sk#89442, ws_ship_date_sk#89443, ws_item_sk#89444, ws_bill_c..., Partition Cols: []]\n                                                :     +- ReusedExchange [d_date_sk#89475, d_date#89477], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#119297]\n                                                +- ReusedExchange [c_customer_sk#89503, c_first_name#89511, c_last_name#89512], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#119304]\n",
    "iteration" : 3,
    "name" : "q87"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#120962]\n+- *(39) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#90102L])\n   +- *(39) Project\n      +- *(39) BroadcastHashJoin [ss_store_sk#90019], [s_store_sk#90050], Inner, BuildRight, false\n         :- *(39) Project [ss_store_sk#90019]\n         :  +- *(39) BroadcastHashJoin [ss_sold_time_sk#90013], [t_time_sk#90040], Inner, BuildRight, false\n         :     :- *(39) Project [ss_sold_time_sk#90013, ss_store_sk#90019]\n         :     :  +- *(39) BroadcastHashJoin [ss_hdemo_sk#90017], [hd_demo_sk#90035], Inner, BuildRight, false\n         :     :     :- *(39) Filter ((isnotnull(ss_hdemo_sk#90017) AND isnotnull(ss_sold_time_sk#90013)) AND isnotnull(ss_store_sk#90019))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_time_sk#90013, ss_hdemo_sk#90017, ss_store_sk#90019], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#90012, ss_sold_time_sk#90013, ss_item_sk#90014, ss_customer_sk#90015, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- ReusedExchange [hd_demo_sk#90035], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#120232]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#120476]\n         :        +- *(37) Project [t_time_sk#90040]\n         :           +- *(37) Filter ((((isnotnull(t_hour#90043) AND isnotnull(t_minute#90044)) AND (t_hour#90043 = 12)) AND (t_minute#90044 < 30)) AND isnotnull(t_time_sk#90040))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#90043, t_minute#90044, t_time_sk#90040], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#90040, t_time_id#90041, t_time#90042, t_hour#90043, t_minute#90044, t_second#90045, t_..., Partition Cols: []]\n         +- ReusedExchange [s_store_sk#90050], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#120248]\n",
    "iteration" : 3,
    "name" : "q88"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(i_category#90126, i_brand#90122, s_store_name#90192, s_company_name#90204, 200), ENSURE_REQUIREMENTS, [id=#121113]\n+- *(5) HashAggregate(keys=[i_category#90126, i_class#90124, i_brand#90122, s_store_name#90192, s_company_name#90204, d_moy#90167], functions=[sum(UnscaledValue(ss_sales_price#90149))], output=[i_category#90126, i_class#90124, i_brand#90122, s_store_name#90192, s_company_name#90204, d_moy#90167, sum_sales#90112, _w0#90219])\n   +- Exchange hashpartitioning(i_category#90126, i_class#90124, i_brand#90122, s_store_name#90192, s_company_name#90204, d_moy#90167, 200), ENSURE_REQUIREMENTS, [id=#121109]\n      +- *(4) HashAggregate(keys=[i_category#90126, i_class#90124, i_brand#90122, s_store_name#90192, s_company_name#90204, d_moy#90167], functions=[partial_sum(UnscaledValue(ss_sales_price#90149))], output=[i_category#90126, i_class#90124, i_brand#90122, s_store_name#90192, s_company_name#90204, d_moy#90167, sum#90229L])\n         +- *(4) Project [i_brand#90122, i_class#90124, i_category#90126, ss_sales_price#90149, d_moy#90167, s_store_name#90192, s_company_name#90204]\n            +- *(4) BroadcastHashJoin [ss_store_sk#90143], [s_store_sk#90187], Inner, BuildRight, false\n               :- *(4) Project [i_brand#90122, i_class#90124, i_category#90126, ss_store_sk#90143, ss_sales_price#90149, d_moy#90167]\n               :  +- *(4) BroadcastHashJoin [ss_sold_date_sk#90136], [d_date_sk#90159], Inner, BuildRight, false\n               :     :- *(4) Project [i_brand#90122, i_class#90124, i_category#90126, ss_sold_date_sk#90136, ss_store_sk#90143, ss_sales_price#90149]\n               :     :  +- *(4) BroadcastHashJoin [i_item_sk#90114], [ss_item_sk#90138], Inner, BuildLeft, false\n               :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#121086]\n               :     :     :  +- *(1) Filter (((i_category#90126 IN (Children,Home,Women) AND i_class#90124 IN (toddlers,flatware,fragrances)) OR (i_category#90126 IN (Music,Electronics,Shoes) AND i_class#90124 IN (country,dvd/vcr players,mens))) AND isnotnull(i_item_sk#90114))\n               :     :     :     +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#90114, i_brand#90122, i_class#90124, i_category#90126], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#90114, i_item_id#90115, i_rec_start_date#90116, i_rec_end_date#90117, i_item_desc#9011..., Partition Cols: []]\n               :     :     +- *(4) Filter ((isnotnull(ss_item_sk#90138) AND isnotnull(ss_sold_date_sk#90136)) AND isnotnull(ss_store_sk#90143))\n               :     :        +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#90136, ss_item_sk#90138, ss_store_sk#90143, ss_sales_price#90149], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#90136, ss_sold_time_sk#90137, ss_item_sk#90138, ss_customer_sk#90139, ss_cdemo_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#121096]\n               :        +- *(2) Project [d_date_sk#90159, d_moy#90167]\n               :           +- *(2) Filter ((isnotnull(d_year#90165) AND (d_year#90165 = 2001)) AND isnotnull(d_date_sk#90159))\n               :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#90159, d_moy#90167, d_year#90165], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#90159, d_date_id#90160, d_date#90161, d_month_seq#90162, d_week_seq#90163, d_quarter_s..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#121103]\n                  +- *(3) Filter isnotnull(s_store_sk#90187)\n                     +- Scan hive tpcds_sf1_iceberg.store [s_store_sk#90187, s_store_name#90192, s_company_name#90204], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#90187, s_store_id#90188, s_rec_start_date#90189, s_rec_end_date#90190, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q89"
  }, {
    "errorMsg" : "Exception thrown in awaitResult: ",
    "iteration" : 3,
    "name" : "q9"
  }, {
    "errorMsg" : "org.apache.spark.sql.catalyst.errors.package$TreeNodeException: execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#121967]\n+- *(9) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#90893L])\n   +- *(9) Project\n      +- *(9) BroadcastHashJoin [ws_web_page_sk#90838], [wp_web_page_sk#90875], Inner, BuildRight, false\n         :- *(9) Project [ws_web_page_sk#90838]\n         :  +- *(9) BroadcastHashJoin [ws_sold_time_sk#90827], [t_time_sk#90865], Inner, BuildRight, false\n         :     :- *(9) Project [ws_sold_time_sk#90827, ws_web_page_sk#90838]\n         :     :  +- *(9) BroadcastHashJoin [ws_ship_hdemo_sk#90836], [hd_demo_sk#90860], Inner, BuildRight, false\n         :     :     :- *(9) Filter ((isnotnull(ws_ship_hdemo_sk#90836) AND isnotnull(ws_sold_time_sk#90827)) AND isnotnull(ws_web_page_sk#90838))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_time_sk#90827, ws_ship_hdemo_sk#90836, ws_web_page_sk#90838], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#90826, ws_sold_time_sk#90827, ws_ship_date_sk#90828, ws_item_sk#90829, ws_bill_c..., Partition Cols: []]\n         :     :     +- ReusedExchange [hd_demo_sk#90860], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#121843]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#121883]\n         :        +- *(7) Project [t_time_sk#90865]\n         :           +- *(7) Filter (((isnotnull(t_hour#90868) AND (t_hour#90868 >= 20)) AND (t_hour#90868 <= 21)) AND isnotnull(t_time_sk#90865))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#90868, t_time_sk#90865], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#90865, t_time_id#90866, t_time#90867, t_hour#90868, t_minute#90869, t_second#90870, t_..., Partition Cols: []]\n         +- ReusedExchange [wp_web_page_sk#90875], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#121859]\n",
    "iteration" : 3,
    "name" : "q90"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(Returns_Loss#90899 DESC NULLS LAST, 200), ENSURE_REQUIREMENTS, [id=#122210]\n+- *(8) HashAggregate(keys=[cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cd_marital_status#91019, cd_education_status#91020], functions=[sum(UnscaledValue(cr_net_loss#90957))], output=[Call_Center#90896, Call_Center_Name#90897, Manager#90898, Returns_Loss#90899])\n   +- Exchange hashpartitioning(cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cd_marital_status#91019, cd_education_status#91020, 200), ENSURE_REQUIREMENTS, [id=#122206]\n      +- *(7) HashAggregate(keys=[cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cd_marital_status#91019, cd_education_status#91020], functions=[partial_sum(UnscaledValue(cr_net_loss#90957))], output=[cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cd_marital_status#91019, cd_education_status#91020, sum#91039L])\n         +- *(7) Project [cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cr_net_loss#90957, cd_marital_status#91019, cd_education_status#91020]\n            +- *(7) BroadcastHashJoin [c_current_hdemo_sk#90989], [hd_demo_sk#91026], Inner, BuildRight, false\n               :- *(7) Project [cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cr_net_loss#90957, c_current_hdemo_sk#90989, cd_marital_status#91019, cd_education_status#91020]\n               :  +- *(7) BroadcastHashJoin [c_current_cdemo_sk#90988], [cd_demo_sk#91017], Inner, BuildRight, false\n               :     :- *(7) Project [cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cr_net_loss#90957, c_current_cdemo_sk#90988, c_current_hdemo_sk#90989]\n               :     :  +- *(7) BroadcastHashJoin [c_current_addr_sk#90990], [ca_address_sk#91004], Inner, BuildRight, false\n               :     :     :- *(7) Project [cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cr_net_loss#90957, c_current_cdemo_sk#90988, c_current_hdemo_sk#90989, c_current_addr_sk#90990]\n               :     :     :  +- *(7) BroadcastHashJoin [cr_returning_customer_sk#90938], [c_customer_sk#90986], Inner, BuildRight, false\n               :     :     :     :- *(7) Project [cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cr_returning_customer_sk#90938, cr_net_loss#90957]\n               :     :     :     :  +- *(7) BroadcastHashJoin [cr_returned_date_sk#90931], [d_date_sk#90958], Inner, BuildRight, false\n               :     :     :     :     :- *(7) Project [cc_call_center_id#90901, cc_name#90906, cc_manager#90911, cr_returned_date_sk#90931, cr_returning_customer_sk#90938, cr_net_loss#90957]\n               :     :     :     :     :  +- *(7) BroadcastHashJoin [cc_call_center_sk#90900], [cr_call_center_sk#90942], Inner, BuildLeft, false\n               :     :     :     :     :     :- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#122160]\n               :     :     :     :     :     :  +- *(1) Filter isnotnull(cc_call_center_sk#90900)\n               :     :     :     :     :     :     +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#90900, cc_call_center_id#90901, cc_name#90906, cc_manager#90911], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#90900, cc_call_center_id#90901, cc_rec_start_date#90902, cc_rec_end_date#90903..., Partition Cols: []]\n               :     :     :     :     :     +- *(7) Filter ((isnotnull(cr_call_center_sk#90942) AND isnotnull(cr_returned_date_sk#90931)) AND isnotnull(cr_returning_customer_sk#90938))\n               :     :     :     :     :        +- Scan hive tpcds_sf1_iceberg.catalog_returns [cr_returned_date_sk#90931, cr_returning_customer_sk#90938, cr_call_center_sk#90942, cr_net_loss#90957], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cr_returned_date_sk#90931, cr_returned_time_sk#90932, cr_item_sk#90933, cr_refunded_customer_sk#..., Partition Cols: []]\n               :     :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122170]\n               :     :     :     :        +- *(2) Project [d_date_sk#90958]\n               :     :     :     :           +- *(2) Filter ((((isnotnull(d_year#90964) AND isnotnull(d_moy#90966)) AND (d_year#90964 = 1998)) AND (d_moy#90966 = 12)) AND isnotnull(d_date_sk#90958))\n               :     :     :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#90958, d_moy#90966, d_year#90964], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#90958, d_date_id#90959, d_date#90960, d_month_seq#90961, d_week_seq#90962, d_quarter_s..., Partition Cols: []]\n               :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#122177]\n               :     :     :        +- *(3) Filter (((isnotnull(c_customer_sk#90986) AND isnotnull(c_current_addr_sk#90990)) AND isnotnull(c_current_cdemo_sk#90988)) AND isnotnull(c_current_hdemo_sk#90989))\n               :     :     :           +- Scan hive tpcds_sf1_iceberg.customer [c_customer_sk#90986, c_current_cdemo_sk#90988, c_current_hdemo_sk#90989, c_current_addr_sk#90990], HiveTableRelation [`tpcds_sf1_iceberg`.`customer`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [c_customer_sk#90986, c_customer_id#90987, c_current_cdemo_sk#90988, c_current_hdemo_sk#90989, c_..., Partition Cols: []]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122185]\n               :     :        +- *(4) Project [ca_address_sk#91004]\n               :     :           +- *(4) Filter ((isnotnull(ca_gmt_offset#91015) AND (ca_gmt_offset#91015 = -6.00)) AND isnotnull(ca_address_sk#91004))\n               :     :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#91004, ca_gmt_offset#91015], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#91004, ca_address_id#91005, ca_street_number#91006, ca_street_name#91007, ca_stree..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#122192]\n               :        +- *(5) Filter ((((cd_marital_status#91019 = M) AND (cd_education_status#91020 = Unknown)) OR ((cd_marital_status#91019 = W) AND (cd_education_status#91020 = Advanced Degree))) AND isnotnull(cd_demo_sk#91017))\n               :           +- Scan hive tpcds_sf1_iceberg.customer_demographics [cd_demo_sk#91017, cd_marital_status#91019, cd_education_status#91020], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cd_demo_sk#91017, cd_gender#91018, cd_marital_status#91019, cd_education_status#91020, cd_purcha..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122200]\n                  +- *(6) Project [hd_demo_sk#91026]\n                     +- *(6) Filter ((isnotnull(hd_buy_potential#91028) AND StartsWith(hd_buy_potential#91028, Unknown)) AND isnotnull(hd_demo_sk#91026))\n                        +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_buy_potential#91028, hd_demo_sk#91026], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#91026, hd_income_band_sk#91027, hd_buy_potential#91028, hd_dep_count#91029, hd_vehicl..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q91"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#122404]\n+- *(8) HashAggregate(keys=[], functions=[partial_sum(UnscaledValue(ws_ext_discount_amt#91069))], output=[sum#91200L])\n   +- *(8) Project [ws_ext_discount_amt#91069]\n      +- *(8) BroadcastHashJoin [ws_sold_date_sk#91047], [d_date_sk#91103], Inner, BuildRight, false\n         :- *(8) Project [ws_sold_date_sk#91047, ws_ext_discount_amt#91069]\n         :  +- *(8) SortMergeJoin [i_item_sk#91081], [ws_item_sk#91134], Inner, (cast(ws_ext_discount_amt#91069 as decimal(14,7)) > (CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#91194)\n         :     :- *(3) Sort [i_item_sk#91081 ASC NULLS FIRST], false, 0\n         :     :  +- Exchange hashpartitioning(i_item_sk#91081, 200), ENSURE_REQUIREMENTS, [id=#122341]\n         :     :     +- *(2) Project [ws_sold_date_sk#91047, ws_ext_discount_amt#91069, i_item_sk#91081]\n         :     :        +- *(2) BroadcastHashJoin [ws_item_sk#91050], [i_item_sk#91081], Inner, BuildRight, false\n         :     :           :- *(2) Filter ((isnotnull(ws_item_sk#91050) AND isnotnull(ws_ext_discount_amt#91069)) AND isnotnull(ws_sold_date_sk#91047))\n         :     :           :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#91047, ws_item_sk#91050, ws_ext_discount_amt#91069], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#91047, ws_sold_time_sk#91048, ws_ship_date_sk#91049, ws_item_sk#91050, ws_bill_c..., Partition Cols: []]\n         :     :           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122336]\n         :     :              +- *(1) Project [i_item_sk#91081]\n         :     :                 +- *(1) Filter ((isnotnull(i_manufact_id#91094) AND (i_manufact_id#91094 = 172)) AND isnotnull(i_item_sk#91081))\n         :     :                    +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#91081, i_manufact_id#91094], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#91081, i_item_id#91082, i_rec_start_date#91083, i_rec_end_date#91084, i_item_desc#9108..., Partition Cols: []]\n         :     +- *(6) Sort [ws_item_sk#91134 ASC NULLS FIRST], false, 0\n         :        +- *(6) Filter isnotnull((CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#91194)\n         :           +- *(6) HashAggregate(keys=[ws_item_sk#91134], functions=[avg(UnscaledValue(ws_ext_discount_amt#91153))], output=[(CAST(1.3 AS DECIMAL(11,6)) * CAST(avg(ws_ext_discount_amt) AS DECIMAL(11,6)))#91194, ws_item_sk#91134])\n         :              +- Exchange hashpartitioning(ws_item_sk#91134, 200), ENSURE_REQUIREMENTS, [id=#122358]\n         :                 +- *(5) HashAggregate(keys=[ws_item_sk#91134], functions=[partial_avg(UnscaledValue(ws_ext_discount_amt#91153))], output=[ws_item_sk#91134, sum#91203, count#91204L])\n         :                    +- *(5) Project [ws_item_sk#91134, ws_ext_discount_amt#91153]\n         :                       +- *(5) BroadcastHashJoin [ws_sold_date_sk#91131], [d_date_sk#91165], Inner, BuildRight, false\n         :                          :- *(5) Filter (isnotnull(ws_sold_date_sk#91131) AND isnotnull(ws_item_sk#91134))\n         :                          :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_sold_date_sk#91131, ws_item_sk#91134, ws_ext_discount_amt#91153], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#91131, ws_sold_time_sk#91132, ws_ship_date_sk#91133, ws_item_sk#91134, ws_bill_c..., Partition Cols: []]\n         :                          +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122352]\n         :                             +- *(4) Project [d_date_sk#91165]\n         :                                +- *(4) Filter (((isnotnull(d_date#91167) AND (d_date#91167 >= 10603)) AND (d_date#91167 <= 10693)) AND isnotnull(d_date_sk#91165))\n         :                                   +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#91167, d_date_sk#91165], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#91165, d_date_id#91166, d_date#91167, d_month_seq#91168, d_week_seq#91169, d_quarter_s..., Partition Cols: []]\n         +- ReusedExchange [d_date_sk#91103], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122352]\n",
    "iteration" : 3,
    "name" : "q92"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(ss_customer_sk#91212, 200), ENSURE_REQUIREMENTS, [id=#122482]\n+- *(3) HashAggregate(keys=[ss_customer_sk#91212], functions=[partial_sum(act_sales#91207)], output=[ss_customer_sk#91212, sum#91262, isEmpty#91263])\n   +- *(3) Project [ss_customer_sk#91212, CASE WHEN isnotnull(sr_return_quantity#91242) THEN CheckOverflow((promote_precision(cast(cast((ss_quantity#91219 - sr_return_quantity#91242) as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#91222 as decimal(12,2)))), DecimalType(18,2), true) ELSE CheckOverflow((promote_precision(cast(cast(ss_quantity#91219 as decimal(10,0)) as decimal(12,2))) * promote_precision(cast(ss_sales_price#91222 as decimal(12,2)))), DecimalType(18,2), true) END AS act_sales#91207]\n      +- *(3) BroadcastHashJoin [sr_reason_sk#91240], [r_reason_sk#91252], Inner, BuildRight, false\n         :- *(3) Project [ss_customer_sk#91212, ss_quantity#91219, ss_sales_price#91222, sr_reason_sk#91240, sr_return_quantity#91242]\n         :  +- *(3) BroadcastHashJoin [ss_item_sk#91211, ss_ticket_number#91218L], [sr_item_sk#91234, sr_ticket_number#91241L], Inner, BuildRight, false\n         :     :- Scan hive tpcds_sf1_iceberg.store_sales [ss_item_sk#91211, ss_customer_sk#91212, ss_ticket_number#91218L, ss_quantity#91219, ss_sales_price#91222], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#91209, ss_sold_time_sk#91210, ss_item_sk#91211, ss_customer_sk#91212, ss_cdemo_s..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, int, false], input[2, bigint, false]),false), [id=#122468]\n         :        +- *(1) Filter ((isnotnull(sr_item_sk#91234) AND isnotnull(sr_ticket_number#91241L)) AND isnotnull(sr_reason_sk#91240))\n         :           +- Scan hive tpcds_sf1_iceberg.store_returns [sr_item_sk#91234, sr_reason_sk#91240, sr_ticket_number#91241L, sr_return_quantity#91242], HiveTableRelation [`tpcds_sf1_iceberg`.`store_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sr_returned_date_sk#91232, sr_return_time_sk#91233, sr_item_sk#91234, sr_customer_sk#91235, sr_c..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122476]\n            +- *(2) Project [r_reason_sk#91252]\n               +- *(2) Filter ((isnotnull(r_reason_desc#91254) AND (r_reason_desc#91254 = reason 58)) AND isnotnull(r_reason_sk#91252))\n                  +- Scan hive tpcds_sf1_iceberg.reason [r_reason_desc#91254, r_reason_sk#91252], HiveTableRelation [`tpcds_sf1_iceberg`.`reason`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [r_reason_sk#91252, r_reason_id#91253, r_reason_desc#91254], Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q93"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#122642]\n+- *(5) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#91300)), merge_sum(UnscaledValue(ws_net_profit#91305)), partial_count(distinct ws_order_number#91289L)], output=[sum#91440L, sum#91442L, count#91445L])\n   +- *(5) HashAggregate(keys=[ws_order_number#91289L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#91300)), merge_sum(UnscaledValue(ws_net_profit#91305))], output=[ws_order_number#91289L, sum#91440L, sum#91442L])\n      +- Exchange hashpartitioning(ws_order_number#91289L, 200), ENSURE_REQUIREMENTS, [id=#122637]\n         +- *(4) HashAggregate(keys=[ws_order_number#91289L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#91300)), partial_sum(UnscaledValue(ws_net_profit#91305))], output=[ws_order_number#91289L, sum#91440L, sum#91442L])\n            +- *(4) Project [ws_order_number#91289L, ws_ext_ship_cost#91300, ws_net_profit#91305]\n               +- *(4) BroadcastHashJoin [ws_web_site_sk#91285], [web_site_sk#91347], Inner, BuildRight, false\n                  :- *(4) Project [ws_web_site_sk#91285, ws_order_number#91289L, ws_ext_ship_cost#91300, ws_net_profit#91305]\n                  :  +- *(4) BroadcastHashJoin [ws_ship_addr_sk#91283], [ca_address_sk#91334], Inner, BuildRight, false\n                  :     :- *(4) Project [ws_ship_addr_sk#91283, ws_web_site_sk#91285, ws_order_number#91289L, ws_ext_ship_cost#91300, ws_net_profit#91305]\n                  :     :  +- *(4) BroadcastHashJoin [ws_ship_date_sk#91274], [d_date_sk#91306], Inner, BuildRight, false\n                  :     :     :- *(4) BroadcastHashJoin [ws_order_number#91289L], [wr_order_number#91420L], LeftAnti, BuildRight, false\n                  :     :     :  :- *(4) Project [ws_ship_date_sk#91274, ws_ship_addr_sk#91283, ws_web_site_sk#91285, ws_order_number#91289L, ws_ext_ship_cost#91300, ws_net_profit#91305]\n                  :     :     :  :  +- *(4) BroadcastHashJoin [ws_order_number#91289L], [ws_order_number#91390L], LeftSemi, BuildRight, NOT (ws_warehouse_sk#91287 = ws_warehouse_sk#91388), false\n                  :     :     :  :     :- *(4) Filter ((isnotnull(ws_ship_date_sk#91274) AND isnotnull(ws_ship_addr_sk#91283)) AND isnotnull(ws_web_site_sk#91285))\n                  :     :     :  :     :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ship_date_sk#91274, ws_ship_addr_sk#91283, ws_web_site_sk#91285, ws_warehouse_sk#91287, ws_order_number#91289L, ws_ext_ship_cost#91300, ws_net_profit#91305], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#91272, ws_sold_time_sk#91273, ws_ship_date_sk#91274, ws_item_sk#91275, ws_bill_c..., Partition Cols: []]\n                  :     :     :  :     +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, true]),false), [id=#122577]\n                  :     :     :  :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#91388, ws_order_number#91390L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#91373, ws_sold_time_sk#91374, ws_ship_date_sk#91375, ws_item_sk#91376, ws_bill_c..., Partition Cols: []]\n                  :     :     :  +- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, true]),false), [id=#122581]\n                  :     :     :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_order_number#91420L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#91407, wr_returned_time_sk#91408, wr_item_sk#91409, wr_refunded_customer_sk#..., Partition Cols: []]\n                  :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122615]\n                  :     :        +- *(1) Project [d_date_sk#91306]\n                  :     :           +- *(1) Filter (((isnotnull(d_date#91308) AND (d_date#91308 >= 11747)) AND (d_date#91308 <= 11807)) AND isnotnull(d_date_sk#91306))\n                  :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#91308, d_date_sk#91306], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#91306, d_date_id#91307, d_date#91308, d_month_seq#91309, d_week_seq#91310, d_quarter_s..., Partition Cols: []]\n                  :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122623]\n                  :        +- *(2) Project [ca_address_sk#91334]\n                  :           +- *(2) Filter ((isnotnull(ca_state#91342) AND (ca_state#91342 = GA)) AND isnotnull(ca_address_sk#91334))\n                  :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#91334, ca_state#91342], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#91334, ca_address_id#91335, ca_street_number#91336, ca_street_name#91337, ca_stree..., Partition Cols: []]\n                  +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122631]\n                     +- *(3) Project [web_site_sk#91347]\n                        +- *(3) Filter ((isnotnull(web_company_name#91361) AND (web_company_name#91361 = pri)) AND isnotnull(web_site_sk#91347))\n                           +- Scan hive tpcds_sf1_iceberg.web_site [web_company_name#91361, web_site_sk#91347], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#91347, web_site_id#91348, web_rec_start_date#91349, web_rec_end_date#91350, web_name..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q94"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#122933]\n+- *(13) HashAggregate(keys=[], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#91486)), merge_sum(UnscaledValue(ws_net_profit#91491)), partial_count(distinct ws_order_number#91475L)], output=[sum#91728L, sum#91730L, count#91733L])\n   +- *(13) HashAggregate(keys=[ws_order_number#91475L], functions=[merge_sum(UnscaledValue(ws_ext_ship_cost#91486)), merge_sum(UnscaledValue(ws_net_profit#91491))], output=[ws_order_number#91475L, sum#91728L, sum#91730L])\n      +- *(13) HashAggregate(keys=[ws_order_number#91475L], functions=[partial_sum(UnscaledValue(ws_ext_ship_cost#91486)), partial_sum(UnscaledValue(ws_net_profit#91491))], output=[ws_order_number#91475L, sum#91728L, sum#91730L])\n         +- *(13) Project [ws_order_number#91475L, ws_ext_ship_cost#91486, ws_net_profit#91491]\n            +- *(13) BroadcastHashJoin [ws_web_site_sk#91471], [web_site_sk#91533], Inner, BuildRight, false\n               :- *(13) Project [ws_web_site_sk#91471, ws_order_number#91475L, ws_ext_ship_cost#91486, ws_net_profit#91491]\n               :  +- *(13) BroadcastHashJoin [ws_ship_addr_sk#91469], [ca_address_sk#91520], Inner, BuildRight, false\n               :     :- *(13) Project [ws_ship_addr_sk#91469, ws_web_site_sk#91471, ws_order_number#91475L, ws_ext_ship_cost#91486, ws_net_profit#91491]\n               :     :  +- *(13) BroadcastHashJoin [ws_ship_date_sk#91460], [d_date_sk#91492], Inner, BuildRight, false\n               :     :     :- SortMergeJoin [ws_order_number#91475L], [wr_order_number#91640L], LeftSemi\n               :     :     :  :- SortMergeJoin [ws_order_number#91475L], [ws_order_number#91576L], LeftSemi\n               :     :     :  :  :- *(2) Sort [ws_order_number#91475L ASC NULLS FIRST], false, 0\n               :     :     :  :  :  +- Exchange hashpartitioning(ws_order_number#91475L, 200), ENSURE_REQUIREMENTS, [id=#122823]\n               :     :     :  :  :     +- *(1) Filter ((isnotnull(ws_ship_date_sk#91460) AND isnotnull(ws_ship_addr_sk#91469)) AND isnotnull(ws_web_site_sk#91471))\n               :     :     :  :  :        +- Scan hive tpcds_sf1_iceberg.web_sales [ws_ship_date_sk#91460, ws_ship_addr_sk#91469, ws_web_site_sk#91471, ws_order_number#91475L, ws_ext_ship_cost#91486, ws_net_profit#91491], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#91458, ws_sold_time_sk#91459, ws_ship_date_sk#91460, ws_item_sk#91461, ws_bill_c..., Partition Cols: []]\n               :     :     :  :  +- *(5) Sort [ws_order_number#91576L ASC NULLS FIRST], false, 0\n               :     :     :  :     +- Exchange hashpartitioning(ws_order_number#91576L, 200), ENSURE_REQUIREMENTS, [id=#122837]\n               :     :     :  :        +- *(4) Project [ws_order_number#91576L]\n               :     :     :  :           +- *(4) BroadcastHashJoin [ws_order_number#91576L], [ws_order_number#91610L], Inner, BuildRight, NOT (ws_warehouse_sk#91574 = ws_warehouse_sk#91608), false\n               :     :     :  :              :- *(4) Filter (isnotnull(ws_order_number#91576L) AND isnotnull(ws_warehouse_sk#91574))\n               :     :     :  :              :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#91574, ws_order_number#91576L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#91559, ws_sold_time_sk#91560, ws_ship_date_sk#91561, ws_item_sk#91562, ws_bill_c..., Partition Cols: []]\n               :     :     :  :              +- BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false]),false), [id=#122832]\n               :     :     :  :                 +- *(3) Filter (isnotnull(ws_order_number#91610L) AND isnotnull(ws_warehouse_sk#91608))\n               :     :     :  :                    +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#91608, ws_order_number#91610L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#91593, ws_sold_time_sk#91594, ws_ship_date_sk#91595, ws_item_sk#91596, ws_bill_c..., Partition Cols: []]\n               :     :     :  +- *(9) Sort [wr_order_number#91640L ASC NULLS FIRST], false, 0\n               :     :     :     +- Exchange hashpartitioning(wr_order_number#91640L, 200), ENSURE_REQUIREMENTS, [id=#122917]\n               :     :     :        +- *(8) Project [wr_order_number#91640L]\n               :     :     :           +- *(8) BroadcastHashJoin [wr_order_number#91640L], [ws_order_number#91668L], Inner, BuildLeft, false\n               :     :     :              :- BroadcastExchange HashedRelationBroadcastMode(List(input[0, bigint, false]),false), [id=#122845]\n               :     :     :              :  +- *(6) Filter isnotnull(wr_order_number#91640L)\n               :     :     :              :     +- Scan hive tpcds_sf1_iceberg.web_returns [wr_order_number#91640L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_returns`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [wr_returned_date_sk#91627, wr_returned_time_sk#91628, wr_item_sk#91629, wr_refunded_customer_sk#..., Partition Cols: []]\n               :     :     :              +- *(8) Project [ws_order_number#91668L]\n               :     :     :                 +- *(8) BroadcastHashJoin [ws_order_number#91668L], [ws_order_number#91702L], Inner, BuildRight, NOT (ws_warehouse_sk#91666 = ws_warehouse_sk#91700), false\n               :     :     :                    :- *(8) Filter (isnotnull(ws_order_number#91668L) AND isnotnull(ws_warehouse_sk#91666))\n               :     :     :                    :  +- Scan hive tpcds_sf1_iceberg.web_sales [ws_warehouse_sk#91666, ws_order_number#91668L], HiveTableRelation [`tpcds_sf1_iceberg`.`web_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ws_sold_date_sk#91651, ws_sold_time_sk#91652, ws_ship_date_sk#91653, ws_item_sk#91654, ws_bill_c..., Partition Cols: []]\n               :     :     :                    +- ReusedExchange [ws_warehouse_sk#91700, ws_order_number#91702L], BroadcastExchange HashedRelationBroadcastMode(List(input[1, bigint, false]),false), [id=#122832]\n               :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122869]\n               :     :        +- *(10) Project [d_date_sk#91492]\n               :     :           +- *(10) Filter (((isnotnull(d_date#91494) AND (d_date#91494 >= 11382)) AND (d_date#91494 <= 11442)) AND isnotnull(d_date_sk#91492))\n               :     :              +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#91494, d_date_sk#91492], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#91492, d_date_id#91493, d_date#91494, d_month_seq#91495, d_week_seq#91496, d_quarter_s..., Partition Cols: []]\n               :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122877]\n               :        +- *(11) Project [ca_address_sk#91520]\n               :           +- *(11) Filter ((isnotnull(ca_state#91528) AND (ca_state#91528 = NE)) AND isnotnull(ca_address_sk#91520))\n               :              +- Scan hive tpcds_sf1_iceberg.customer_address [ca_address_sk#91520, ca_state#91528], HiveTableRelation [`tpcds_sf1_iceberg`.`customer_address`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ca_address_sk#91520, ca_address_id#91521, ca_street_number#91522, ca_street_name#91523, ca_stree..., Partition Cols: []]\n               +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#122885]\n                  +- *(12) Project [web_site_sk#91533]\n                     +- *(12) Filter ((isnotnull(web_company_name#91547) AND (web_company_name#91547 = pri)) AND isnotnull(web_site_sk#91533))\n                        +- Scan hive tpcds_sf1_iceberg.web_site [web_company_name#91547, web_site_sk#91533], HiveTableRelation [`tpcds_sf1_iceberg`.`web_site`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [web_site_sk#91533, web_site_id#91534, web_rec_start_date#91535, web_rec_end_date#91536, web_name..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q95"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#123046]\n+- *(4) HashAggregate(keys=[], functions=[partial_count(1)], output=[count#91812L])\n   +- *(4) Project\n      +- *(4) BroadcastHashJoin [ss_store_sk#91748], [s_store_sk#91779], Inner, BuildRight, false\n         :- *(4) Project [ss_store_sk#91748]\n         :  +- *(4) BroadcastHashJoin [ss_sold_time_sk#91742], [t_time_sk#91769], Inner, BuildRight, false\n         :     :- *(4) Project [ss_sold_time_sk#91742, ss_store_sk#91748]\n         :     :  +- *(4) BroadcastHashJoin [ss_hdemo_sk#91746], [hd_demo_sk#91764], Inner, BuildRight, false\n         :     :     :- *(4) Filter ((isnotnull(ss_hdemo_sk#91746) AND isnotnull(ss_sold_time_sk#91742)) AND isnotnull(ss_store_sk#91748))\n         :     :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_time_sk#91742, ss_hdemo_sk#91746, ss_store_sk#91748], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#91741, ss_sold_time_sk#91742, ss_item_sk#91743, ss_customer_sk#91744, ss_cdemo_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#123024]\n         :     :        +- *(1) Project [hd_demo_sk#91764]\n         :     :           +- *(1) Filter ((isnotnull(hd_dep_count#91767) AND (hd_dep_count#91767 = 0)) AND isnotnull(hd_demo_sk#91764))\n         :     :              +- Scan hive tpcds_sf1_iceberg.household_demographics [hd_demo_sk#91764, hd_dep_count#91767], HiveTableRelation [`tpcds_sf1_iceberg`.`household_demographics`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [hd_demo_sk#91764, hd_income_band_sk#91765, hd_buy_potential#91766, hd_dep_count#91767, hd_vehicl..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#123032]\n         :        +- *(2) Project [t_time_sk#91769]\n         :           +- *(2) Filter ((((isnotnull(t_hour#91772) AND isnotnull(t_minute#91773)) AND (t_hour#91772 = 16)) AND (t_minute#91773 >= 30)) AND isnotnull(t_time_sk#91769))\n         :              +- Scan hive tpcds_sf1_iceberg.time_dim [t_hour#91772, t_minute#91773, t_time_sk#91769], HiveTableRelation [`tpcds_sf1_iceberg`.`time_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [t_time_sk#91769, t_time_id#91770, t_time#91771, t_hour#91772, t_minute#91773, t_second#91774, t_..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#123040]\n            +- *(3) Project [s_store_sk#91779]\n               +- *(3) Filter ((isnotnull(s_store_name#91784) AND (s_store_name#91784 = ese)) AND isnotnull(s_store_sk#91779))\n                  +- Scan hive tpcds_sf1_iceberg.store [s_store_name#91784, s_store_sk#91779], HiveTableRelation [`tpcds_sf1_iceberg`.`store`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [s_store_sk#91779, s_store_id#91780, s_rec_start_date#91781, s_rec_end_date#91782, s_closed_date_..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q96"
  }, {
    "errorMsg" : "execute, tree:\nExchange SinglePartition, ENSURE_REQUIREMENTS, [id=#123222]\n+- *(7) HashAggregate(keys=[], functions=[partial_sum(cast(CASE WHEN (isnotnull(customer_sk#91818) AND isnull(customer_sk#91820)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (isnull(customer_sk#91818) AND isnotnull(customer_sk#91820)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (isnotnull(customer_sk#91818) AND isnotnull(customer_sk#91820)) THEN 1 ELSE 0 END as bigint))], output=[sum#91944L, sum#91945L, sum#91946L])\n   +- *(7) Project [customer_sk#91818, customer_sk#91820]\n      +- SortMergeJoin [customer_sk#91818, item_sk#91819], [customer_sk#91820, item_sk#91821], FullOuter\n         :- *(3) Sort [customer_sk#91818 ASC NULLS FIRST, item_sk#91819 ASC NULLS FIRST], false, 0\n         :  +- *(3) HashAggregate(keys=[ss_customer_sk#91825, ss_item_sk#91824], functions=[], output=[customer_sk#91818, item_sk#91819])\n         :     +- Exchange hashpartitioning(ss_customer_sk#91825, ss_item_sk#91824, 200), ENSURE_REQUIREMENTS, [id=#123159]\n         :        +- *(2) HashAggregate(keys=[ss_customer_sk#91825, ss_item_sk#91824], functions=[], output=[ss_customer_sk#91825, ss_item_sk#91824])\n         :           +- *(2) Project [ss_item_sk#91824, ss_customer_sk#91825]\n         :              +- *(2) BroadcastHashJoin [ss_sold_date_sk#91822], [d_date_sk#91845], Inner, BuildRight, false\n         :                 :- *(2) Filter isnotnull(ss_sold_date_sk#91822)\n         :                 :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#91822, ss_item_sk#91824, ss_customer_sk#91825], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#91822, ss_sold_time_sk#91823, ss_item_sk#91824, ss_customer_sk#91825, ss_cdemo_s..., Partition Cols: []]\n         :                 +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#123153]\n         :                    +- *(1) Project [d_date_sk#91845]\n         :                       +- *(1) Filter (((isnotnull(d_month_seq#91848) AND (d_month_seq#91848 >= 1219)) AND (d_month_seq#91848 <= 1230)) AND isnotnull(d_date_sk#91845))\n         :                          +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#91845, d_month_seq#91848], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#91845, d_date_id#91846, d_date#91847, d_month_seq#91848, d_week_seq#91849, d_quarter_s..., Partition Cols: []]\n         +- *(6) Sort [customer_sk#91820 ASC NULLS FIRST, item_sk#91821 ASC NULLS FIRST], false, 0\n            +- *(6) HashAggregate(keys=[cs_bill_customer_sk#91876, cs_item_sk#91888], functions=[], output=[customer_sk#91820, item_sk#91821])\n               +- Exchange hashpartitioning(cs_bill_customer_sk#91876, cs_item_sk#91888, 200), ENSURE_REQUIREMENTS, [id=#123212]\n                  +- *(5) HashAggregate(keys=[cs_bill_customer_sk#91876, cs_item_sk#91888], functions=[], output=[cs_bill_customer_sk#91876, cs_item_sk#91888])\n                     +- *(5) Project [cs_bill_customer_sk#91876, cs_item_sk#91888]\n                        +- *(5) BroadcastHashJoin [cs_sold_date_sk#91873], [d_date_sk#91907], Inner, BuildRight, false\n                           :- *(5) Filter isnotnull(cs_sold_date_sk#91873)\n                           :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#91873, cs_bill_customer_sk#91876, cs_item_sk#91888], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#91873, cs_sold_time_sk#91874, cs_ship_date_sk#91875, cs_bill_customer_sk#91876, ..., Partition Cols: []]\n                           +- ReusedExchange [d_date_sk#91907], BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#123153]\n",
    "iteration" : 3,
    "name" : "q97"
  }, {
    "errorMsg" : "execute, tree:\nExchange rangepartitioning(i_category#91988 ASC NULLS FIRST, i_class#91986 ASC NULLS FIRST, i_item_id#91977 ASC NULLS FIRST, i_item_desc#91980 ASC NULLS FIRST, revenueratio#91952 ASC NULLS FIRST, 200), ENSURE_REQUIREMENTS, [id=#123330]\n+- *(6) Project [i_item_id#91977, i_item_desc#91980, i_category#91988, i_class#91986, i_current_price#91981, itemrevenue#91951, CheckOverflow((promote_precision(cast(CheckOverflow((promote_precision(_w0#92030) * 100.00), DecimalType(21,2), true) as decimal(27,2))) / promote_precision(_we0#92032)), DecimalType(38,17), true) AS revenueratio#91952]\n   +- Window [sum(_w1#92031) windowspecdefinition(i_class#91986, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#92032], [i_class#91986]\n      +- *(5) Sort [i_class#91986 ASC NULLS FIRST], false, 0\n         +- Exchange hashpartitioning(i_class#91986, 200), ENSURE_REQUIREMENTS, [id=#123322]\n            +- *(4) HashAggregate(keys=[i_item_id#91977, i_item_desc#91980, i_category#91988, i_class#91986, i_current_price#91981], functions=[sum(UnscaledValue(ss_ext_sales_price#91968))], output=[i_item_id#91977, i_item_desc#91980, i_category#91988, i_class#91986, i_current_price#91981, itemrevenue#91951, _w0#92030, _w1#92031])\n               +- Exchange hashpartitioning(i_item_id#91977, i_item_desc#91980, i_category#91988, i_class#91986, i_current_price#91981, 200), ENSURE_REQUIREMENTS, [id=#123318]\n                  +- *(3) HashAggregate(keys=[i_item_id#91977, i_item_desc#91980, i_category#91988, i_class#91986, i_current_price#91981], functions=[partial_sum(UnscaledValue(ss_ext_sales_price#91968))], output=[i_item_id#91977, i_item_desc#91980, i_category#91988, i_class#91986, i_current_price#91981, sum#92041L])\n                     +- *(3) Project [ss_ext_sales_price#91968, i_item_id#91977, i_item_desc#91980, i_current_price#91981, i_class#91986, i_category#91988]\n                        +- *(3) BroadcastHashJoin [ss_sold_date_sk#91953], [d_date_sk#91998], Inner, BuildRight, false\n                           :- *(3) Project [ss_sold_date_sk#91953, ss_ext_sales_price#91968, i_item_id#91977, i_item_desc#91980, i_current_price#91981, i_class#91986, i_category#91988]\n                           :  +- *(3) BroadcastHashJoin [ss_item_sk#91955], [i_item_sk#91976], Inner, BuildRight, false\n                           :     :- *(3) Filter (isnotnull(ss_item_sk#91955) AND isnotnull(ss_sold_date_sk#91953))\n                           :     :  +- Scan hive tpcds_sf1_iceberg.store_sales [ss_sold_date_sk#91953, ss_item_sk#91955, ss_ext_sales_price#91968], HiveTableRelation [`tpcds_sf1_iceberg`.`store_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [ss_sold_date_sk#91953, ss_sold_time_sk#91954, ss_item_sk#91955, ss_customer_sk#91956, ss_cdemo_s..., Partition Cols: []]\n                           :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#123304]\n                           :        +- *(1) Filter (i_category#91988 IN (Books,Children,Sports) AND isnotnull(i_item_sk#91976))\n                           :           +- Scan hive tpcds_sf1_iceberg.item [i_item_sk#91976, i_item_id#91977, i_item_desc#91980, i_current_price#91981, i_class#91986, i_category#91988], HiveTableRelation [`tpcds_sf1_iceberg`.`item`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [i_item_sk#91976, i_item_id#91977, i_rec_start_date#91978, i_rec_end_date#91979, i_item_desc#9198..., Partition Cols: []]\n                           +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#123312]\n                              +- *(2) Project [d_date_sk#91998]\n                                 +- *(2) Filter (((isnotnull(d_date#92000) AND (d_date#92000 >= 11391)) AND (d_date#92000 <= 11421)) AND isnotnull(d_date_sk#91998))\n                                    +- Scan hive tpcds_sf1_iceberg.date_dim [d_date#92000, d_date_sk#91998], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#91998, d_date_id#91999, d_date#92000, d_month_seq#92001, d_week_seq#92002, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q98"
  }, {
    "errorMsg" : "execute, tree:\nExchange hashpartitioning(substr(w_warehouse_name#92091, 1, 20)#92185, sm_type#92105, cc_name#92115, 200), ENSURE_REQUIREMENTS, [id=#123460]\n+- *(5) HashAggregate(keys=[substr(w_warehouse_name#92091, 1, 20) AS substr(w_warehouse_name#92091, 1, 20)#92185, sm_type#92105, cc_name#92115], functions=[partial_sum(cast(CASE WHEN ((cs_ship_date_sk#92057 - cs_sold_date_sk#92055) <= 30) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#92057 - cs_sold_date_sk#92055) > 30) AND ((cs_ship_date_sk#92057 - cs_sold_date_sk#92055) <= 60)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#92057 - cs_sold_date_sk#92055) > 60) AND ((cs_ship_date_sk#92057 - cs_sold_date_sk#92055) <= 90)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN (((cs_ship_date_sk#92057 - cs_sold_date_sk#92055) > 90) AND ((cs_ship_date_sk#92057 - cs_sold_date_sk#92055) <= 120)) THEN 1 ELSE 0 END as bigint)), partial_sum(cast(CASE WHEN ((cs_ship_date_sk#92057 - cs_sold_date_sk#92055) > 120) THEN 1 ELSE 0 END as bigint))], output=[substr(w_warehouse_name#92091, 1, 20)#92185, sm_type#92105, cc_name#92115, sum#92191L, sum#92192L, sum#92193L, sum#92194L, sum#92195L])\n   +- *(5) Project [cs_sold_date_sk#92055, cs_ship_date_sk#92057, w_warehouse_name#92091, sm_type#92105, cc_name#92115]\n      +- *(5) BroadcastHashJoin [cs_ship_date_sk#92057], [d_date_sk#92140], Inner, BuildRight, false\n         :- *(5) Project [cs_sold_date_sk#92055, cs_ship_date_sk#92057, w_warehouse_name#92091, sm_type#92105, cc_name#92115]\n         :  +- *(5) BroadcastHashJoin [cs_call_center_sk#92066], [cc_call_center_sk#92109], Inner, BuildRight, false\n         :     :- *(5) Project [cs_sold_date_sk#92055, cs_ship_date_sk#92057, cs_call_center_sk#92066, w_warehouse_name#92091, sm_type#92105]\n         :     :  +- *(5) BroadcastHashJoin [cs_ship_mode_sk#92068], [sm_ship_mode_sk#92103], Inner, BuildRight, false\n         :     :     :- *(5) Project [cs_sold_date_sk#92055, cs_ship_date_sk#92057, cs_call_center_sk#92066, cs_ship_mode_sk#92068, w_warehouse_name#92091]\n         :     :     :  +- *(5) BroadcastHashJoin [cs_warehouse_sk#92069], [w_warehouse_sk#92089], Inner, BuildRight, false\n         :     :     :     :- *(5) Filter (((isnotnull(cs_warehouse_sk#92069) AND isnotnull(cs_ship_mode_sk#92068)) AND isnotnull(cs_call_center_sk#92066)) AND isnotnull(cs_ship_date_sk#92057))\n         :     :     :     :  +- Scan hive tpcds_sf1_iceberg.catalog_sales [cs_sold_date_sk#92055, cs_ship_date_sk#92057, cs_call_center_sk#92066, cs_ship_mode_sk#92068, cs_warehouse_sk#92069], HiveTableRelation [`tpcds_sf1_iceberg`.`catalog_sales`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cs_sold_date_sk#92055, cs_sold_time_sk#92056, cs_ship_date_sk#92057, cs_bill_customer_sk#92058, ..., Partition Cols: []]\n         :     :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#123432]\n         :     :     :        +- *(1) Filter isnotnull(w_warehouse_sk#92089)\n         :     :     :           +- Scan hive tpcds_sf1_iceberg.warehouse [w_warehouse_sk#92089, w_warehouse_name#92091], HiveTableRelation [`tpcds_sf1_iceberg`.`warehouse`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [w_warehouse_sk#92089, w_warehouse_id#92090, w_warehouse_name#92091, w_warehouse_sq_ft#92092, w_s..., Partition Cols: []]\n         :     :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#123439]\n         :     :        +- *(2) Filter isnotnull(sm_ship_mode_sk#92103)\n         :     :           +- Scan hive tpcds_sf1_iceberg.ship_mode [sm_ship_mode_sk#92103, sm_type#92105], HiveTableRelation [`tpcds_sf1_iceberg`.`ship_mode`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [sm_ship_mode_sk#92103, sm_ship_mode_id#92104, sm_type#92105, sm_code#92106, sm_carrier#92107, sm..., Partition Cols: []]\n         :     +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [id=#123446]\n         :        +- *(3) Filter isnotnull(cc_call_center_sk#92109)\n         :           +- Scan hive tpcds_sf1_iceberg.call_center [cc_call_center_sk#92109, cc_name#92115], HiveTableRelation [`tpcds_sf1_iceberg`.`call_center`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [cc_call_center_sk#92109, cc_call_center_id#92110, cc_rec_start_date#92111, cc_rec_end_date#92112..., Partition Cols: []]\n         +- BroadcastExchange HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [id=#123454]\n            +- *(4) Project [d_date_sk#92140]\n               +- *(4) Filter (((isnotnull(d_month_seq#92143) AND (d_month_seq#92143 >= 1205)) AND (d_month_seq#92143 <= 1216)) AND isnotnull(d_date_sk#92140))\n                  +- Scan hive tpcds_sf1_iceberg.date_dim [d_date_sk#92140, d_month_seq#92143], HiveTableRelation [`tpcds_sf1_iceberg`.`date_dim`, org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe, Data Cols: [d_date_sk#92140, d_date_id#92141, d_date#92142, d_month_seq#92143, d_week_seq#92144, d_quarter_s..., Partition Cols: []]\n",
    "iteration" : 3,
    "name" : "q99"
  } ],
  "sparkEnvInfo" : {
    "classpathEntries" : {
      "//fksdp-mhosy-3nug-2a5d-systemlibs/libraries/hive/jars/hadoop-lzo-0.6.0.2.4.0.0-169.jar" : "System Classpath",
      "/etc/hadoop/conf/" : "System Classpath",
      "/usr/share/fk-bigfoot-4mc/lib/hadoop-4mc-1.1.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/conf/" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/HikariCP-2.5.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/JLargeArrays-1.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/JTransforms-3.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/RoaringBitmap-0.9.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/ST4-4.0.4.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/accessors-smart-1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/activation-1.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/aircompressor-0.10.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/algebra_2.12-2.0.0-M2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/antlr-runtime-3.5.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/antlr4-runtime-4.8-1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/aopalliance-1.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/aopalliance-repackaged-2.6.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/arpack_combined_all-0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/arrow-format-2.0.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/arrow-memory-core-2.0.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/arrow-memory-netty-2.0.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/arrow-vector-2.0.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/audience-annotations-0.5.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/avro-1.8.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/avro-ipc-1.8.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/avro-mapred-1.8.2-hadoop2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/bcpkix-jdk15on-1.60.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/bcprov-jdk15on-1.60.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/bonecp-0.8.0.RELEASE.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/breeze-macros_2.12-1.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/breeze_2.12-1.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/cats-kernel_2.12-2.0.0-M4.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/chill-java-0.9.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/chill_2.12-0.9.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-beanutils-1.9.4.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-cli-1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-codec-1.10.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-collections-3.2.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-compiler-3.0.16.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-compress-1.20.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-configuration2-2.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-crypto-1.1.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-daemon-1.0.13.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-dbcp-1.4.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-httpclient-3.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-io-2.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-lang-2.6.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-lang3-3.10.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-logging-1.1.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-math3-3.4.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-net-3.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-pool-1.5.4.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/commons-text-1.6.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/compress-lzf-1.0.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/core-1.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/curator-client-2.13.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/curator-framework-2.13.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/curator-recipes-2.13.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/datanucleus-api-jdo-4.2.4.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/datanucleus-core-4.1.17.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/datanucleus-rdbms-4.1.19.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/derby-10.12.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/dnsjava-2.1.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/dropwizard-metrics-hadoop-metrics2-reporter-0.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/ehcache-3.3.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/flatbuffers-java-1.9.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/gcs-connector-hadoop3-2.2.7-shaded.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/geronimo-jcache_1.0_spec-1.0-alpha-1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/gson-2.2.4.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/guava-27.0-jre.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/guice-4.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/guice-servlet-4.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-annotations-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-auth-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-client-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-common-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-hdfs-client-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-mapreduce-client-common-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-mapreduce-client-core-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-mapreduce-client-jobclient-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-yarn-api-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-yarn-client-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-yarn-common-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-yarn-registry-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-yarn-server-common-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hadoop-yarn-server-web-proxy-3.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-beeline-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-cli-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-common-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-exec-2.3.7-core.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-jdbc-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-llap-common-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-metastore-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-serde-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-service-rpc-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-shims-0.23-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-shims-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-shims-common-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-shims-scheduler-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-storage-api-2.7.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hive-vector-code-gen-2.3.7.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hk2-api-2.6.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hk2-locator-2.6.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hk2-utils-2.6.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/htrace-core4-4.1.0-incubating.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/httpclient-4.4.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/httpcore-4.4.12.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/hudi-spark3.1-bundle_2.12-0.13.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/iceberg-hive-runtime-1.2.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/iceberg-spark-runtime-3.1_2.12-1.2.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/istack-commons-runtime-3.0.8.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/ivy-2.4.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-annotations-2.10.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-core-2.10.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-core-asl-1.9.13.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-databind-2.10.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-jaxrs-base-2.9.8.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-jaxrs-json-provider-2.9.8.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-mapper-asl-1.9.13.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-module-jaxb-annotations-2.10.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-module-paranamer-2.10.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jackson-module-scala_2.12-2.10.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jakarta.activation-api-1.2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jakarta.annotation-api-1.3.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jakarta.inject-2.6.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jakarta.servlet-api-4.0.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jakarta.validation-api-2.0.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jakarta.ws.rs-api-2.1.6.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jakarta.xml.bind-api-2.3.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/janino-3.0.16.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/javassist-3.25.0-GA.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/javax.inject-1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/javax.jdo-3.2.0-m3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/javolution-5.5.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jaxb-api-2.2.11.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jaxb-runtime-2.3.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jcip-annotations-1.0-1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jcl-over-slf4j-1.7.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jdo-api-3.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jersey-client-2.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jersey-common-2.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jersey-container-servlet-2.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jersey-container-servlet-core-2.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jersey-hk2-2.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jersey-media-jaxb-2.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jersey-server-2.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jline-2.14.6.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/joda-time-2.10.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jodd-core-3.5.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jpam-1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/json-1.8.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/json-smart-2.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/json4s-ast_2.12-3.7.0-M5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/json4s-core_2.12-3.7.0-M5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/json4s-jackson_2.12-3.7.0-M5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/json4s-scalap_2.12-3.7.0-M5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jsp-api-2.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jsr305-3.0.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jta-1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/jul-to-slf4j-1.7.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-admin-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-client-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-common-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-core-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-crypto-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-identity-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-server-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-simplekdc-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerb-util-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerby-asn1-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerby-config-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerby-pkix-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerby-util-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kerby-xdr-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/kryo-shaded-4.0.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/leveldbjni-all-1.8.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/libfb303-0.9.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/libthrift-0.12.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/log4j-1.2.17.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/lz4-java-1.7.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/machinist_2.12-0.6.8.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/macro-compat_2.12-1.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/metrics-core-4.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/metrics-graphite-4.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/metrics-jmx-4.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/metrics-json-4.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/metrics-jvm-4.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/minlog-1.3.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/netty-all-4.1.51.Final.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/nimbus-jose-jwt-4.41.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/objenesis-2.6.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/okhttp-2.7.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/okio-1.14.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/opencsv-2.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/orc-core-1.5.12.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/orc-mapreduce-1.5.12.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/orc-shims-1.5.12.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/oro-2.0.8.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/osgi-resource-locator-1.0.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/paranamer-2.8.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/parquet-column-1.10.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/parquet-common-1.10.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/parquet-encoding-1.10.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/parquet-format-2.4.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/parquet-hadoop-1.10.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/parquet-jackson-1.10.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/protobuf-java-2.5.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/py4j-0.10.9.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/pyrolite-4.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/re2j-1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/scala-collection-compat_2.12-2.1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/scala-compiler-2.12.10.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/scala-library-2.12.10.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/scala-parser-combinators_2.12-1.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/scala-reflect-2.12.10.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/scala-xml_2.12-1.2.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/shapeless_2.12-2.3.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/shims-0.9.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/slf4j-api-1.7.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/slf4j-log4j12-1.7.30.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/snappy-java-1.1.8.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-catalyst_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-core_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-graphx_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-hive-thriftserver_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-hive_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-kvstore_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-launcher_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-mllib-local_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-mllib_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-network-common_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-network-shuffle_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-repl_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-sketch_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-sql_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-streaming_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-tags_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-unsafe_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spark-yarn_2.12-3.1.2.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spire-macros_2.12-0.17.0-M1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spire-platform_2.12-0.17.0-M1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spire-util_2.12-0.17.0-M1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/spire_2.12-0.17.0-M1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/stax-api-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/stax2-api-3.1.4.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/stream-2.9.6.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/super-csv-2.2.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/threeten-extra-1.5.0.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/token-provider-1.0.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/transaction-api-1.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/univocity-parsers-2.9.1.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/velocity-1.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/woodstox-core-5.0.3.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/xbean-asm7-shaded-4.15.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/xz-1.5.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/zookeeper-3.4.14.jar" : "System Classpath",
      "/var/lib/fk-pf-spark3/jars/zstd-jni-1.4.8-1.jar" : "System Classpath",
      "gs" : "System Classpath"
    },
    "hadoopProps" : {
      "adl.feature.ownerandgroup.enableupn" : "false",
      "adl.http.timeout" : "-1",
      "ambari.hive.db.schema.name" : "hive",
      "datanucleus.cache.level2.type" : "none",
      "datanucleus.connectionPool.maxPoolSize" : "10",
      "datanucleus.schema.autoCreateTables" : "true",
      "dfs.blocksize" : "536870912",
      "dfs.bytes-per-checksum" : "512",
      "dfs.client.failover.proxy.provider.pluto" : "org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider",
      "dfs.client.failover.random.order" : "true",
      "dfs.client.read.shortcircuit" : "true",
      "dfs.client.read.shortcircuit.streams.cache.size" : "4096",
      "dfs.domain.socket.path" : "/var/lib/hadoop-hdfs/dn_socket",
      "dfs.ha.fencing.ssh.connect-timeout" : "30000",
      "dfs.ha.namenodes.pluto" : "nn1,nn2",
      "dfs.namenode.http-address.pluto.nn1" : "fks-fdp-galaxy-pluto-nn-0001.c.fks-fdp-galaxy.internal:50070",
      "dfs.namenode.http-address.pluto.nn2" : "fks-fdp-galaxy-pluto-nn-0002.c.fks-fdp-galaxy.internal:50070",
      "dfs.namenode.https-address.pluto.nn1" : "fks-fdp-galaxy-pluto-nn-0001.c.fks-fdp-galaxy.internal:50470",
      "dfs.namenode.https-address.pluto.nn2" : "fks-fdp-galaxy-pluto-nn-0002.c.fks-fdp-galaxy.internal:50470",
      "dfs.namenode.rpc-address.pluto.nn1" : "fks-fdp-galaxy-pluto-nn-0001.c.fks-fdp-galaxy.internal:8020",
      "dfs.namenode.rpc-address.pluto.nn2" : "fks-fdp-galaxy-pluto-nn-0002.c.fks-fdp-galaxy.internal:8020",
      "dfs.nameservices" : "pluto",
      "dfs.replication" : "3",
      "fdp.default.tier" : "Regular",
      "fdp.ironbank.url" : "http://console.fdp-ironbank-prod.fkcloud.in/",
      "fdp.orgqueue.cache.expire" : "300",
      "fdp.orgqueue.cache.size" : "100",
      "fdp.orgqueue.defaultQueue" : "adhoc",
      "fdp.orgqueue.gringotts.clientId" : "QAAS",
      "fdp.orgqueue.gringotts.clientSecret" : "*********(redacted)",
      "fdp.orgqueue.gringotts.url" : "http://gringotts.fdp-gringotts-prod.fkcloud.in/billingOrg/user",
      "fdp.orgqueue.queueNotFound.errorMessage" : "Queue mapping not found",
      "fdp.orgqueue.validInitiators" : "BADGER,QAAS,LQE,SUPERBI",
      "fdp.tier.expression" : "Regular",
      "fdp.tier.lqe.lock.wait.time.secs" : "30",
      "fdp.tier.lqe.max.sessions" : "1",
      "file.blocksize" : "67108864",
      "file.bytes-per-checksum" : "512",
      "file.client-write-packet-size" : "65536",
      "file.replication" : "1",
      "file.stream-buffer-size" : "4096",
      "fs.AbstractFileSystem.abfs.impl" : "org.apache.hadoop.fs.azurebfs.Abfs",
      "fs.AbstractFileSystem.abfss.impl" : "org.apache.hadoop.fs.azurebfs.Abfss",
      "fs.AbstractFileSystem.adl.impl" : "org.apache.hadoop.fs.adl.Adl",
      "fs.AbstractFileSystem.file.impl" : "org.apache.hadoop.fs.local.LocalFs",
      "fs.AbstractFileSystem.ftp.impl" : "org.apache.hadoop.fs.ftp.FtpFs",
      "fs.AbstractFileSystem.gs.impl" : "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFS",
      "fs.AbstractFileSystem.har.impl" : "org.apache.hadoop.fs.HarFs",
      "fs.AbstractFileSystem.hdfs.impl" : "org.apache.hadoop.fs.Hdfs",
      "fs.AbstractFileSystem.s3a.impl" : "org.apache.hadoop.fs.s3a.S3A",
      "fs.AbstractFileSystem.swebhdfs.impl" : "org.apache.hadoop.fs.SWebHdfs",
      "fs.AbstractFileSystem.viewfs.impl" : "org.apache.hadoop.fs.viewfs.ViewFs",
      "fs.AbstractFileSystem.wasb.impl" : "org.apache.hadoop.fs.azure.Wasb",
      "fs.AbstractFileSystem.wasbs.impl" : "org.apache.hadoop.fs.azure.Wasbs",
      "fs.AbstractFileSystem.webhdfs.impl" : "org.apache.hadoop.fs.WebHdfs",
      "fs.abfs.impl" : "org.apache.hadoop.fs.azurebfs.AzureBlobFileSystem",
      "fs.abfss.impl" : "org.apache.hadoop.fs.azurebfs.SecureAzureBlobFileSystem",
      "fs.adl.impl" : "org.apache.hadoop.fs.adl.AdlFileSystem",
      "fs.adl.oauth2.access.token.provider.type" : "*********(redacted)",
      "fs.automatic.close" : "true",
      "fs.azure.authorization" : "false",
      "fs.azure.authorization.caching.enable" : "true",
      "fs.azure.local.sas.key.mode" : "false",
      "fs.azure.sas.expiry.period" : "90d",
      "fs.azure.saskey.usecontainersaskeyforallaccess" : "true",
      "fs.azure.secure.mode" : "false",
      "fs.azure.user.agent.prefix" : "unknown",
      "fs.client.resolve.remote.symlinks" : "true",
      "fs.client.resolve.topology.enabled" : "false",
      "fs.defaultFS" : "hdfs://pluto",
      "fs.df.interval" : "60000",
      "fs.du.interval" : "600000",
      "fs.ftp.data.connection.mode" : "ACTIVE_LOCAL_DATA_CONNECTION_MODE",
      "fs.ftp.host" : "0.0.0.0",
      "fs.ftp.host.port" : "21",
      "fs.ftp.impl" : "org.apache.hadoop.fs.ftp.FTPFileSystem",
      "fs.ftp.transfer.mode" : "BLOCK_TRANSFER_MODE",
      "fs.gs.auth.service.account.enable" : "true",
      "fs.gs.batch.threads" : "60",
      "fs.gs.impl" : "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem",
      "fs.gs.max.requests.per.batch" : "300",
      "fs.gs.reported.permissions" : "777",
      "fs.har.impl.disable.cache" : "true",
      "fs.permissions.umask-mode" : "022",
      "fs.s3a.assumed.role.credentials.provider" : "org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider",
      "fs.s3a.assumed.role.session.duration" : "30m",
      "fs.s3a.assumed.role.sts.endpoint.region" : "us-west-1",
      "fs.s3a.attempts.maximum" : "20",
      "fs.s3a.block.size" : "32M",
      "fs.s3a.buffer.dir" : "${hadoop.tmp.dir}/s3a",
      "fs.s3a.change.detection.mode" : "server",
      "fs.s3a.change.detection.source" : "etag",
      "fs.s3a.change.detection.version.required" : "true",
      "fs.s3a.committer.magic.enabled" : "false",
      "fs.s3a.committer.name" : "file",
      "fs.s3a.committer.staging.abort.pending.uploads" : "true",
      "fs.s3a.committer.staging.conflict-mode" : "fail",
      "fs.s3a.committer.staging.tmp.path" : "tmp/staging",
      "fs.s3a.committer.staging.unique-filenames" : "true",
      "fs.s3a.committer.threads" : "8",
      "fs.s3a.connection.establish.timeout" : "5000",
      "fs.s3a.connection.maximum" : "15",
      "fs.s3a.connection.ssl.enabled" : "true",
      "fs.s3a.connection.timeout" : "200000",
      "fs.s3a.etag.checksum.enabled" : "false",
      "fs.s3a.fast.upload.active.blocks" : "4",
      "fs.s3a.fast.upload.buffer" : "disk",
      "fs.s3a.impl" : "org.apache.hadoop.fs.s3a.S3AFileSystem",
      "fs.s3a.list.version" : "2",
      "fs.s3a.max.total.tasks" : "5",
      "fs.s3a.metadatastore.authoritative" : "false",
      "fs.s3a.metadatastore.impl" : "org.apache.hadoop.fs.s3a.s3guard.NullMetadataStore",
      "fs.s3a.multiobjectdelete.enable" : "true",
      "fs.s3a.multipart.purge" : "false",
      "fs.s3a.multipart.purge.age" : "86400",
      "fs.s3a.multipart.size" : "100M",
      "fs.s3a.multipart.threshold" : "2147483647",
      "fs.s3a.paging.maximum" : "5000",
      "fs.s3a.path.style.access" : "false",
      "fs.s3a.readahead.range" : "64K",
      "fs.s3a.retry.interval" : "500ms",
      "fs.s3a.retry.limit" : "${fs.s3a.attempts.maximum}",
      "fs.s3a.retry.throttle.interval" : "1000ms",
      "fs.s3a.retry.throttle.limit" : "${fs.s3a.attempts.maximum}",
      "fs.s3a.s3guard.cli.prune.age" : "86400000",
      "fs.s3a.s3guard.ddb.background.sleep" : "25ms",
      "fs.s3a.s3guard.ddb.max.retries" : "9",
      "fs.s3a.s3guard.ddb.table.capacity.read" : "500",
      "fs.s3a.s3guard.ddb.table.capacity.write" : "100",
      "fs.s3a.s3guard.ddb.table.create" : "false",
      "fs.s3a.s3guard.ddb.throttle.retry.interval" : "100ms",
      "fs.s3a.socket.recv.buffer" : "8192",
      "fs.s3a.socket.send.buffer" : "8192",
      "fs.s3a.threads.keepalivetime" : "60",
      "fs.s3a.threads.max" : "10",
      "fs.swift.impl" : "org.apache.hadoop.fs.swift.snative.SwiftNativeFileSystem",
      "fs.trash.checkpoint.interval" : "0",
      "fs.trash.interval" : "0",
      "fs.viewfs.rename.strategy" : "SAME_MOUNTPOINT",
      "fs.wasb.impl" : "org.apache.hadoop.fs.azure.NativeAzureFileSystem",
      "fs.wasbs.impl" : "org.apache.hadoop.fs.azure.NativeAzureFileSystem$Secure",
      "ftp.blocksize" : "67108864",
      "ftp.bytes-per-checksum" : "512",
      "ftp.client-write-packet-size" : "65536",
      "ftp.replication" : "3",
      "ftp.stream-buffer-size" : "4096",
      "google.cloud.auth.service.account.enable" : "true",
      "ha.failover-controller.cli-check.rpc-timeout.ms" : "20000",
      "ha.failover-controller.graceful-fence.connection.retries" : "1",
      "ha.failover-controller.graceful-fence.rpc-timeout.ms" : "5000",
      "ha.failover-controller.new-active.rpc-timeout.ms" : "60000",
      "ha.health-monitor.check-interval.ms" : "1000",
      "ha.health-monitor.connect-retry-interval.ms" : "1000",
      "ha.health-monitor.rpc-timeout.ms" : "45000",
      "ha.health-monitor.sleep-after-disconnect.ms" : "1000",
      "ha.zookeeper.acl" : "world:anyone:rwcda",
      "ha.zookeeper.parent-znode" : "/hadoop-ha",
      "ha.zookeeper.session-timeout.ms" : "10000",
      "hadoop.caller.context.enabled" : "false",
      "hadoop.caller.context.max.size" : "128",
      "hadoop.caller.context.signature.max.size" : "40",
      "hadoop.common.configuration.version" : "3.0.0",
      "hadoop.http.authentication.kerberos.keytab" : "${user.home}/hadoop.keytab",
      "hadoop.http.authentication.kerberos.principal" : "HTTP/_HOST@LOCALHOST",
      "hadoop.http.authentication.signature.secret.file" : "*********(redacted)",
      "hadoop.http.authentication.simple.anonymous.allowed" : "true",
      "hadoop.http.authentication.token.validity" : "*********(redacted)",
      "hadoop.http.authentication.type" : "simple",
      "hadoop.http.cross-origin.allowed-headers" : "X-Requested-With,Content-Type,Accept,Origin",
      "hadoop.http.cross-origin.allowed-methods" : "GET,POST,HEAD",
      "hadoop.http.cross-origin.allowed-origins" : "*",
      "hadoop.http.cross-origin.enabled" : "false",
      "hadoop.http.cross-origin.max-age" : "1800",
      "hadoop.http.filter.initializers" : "org.apache.hadoop.http.lib.StaticUserWebFilter",
      "hadoop.http.logs.enabled" : "true",
      "hadoop.http.staticuser.user" : "dr.who",
      "hadoop.jetty.logs.serve.aliases" : "true",
      "hadoop.kerberos.kinit.command" : "kinit",
      "hadoop.kerberos.min.seconds.before.relogin" : "60",
      "hadoop.proxyuser.hive.groups" : "*",
      "hadoop.proxyuser.hive.hosts" : "*",
      "hadoop.registry.jaas.context" : "Client",
      "hadoop.registry.secure" : "false",
      "hadoop.registry.system.acls" : "sasl:yarn@, sasl:mapred@, sasl:hdfs@",
      "hadoop.registry.zk.connection.timeout.ms" : "15000",
      "hadoop.registry.zk.quorum" : "localhost:2181",
      "hadoop.registry.zk.retry.ceiling.ms" : "60000",
      "hadoop.registry.zk.retry.interval.ms" : "1000",
      "hadoop.registry.zk.retry.times" : "5",
      "hadoop.registry.zk.root" : "/registry",
      "hadoop.registry.zk.session.timeout.ms" : "60000",
      "hadoop.rpc.protection" : "authentication",
      "hadoop.rpc.socket.factory.class.default" : "org.apache.hadoop.net.StandardSocketFactory",
      "hadoop.security.auth_to_local" : "DEFAULT",
      "hadoop.security.auth_to_local.mechanism" : "hadoop",
      "hadoop.security.authentication" : "simple",
      "hadoop.security.authorization" : "false",
      "hadoop.security.credential.clear-text-fallback" : "true",
      "hadoop.security.crypto.buffer.size" : "8192",
      "hadoop.security.crypto.cipher.suite" : "AES/CTR/NoPadding",
      "hadoop.security.crypto.codec.classes.aes.ctr.nopadding" : "org.apache.hadoop.crypto.OpensslAesCtrCryptoCodec, org.apache.hadoop.crypto.JceAesCtrCryptoCodec",
      "hadoop.security.dns.log-slow-lookups.enabled" : "false",
      "hadoop.security.dns.log-slow-lookups.threshold.ms" : "1000",
      "hadoop.security.group.mapping" : "org.apache.hadoop.security.JniBasedUnixGroupsMappingWithFallback",
      "hadoop.security.group.mapping.ldap.connection.timeout.ms" : "60000",
      "hadoop.security.group.mapping.ldap.conversion.rule" : "none",
      "hadoop.security.group.mapping.ldap.directory.search.timeout" : "10000",
      "hadoop.security.group.mapping.ldap.num.attempts" : "3",
      "hadoop.security.group.mapping.ldap.num.attempts.before.failover" : "3",
      "hadoop.security.group.mapping.ldap.posix.attr.gid.name" : "gidNumber",
      "hadoop.security.group.mapping.ldap.posix.attr.uid.name" : "uidNumber",
      "hadoop.security.group.mapping.ldap.read.timeout.ms" : "60000",
      "hadoop.security.group.mapping.ldap.search.attr.group.name" : "cn",
      "hadoop.security.group.mapping.ldap.search.attr.member" : "member",
      "hadoop.security.group.mapping.ldap.search.filter.group" : "(objectClass=group)",
      "hadoop.security.group.mapping.ldap.search.filter.user" : "(&(objectClass=user)(sAMAccountName={0}))",
      "hadoop.security.group.mapping.ldap.search.group.hierarchy.levels" : "0",
      "hadoop.security.group.mapping.ldap.ssl" : "false",
      "hadoop.security.group.mapping.providers.combined" : "true",
      "hadoop.security.groups.cache.background.reload" : "false",
      "hadoop.security.groups.cache.background.reload.threads" : "3",
      "hadoop.security.groups.cache.secs" : "300",
      "hadoop.security.groups.cache.warn.after.ms" : "5000",
      "hadoop.security.groups.negative-cache.secs" : "30",
      "hadoop.security.groups.shell.command.timeout" : "0s",
      "hadoop.security.instrumentation.requires.admin" : "false",
      "hadoop.security.java.secure.random.algorithm" : "SHA1PRNG",
      "hadoop.security.key.default.bitlength" : "128",
      "hadoop.security.key.default.cipher" : "AES/CTR/NoPadding",
      "hadoop.security.kms.client.authentication.retry-count" : "1",
      "hadoop.security.kms.client.encrypted.key.cache.expiry" : "43200000",
      "hadoop.security.kms.client.encrypted.key.cache.low-watermark" : "0.3f",
      "hadoop.security.kms.client.encrypted.key.cache.num.refill.threads" : "2",
      "hadoop.security.kms.client.encrypted.key.cache.size" : "500",
      "hadoop.security.kms.client.failover.sleep.base.millis" : "100",
      "hadoop.security.kms.client.failover.sleep.max.millis" : "2000",
      "hadoop.security.kms.client.timeout" : "60",
      "hadoop.security.random.device.file.path" : "/dev/urandom",
      "hadoop.security.sensitive-config-keys" : "*********(redacted)",
      "hadoop.security.uid.cache.secs" : "14400",
      "hadoop.service.shutdown.timeout" : "30s",
      "hadoop.shell.missing.defaultFs.warning" : "false",
      "hadoop.shell.safely.delete.limit.num.files" : "100",
      "hadoop.ssl.client.conf" : "ssl-client.xml",
      "hadoop.ssl.enabled" : "false",
      "hadoop.ssl.enabled.protocols" : "TLSv1,SSLv2Hello,TLSv1.1,TLSv1.2",
      "hadoop.ssl.hostname.verifier" : "DEFAULT",
      "hadoop.ssl.keystores.factory.class" : "org.apache.hadoop.security.ssl.FileBasedKeyStoresFactory",
      "hadoop.ssl.require.client.cert" : "false",
      "hadoop.ssl.server.conf" : "ssl-server.xml",
      "hadoop.system.tags" : "YARN,HDFS,NAMENODE,DATANODE,REQUIRED,SECURITY,KERBEROS,PERFORMANCE,CLIENT\n      ,SERVER,DEBUG,DEPRECATED,COMMON,OPTIONAL",
      "hadoop.tags.system" : "YARN,HDFS,NAMENODE,DATANODE,REQUIRED,SECURITY,KERBEROS,PERFORMANCE,CLIENT\n      ,SERVER,DEBUG,DEPRECATED,COMMON,OPTIONAL",
      "hadoop.tmp.dir" : "/tmp/hadoop-${user.name}",
      "hadoop.user.group.static.mapping.overrides" : "dr.who=;",
      "hadoop.util.hash.type" : "murmur",
      "hadoop.workaround.non.threadsafe.getpwuid" : "true",
      "hadoop.zk.acl" : "world:anyone:rwcda",
      "hadoop.zk.num-retries" : "1000",
      "hadoop.zk.retry-interval-ms" : "1000",
      "hadoop.zk.timeout-ms" : "10000",
      "hbase.zookeeper.quorum" : "fks-fdp-galaxy-pluto-zkjn-0001.c.fks-fdp-galaxy.internal:2181,fks-fdp-galaxy-pluto-zkjn-0002.c.fks-fdp-galaxy.internal:2181,fks-fdp-galaxy-pluto-zkjn-0003.c.fks-fdp-galaxy.internal:2181",
      "hive.auto.convert.join" : "false",
      "hive.auto.convert.join.noconditionaltask" : "false",
      "hive.auto.convert.join.noconditionaltask.size" : "134217728",
      "hive.auto.convert.sortmerge.join" : "false",
      "hive.auto.convert.sortmerge.join.noconditionaltask" : "false",
      "hive.auto.convert.sortmerge.join.to.mapjoin" : "false",
      "hive.cbo.enable" : "true",
      "hive.cli.print.header" : "false",
      "hive.cluster.delegation.token.store.class" : "*********(redacted)",
      "hive.cluster.delegation.token.store.zookeeper.connectString" : "*********(redacted)",
      "hive.cluster.delegation.token.store.zookeeper.znode" : "*********(redacted)",
      "hive.compactor.abortedtxn.threshold" : "1000",
      "hive.compactor.check.interval" : "300L",
      "hive.compactor.delta.num.threshold" : "10",
      "hive.compactor.delta.pct.threshold" : "0.1f",
      "hive.compactor.initiator.on" : "false",
      "hive.compactor.worker.threads" : "0",
      "hive.compactor.worker.timeout" : "86400L",
      "hive.compute.query.using.stats" : "false",
      "hive.conf.restricted.list" : "hive.security.authenticator.manager,hive.security.authorization.manager,hive.users.in.admin.role",
      "hive.convert.join.bucket.mapjoin.tez" : "true",
      "hive.default.fileformat.managed" : "ORC",
      "hive.driver.parallel.compilation" : "true",
      "hive.enforce.bucketing" : "true",
      "hive.enforce.sorting" : "true",
      "hive.enforce.sortmergebucketmapjoin" : "true",
      "hive.exec.compress.intermediate" : "true",
      "hive.exec.compress.output" : "false",
      "hive.exec.dynamic.partition" : "true",
      "hive.exec.dynamic.partition.mode" : "nonstrict",
      "hive.exec.failure.hooks" : "com.flipkart.fdp.hive.hooks.EnforceSingleQueryPostExecHook",
      "hive.exec.max.created.files" : "100000",
      "hive.exec.max.dynamic.partitions" : "1000000",
      "hive.exec.max.dynamic.partitions.pernode" : "1000000",
      "hive.exec.orc.compression.strategy" : "SPEED",
      "hive.exec.orc.default.compress" : "ZLIB",
      "hive.exec.orc.default.stripe.size" : "67108864",
      "hive.exec.parallel" : "true",
      "hive.exec.parallel.thread.number" : "8",
      "hive.exec.post.hooks" : "org.apache.hadoop.hive.ql.hooks.LineageLogger,com.flipkart.fdp.hive.hooks.EnforceSingleQueryPostExecHook",
      "hive.exec.pre.hooks" : "com.flipkart.fdp.hive.hooks.EnforceSingleQueryPreExecHook",
      "hive.exec.reducers.bytes.per.reducer" : "134217728",
      "hive.exec.reducers.max" : "250",
      "hive.exec.scratchdir" : "gs://stage-hive-metastore-pluto/user/hiveexternaldir",
      "hive.exec.submit.local.task.via.child" : "true",
      "hive.exec.submitviachild" : "false",
      "hive.execution.engine" : "tez",
      "hive.fetch.task.aggr" : "true",
      "hive.fetch.task.conversion" : "more",
      "hive.fetch.task.conversion.threshold" : "1073741824",
      "hive.fileformat.managed" : "ORC",
      "hive.heapsize" : "2048",
      "hive.input.format" : "org.apache.hadoop.hive.ql.io.CombineHiveInputFormat",
      "hive.limit.optimize.enable" : "true",
      "hive.limit.pushdown.memory.usage" : "0.2",
      "hive.map.aggr" : "true",
      "hive.map.aggr.hash.force.flush.memory.threshold" : "0.5",
      "hive.map.aggr.hash.min.reduction" : "0.5",
      "hive.map.aggr.hash.percentmemory" : "0.5",
      "hive.mapjoin.bucket.cache.size" : "1000",
      "hive.mapjoin.localtask.max.memory.usage" : "0.4",
      "hive.mapjoin.optimized.hashtable" : "false",
      "hive.mapred.reduce.tasks.speculative.execution" : "false",
      "hive.merge.mapfiles" : "true",
      "hive.merge.mapredfiles" : "false",
      "hive.merge.orcfile.stripe.level" : "true",
      "hive.merge.rcfile.block.level" : "true",
      "hive.merge.size.per.task" : "256000000",
      "hive.merge.smallfiles.avgsize" : "16000000",
      "hive.merge.tezfiles" : "true",
      "hive.metastore.authorization.storage.checks" : "false",
      "hive.metastore.cache.pinobjtypes" : "Table,Database,Type,FieldSchema,Order",
      "hive.metastore.client.connect.retry.delay" : "5s",
      "hive.metastore.client.scheme.handlers" : "com.flipkart.fdp.hive.metastore.ELBSchemeHandler",
      "hive.metastore.client.socket.timeout" : "1800s",
      "hive.metastore.connect.retries" : "24",
      "hive.metastore.execute.setugi" : "true",
      "hive.metastore.failure.retries" : "24",
      "hive.metastore.fshandler.threads" : "15",
      "hive.metastore.kerberos.keytab.file" : "/etc/security/keytabs/hive.service.keytab",
      "hive.metastore.kerberos.principal" : "hive/_HOST@EXAMPLE.COM",
      "hive.metastore.limit.partition.request" : "-1",
      "hive.metastore.metrics.enabled" : "true",
      "hive.metastore.pre.event.listeners" : "org.apache.hadoop.hive.ql.security.authorization.AuthorizationPreEventListener",
      "hive.metastore.sasl.enabled" : "false",
      "hive.metastore.server.max.threads" : "100000",
      "hive.metastore.uris" : "thrift://10.116.17.2:9083",
      "hive.metastore.warehouse.dir" : "gs://stage-hive-metastore-pluto/apps/hive/warehouse",
      "hive.msck.path.validation" : "ignore",
      "hive.msck.repair.batch.size" : "0",
      "hive.optimize.bucketmapjoin" : "true",
      "hive.optimize.bucketmapjoin.sortedmerge" : "true",
      "hive.optimize.constant.propagation" : "true",
      "hive.optimize.index.filter" : "true",
      "hive.optimize.mapjoin.mapreduce" : "true",
      "hive.optimize.metadataonly" : "true",
      "hive.optimize.null.scan" : "true",
      "hive.optimize.reducededuplication" : "true",
      "hive.optimize.reducededuplication.min.reducer" : "4",
      "hive.optimize.sort.dynamic.partition" : "true",
      "hive.orc.compute.splits.num.threads" : "10",
      "hive.orc.splits.include.file.footer" : "false",
      "hive.prewarm.enabled" : "false",
      "hive.prewarm.numcontainers" : "10",
      "hive.querylog.enable.plan.progress" : "false",
      "hive.security.authenticator.manager" : "org.apache.hadoop.hive.ql.security.ProxyUserAuthenticator",
      "hive.security.authorization.enabled" : "false",
      "hive.security.authorization.manager" : "org.apache.hadoop.hive.ql.security.authorization.plugin.sqlstd.SQLStdConfOnlyAuthorizerFactory",
      "hive.security.authorization.sqlstd.confwhitelist.append" : "|initiator.*|job.*|mapred.*|badger.*|azkaban.*|tez.*|dfs.*|mapreduce.*|hive.*|hbase.*|light.*|beeline.*|orc.*|fdp.*|.*impersonation.*|fs.gs.*",
      "hive.security.metastore.authenticator.manager" : "org.apache.hadoop.hive.ql.security.HadoopDefaultMetastoreAuthenticator",
      "hive.security.metastore.authorization.auth.reads" : "true",
      "hive.security.metastore.authorization.manager" : "\n            org.apache.hadoop.hive.ql.security.authorization.StorageBasedAuthorizationProvider\n        ",
      "hive.server2.allow.user.substitution" : "true",
      "hive.server2.authentication" : "NONE",
      "hive.server2.authentication.spnego.keytab" : "HTTP/_HOST@EXAMPLE.COM",
      "hive.server2.authentication.spnego.principal" : "/etc/security/keytabs/spnego.service.keytab",
      "hive.server2.clear.dangling.scratchdir" : "true",
      "hive.server2.clear.dangling.scratchdir.interval" : "1800",
      "hive.server2.enable.doAs" : "true",
      "hive.server2.enable.impersonation" : "true",
      "hive.server2.idle.operation.timeout" : "1d",
      "hive.server2.idle.session.timeout" : "1d",
      "hive.server2.logging.operation.enabled" : "true",
      "hive.server2.logging.operation.log.location" : "${java.io.tmpdir}/${user.name}/operation_logs",
      "hive.server2.metrics.enabled" : "true",
      "hive.server2.session.check.interval" : "60m",
      "hive.server2.support.dynamic.service.discovery" : "true",
      "hive.server2.table.type.mapping" : "CLASSIC",
      "hive.server2.tez.default.queues" : "default",
      "hive.server2.tez.initialize.default.sessions" : "false",
      "hive.server2.tez.sessions.per.default.queue" : "1",
      "hive.server2.thrift.http.path" : "cliservice",
      "hive.server2.thrift.http.port" : "10001",
      "hive.server2.thrift.max.worker.threads" : "500",
      "hive.server2.thrift.sasl.qop" : "auth",
      "hive.server2.transport.mode" : "http",
      "hive.server2.use.SSL" : "false",
      "hive.server2.zookeeper.namespace" : "fks-fdp-galaxy-hive3-hs2-pluto",
      "hive.session.history.enabled" : "false",
      "hive.smbjoin.cache.rows" : "1000",
      "hive.stats.autogather" : "true",
      "hive.stats.dbclass" : "fs",
      "hive.stats.fetch.column.stats" : "false",
      "hive.stats.fetch.partition.stats" : "false",
      "hive.strict.checks.cartesian.product" : "false",
      "hive.strict.checks.type.safety" : "false",
      "hive.support.concurrency" : "false",
      "hive.support.sql11.reserved.keywords" : "true",
      "hive.tez.auto.reducer.parallelism" : "false",
      "hive.tez.container.size" : "3072",
      "hive.tez.cpu.vcores" : "-1",
      "hive.tez.dynamic.partition.pruning" : "true",
      "hive.tez.dynamic.partition.pruning.max.data.size" : "104857600",
      "hive.tez.dynamic.partition.pruning.max.event.size" : "1048576",
      "hive.tez.input.format" : "org.apache.hadoop.hive.ql.io.HiveInputFormat",
      "hive.tez.log.level" : "INFO",
      "hive.tez.max.partition.factor" : "2.0",
      "hive.tez.min.partition.factor" : "0.25",
      "hive.tez.smb.number.waves" : "0.5",
      "hive.txn.manager" : "org.apache.hadoop.hive.ql.lockmgr.DummyTxnManager",
      "hive.txn.max.open.batch" : "1000",
      "hive.txn.timeout" : "300",
      "hive.user.install.directory" : "gs://stage-hive-metastore-pluto/user/",
      "hive.vectorized.complex.types.enabled" : "false",
      "hive.vectorized.execution.enabled" : "true",
      "hive.vectorized.execution.ptf.enabled" : "false",
      "hive.vectorized.execution.reduce.enabled" : "true",
      "hive.vectorized.groupby.checkinterval" : "4096",
      "hive.vectorized.groupby.complex.types.enabled" : "false",
      "hive.vectorized.groupby.flush.percent" : "0.1",
      "hive.vectorized.groupby.maxentries" : "10000",
      "hive.zookeeper.client.port" : "2181",
      "hive.zookeeper.namespace" : "fks-sco-hive-pluto-zookeeper-namespace",
      "hive.zookeeper.quorum" : "fks-fdp-galaxy-pluto-zkjn-0001.c.fks-fdp-galaxy.internal:2181,fks-fdp-galaxy-pluto-zkjn-0002.c.fks-fdp-galaxy.internal:2181,fks-fdp-galaxy-pluto-zkjn-0003.c.fks-fdp-galaxy.internal:2181",
      "hive.zookeeper.session.timeout" : "120s",
      "io.compression.codec.bzip2.library" : "system-native",
      "io.compression.codec.lzo.class" : "com.hadoop.compression.lzo.LzoCodec",
      "io.compression.codecs" : "org.apache.hadoop.io.compress.SnappyCodec,org.apache.hadoop.io.compress.GzipCodec,org.apache.hadoop.io.compress.DefaultCodec,org.apache.hadoop.io.compress.BZip2Codec,com.hadoop.compression.lzo.LzoCodec,com.hadoop.compression.lzo.LzopCodec,com.hadoop.compression.fourmc.Lz4Codec,com.hadoop.compression.fourmc.Lz4MediumCodec,com.hadoop.compression.fourmc.Lz4HighCodec,com.hadoop.compression.fourmc.Lz4UltraCodec,com.hadoop.compression.fourmc.FourMcCodec,com.hadoop.compression.fourmc.FourMcMediumCodec,com.hadoop.compression.fourmc.FourMcHighCodec,com.hadoop.compression.fourmc.FourMcUltraCodec",
      "io.erasurecode.codec.rs-legacy.rawcoders" : "rs-legacy_java",
      "io.erasurecode.codec.rs.rawcoders" : "rs_native,rs_java",
      "io.erasurecode.codec.xor.rawcoders" : "xor_native,xor_java",
      "io.file.buffer.size" : "65536",
      "io.map.index.interval" : "128",
      "io.map.index.skip" : "0",
      "io.mapfile.bloom.error.rate" : "0.005",
      "io.mapfile.bloom.size" : "1048576",
      "io.seqfile.compress.blocksize" : "1000000",
      "io.seqfile.local.dir" : "${hadoop.tmp.dir}/io/local",
      "io.serializations" : "org.apache.hadoop.io.serializer.WritableSerialization",
      "io.skip.checksum.errors" : "false",
      "ipc.client.bind.wildcard.addr" : "false",
      "ipc.client.connect.max.retries" : "50",
      "ipc.client.connect.max.retries.on.timeouts" : "45",
      "ipc.client.connect.retry.interval" : "1000",
      "ipc.client.connect.timeout" : "20000",
      "ipc.client.connection.maxidletime" : "30000",
      "ipc.client.fallback-to-simple-auth-allowed" : "false",
      "ipc.client.idlethreshold" : "8000",
      "ipc.client.kill.max" : "10",
      "ipc.client.low-latency" : "false",
      "ipc.client.ping" : "true",
      "ipc.client.rpc-timeout.ms" : "0",
      "ipc.client.tcpnodelay" : "true",
      "ipc.maximum.data.length" : "67108864",
      "ipc.maximum.response.length" : "134217728",
      "ipc.ping.interval" : "60000",
      "ipc.server.listen.queue.size" : "128",
      "ipc.server.log.slow.rpc" : "false",
      "ipc.server.max.connections" : "0",
      "javax.jdo.option.ConnectionDriverName" : "com.mysql.jdbc.Driver",
      "javax.jdo.option.ConnectionPassword" : "*********(redacted)",
      "javax.jdo.option.ConnectionURL" : "jdbc:mysql://10.117.192.58/stage_hive_metastore?createDatabaseIfNotExist=true",
      "javax.jdo.option.ConnectionUserName" : "stage_sco_rw",
      "jobname.enricher.class" : "org.apache.hadoop.hive.ql.propertymodifier.NoEnrichment",
      "map.sort.class" : "org.apache.hadoop.util.QuickSort",
      "net.topology.impl" : "org.apache.hadoop.net.NetworkTopology",
      "net.topology.node.switch.mapping.impl" : "org.apache.hadoop.net.ScriptBasedMapping",
      "net.topology.script.file.name" : "/etc/hadoop/conf/topology.py",
      "net.topology.script.number.args" : "100",
      "nfs.exports.allowed.hosts" : "* rw",
      "orc.schema.evolution.case.sensitive" : "false",
      "parser.timeoutSec" : "900",
      "queue.enforcer.class" : "com.flipkart.fdp.hive.orgqueue.OrgQueueEnforcerForInitiator",
      "rpc.metrics.quantile.enable" : "false",
      "seq.io.sort.factor" : "100",
      "seq.io.sort.mb" : "100",
      "tfile.fs.input.buffer.size" : "262144",
      "tfile.fs.output.buffer.size" : "262144",
      "tfile.io.chunk.size" : "1048576",
      "zookeeper.znode.parent" : "/hbase-unsecure"
    },
    "runtimeInfo" : {
      "javaHome" : "/usr/lib/jvm/oracle-java8-jdk-amd64/jre",
      "javaVersion" : "1.8.0_172 (Oracle Corporation)",
      "scalaVersion" : "version 2.12.10"
    },
    "sparkBuildInfo" : {
      "sparkBuildBranch" : "fdp-3.1.2-hadoop-3.2",
      "sparkBuildDate" : "2023-04-05T09:07:25Z",
      "sparkBuildRevision" : "1f03c4907e323e2f782742ceae6feff6c8ddcd12",
      "sparkBuildUser" : "somi.biswas",
      "sparkBuildVersion" : "3.1.2"
    },
    "sparkProps" : {
      "spark.app.id" : "application_1699449121496_0374",
      "spark.app.name" : "Spark shell",
      "spark.app.startTime" : "1701338877986",
      "spark.benchmarkId" : "20231130-153631-tpcds-1gb-iceberg",
      "spark.cleaner.ttl" : "86400",
      "spark.delta.logStore.gs.impl" : "io.delta.storage.GCSLogStore",
      "spark.driver.appUIAddress" : "http://fdp-stage-azk-scheduled-executor-b5cff3b1-nftj.c.fks-sco-azkaban.internal:4046",
      "spark.driver.cores" : "1",
      "spark.driver.extraClassPath" : "gs://fksdp-mhosy-3nug-2a5d-systemlibs/libraries/hive/jars/hadoop-lzo-0.6.0.2.4.0.0-169.jar:/usr/share/fk-bigfoot-4mc/lib/hadoop-4mc-1.1.0.jar",
      "spark.driver.extraJavaOptions" : "-Denv=prod -Dcom.sun.management.jmxremote.port=0 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=0 -XX:MaxDirectMemorySize=800M -XX:MaxMetaspaceSize=256M -XX:CompressedClassSpaceSize=100M -XX:+UnlockDiagnosticVMOptions -Djob.numOfRePartitions=30",
      "spark.driver.extraLibraryPath" : "/usr/flipkart/3.2.1-1/hadoop-hdfs/lib:/usr/flipkart/3.2.1-1/hadoop-hdfs/lib/native:/usr/lib/hadoop/lib:/usr/lib/hadoop/lib/native:/usr/lib/hadoop/lib/native/Linux-amd64-64:/usr/lib/x86_64-linux-gnu",
      "spark.driver.host" : "fdp-stage-azk-scheduled-executor-b5cff3b1-nftj.c.fks-sco-azkaban.internal",
      "spark.driver.memory" : "5120m",
      "spark.driver.port" : "39109",
      "spark.dynamicAllocation.enabled" : "true",
      "spark.dynamicAllocation.executorIdleTimeout" : "60s",
      "spark.dynamicAllocation.maxExecutors" : "200",
      "spark.eventLog.dir" : "gs://fks-fdp-infra-job-history/pluto/spark-job-history",
      "spark.eventLog.enabled" : "true",
      "spark.executor.cores" : "1",
      "spark.executor.extraClassPath" : "gs://fksdp-mhosy-3nug-2a5d-systemlibs/libraries/hive/jars/hadoop-lzo-0.6.0.2.4.0.0-169.jar:/usr/share/fk-bigfoot-4mc/lib/hadoop-4mc-1.1.0.jar",
      "spark.executor.extraJavaOptions" : "-XX:MaxDirectMemorySize=8096m -Dio.netty.maxDirectMemory=8096m -XX:+UseG1GC -XX:ConcGCThreads=2",
      "spark.executor.extraLibraryPath" : "/usr/flipkart/3.2.1-1/hadoop-hdfs/lib:/usr/flipkart/3.2.1-1/hadoop-hdfs/lib/native:/usr/lib/hadoop/lib:/usr/lib/hadoop/lib/native:/usr/lib/hadoop/lib/native/Linux-amd64-64:/usr/lib/x86_64-linux-gnu",
      "spark.executor.id" : "driver",
      "spark.executor.memory" : "10240m",
      "spark.fdp.orgqueue.cache.expire" : "300",
      "spark.fdp.orgqueue.cache.size" : "100",
      "spark.fdp.orgqueue.defaultQueue" : "adhoc",
      "spark.fdp.orgqueue.gringotts.clientId" : "QAAS",
      "spark.fdp.orgqueue.gringotts.clientSecret" : "*********(redacted)",
      "spark.fdp.orgqueue.gringotts.url" : "http://10.47.6.66/billingOrg/user",
      "spark.fdp.orgqueue.ironbank.url" : "http://10.47.4.16:/queue/",
      "spark.fdp.orgqueue.queueNotFound.errorMessage" : "Queue mapping not found",
      "spark.fdp.orgqueue.validInitiators" : "BADGER,QAAS",
      "spark.hadoop.yarn.timeline-service.enabled" : "false",
      "spark.history.fs.cleaner.interval" : "1d",
      "spark.history.fs.cleaner.maxAge" : "60d",
      "spark.history.fs.logDirectory" : "gs://fks-fdp-infra-job-history/pluto/spark-job-history",
      "spark.history.provider" : "org.apache.spark.deploy.history.FsHistoryProvider",
      "spark.home" : "/var/lib/fk-pf-spark3",
      "spark.jars" : "",
      "spark.master" : "yarn",
      "spark.org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.param.PROXY_HOSTS" : "fks-fdp-galaxy-pluto-rm-0001.c.fks-fdp-galaxy.internal,fks-fdp-galaxy-pluto-rm-0002.c.fks-fdp-galaxy.internal",
      "spark.org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.param.PROXY_URI_BASES" : "http://fks-fdp-galaxy-pluto-rm-0001.c.fks-fdp-galaxy.internal:8088/proxy/application_1699449121496_0374,http://fks-fdp-galaxy-pluto-rm-0002.c.fks-fdp-galaxy.internal:8088/proxy/application_1699449121496_0374",
      "spark.org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter.param.RM_HA_URLS" : "fks-fdp-galaxy-pluto-rm-0001.c.fks-fdp-galaxy.internal:8088,fks-fdp-galaxy-pluto-rm-0002.c.fks-fdp-galaxy.internal:8088",
      "spark.queue.enforcer.class" : "com.flipkart.fdp.orgqueue.OrgQueueEnforcerForInitiator",
      "spark.repl.class.outputDir" : "/grid/1/spark3/tmp/spark-3a1cfc30-810e-4a0f-b8db-d0d9a0b0cd32/repl-334a8bed-00b4-468d-acf3-9a26826767c0",
      "spark.repl.class.uri" : "spark://fdp-stage-azk-scheduled-executor-b5cff3b1-nftj.c.fks-sco-azkaban.internal:39109/classes",
      "spark.repl.local.jars" : "file:///home/vanshika.yadav/20231130-153631-tpcds-1gb-iceberg-benchmarks.jar,file:///var/lib/fk-pf-spark3/jars/iceberg-hive-runtime-1.2.0.jar,file:///var/lib/fk-pf-spark3/jars/iceberg-spark-runtime-3.1_2.12-1.2.0.jar",
      "spark.scheduler.mode" : "FIFO",
      "spark.shuffle.service.enabled" : "true",
      "spark.shuffle.useOldFetchProtocol" : "true",
      "spark.sql.catalog.hive_pluto" : "org.apache.iceberg.spark.SparkCatalog",
      "spark.sql.catalog.hive_pluto.type" : "hive",
      "spark.sql.catalog.hive_pluto.uri" : "thrift://10.116.17.2:9083",
      "spark.sql.catalogImplementation" : "hive",
      "spark.sql.extensions" : "org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions",
      "spark.sql.sources.partitionOverwriteMode" : "dynamic",
      "spark.streaming.concurrentJobs" : "4",
      "spark.submit.deployMode" : "client",
      "spark.submit.pyFiles" : "",
      "spark.ui.filters" : "org.apache.hadoop.yarn.server.webproxy.amfilter.AmIpFilter",
      "spark.ui.showConsoleProgress" : "true",
      "spark.yarn.dist.jars" : "gs://fksdp-mhosy-3nug-2a5d-systemlibs/libraries/hive/jars/hadoop-lzo-0.6.0.2.4.0.0-169.jar,file:/usr/share/fk-bigfoot-4mc/lib/hadoop-4mc-1.1.0.jar,gs://fksdp-mhosy-3nug-2a5d-systemlibs/libraries/hive/jars/json-serde-1.3-SNAPSHOT-jar-with-dependencies-jackson-shaded.jar,gs://fksdp-mhosy-3nug-2a5d-systemlibs/libraries/hive/jars/dimlookup-hive-udf-1.0-SNAPSHOT-jar-with-dependencies-jackson-shaded.jar,file:///home/vanshika.yadav/20231130-153631-tpcds-1gb-iceberg-benchmarks.jar,file:///var/lib/fk-pf-spark3/jars/iceberg-hive-runtime-1.2.0.jar,file:///var/lib/fk-pf-spark3/jars/iceberg-spark-runtime-3.1_2.12-1.2.0.jar",
      "spark.yarn.driver.memoryOverhead" : "4096",
      "spark.yarn.executor.memoryOverhead" : "4096",
      "spark.yarn.historyServer.address" : "http://fks-fdp-galaxy-pluto-hs-0001-m.c.fks-fdp-galaxy.internal:18080",
      "spark.yarn.jars" : "",
      "spark.yarn.queue" : "de_adhoc",
      "spark.yarn.report.interval" : "60s",
      "spark.yarn.secondary.jars" : "hadoop-lzo-0.6.0.2.4.0.0-169.jar,hadoop-4mc-1.1.0.jar,json-serde-1.3-SNAPSHOT-jar-with-dependencies-jackson-shaded.jar,dimlookup-hive-udf-1.0-SNAPSHOT-jar-with-dependencies-jackson-shaded.jar,20231130-153631-tpcds-1gb-iceberg-benchmarks.jar,iceberg-hive-runtime-1.2.0.jar,iceberg-spark-runtime-3.1_2.12-1.2.0.jar"
    },
    "systemProps" : {
      "SPARK_SUBMIT" : "true",
      "awt.toolkit" : "sun.awt.X11.XToolkit",
      "com.sun.management.jmxremote.authenticate" : "false",
      "com.sun.management.jmxremote.port" : "0",
      "com.sun.management.jmxremote.ssl" : "false",
      "env" : "prod",
      "file.encoding" : "ANSI_X3.4-1968",
      "file.encoding.pkg" : "sun.io",
      "file.separator" : "/",
      "java.awt.graphicsenv" : "sun.awt.X11GraphicsEnvironment",
      "java.awt.printerjob" : "sun.print.PSPrinterJob",
      "java.class.version" : "52.0",
      "java.endorsed.dirs" : "/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/endorsed",
      "java.ext.dirs" : "/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext",
      "java.home" : "/usr/lib/jvm/oracle-java8-jdk-amd64/jre",
      "java.io.tmpdir" : "/tmp",
      "java.library.path" : "/usr/flipkart/3.2.1-1/hadoop-hdfs/lib:/usr/flipkart/3.2.1-1/hadoop-hdfs/lib/native:/usr/lib/hadoop/lib:/usr/lib/hadoop/lib/native:/usr/lib/hadoop/lib/native/Linux-amd64-64:/usr/lib/x86_64-linux-gnu:/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib",
      "java.rmi.server.randomIDs" : "true",
      "java.runtime.name" : "Java(TM) SE Runtime Environment",
      "java.runtime.version" : "1.8.0_172-b11",
      "java.specification.name" : "Java Platform API Specification",
      "java.specification.vendor" : "Oracle Corporation",
      "java.specification.version" : "1.8",
      "java.vendor" : "Oracle Corporation",
      "java.vendor.url" : "http://java.oracle.com/",
      "java.vendor.url.bug" : "http://bugreport.sun.com/bugreport/",
      "java.version" : "1.8.0_172",
      "java.vm.info" : "mixed mode",
      "java.vm.name" : "Java HotSpot(TM) 64-Bit Server VM",
      "java.vm.specification.name" : "Java Virtual Machine Specification",
      "java.vm.specification.vendor" : "Oracle Corporation",
      "java.vm.specification.version" : "1.8",
      "java.vm.vendor" : "Oracle Corporation",
      "java.vm.version" : "25.172-b11",
      "jetty.git.hash" : "b881a572662e1943a14ae12e7e1207989f218b74",
      "job.numOfRePartitions" : "30",
      "line.separator" : "\n",
      "os.arch" : "amd64",
      "os.name" : "Linux",
      "os.version" : "4.19.0-19-cloud-amd64",
      "path.separator" : ":",
      "scala.usejavacp" : "true",
      "sun.arch.data.model" : "64",
      "sun.boot.class.path" : "/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/oracle-java8-jdk-amd64/jre/classes",
      "sun.boot.library.path" : "/usr/lib/jvm/oracle-java8-jdk-amd64/jre/lib/amd64",
      "sun.cpu.endian" : "little",
      "sun.cpu.isalist" : "",
      "sun.io.unicode.encoding" : "UnicodeLittle",
      "sun.java.command" : "org.apache.spark.deploy.SparkSubmit --master yarn --deploy-mode client --conf spark.sql.sources.partitionOverwriteMode=dynamic --conf spark.executor.memory=10240m --conf spark.sql.catalog.hive_pluto=org.apache.iceberg.spark.SparkCatalog --conf spark.driver.memory=5120m --conf spark.sql.catalog.hive_pluto.uri=thrift://10.116.17.2:9083 --conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions --conf spark.sql.catalog.hive_pluto.type=hive --conf spark.benchmarkId=20231130-153631-tpcds-1gb-iceberg --conf spark.executor.extraJavaOptions=-XX:MaxDirectMemorySize=8096m -Dio.netty.maxDirectMemory=8096m -XX:+UseG1GC -XX:ConcGCThreads=2 --conf spark.delta.logStore.gs.impl=io.delta.storage.GCSLogStore --class org.apache.spark.repl.Main --name Spark shell --queue de_adhoc --jars /home/vanshika.yadav/20231130-153631-tpcds-1gb-iceberg-benchmarks.jar,/var/lib/fk-pf-spark3/jars/iceberg-hive-runtime-1.2.0.jar,/var/lib/fk-pf-spark3/jars/iceberg-spark-runtime-3.1_2.12-1.2.0.jar spark-shell -I 20231130-153631-tpcds-1gb-iceberg_shell_init.scala",
      "sun.java.launcher" : "SUN_STANDARD",
      "sun.jnu.encoding" : "ANSI_X3.4-1968",
      "sun.management.compiler" : "HotSpot 64-Bit Tiered Compilers",
      "sun.nio.ch.bugLevel" : "",
      "sun.os.patch.level" : "unknown",
      "user.country" : "US",
      "user.dir" : "/home/vanshika.yadav",
      "user.home" : "/home/vanshika.yadav",
      "user.language" : "en",
      "user.name" : "vanshika.yadav",
      "user.timezone" : "Asia/Kolkata"
    }
  }
}